
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a08  0800cdf0  0800cdf0  0001cdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080207f8  080207f8  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  080207f8  080207f8  000307f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020800  08020800  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020800  08020800  00030800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020804  08020804  00030804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08020808  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fad0  20000070  08020878  00040070  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  2000fb40  08020878  0004fb40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216a0  00000000  00000000  0004009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000547c  00000000  00000000  0006173e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00066bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  00068508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000352cc  00000000  00000000  00069b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000266c3  00000000  00000000  0009ee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a33b  00000000  00000000  000c5527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  001ef862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  001ef920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000004cd  00000000  00000000  001f6368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cdd4 	.word	0x0800cdd4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800cdd4 	.word	0x0800cdd4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0x98>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_ADC1_Init+0x9c>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0x98>)
 80005fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x98>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_ADC1_Init+0xa0>)
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x98>)
 8000646:	f001 fdd5 	bl	80021f4 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 fd80 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_ADC1_Init+0xa4>)
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x98>)
 8000666:	f001 fe09 	bl	800227c <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000670:	f000 fd70 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000008c 	.word	0x2000008c
 8000680:	40012000 	.word	0x40012000
 8000684:	0f000001 	.word	0x0f000001
 8000688:	10000012 	.word	0x10000012

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_ADC_MspInit+0x38>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10b      	bne.n	80006b6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <MX_CRC_Init+0x40>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CRC_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CRC_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CRC_Init+0x3c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f6:	f002 f923 	bl	8002940 <HAL_CRC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000700:	f000 fd28 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000d4 	.word	0x200000d4
 800070c:	40023000 	.word	0x40023000

08000710 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_CRC_MspInit+0x38>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10b      	bne.n	800073a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023000 	.word	0x40023000
 800074c:	40023800 	.word	0x40023800

08000750 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000754:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000756:	4a64      	ldr	r2, [pc, #400]	; (80008e8 <MX_DFSDM1_Init+0x198>)
 8000758:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800075a:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000768:	2201      	movs	r2, #1
 800076a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000772:	4b5c      	ldr	r3, [pc, #368]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000778:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800077a:	2200      	movs	r2, #0
 800077c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800077e:	4b59      	ldr	r3, [pc, #356]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800078e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000792:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000794:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000796:	22b0      	movs	r2, #176	; 0xb0
 8000798:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800079c:	2201      	movs	r2, #1
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007a0:	4850      	ldr	r0, [pc, #320]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80007a2:	f002 fa77 	bl	8002c94 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007a8:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <MX_DFSDM1_Init+0x1a0>)
 80007aa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80007b8:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007d6:	4b45      	ldr	r3, [pc, #276]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007de:	4b43      	ldr	r3, [pc, #268]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e8:	22b0      	movs	r2, #176	; 0xb0
 80007ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80007ec:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80007f2:	483e      	ldr	r0, [pc, #248]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007f4:	f002 fa4e 	bl	8002c94 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <MX_DFSDM1_Init+0x1a8>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000800:	2201      	movs	r2, #1
 8000802:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000804:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800080e:	2204      	movs	r2, #4
 8000810:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000824:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800082e:	2204      	movs	r2, #4
 8000830:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800083a:	2201      	movs	r2, #1
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800084c:	f002 f962 	bl	8002b14 <HAL_DFSDM_ChannelInit>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000856:	f000 fc7d 	bl	8001154 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_DFSDM1_Init+0x1b0>)
 800085e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000862:	2201      	movs	r2, #1
 8000864:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000870:	2204      	movs	r2, #4
 8000872:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800088e:	2204      	movs	r2, #4
 8000890:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800089a:	220a      	movs	r2, #10
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008ac:	f002 f932 	bl	8002b14 <HAL_DFSDM_ChannelInit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 80008b6:	f000 fc4d 	bl	8001154 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4911      	ldr	r1, [pc, #68]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c0:	f002 fac2 	bl	8002e48 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 80008c4:	490f      	ldr	r1, [pc, #60]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c8:	f002 fb04 	bl	8002ed4 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008cc:	2201      	movs	r2, #1
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008d2:	f002 fab9 	bl	8002e48 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80008d6:	2101      	movs	r1, #1
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008da:	f002 fafb 	bl	8002ed4 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000f8 	.word	0x200000f8
 80008e8:	40017500 	.word	0x40017500
 80008ec:	2000014c 	.word	0x2000014c
 80008f0:	40017580 	.word	0x40017580
 80008f4:	200001a0 	.word	0x200001a0
 80008f8:	40017400 	.word	0x40017400
 80008fc:	200001d8 	.word	0x200001d8
 8000900:	40017420 	.word	0x40017420
 8000904:	00010002 	.word	0x00010002

08000908 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000920:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d145      	bne.n	80009b4 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a61      	ldr	r2, [pc, #388]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800097a:	230a      	movs	r3, #10
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	484d      	ldr	r0, [pc, #308]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000986:	f002 fff7 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800098a:	2308      	movs	r3, #8
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800099a:	2303      	movs	r3, #3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 80009a6:	f002 ffe7 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009b2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <HAL_DFSDM_FilterMspInit+0x1b8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d137      	bne.n	8000a2e <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c0:	4a41      	ldr	r2, [pc, #260]	; (8000ac8 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009c4:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009fe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a08:	f002 fc10 	bl	800322c <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000a12:	f000 fb9f 	bl	8001154 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d137      	bne.n	8000aa8 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a3a:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a70:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a78:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a82:	f002 fbd3 	bl	800322c <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000a8c:	f000 fb62 	bl	8001154 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002d4 	.word	0x200002d4
 8000ab4:	200002d0 	.word	0x200002d0
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40017500 	.word	0x40017500
 8000ac4:	20000210 	.word	0x20000210
 8000ac8:	40026410 	.word	0x40026410
 8000acc:	40017580 	.word	0x40017580
 8000ad0:	20000270 	.word	0x20000270
 8000ad4:	40026488 	.word	0x40026488

08000ad8 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d145      	bne.n	8000b84 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b56:	f002 ff0f 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b76:	f002 feff 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b82:	6013      	str	r3, [r2, #0]
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200002d4 	.word	0x200002d4
 8000b90:	200002d0 	.word	0x200002d0
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_DMA_Init+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f001 fe87 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc4:	2038      	movs	r0, #56	; 0x38
 8000bc6:	f001 fea0 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2039      	movs	r0, #57	; 0x39
 8000bd0:	f001 fe7f 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bd4:	2039      	movs	r0, #57	; 0x39
 8000bd6:	f001 fe98 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	203b      	movs	r0, #59	; 0x3b
 8000be0:	f001 fe77 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000be4:	203b      	movs	r0, #59	; 0x3b
 8000be6:	f001 fe90 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2044      	movs	r0, #68	; 0x44
 8000bf0:	f001 fe6f 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000bf4:	2044      	movs	r0, #68	; 0x44
 8000bf6:	f001 fe88 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2045      	movs	r0, #69	; 0x45
 8000c00:	f001 fe67 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c04:	2045      	movs	r0, #69	; 0x45
 8000c06:	f001 fe80 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
 8000c44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	4826      	ldr	r0, [pc, #152]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d0e:	f002 fff7 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210b      	movs	r1, #11
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d18:	f002 fff2 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <MX_GPIO_Init+0x198>)
 8000d34:	f002 fe20 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d52:	f002 fe11 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000d56:	230b      	movs	r3, #11
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d6e:	f002 fe03 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_GPIO_Init+0x19c>)
 8000d88:	f002 fdf6 	bl	8003978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f001 fd9e 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f001 fdb7 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40022400 	.word	0x40022400
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020400 	.word	0x40020400

08000db8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc2:	f3bf 8f6f 	isb	sy
}
 8000dc6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
}
 8000dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
}
 8000dda:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SCB_EnableICache+0x48>)
 8000de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
}
 8000e16:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0b5b      	lsrs	r3, r3, #13
 8000e24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e28:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e32:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e3c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e42:	4911      	ldr	r1, [pc, #68]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1ef      	bne.n	8000e34 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1e5      	bne.n	8000e2a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5e:	f3bf 8f4f 	dsb	sy
}
 8000e62:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e70:	f3bf 8f4f 	dsb	sy
}
 8000e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b09c      	sub	sp, #112	; 0x70
 8000e90:	af00      	add	r7, sp, #0
	char directory_name[35];
	char file_path [35];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e92:	f7ff ff91 	bl	8000db8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e96:	f7ff ffb5 	bl	8000e04 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f001 f929 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f8b7 	bl	8001010 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ea2:	f000 f927 	bl	80010f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f7ff feb7 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f7ff fe77 	bl	8000b9c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000eae:	f7ff fc4f 	bl	8000750 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000eb2:	f000 f9ef 	bl	8001294 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000eb6:	f7ff fb95 	bl	80005e4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000eba:	f000 fcfd 	bl	80018b8 <MX_UART4_Init>
  MX_CRC_Init();
 8000ebe:	f7ff fc05 	bl	80006cc <MX_CRC_Init>
  MX_RTC_Init();
 8000ec2:	f000 f94d 	bl	8001160 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000ec6:	f000 faef 	bl	80014a8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000eca:	f007 fbcb 	bl	8008664 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed2:	4946      	ldr	r1, [pc, #280]	; (8000fec <main+0x160>)
 8000ed4:	4846      	ldr	r0, [pc, #280]	; (8000ff0 <main+0x164>)
 8000ed6:	f002 f82d 	bl	8002f34 <HAL_DFSDM_FilterRegularStart_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <main+0x58>
    {
      Error_Handler();
 8000ee0:	f000 f938 	bl	8001154 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee8:	4942      	ldr	r1, [pc, #264]	; (8000ff4 <main+0x168>)
 8000eea:	4843      	ldr	r0, [pc, #268]	; (8000ff8 <main+0x16c>)
 8000eec:	f002 f822 	bl	8002f34 <HAL_DFSDM_FilterRegularStart_DMA>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <main+0x6e>
    {
      Error_Handler();
 8000ef6:	f000 f92d 	bl	8001154 <Error_Handler>
    }


	SDInit();
 8000efa:	f00a fa95 	bl	800b428 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f04:	483d      	ldr	r0, [pc, #244]	; (8000ffc <main+0x170>)
 8000f06:	f002 fefb 	bl	8003d00 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	483c      	ldr	r0, [pc, #240]	; (8001000 <main+0x174>)
 8000f10:	f002 fef6 	bl	8003d00 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	4839      	ldr	r0, [pc, #228]	; (8001000 <main+0x174>)
 8000f1a:	f002 fef1 	bl	8003d00 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2108      	movs	r1, #8
 8000f22:	4837      	ldr	r0, [pc, #220]	; (8001000 <main+0x174>)
 8000f24:	f002 feec 	bl	8003d00 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000f28:	f00a f8c0 	bl	800b0ac <Preprocessing_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for th temper button to be pressed
	  while (!recording);
 8000f2c:	bf00      	nop
 8000f2e:	4b35      	ldr	r3, [pc, #212]	; (8001004 <main+0x178>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0fb      	beq.n	8000f2e <main+0xa2>
	  // debouncing
	  HAL_Delay(250);
 8000f36:	20fa      	movs	r0, #250	; 0xfa
 8000f38:	f001 f938 	bl	80021ac <HAL_Delay>
	  recording = 1;
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <main+0x178>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <main+0x17c>)
 8000f44:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <main+0x17c>)
 8000f52:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
	  //LED0 on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	4826      	ldr	r0, [pc, #152]	; (8000ffc <main+0x170>)
 8000f64:	f002 fecc 	bl	8003d00 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8000f68:	e001      	b.n	8000f6e <main+0xe2>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 8000f6a:	f00a f94f 	bl	800b20c <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <main+0x178>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <main+0xf8>
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <main+0x17c>)
 8000f78:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000f7c:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f2      	beq.n	8000f6a <main+0xde>
	  }
	  HAL_Delay(250);
 8000f84:	20fa      	movs	r0, #250	; 0xfa
 8000f86:	f001 f911 	bl	80021ac <HAL_Delay>
	  recording = 0;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <main+0x178>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f96:	4819      	ldr	r0, [pc, #100]	; (8000ffc <main+0x170>)
 8000f98:	f002 feb2 	bl	8003d00 <HAL_GPIO_WritePin>
	  //read date to folder name
	  get_date((char*)directory_name);
 8000f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00a f9e7 	bl	800b374 <get_date>
	  //read time and date
	  get_time_filename((char*)file_name);
 8000fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00a fa04 	bl	800b3b8 <get_time_filename>
	  sprintf((char*)file_path,"%s/%s",directory_name, file_name);
 8000fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fb8:	1d38      	adds	r0, r7, #4
 8000fba:	4914      	ldr	r1, [pc, #80]	; (800100c <main+0x180>)
 8000fbc:	f00a fc80 	bl	800b8c0 <siprintf>
	  //creates a file with the date
	  f_mkdir ((char*)(directory_name));
 8000fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 ff0e 	bl	800ade6 <f_mkdir>
	  //write to the sd card
	  createFile((char*)file_path);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a fa3f 	bl	800b450 <createFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <main+0x17c>)
 8000fd4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000fd8:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480a      	ldr	r0, [pc, #40]	; (8001008 <main+0x17c>)
 8000fe0:	f00a fa4e 	bl	800b480 <writeToFile>
	  SDclose();
 8000fe4:	f00a fa60 	bl	800b4a8 <SDclose>
  {
 8000fe8:	e7a0      	b.n	8000f2c <main+0xa0>
 8000fea:	bf00      	nop
 8000fec:	200022dc 	.word	0x200022dc
 8000ff0:	2000014c 	.word	0x2000014c
 8000ff4:	200002dc 	.word	0x200002dc
 8000ff8:	200000f8 	.word	0x200000f8
 8000ffc:	40022000 	.word	0x40022000
 8001000:	40022400 	.word	0x40022400
 8001004:	200002d8 	.word	0x200002d8
 8001008:	20007e1c 	.word	0x20007e1c
 800100c:	0800cdf0 	.word	0x0800cdf0

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	; 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2234      	movs	r2, #52	; 0x34
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00a fb56 	bl	800b6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <SystemClock_Config+0xdc>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a2c      	ldr	r2, [pc, #176]	; (80010ec <SystemClock_Config+0xdc>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <SystemClock_Config+0xdc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <SystemClock_Config+0xe0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <SystemClock_Config+0xe0>)
 8001052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <SystemClock_Config+0xe0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001064:	2309      	movs	r3, #9
 8001066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800107c:	2319      	movs	r3, #25
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001080:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001084:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800108a:	2309      	movs	r3, #9
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4618      	mov	r0, r3
 8001098:	f002 feb4 	bl	8003e04 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010a2:	f000 f857 	bl	8001154 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010a6:	f002 fe5d 	bl	8003d64 <HAL_PWREx_EnableOverDrive>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010b0:	f000 f850 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2107      	movs	r1, #7
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f944 	bl	8004360 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010de:	f000 f839 	bl	8001154 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	; 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0a4      	sub	sp, #144	; 0x90
 80010f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2290      	movs	r2, #144	; 0x90
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00a fae5 	bl	800b6d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <PeriphCommonClock_Config+0x5c>)
 8001108:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 800110a:	f240 13ad 	movw	r3, #429	; 0x1ad
 800110e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001114:	2306      	movs	r3, #6
 8001116:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 800111c:	2306      	movs	r3, #6
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001124:	2300      	movs	r3, #0
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001128:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800112c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f003 faf7 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001144:	f000 f806 	bl	8001154 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3790      	adds	r7, #144	; 0x90
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	18300000 	.word	0x18300000

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_RTC_Init+0xd0>)
 800117a:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <MX_RTC_Init+0xd4>)
 800117c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <MX_RTC_Init+0xd0>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_RTC_Init+0xd0>)
 8001186:	227f      	movs	r2, #127	; 0x7f
 8001188:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_RTC_Init+0xd0>)
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_RTC_Init+0xd0>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_RTC_Init+0xd0>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_RTC_Init+0xd0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <MX_RTC_Init+0xd0>)
 80011a4:	f004 f85c 	bl	8005260 <HAL_RTC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011ae:	f7ff ffd1 	bl	8001154 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 80011b2:	2100      	movs	r1, #0
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_RTC_Init+0xd0>)
 80011b6:	f004 fb7d 	bl	80058b4 <HAL_RTCEx_BKUPRead>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d02e      	beq.n	8001222 <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 80011c4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80011c8:	2100      	movs	r1, #0
 80011ca:	4819      	ldr	r0, [pc, #100]	; (8001230 <MX_RTC_Init+0xd0>)
 80011cc:	f004 fb58 	bl	8005880 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 80011d0:	2314      	movs	r3, #20
 80011d2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 80011d4:	2329      	movs	r3, #41	; 0x29
 80011d6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 80011d8:	2300      	movs	r3, #0
 80011da:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2201      	movs	r2, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_RTC_Init+0xd0>)
 80011ec:	f004 f8bc 	bl	8005368 <HAL_RTC_SetTime>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80011f6:	f7ff ffad 	bl	8001154 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011fa:	2301      	movs	r3, #1
 80011fc:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 80011fe:	2301      	movs	r3, #1
 8001200:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 8001202:	2323      	movs	r3, #35	; 0x23
 8001204:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8001206:	2323      	movs	r3, #35	; 0x23
 8001208:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2201      	movs	r2, #1
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_RTC_Init+0xd0>)
 8001212:	f004 f9a1 	bl	8005558 <HAL_RTC_SetDate>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800121c:	f7ff ff9a 	bl	8001154 <Error_Handler>
  }
  return;
 8001220:	e001      	b.n	8001226 <MX_RTC_Init+0xc6>
			return;
 8001222:	bf00      	nop
 8001224:	e000      	b.n	8001228 <MX_RTC_Init+0xc8>
  return;
 8001226:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200042ec 	.word	0x200042ec
 8001234:	40002800 	.word	0x40002800

08001238 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0a6      	sub	sp, #152	; 0x98
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	2290      	movs	r2, #144	; 0x90
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00a fa41 	bl	800b6d0 <memset>
  if(rtcHandle->Instance==RTC)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_RTC_MspInit+0x54>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d114      	bne.n	8001282 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001258:	2320      	movs	r3, #32
 800125a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fa60 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001272:	f7ff ff6f 	bl	8001154 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_RTC_MspInit+0x58>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_RTC_MspInit+0x58>)
 800127c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001280:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3798      	adds	r7, #152	; 0x98
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40002800 	.word	0x40002800
 8001290:	40023800 	.word	0x40023800

08001294 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_SAI2_Init+0xb0>)
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <MX_SAI2_Init+0xb4>)
 800129c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c8:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <MX_SAI2_Init+0xb8>)
 80012da:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012f6:	2220      	movs	r2, #32
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_SAI2_Init+0xb0>)
 80012fc:	2210      	movs	r2, #16
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_SAI2_Init+0xb0>)
 8001302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001306:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_SAI2_Init+0xb0>)
 800130a:	2200      	movs	r2, #0
 800130c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_SAI2_Init+0xb0>)
 8001310:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001314:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_SAI2_Init+0xb0>)
 8001318:	2200      	movs	r2, #0
 800131a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SAI2_Init+0xb0>)
 800131e:	2200      	movs	r2, #0
 8001320:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_SAI2_Init+0xb0>)
 8001324:	2202      	movs	r2, #2
 8001326:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SAI2_Init+0xb0>)
 800132a:	2203      	movs	r2, #3
 800132c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_SAI2_Init+0xb0>)
 8001330:	f004 fad8 	bl	80058e4 <HAL_SAI_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800133a:	f7ff ff0b 	bl	8001154 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000430c 	.word	0x2000430c
 8001348:	40015c24 	.word	0x40015c24
 800134c:	0002ee00 	.word	0x0002ee00

08001350 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_SAI_MspInit+0x138>)
 800135e:	4293      	cmp	r3, r2
 8001360:	f040 808e 	bne.w	8001480 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <HAL_SAI_MspInit+0x13c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10b      	bne.n	8001384 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800136c:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_SAI_MspInit+0x140>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	4a47      	ldr	r2, [pc, #284]	; (8001490 <HAL_SAI_MspInit+0x140>)
 8001372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001376:	6453      	str	r3, [r2, #68]	; 0x44
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <HAL_SAI_MspInit+0x140>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8001384:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_SAI_MspInit+0x13c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_SAI_MspInit+0x13c>)
 800138c:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800139e:	230a      	movs	r3, #10
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	483a      	ldr	r0, [pc, #232]	; (8001494 <HAL_SAI_MspInit+0x144>)
 80013aa:	f002 fae5 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013c0:	230a      	movs	r3, #10
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4833      	ldr	r0, [pc, #204]	; (8001498 <HAL_SAI_MspInit+0x148>)
 80013cc:	f002 fad4 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013e0:	230a      	movs	r3, #10
 80013e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	482c      	ldr	r0, [pc, #176]	; (800149c <HAL_SAI_MspInit+0x14c>)
 80013ec:	f002 fac4 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013f0:	2304      	movs	r3, #4
 80013f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001400:	2308      	movs	r3, #8
 8001402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4824      	ldr	r0, [pc, #144]	; (800149c <HAL_SAI_MspInit+0x14c>)
 800140c:	f002 fab4 	bl	8003978 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001412:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <HAL_SAI_MspInit+0x154>)
 8001414:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001418:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 800141c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001438:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 800143c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001440:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001448:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 800144c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001450:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 800145a:	f001 fee7 	bl	800322c <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 8001464:	f7ff fe76 	bl	8001154 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 800146c:	671a      	str	r2, [r3, #112]	; 0x70
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 8001478:	66da      	str	r2, [r3, #108]	; 0x6c
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_SAI_MspInit+0x150>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40015c24 	.word	0x40015c24
 800148c:	200043f0 	.word	0x200043f0
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000
 8001498:	40021800 	.word	0x40021800
 800149c:	40020000 	.word	0x40020000
 80014a0:	20004390 	.word	0x20004390
 80014a4:	40026428 	.word	0x40026428

080014a8 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <MX_SDMMC1_SD_Init+0x3c>)
 80014b0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <MX_SDMMC1_SD_Init+0x38>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	200043f4 	.word	0x200043f4
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0ae      	sub	sp, #184	; 0xb8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2290      	movs	r2, #144	; 0x90
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f00a f8e1 	bl	800b6d0 <memset>
  if(sdHandle->Instance==SDMMC1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a74      	ldr	r2, [pc, #464]	; (80016e4 <HAL_SD_MspInit+0x1fc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	f040 80e0 	bne.w	80016da <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800151a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800151e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f003 f8fb 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 800153c:	f7ff fe0a 	bl	8001154 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001540:	4b69      	ldr	r3, [pc, #420]	; (80016e8 <HAL_SD_MspInit+0x200>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	4a68      	ldr	r2, [pc, #416]	; (80016e8 <HAL_SD_MspInit+0x200>)
 8001546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154a:	6453      	str	r3, [r2, #68]	; 0x44
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_SD_MspInit+0x200>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001558:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_SD_MspInit+0x200>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <HAL_SD_MspInit+0x200>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6313      	str	r3, [r2, #48]	; 0x30
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_SD_MspInit+0x200>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_SD_MspInit+0x200>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	4a5c      	ldr	r2, [pc, #368]	; (80016e8 <HAL_SD_MspInit+0x200>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6313      	str	r3, [r2, #48]	; 0x30
 800157c:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <HAL_SD_MspInit+0x200>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001588:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015a2:	230c      	movs	r3, #12
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ac:	4619      	mov	r1, r3
 80015ae:	484f      	ldr	r0, [pc, #316]	; (80016ec <HAL_SD_MspInit+0x204>)
 80015b0:	f002 f9e2 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b4:	2304      	movs	r3, #4
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015cc:	230c      	movs	r3, #12
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4845      	ldr	r0, [pc, #276]	; (80016f0 <HAL_SD_MspInit+0x208>)
 80015da:	f002 f9cd 	bl	8003978 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 80015e0:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_SD_MspInit+0x210>)
 80015e2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 80015fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001600:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 8001602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001606:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 8001612:	2220      	movs	r2, #32
 8001614:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 800161e:	2204      	movs	r2, #4
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 8001624:	2203      	movs	r2, #3
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 800162a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 8001632:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001638:	482e      	ldr	r0, [pc, #184]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 800163a:	f001 fdf7 	bl	800322c <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001644:	f7ff fd86 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
 800164e:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <HAL_SD_MspInit+0x20c>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001656:	4a2a      	ldr	r2, [pc, #168]	; (8001700 <HAL_SD_MspInit+0x218>)
 8001658:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_SD_MspInit+0x214>)
 800165c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001660:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_SD_MspInit+0x214>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001674:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001680:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001684:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_SD_MspInit+0x214>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_SD_MspInit+0x214>)
 8001694:	2204      	movs	r2, #4
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_SD_MspInit+0x214>)
 800169a:	2203      	movs	r2, #3
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_SD_MspInit+0x214>)
 80016a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_SD_MspInit+0x214>)
 80016a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80016ae:	4813      	ldr	r0, [pc, #76]	; (80016fc <HAL_SD_MspInit+0x214>)
 80016b0:	f001 fdbc 	bl	800322c <HAL_DMA_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80016ba:	f7ff fd4b 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_SD_MspInit+0x214>)
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_SD_MspInit+0x214>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2031      	movs	r0, #49	; 0x31
 80016d0:	f001 f8ff 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80016d4:	2031      	movs	r0, #49	; 0x31
 80016d6:	f001 f918 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80016da:	bf00      	nop
 80016dc:	37b8      	adds	r7, #184	; 0xb8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	20004478 	.word	0x20004478
 80016f8:	400264a0 	.word	0x400264a0
 80016fc:	200044d8 	.word	0x200044d8
 8001700:	40026458 	.word	0x40026458

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x44>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_MspInit+0x44>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_MspInit+0x44>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x44>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x44>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x44>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 fce8 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80017a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a8:	f002 fac4 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <SDMMC1_IRQHandler+0x10>)
 80017b6:	f004 fccb 	bl	8006150 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200043f4 	.word	0x200043f4

080017c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA2_Stream0_IRQHandler+0x10>)
 80017ca:	f001 fe5f 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000210 	.word	0x20000210

080017d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA2_Stream1_IRQHandler+0x10>)
 80017de:	f001 fe55 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20004390 	.word	0x20004390

080017ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA2_Stream3_IRQHandler+0x10>)
 80017f2:	f001 fe4b 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200044d8 	.word	0x200044d8

08001800 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA2_Stream5_IRQHandler+0x10>)
 8001806:	f001 fe41 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000270 	.word	0x20000270

08001814 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA2_Stream6_IRQHandler+0x10>)
 800181a:	f001 fe37 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20004478 	.word	0x20004478

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f009 ff02 	bl	800b660 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20080000 	.word	0x20080000
 8001888:	00000800 	.word	0x00000800
 800188c:	20004538 	.word	0x20004538
 8001890:	2000fb40 	.word	0x2000fb40

08001894 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_UART4_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_UART4_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_UART4_Init+0x58>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_UART4_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_UART4_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_UART4_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_UART4_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_UART4_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_UART4_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_UART4_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_UART4_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_UART4_Init+0x58>)
 80018fc:	f005 fcd3 	bl	80072a6 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001906:	f7ff fc25 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000453c 	.word	0x2000453c
 8001914:	40004c00 	.word	0x40004c00

08001918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ae      	sub	sp, #184	; 0xb8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2290      	movs	r2, #144	; 0x90
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f009 fec9 	bl	800b6d0 <memset>
  if(uartHandle->Instance==UART4)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_UART_MspInit+0xf4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d15d      	bne.n	8001a04 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800194e:	2300      	movs	r3, #0
 8001950:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fee8 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001962:	f7ff fbf7 	bl	8001154 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 800196c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0xf8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019c6:	2308      	movs	r3, #8
 80019c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4810      	ldr	r0, [pc, #64]	; (8001a14 <HAL_UART_MspInit+0xfc>)
 80019d4:	f001 ffd0 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80019f2:	2306      	movs	r3, #6
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <HAL_UART_MspInit+0x100>)
 8001a00:	f001 ffba 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001a04:	bf00      	nop
 8001a06:	37b8      	adds	r7, #184	; 0xb8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40004c00 	.word	0x40004c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40020000 	.word	0x40020000

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a22:	490e      	ldr	r1, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a38:	4c0b      	ldr	r4, [pc, #44]	; (8001a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a46:	f7ff ff25 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f009 fe0f 	bl	800b66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4e:	f7ff fa1d 	bl	8000e8c <main>
  bx  lr    
 8001a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a60:	08020808 	.word	0x08020808
  ldr r2, =_sbss
 8001a64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a68:	2000fb40 	.word	0x2000fb40

08001a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC_IRQHandler>

08001a6e <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b0a4      	sub	sp, #144	; 0x90
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a88:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001ac4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ac8:	4618      	mov	r0, r3
 8001aca:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001ace:	f000 f973 	bl	8001db8 <MelScale>
 8001ad2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001ad6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ada:	4618      	mov	r0, r3
 8001adc:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001ae0:	f000 f96a 	bl	8001db8 <MelScale>
 8001ae4:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001ae8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001aec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001af0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af6:	3301      	adds	r3, #1
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b38:	e133      	b.n	8001da2 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d044      	beq.n	8001bca <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b5e:	4618      	mov	r0, r3
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	f000 f998 	bl	8001e98 <InverseMelScale>
 8001b68:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8001b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6e:	3301      	adds	r3, #1
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b92:	f000 f981 	bl	8001e98 <InverseMelScale>
 8001b96:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8001b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ba6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001bba:	4618      	mov	r0, r3
 8001bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc0:	f000 f96a 	bl	8001e98 <InverseMelScale>
 8001bc4:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8001bc8:	e02e      	b.n	8001c28 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 8001bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8001be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bea:	3301      	adds	r3, #1
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c04:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8001c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8001c28:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001c2c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8001c38:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001c3c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c5c:	e098      	b.n	8001d90 <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 8001c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8001c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8001c7a:	e011      	b.n	8001ca0 <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8001c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001c92:	4618      	mov	r0, r3
 8001c94:	eeb0 0a67 	vmov.f32	s0, s15
 8001c98:	f000 f88e 	bl	8001db8 <MelScale>
 8001c9c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8001ca0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001ca4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8001cb0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001cb4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbc:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8001cc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cc4:	eef1 6a67 	vneg.f32	s13, s15
 8001cc8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd0:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8001cd4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cd8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce0:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8001ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d502      	bpl.n	8001cfc <MelFilterbank_Init+0x28e>
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	673b      	str	r3, [r7, #112]	; 0x70
 8001cfa:	e001      	b.n	8001d00 <MelFilterbank_Init+0x292>
      else min = upper;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 8001d00:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	dd2f      	ble.n	8001d6e <MelFilterbank_Init+0x300>
      {
        weight = min;
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 8001d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8001d18:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001d1c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2c:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 8001d30:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 8001d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d44:	1d1a      	adds	r2, r3, #4
 8001d46:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d4c:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 8001d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d56:	d102      	bne.n	8001d5e <MelFilterbank_Init+0x2f0>
          start_index = j;
 8001d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 8001d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8001d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d6c:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 8001d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d74:	4413      	add	r3, r2
 8001d76:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001d7a:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8001d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d82:	4413      	add	r3, r2
 8001d84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d88:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8001d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d96:	429a      	cmp	r2, r3
 8001d98:	f4ff af61 	bcc.w	8001c5e <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9e:	3301      	adds	r3, #1
 8001da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da6:	429a      	cmp	r2, r3
 8001da8:	f4ff aec7 	bcc.w	8001b3a <MelFilterbank_Init+0xcc>
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3790      	adds	r7, #144	; 0x90
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d042      	beq.n	8001e52 <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <MelScale+0xcc>)
 8001dd4:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 8001dd6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <MelScale+0xd0>)
 8001df0:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8001df2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e06:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <MelScale+0xd4>)
 8001e0c:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 8001e0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	db15      	blt.n	8001e4c <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 8001e20:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e2c:	eeb0 0a66 	vmov.f32	s0, s13
 8001e30:	f00a f9be 	bl	800c1b0 <logf>
 8001e34:	eef0 6a40 	vmov.f32	s13, s0
 8001e38:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e40:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 8001e4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e50:	e013      	b.n	8001e7a <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 8001e52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e56:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001e90 <MelScale+0xd8>
 8001e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f00a f9a1 	bl	800c1b0 <logf>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001e94 <MelScale+0xdc>
 8001e76:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	42855555 	.word	0x42855555
 8001e88:	447a0000 	.word	0x447a0000
 8001e8c:	3d8ccdbb 	.word	0x3d8ccdbb
 8001e90:	442f0000 	.word	0x442f0000
 8001e94:	448ce000 	.word	0x448ce000

08001e98 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d042      	beq.n	8001f32 <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <InverseMelScale+0xcc>)
 8001eb4:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 8001eb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eca:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <InverseMelScale+0xd0>)
 8001ed0:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8001ed2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eda:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ede:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee6:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <InverseMelScale+0xd4>)
 8001eec:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 8001eee:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ef2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	db15      	blt.n	8001f2c <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8001f00:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	f00a f8d6 	bl	800c0c8 <expf>
 8001f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f28:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8001f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f30:	e013      	b.n	8001f5a <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 8001f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f36:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001f70 <InverseMelScale+0xd8>
 8001f3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f42:	f00a f8c1 	bl	800c0c8 <expf>
 8001f46:	eef0 7a40 	vmov.f32	s15, s0
 8001f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f52:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001f74 <InverseMelScale+0xdc>
 8001f56:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8001f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	42855555 	.word	0x42855555
 8001f68:	447a0000 	.word	0x447a0000
 8001f6c:	3d8ccdbb 	.word	0x3d8ccdbb
 8001f70:	448ce000 	.word	0x448ce000
 8001f74:	442f0000 	.word	0x442f0000

08001f78 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  switch (type)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d01c      	beq.n	8001fca <Window_Init+0x52>
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	dc25      	bgt.n	8001fe0 <Window_Init+0x68>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <Window_Init+0x26>
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d00b      	beq.n	8001fb4 <Window_Init+0x3c>
 8001f9c:	e020      	b.n	8001fe0 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 8001f9e:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8001ff8 <Window_Init+0x80>
 8001fa2:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8001fa6:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f837 	bl	8002020 <cosine_sum_window_create>
      break;
 8001fb2:	e019      	b.n	8001fe8 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 8001fb4:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8001ff8 <Window_Init+0x80>
 8001fb8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002000 <Window_Init+0x88>
 8001fbc:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002008 <Window_Init+0x90>
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f82c 	bl	8002020 <cosine_sum_window_create>
      break;
 8001fc8:	e00e      	b.n	8001fe8 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8001fca:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002010 <Window_Init+0x98>
 8001fce:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8001fd2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002018 <Window_Init+0xa0>
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f821 	bl	8002020 <cosine_sum_window_create>
      break;
 8001fde:	e003      	b.n	8001fe8 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	617b      	str	r3, [r7, #20]
      break;
 8001fe6:	bf00      	nop
  }

  return status;
 8001fe8:	697b      	ldr	r3, [r7, #20]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
	...
 8002000:	d70a3d71 	.word	0xd70a3d71
 8002004:	3fdd70a3 	.word	0x3fdd70a3
 8002008:	147ae148 	.word	0x147ae148
 800200c:	3fe147ae 	.word	0x3fe147ae
 8002010:	47ae147b 	.word	0x47ae147b
 8002014:	3fb47ae1 	.word	0x3fb47ae1
 8002018:	ae147ae1 	.word	0xae147ae1
 800201c:	3fdae147 	.word	0x3fdae147

08002020 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	ed2d 8b02 	vpush	{d8}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	61f8      	str	r0, [r7, #28]
 800202c:	61b9      	str	r1, [r7, #24]
 800202e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002032:	ed87 1b02 	vstr	d1, [r7, #8]
 8002036:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	e043      	b.n	80020c8 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800204a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80020e0 <cosine_sum_window_create+0xc0>
 800204e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800205c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002060:	eeb0 0b45 	vmov.f64	d0, d5
 8002064:	f009 ffe4 	bl	800c030 <cos>
 8002068:	eeb0 6b40 	vmov.f64	d6, d0
 800206c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002070:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002074:	ed97 6b04 	vldr	d6, [r7, #16]
 8002078:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002086:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80020e8 <cosine_sum_window_create+0xc8>
 800208a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002098:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800209c:	eeb0 0b45 	vmov.f64	d0, d5
 80020a0:	f009 ffc6 	bl	800c030 <cos>
 80020a4:	eeb0 6b40 	vmov.f64	d6, d0
 80020a8:	ed97 7b00 	vldr	d7, [r7]
 80020ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020b0:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	1d1a      	adds	r2, r3, #4
 80020b8:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80020ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 80020be:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3b7      	bcc.n	8002040 <cosine_sum_window_create+0x20>
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	ecbd 8b02 	vpop	{d8}
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	54442d18 	.word	0x54442d18
 80020e4:	401921fb 	.word	0x401921fb
 80020e8:	54442d18 	.word	0x54442d18
 80020ec:	402921fb 	.word	0x402921fb

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fbe1 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	200f      	movs	r0, #15
 80020fc:	f000 f806 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fb00 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fbfb 	bl	8002926 <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002148:	f000 fbc3 	bl	80028d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000000 	.word	0x20000000
 8002164:	20000008 	.word	0x20000008
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008
 8002190:	200045c4 	.word	0x200045c4

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200045c4 	.word	0x200045c4

080021ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff ffee 	bl	8002194 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c4:	d005      	beq.n	80021d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_Delay+0x44>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021d2:	bf00      	nop
 80021d4:	f7ff ffde 	bl	8002194 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f7      	bhi.n	80021d4 <HAL_Delay+0x28>
  {
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e031      	b.n	800226e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fa3a 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d116      	bne.n	8002260 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_ADC_Init+0x84>)
 8002238:	4013      	ands	r3, r2
 800223a:	f043 0202 	orr.w	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f970 	bl	8002528 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f023 0303 	bic.w	r3, r3, #3
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
 800225e:	e001      	b.n	8002264 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	ffffeefd 	.word	0xffffeefd

0800227c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1c>
 8002294:	2302      	movs	r3, #2
 8002296:	e136      	b.n	8002506 <HAL_ADC_ConfigChannel+0x28a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d93a      	bls.n	800231e <HAL_ADC_ConfigChannel+0xa2>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b0:	d035      	beq.n	800231e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68d9      	ldr	r1, [r3, #12]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	3b1e      	subs	r3, #30
 80022c8:	2207      	movs	r2, #7
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a8d      	ldr	r2, [pc, #564]	; (8002514 <HAL_ADC_ConfigChannel+0x298>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	061a      	lsls	r2, r3, #24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f6:	e035      	b.n	8002364 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	4603      	mov	r3, r0
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4403      	add	r3, r0
 8002310:	3b1e      	subs	r3, #30
 8002312:	409a      	lsls	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231c:	e022      	b.n	8002364 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	2207      	movs	r2, #7
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43da      	mvns	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	400a      	ands	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	4603      	mov	r3, r0
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4403      	add	r3, r0
 800235a:	409a      	lsls	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d824      	bhi.n	80023b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b05      	subs	r3, #5
 800237e:	221f      	movs	r2, #31
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	4618      	mov	r0, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b05      	subs	r3, #5
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34
 80023b4:	e04c      	b.n	8002450 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d824      	bhi.n	8002408 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	3b23      	subs	r3, #35	; 0x23
 80023d0:	221f      	movs	r2, #31
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b23      	subs	r3, #35	; 0x23
 80023fa:	fa00 f203 	lsl.w	r2, r0, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
 8002406:	e023      	b.n	8002450 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b41      	subs	r3, #65	; 0x41
 800241a:	221f      	movs	r2, #31
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43da      	mvns	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	400a      	ands	r2, r1
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b41      	subs	r3, #65	; 0x41
 8002444:	fa00 f203 	lsl.w	r2, r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a30      	ldr	r2, [pc, #192]	; (8002518 <HAL_ADC_ConfigChannel+0x29c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10a      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1f4>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002462:	d105      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002464:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a2c      	ldr	r2, [pc, #176]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 800246a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800246e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a28      	ldr	r2, [pc, #160]	; (8002518 <HAL_ADC_ConfigChannel+0x29c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10f      	bne.n	800249a <HAL_ADC_ConfigChannel+0x21e>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b12      	cmp	r3, #18
 8002480:	d10b      	bne.n	800249a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a25      	ldr	r2, [pc, #148]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 8002488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800248c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002498:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_ADC_ConfigChannel+0x29c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d12b      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x280>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_ADC_ConfigChannel+0x298>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x23a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b11      	cmp	r3, #17
 80024b4:	d122      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 80024bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80024c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <HAL_ADC_ConfigChannel+0x2a0>)
 80024c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a10      	ldr	r2, [pc, #64]	; (8002514 <HAL_ADC_ConfigChannel+0x298>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_ADC_ConfigChannel+0x2a4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_ADC_ConfigChannel+0x2a8>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0c9a      	lsrs	r2, r3, #18
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024ee:	e002      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f9      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	10000012 	.word	0x10000012
 8002518:	40012000 	.word	0x40012000
 800251c:	40012300 	.word	0x40012300
 8002520:	20000000 	.word	0x20000000
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <ADC_Init+0x1ec>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a77      	ldr	r2, [pc, #476]	; (8002714 <ADC_Init+0x1ec>)
 8002536:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800253a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <ADC_Init+0x1ec>)
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4973      	ldr	r1, [pc, #460]	; (8002714 <ADC_Init+0x1ec>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	021a      	lsls	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800257c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	4a58      	ldr	r2, [pc, #352]	; (8002718 <ADC_Init+0x1f0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e00f      	b.n	8002622 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0202 	bic.w	r2, r2, #2
 8002630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	005a      	lsls	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800266e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	3b01      	subs	r3, #1
 800267c:	035a      	lsls	r2, r3, #13
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	e007      	b.n	8002698 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	051a      	lsls	r2, r3, #20
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026da:	025a      	lsls	r2, r3, #9
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	029a      	lsls	r2, r3, #10
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40012300 	.word	0x40012300
 8002718:	0f000001 	.word	0x0f000001

0800271c <__NVIC_SetPriorityGrouping>:
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <__NVIC_SetPriorityGrouping+0x40>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	4313      	orrs	r3, r2
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x40>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00
 8002760:	05fa0000 	.word	0x05fa0000

08002764 <__NVIC_GetPriorityGrouping>:
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	; (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff29 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff3e 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff31 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e054      	b.n	80029fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7f5b      	ldrb	r3, [r3, #29]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd fed4 	bl	8000710 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_CRC_Init+0xc4>)
 800297c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0218 	bic.w	r2, r2, #24
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	e00c      	b.n	80029aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6899      	ldr	r1, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	461a      	mov	r2, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f834 	bl	8002a08 <HAL_CRCEx_Polynomial_Set>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e028      	b.n	80029fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029ba:	611a      	str	r2, [r3, #16]
 80029bc:	e004      	b.n	80029c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6912      	ldr	r2, [r2, #16]
 80029c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	04c11db7 	.word	0x04c11db7

08002a08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a18:	231f      	movs	r3, #31
 8002a1a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a1c:	bf00      	nop
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	613a      	str	r2, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_CRCEx_Polynomial_Set+0x34>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b18      	cmp	r3, #24
 8002a40:	d846      	bhi.n	8002ad0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002ad7 	.word	0x08002ad7
 8002a4c:	08002ad1 	.word	0x08002ad1
 8002a50:	08002ad1 	.word	0x08002ad1
 8002a54:	08002ad1 	.word	0x08002ad1
 8002a58:	08002ad1 	.word	0x08002ad1
 8002a5c:	08002ad1 	.word	0x08002ad1
 8002a60:	08002ad1 	.word	0x08002ad1
 8002a64:	08002ad1 	.word	0x08002ad1
 8002a68:	08002ac5 	.word	0x08002ac5
 8002a6c:	08002ad1 	.word	0x08002ad1
 8002a70:	08002ad1 	.word	0x08002ad1
 8002a74:	08002ad1 	.word	0x08002ad1
 8002a78:	08002ad1 	.word	0x08002ad1
 8002a7c:	08002ad1 	.word	0x08002ad1
 8002a80:	08002ad1 	.word	0x08002ad1
 8002a84:	08002ad1 	.word	0x08002ad1
 8002a88:	08002ab9 	.word	0x08002ab9
 8002a8c:	08002ad1 	.word	0x08002ad1
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002ad1 	.word	0x08002ad1
 8002a98:	08002ad1 	.word	0x08002ad1
 8002a9c:	08002ad1 	.word	0x08002ad1
 8002aa0:	08002ad1 	.word	0x08002ad1
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002aad 	.word	0x08002aad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d913      	bls.n	8002ada <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ab6:	e010      	b.n	8002ada <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b07      	cmp	r3, #7
 8002abc:	d90f      	bls.n	8002ade <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ac2:	e00c      	b.n	8002ade <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	d90b      	bls.n	8002ae2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ace:	e008      	b.n	8002ae2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ae2:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 0118 	bic.w	r1, r3, #24
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0ac      	b.n	8002c80 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fadc 	bl	80030e8 <DFSDM_GetChannelFromInstance>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4a55      	ldr	r2, [pc, #340]	; (8002c88 <HAL_DFSDM_ChannelInit+0x174>)
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e09f      	b.n	8002c80 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fd ffc9 	bl	8000ad8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_DFSDM_ChannelInit+0x178>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_DFSDM_ChannelInit+0x178>)
 8002b4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_DFSDM_ChannelInit+0x178>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d125      	bne.n	8002ba4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4948      	ldr	r1, [pc, #288]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a46      	ldr	r2, [pc, #280]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b78:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b7c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	791b      	ldrb	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8002b86:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	493f      	ldr	r1, [pc, #252]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002bb2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bc2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002bc8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020f 	bic.w	r2, r2, #15
 8002be0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002c08:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f002 0207 	and.w	r2, r2, #7
 8002c34:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c60:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fa3a 	bl	80030e8 <DFSDM_GetChannelFromInstance>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_DFSDM_ChannelInit+0x174>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200045cc 	.word	0x200045cc
 8002c8c:	200045c8 	.word	0x200045c8
 8002c90:	40017400 	.word	0x40017400

08002c94 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0c6      	b.n	8002e34 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a64      	ldr	r2, [pc, #400]	; (8002e3c <HAL_DFSDM_FilterInit+0x1a8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d109      	bne.n	8002cc4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d003      	beq.n	8002cc0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b7      	b.n	8002e34 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7fd fe13 	bl	8000908 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002cf0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7a1b      	ldrb	r3, [r3, #8]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d108      	bne.n	8002d0c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7a5b      	ldrb	r3, [r3, #9]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d108      	bne.n	8002d36 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e007      	b.n	8002d46 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_DFSDM_FilterInit+0x1ac>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d108      	bne.n	8002d70 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7c1b      	ldrb	r3, [r3, #16]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d108      	bne.n	8002d8a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0210 	orr.w	r2, r2, #16
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e007      	b.n	8002d9a <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0210 	bic.w	r2, r2, #16
 8002d98:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7c5b      	ldrb	r3, [r3, #17]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d108      	bne.n	8002db4 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0220 	orr.w	r2, r2, #32
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e007      	b.n	8002dc4 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0220 	bic.w	r2, r2, #32
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6959      	ldr	r1, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_DFSDM_FilterInit+0x1b0>)
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6959      	ldr	r1, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002de6:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002dee:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7c1a      	ldrb	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40017500 	.word	0x40017500
 8002e40:	ffff80f7 	.word	0xffff80f7
 8002e44:	1c00ff00 	.word	0x1c00ff00

08002e48 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02c      	beq.n	8002ebc <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002e68:	2bff      	cmp	r3, #255	; 0xff
 8002e6a:	d027      	beq.n	8002ebc <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002e78:	400b      	ands	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10d      	bne.n	8002e9e <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e00a      	b.n	8002eb4 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eba:	e001      	b.n	8002ec0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	f8fbffff 	.word	0xf8fbffff

08002ed4 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01b      	beq.n	8002f24 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d016      	beq.n	8002f24 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	b292      	uxth	r2, r2
 8002efe:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f000 f8d2 	bl	80030aa <DFSDM_GetInjChannelsNbr>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_DFSDM_FilterConfigInjChannel+0x48>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	e000      	b.n	8002f1e <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8002f1c:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6493      	str	r3, [r2, #72]	; 0x48
 8002f22:	e001      	b.n	8002f28 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
 8002f54:	e066      	b.n	8003024 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f64:	d002      	beq.n	8002f6c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
 8002f6a:	e05b      	b.n	8003024 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10e      	bne.n	8002f92 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
 8002f90:	e048      	b.n	8003024 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fac:	d102      	bne.n	8002fb4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e037      	b.n	8003024 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d004      	beq.n	8002fc8 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d12b      	bne.n	8003020 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002fd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8002fe6:	e000      	b.n	8002fea <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8002fe8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	331c      	adds	r3, #28
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f000 f9c2 	bl	8003388 <HAL_DMA_Start_IT>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003016:	e005      	b.n	8003024 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f8b1 	bl	8003180 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800301e:	e001      	b.n	8003024 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	0800306d 	.word	0x0800306d
 8003034:	08003089 	.word	0x08003089
 8003038:	08003051 	.word	0x08003051

0800303c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f008 f89c 	bl	800b19c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f008 f8aa 	bl	800b1d4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2203      	movs	r2, #3
 800309a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff ffcd 	bl	800303c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80030bc:	e00a      	b.n	80030d4 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f1      	bne.n	80030be <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <DFSDM_GetChannelFromInstance+0x7c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d102      	bne.n	80030fe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e02b      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <DFSDM_GetChannelFromInstance+0x80>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d102      	bne.n	800310c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e024      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <DFSDM_GetChannelFromInstance+0x84>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d102      	bne.n	800311a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003114:	2302      	movs	r3, #2
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e01d      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <DFSDM_GetChannelFromInstance+0x88>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d102      	bne.n	8003128 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003122:	2303      	movs	r3, #3
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e016      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <DFSDM_GetChannelFromInstance+0x8c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d102      	bne.n	8003136 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003130:	2304      	movs	r3, #4
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e00f      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <DFSDM_GetChannelFromInstance+0x90>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d102      	bne.n	8003144 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800313e:	2305      	movs	r3, #5
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e008      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0d      	ldr	r2, [pc, #52]	; (800317c <DFSDM_GetChannelFromInstance+0x94>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d102      	bne.n	8003152 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800314c:	2306      	movs	r3, #6
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e001      	b.n	8003156 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8003152:	2307      	movs	r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40017400 	.word	0x40017400
 8003168:	40017420 	.word	0x40017420
 800316c:	40017440 	.word	0x40017440
 8003170:	40017460 	.word	0x40017460
 8003174:	40017480 	.word	0x40017480
 8003178:	400174a0 	.word	0x400174a0
 800317c:	400174c0 	.word	0x400174c0

08003180 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e033      	b.n	800320a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80031c0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d116      	bne.n	800320a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0202 	orr.w	r2, r2, #2
 80031f2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <DFSDM_RegConvStart+0x84>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	e000      	b.n	8003206 <DFSDM_RegConvStart+0x86>
 8003204:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <DFSDM_RegConvStart+0x98>
 8003214:	2202      	movs	r2, #2
 8003216:	e000      	b.n	800321a <DFSDM_RegConvStart+0x9a>
 8003218:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003238:	f7fe ffac 	bl	8002194 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e099      	b.n	800337c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003268:	e00f      	b.n	800328a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800326a:	f7fe ff93 	bl	8002194 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b05      	cmp	r3, #5
 8003276:	d908      	bls.n	800328a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2203      	movs	r2, #3
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e078      	b.n	800337c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e8      	bne.n	800326a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_DMA_Init+0x158>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4313      	orrs	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b04      	cmp	r3, #4
 800331c:	d117      	bne.n	800334e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 faa5 	bl	8003880 <DMA_CheckFifoParam>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800334a:	2301      	movs	r3, #1
 800334c:	e016      	b.n	800337c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa5c 	bl	8003814 <DMA_CalcBaseAndBitshift>
 800335c:	4603      	mov	r3, r0
 800335e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	223f      	movs	r2, #63	; 0x3f
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	e010803f 	.word	0xe010803f

08003388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_DMA_Start_IT+0x26>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e048      	b.n	8003440 <HAL_DMA_Start_IT+0xb8>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d137      	bne.n	8003432 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9ee 	bl	80037b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	223f      	movs	r2, #63	; 0x3f
 80033e2:	409a      	lsls	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0216 	orr.w	r2, r2, #22
 80033f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003406:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0208 	orr.w	r2, r2, #8
 800341e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e005      	b.n	800343e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00c      	b.n	8003480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2205      	movs	r2, #5
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003498:	4b8e      	ldr	r3, [pc, #568]	; (80036d4 <HAL_DMA_IRQHandler+0x248>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a8e      	ldr	r2, [pc, #568]	; (80036d8 <HAL_DMA_IRQHandler+0x24c>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	2208      	movs	r2, #8
 80034b8:	409a      	lsls	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01a      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	2208      	movs	r2, #8
 80034e6:	409a      	lsls	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2201      	movs	r2, #1
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	2201      	movs	r2, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f043 0202 	orr.w	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	2204      	movs	r2, #4
 8003534:	409a      	lsls	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d012      	beq.n	8003564 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	2204      	movs	r2, #4
 8003552:	409a      	lsls	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	2210      	movs	r2, #16
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d043      	beq.n	80035fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03c      	beq.n	80035fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003586:	2210      	movs	r2, #16
 8003588:	409a      	lsls	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d018      	beq.n	80035ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d024      	beq.n	80035fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
 80035ba:	e01f      	b.n	80035fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e016      	b.n	80035fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0208 	bic.w	r2, r2, #8
 80035ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2220      	movs	r2, #32
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 808f 	beq.w	800372c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8087 	beq.w	800372c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2220      	movs	r2, #32
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b05      	cmp	r3, #5
 8003634:	d136      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0216 	bic.w	r2, r2, #22
 8003644:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003654:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_DMA_IRQHandler+0x1da>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0208 	bic.w	r2, r2, #8
 8003674:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	223f      	movs	r2, #63	; 0x3f
 800367c:	409a      	lsls	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	2b00      	cmp	r3, #0
 8003698:	d07e      	beq.n	8003798 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
        }
        return;
 80036a2:	e079      	b.n	8003798 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01d      	beq.n	80036ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
 80036d0:	e02c      	b.n	800372c <HAL_DMA_IRQHandler+0x2a0>
 80036d2:	bf00      	nop
 80036d4:	20000000 	.word	0x20000000
 80036d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d023      	beq.n	800372c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e01e      	b.n	800372c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0210 	bic.w	r2, r2, #16
 800370a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	2b00      	cmp	r3, #0
 8003732:	d032      	beq.n	800379a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d022      	beq.n	8003786 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2205      	movs	r2, #5
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3301      	adds	r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	d307      	bcc.n	8003774 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f2      	bne.n	8003758 <HAL_DMA_IRQHandler+0x2cc>
 8003772:	e000      	b.n	8003776 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003774:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e000      	b.n	800379a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003798:	bf00      	nop
    }
  }
}
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d108      	bne.n	80037f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037f6:	e007      	b.n	8003808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3b10      	subs	r3, #16
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <DMA_CalcBaseAndBitshift+0x60>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <DMA_CalcBaseAndBitshift+0x64>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d908      	bls.n	8003854 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <DMA_CalcBaseAndBitshift+0x68>)
 800384a:	4013      	ands	r3, r2
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58
 8003852:	e006      	b.n	8003862 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <DMA_CalcBaseAndBitshift+0x68>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	aaaaaaab 	.word	0xaaaaaaab
 8003878:	0800ce8c 	.word	0x0800ce8c
 800387c:	fffffc00 	.word	0xfffffc00

08003880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11f      	bne.n	80038da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d856      	bhi.n	800394e <DMA_CheckFifoParam+0xce>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <DMA_CheckFifoParam+0x28>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038cb 	.word	0x080038cb
 80038b0:	080038b9 	.word	0x080038b9
 80038b4:	0800394f 	.word	0x0800394f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d046      	beq.n	8003952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c8:	e043      	b.n	8003952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d2:	d140      	bne.n	8003956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d8:	e03d      	b.n	8003956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e2:	d121      	bne.n	8003928 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d837      	bhi.n	800395a <DMA_CheckFifoParam+0xda>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <DMA_CheckFifoParam+0x70>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003907 	.word	0x08003907
 80038f8:	08003901 	.word	0x08003901
 80038fc:	08003919 	.word	0x08003919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e030      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d025      	beq.n	800395e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e022      	b.n	800395e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003920:	d11f      	bne.n	8003962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003926:	e01c      	b.n	8003962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d903      	bls.n	8003936 <DMA_CheckFifoParam+0xb6>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d003      	beq.n	800393c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003934:	e018      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      break;
 800393a:	e015      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e00b      	b.n	8003966 <DMA_CheckFifoParam+0xe6>
      break;
 800394e:	bf00      	nop
 8003950:	e00a      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      break;
 8003952:	bf00      	nop
 8003954:	e008      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      break;
 8003956:	bf00      	nop
 8003958:	e006      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
 800395c:	e004      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      break;
 800395e:	bf00      	nop
 8003960:	e002      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      break;   
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <DMA_CheckFifoParam+0xe8>
      break;
 8003966:	bf00      	nop
    }
  } 
  
  return status; 
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e175      	b.n	8003c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003998:	2201      	movs	r2, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f040 8164 	bne.w	8003c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d005      	beq.n	80039ce <HAL_GPIO_Init+0x56>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d130      	bne.n	8003a30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2203      	movs	r2, #3
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 0201 	and.w	r2, r3, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d017      	beq.n	8003a6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d123      	bne.n	8003ac0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	08da      	lsrs	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3208      	adds	r2, #8
 8003aba:	69b9      	ldr	r1, [r7, #24]
 8003abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0203 	and.w	r2, r3, #3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80be 	beq.w	8003c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b02:	4b66      	ldr	r3, [pc, #408]	; (8003c9c <HAL_GPIO_Init+0x324>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	4a65      	ldr	r2, [pc, #404]	; (8003c9c <HAL_GPIO_Init+0x324>)
 8003b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0e:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_GPIO_Init+0x324>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b1a:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <HAL_GPIO_Init+0x328>)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	3302      	adds	r3, #2
 8003b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	220f      	movs	r2, #15
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_GPIO_Init+0x32c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d037      	beq.n	8003bb6 <HAL_GPIO_Init+0x23e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a57      	ldr	r2, [pc, #348]	; (8003ca8 <HAL_GPIO_Init+0x330>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d031      	beq.n	8003bb2 <HAL_GPIO_Init+0x23a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a56      	ldr	r2, [pc, #344]	; (8003cac <HAL_GPIO_Init+0x334>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <HAL_GPIO_Init+0x236>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a55      	ldr	r2, [pc, #340]	; (8003cb0 <HAL_GPIO_Init+0x338>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d025      	beq.n	8003baa <HAL_GPIO_Init+0x232>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a54      	ldr	r2, [pc, #336]	; (8003cb4 <HAL_GPIO_Init+0x33c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <HAL_GPIO_Init+0x22e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a53      	ldr	r2, [pc, #332]	; (8003cb8 <HAL_GPIO_Init+0x340>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d019      	beq.n	8003ba2 <HAL_GPIO_Init+0x22a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_GPIO_Init+0x344>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_GPIO_Init+0x226>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a51      	ldr	r2, [pc, #324]	; (8003cc0 <HAL_GPIO_Init+0x348>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <HAL_GPIO_Init+0x222>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a50      	ldr	r2, [pc, #320]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0x21e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4f      	ldr	r2, [pc, #316]	; (8003cc8 <HAL_GPIO_Init+0x350>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_GPIO_Init+0x21a>
 8003b8e:	2309      	movs	r3, #9
 8003b90:	e012      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b92:	230a      	movs	r3, #10
 8003b94:	e010      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b96:	2308      	movs	r3, #8
 8003b98:	e00e      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00c      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	e00a      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e008      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003baa:	2303      	movs	r3, #3
 8003bac:	e004      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	f002 0203 	and.w	r2, r2, #3
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4093      	lsls	r3, r2
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003bc8:	4935      	ldr	r1, [pc, #212]	; (8003ca0 <HAL_GPIO_Init+0x328>)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfa:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_GPIO_Init+0x354>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	f67f ae86 	bls.w	8003998 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	3724      	adds	r7, #36	; 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020800 	.word	0x40020800
 8003cb0:	40020c00 	.word	0x40020c00
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40021400 	.word	0x40021400
 8003cbc:	40021800 	.word	0x40021800
 8003cc0:	40021c00 	.word	0x40021c00
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40022400 	.word	0x40022400
 8003ccc:	40013c00 	.word	0x40013c00

08003cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	e001      	b.n	8003cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d10:	787b      	ldrb	r3, [r7, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d1c:	e003      	b.n	8003d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	041a      	lsls	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	619a      	str	r2, [r3, #24]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f007 fbb2 	bl	800b4bc <HAL_GPIO_EXTI_Callback>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40013c00 	.word	0x40013c00

08003d64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d92:	f7fe f9ff 	bl	8002194 <HAL_GetTick>
 8003d96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d98:	e009      	b.n	8003dae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d9a:	f7fe f9fb 	bl	8002194 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da8:	d901      	bls.n	8003dae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e022      	b.n	8003df4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dba:	d1ee      	bne.n	8003d9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc8:	f7fe f9e4 	bl	8002194 <HAL_GetTick>
 8003dcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dce:	e009      	b.n	8003de4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dd0:	f7fe f9e0 	bl	8002194 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dde:	d901      	bls.n	8003de4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e007      	b.n	8003df4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003df0:	d1ee      	bne.n	8003dd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40007000 	.word	0x40007000

08003e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e29b      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8087 	beq.w	8003f36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e28:	4b96      	ldr	r3, [pc, #600]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d00c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e34:	4b93      	ldr	r3, [pc, #588]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d112      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62>
 8003e40:	4b90      	ldr	r3, [pc, #576]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4c:	d10b      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4e:	4b8d      	ldr	r3, [pc, #564]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x130>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d168      	bne.n	8003f34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e275      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x7a>
 8003e70:	4b84      	ldr	r3, [pc, #528]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a83      	ldr	r2, [pc, #524]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e02e      	b.n	8003edc <HAL_RCC_OscConfig+0xd8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x9c>
 8003e86:	4b7f      	ldr	r3, [pc, #508]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7e      	ldr	r2, [pc, #504]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b7c      	ldr	r3, [pc, #496]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7b      	ldr	r2, [pc, #492]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e01d      	b.n	8003edc <HAL_RCC_OscConfig+0xd8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xc0>
 8003eaa:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a75      	ldr	r2, [pc, #468]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a72      	ldr	r2, [pc, #456]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xd8>
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b6c      	ldr	r3, [pc, #432]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6b      	ldr	r2, [pc, #428]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f956 	bl	8002194 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe f952 	bl	8002194 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e229      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xe8>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f942 	bl	8002194 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe f93e 	bl	8002194 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e215      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	4b57      	ldr	r3, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x110>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d069      	beq.n	8004016 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f42:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4e:	4b4d      	ldr	r3, [pc, #308]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d11c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x190>
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d116      	bne.n	8003f94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e1e9      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	493d      	ldr	r1, [pc, #244]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	e040      	b.n	8004016 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9c:	4b39      	ldr	r3, [pc, #228]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a38      	ldr	r2, [pc, #224]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f8f4 	bl	8002194 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fe f8f0 	bl	8002194 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1c7      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4929      	ldr	r1, [pc, #164]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]
 8003fe2:	e018      	b.n	8004016 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a26      	ldr	r2, [pc, #152]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fe f8d0 	bl	8002194 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fe f8cc 	bl	8002194 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1a3      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d038      	beq.n	8004094 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d019      	beq.n	800405e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 800402c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402e:	4a15      	ldr	r2, [pc, #84]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fe f8ad 	bl	8002194 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403e:	f7fe f8a9 	bl	8002194 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e180      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8004052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x23a>
 800405c:	e01a      	b.n	8004094 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <HAL_RCC_OscConfig+0x280>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe f893 	bl	8002194 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004072:	f7fe f88f 	bl	8002194 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d903      	bls.n	8004088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e166      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
 8004084:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	4b92      	ldr	r3, [pc, #584]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800408a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80a4 	beq.w	80041ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a2:	4b8c      	ldr	r3, [pc, #560]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10d      	bne.n	80040ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	4b89      	ldr	r3, [pc, #548]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a88      	ldr	r2, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ba:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ca:	4b83      	ldr	r3, [pc, #524]	; (80042d8 <HAL_RCC_OscConfig+0x4d4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d118      	bne.n	8004108 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040d6:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCC_OscConfig+0x4d4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7f      	ldr	r2, [pc, #508]	; (80042d8 <HAL_RCC_OscConfig+0x4d4>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e2:	f7fe f857 	bl	8002194 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fe f853 	bl	8002194 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b64      	cmp	r3, #100	; 0x64
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e12a      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x4d4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d106      	bne.n	800411e <HAL_RCC_OscConfig+0x31a>
 8004110:	4b70      	ldr	r3, [pc, #448]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4a6f      	ldr	r2, [pc, #444]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6713      	str	r3, [r2, #112]	; 0x70
 800411c:	e02d      	b.n	800417a <HAL_RCC_OscConfig+0x376>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x33c>
 8004126:	4b6b      	ldr	r3, [pc, #428]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a6a      	ldr	r2, [pc, #424]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
 8004132:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a67      	ldr	r2, [pc, #412]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004138:	f023 0304 	bic.w	r3, r3, #4
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
 800413e:	e01c      	b.n	800417a <HAL_RCC_OscConfig+0x376>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b05      	cmp	r3, #5
 8004146:	d10c      	bne.n	8004162 <HAL_RCC_OscConfig+0x35e>
 8004148:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	4b5f      	ldr	r3, [pc, #380]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a5e      	ldr	r2, [pc, #376]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
 8004160:	e00b      	b.n	800417a <HAL_RCC_OscConfig+0x376>
 8004162:	4b5c      	ldr	r3, [pc, #368]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a5b      	ldr	r2, [pc, #364]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
 800416e:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d015      	beq.n	80041ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fe f807 	bl	8002194 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fe f803 	bl	8002194 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0d8      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ee      	beq.n	800418a <HAL_RCC_OscConfig+0x386>
 80041ac:	e014      	b.n	80041d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fd fff1 	bl	8002194 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fd ffed 	bl	8002194 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0c2      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ee      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a3c      	ldr	r2, [pc, #240]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80ae 	beq.w	8004350 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f4:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d06d      	beq.n	80042dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d14b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a31      	ldr	r2, [pc, #196]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd ffbe 	bl	8002194 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421c:	f7fd ffba 	bl	8002194 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e091      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	3b01      	subs	r3, #1
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	491b      	ldr	r1, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd ff8c 	bl	8002194 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd ff88 	bl	8002194 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e05f      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x47c>
 800429e:	e057      	b.n	8004350 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80042a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd ff72 	bl	8002194 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd ff6e 	bl	8002194 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e045      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_OscConfig+0x4d0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4b0>
 80042d2:	e03d      	b.n	8004350 <HAL_RCC_OscConfig+0x54c>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042dc:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_RCC_OscConfig+0x558>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d030      	beq.n	800434c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d129      	bne.n	800434c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d122      	bne.n	800434c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004312:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004314:	4293      	cmp	r3, r2
 8004316:	d119      	bne.n	800434c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	3b01      	subs	r3, #1
 8004326:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d10f      	bne.n	800434c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800

08004360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0d0      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b67      	ldr	r3, [pc, #412]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	4965      	ldr	r1, [pc, #404]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4a58      	ldr	r2, [pc, #352]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80043c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80043de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e073      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4936      	ldr	r1, [pc, #216]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fd fe9e 	bl	8002194 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fd fe9a 	bl	8002194 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e053      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d210      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 020f 	bic.w	r2, r3, #15
 800449a:	4922      	ldr	r1, [pc, #136]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 f821 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	; (800452c <HAL_RCC_ClockConfig+0x1cc>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <HAL_RCC_ClockConfig+0x1d0>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x1d4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd fdfa 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023c00 	.word	0x40023c00
 8004528:	40023800 	.word	0x40023800
 800452c:	0800ce74 	.word	0x0800ce74
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800453c:	b090      	sub	sp, #64	; 0x40
 800453e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
 8004544:	2300      	movs	r3, #0
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004548:	2300      	movs	r3, #0
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	d00d      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x40>
 800455c:	2b08      	cmp	r3, #8
 800455e:	f200 80a1 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x34>
 8004566:	2b04      	cmp	r3, #4
 8004568:	d003      	beq.n	8004572 <HAL_RCC_GetSysClockFreq+0x3a>
 800456a:	e09b      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b53      	ldr	r3, [pc, #332]	; (80046bc <HAL_RCC_GetSysClockFreq+0x184>)
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004570:	e09b      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004572:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004576:	e098      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004578:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004582:	4b4d      	ldr	r3, [pc, #308]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d028      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458e:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	099b      	lsrs	r3, r3, #6
 8004594:	2200      	movs	r2, #0
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	627a      	str	r2, [r7, #36]	; 0x24
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045a0:	2100      	movs	r1, #0
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045a4:	fb03 f201 	mul.w	r2, r3, r1
 80045a8:	2300      	movs	r3, #0
 80045aa:	fb00 f303 	mul.w	r3, r0, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	4a43      	ldr	r2, [pc, #268]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80045b2:	fba0 1202 	umull	r1, r2, r0, r2
 80045b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b8:	460a      	mov	r2, r1
 80045ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80045bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045be:	4413      	add	r3, r2
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	2200      	movs	r2, #0
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	61fa      	str	r2, [r7, #28]
 80045ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045d2:	f7fb fe85 	bl	80002e0 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4613      	mov	r3, r2
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045de:	e053      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e0:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	2200      	movs	r2, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	617a      	str	r2, [r7, #20]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045f2:	f04f 0b00 	mov.w	fp, #0
 80045f6:	4652      	mov	r2, sl
 80045f8:	465b      	mov	r3, fp
 80045fa:	f04f 0000 	mov.w	r0, #0
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	0159      	lsls	r1, r3, #5
 8004604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004608:	0150      	lsls	r0, r2, #5
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	ebb2 080a 	subs.w	r8, r2, sl
 8004612:	eb63 090b 	sbc.w	r9, r3, fp
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800462a:	ebb2 0408 	subs.w	r4, r2, r8
 800462e:	eb63 0509 	sbc.w	r5, r3, r9
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	00eb      	lsls	r3, r5, #3
 800463c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004640:	00e2      	lsls	r2, r4, #3
 8004642:	4614      	mov	r4, r2
 8004644:	461d      	mov	r5, r3
 8004646:	eb14 030a 	adds.w	r3, r4, sl
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	eb45 030b 	adc.w	r3, r5, fp
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004672:	2200      	movs	r2, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	60fa      	str	r2, [r7, #12]
 8004678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467c:	f7fb fe30 	bl	80002e0 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetSysClockFreq+0x184>)
 80046a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3740      	adds	r7, #64	; 0x40
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	017d7840 	.word	0x017d7840

080046c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000000 	.word	0x20000000

080046dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	0800ce84 	.word	0x0800ce84

08004704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004708:	f7ff ffdc 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0b5b      	lsrs	r3, r3, #13
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800ce84 	.word	0x0800ce84

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004754:	4b69      	ldr	r3, [pc, #420]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a68      	ldr	r2, [pc, #416]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800475e:	6093      	str	r3, [r2, #8]
 8004760:	4b66      	ldr	r3, [pc, #408]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	4964      	ldr	r1, [pc, #400]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004786:	4b5d      	ldr	r3, [pc, #372]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	4959      	ldr	r1, [pc, #356]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d017      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047c2:	4b4e      	ldr	r3, [pc, #312]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	494a      	ldr	r1, [pc, #296]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e0:	d101      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 808b 	beq.w	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b3a      	ldr	r3, [pc, #232]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	4a39      	ldr	r2, [pc, #228]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	6413      	str	r3, [r2, #64]	; 0x40
 800481c:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004828:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a34      	ldr	r2, [pc, #208]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004834:	f7fd fcae 	bl	8002194 <HAL_GetTick>
 8004838:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483c:	f7fd fcaa 	bl	8002194 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e38f      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485a:	4b28      	ldr	r3, [pc, #160]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d035      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d02e      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004880:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004898:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d114      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd fc72 	bl	8002194 <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fd fc6e 	bl	8002194 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e351      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ee      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e2:	d111      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048f2:	400b      	ands	r3, r1
 80048f4:	4901      	ldr	r1, [pc, #4]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	e00b      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048fc:	40023800 	.word	0x40023800
 8004900:	40007000 	.word	0x40007000
 8004904:	0ffffcff 	.word	0x0ffffcff
 8004908:	4bac      	ldr	r3, [pc, #688]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4aab      	ldr	r2, [pc, #684]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004912:	6093      	str	r3, [r2, #8]
 8004914:	4ba9      	ldr	r3, [pc, #676]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004920:	49a6      	ldr	r1, [pc, #664]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004922:	4313      	orrs	r3, r2
 8004924:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004932:	4ba2      	ldr	r3, [pc, #648]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004938:	4aa0      	ldr	r2, [pc, #640]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004942:	4b9e      	ldr	r3, [pc, #632]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004944:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	499b      	ldr	r1, [pc, #620]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004960:	4b96      	ldr	r3, [pc, #600]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800496e:	4993      	ldr	r1, [pc, #588]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004982:	4b8e      	ldr	r3, [pc, #568]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004990:	498a      	ldr	r1, [pc, #552]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a4:	4b85      	ldr	r3, [pc, #532]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b2:	4982      	ldr	r1, [pc, #520]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049c6:	4b7d      	ldr	r3, [pc, #500]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4979      	ldr	r1, [pc, #484]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e8:	4b74      	ldr	r3, [pc, #464]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	4971      	ldr	r1, [pc, #452]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f023 020c 	bic.w	r2, r3, #12
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a18:	4968      	ldr	r1, [pc, #416]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a2c:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	4960      	ldr	r1, [pc, #384]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a4e:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5c:	4957      	ldr	r1, [pc, #348]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a70:	4b52      	ldr	r3, [pc, #328]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	494f      	ldr	r1, [pc, #316]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a92:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	4946      	ldr	r1, [pc, #280]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ab4:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	493e      	ldr	r1, [pc, #248]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	4935      	ldr	r1, [pc, #212]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004af8:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b06:	492d      	ldr	r1, [pc, #180]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b1a:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b28:	4924      	ldr	r1, [pc, #144]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b38:	d101      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5a:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b68:	4914      	ldr	r1, [pc, #80]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8c:	490b      	ldr	r1, [pc, #44]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00f      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb0:	4902      	ldr	r1, [pc, #8]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bb8:	e002      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00b      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bcc:	4b8a      	ldr	r3, [pc, #552]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	4986      	ldr	r1, [pc, #536]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bf0:	4b81      	ldr	r3, [pc, #516]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c00:	497d      	ldr	r1, [pc, #500]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d006      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80d6 	beq.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c1c:	4b76      	ldr	r3, [pc, #472]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a75      	ldr	r2, [pc, #468]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c28:	f7fd fab4 	bl	8002194 <HAL_GetTick>
 8004c2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c30:	f7fd fab0 	bl	8002194 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e195      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c42:	4b6d      	ldr	r3, [pc, #436]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d021      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11d      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c62:	4b65      	ldr	r3, [pc, #404]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c70:	4b61      	ldr	r3, [pc, #388]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c76:	0e1b      	lsrs	r3, r3, #24
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	019a      	lsls	r2, r3, #6
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	4958      	ldr	r1, [pc, #352]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02e      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc8:	d129      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cd8:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cde:	0f1b      	lsrs	r3, r3, #28
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	019a      	lsls	r2, r3, #6
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	493e      	ldr	r1, [pc, #248]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0c:	f023 021f 	bic.w	r2, r3, #31
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4938      	ldr	r1, [pc, #224]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01d      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d2a:	4b33      	ldr	r3, [pc, #204]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d30:	0e1b      	lsrs	r3, r3, #24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d38:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3e:	0f1b      	lsrs	r3, r3, #28
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	431a      	orrs	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	4926      	ldr	r1, [pc, #152]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d011      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	019a      	lsls	r2, r3, #6
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	071b      	lsls	r3, r3, #28
 8004d8e:	491a      	ldr	r1, [pc, #104]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da2:	f7fd f9f7 	bl	8002194 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004daa:	f7fd f9f3 	bl	8002194 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b64      	cmp	r3, #100	; 0x64
 8004db6:	d901      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0d8      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	f040 80ce 	bne.w	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ddc:	f7fd f9da 	bl	8002194 <HAL_GetTick>
 8004de0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004de2:	e00b      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de4:	f7fd f9d6 	bl	8002194 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	; 0x64
 8004df0:	d904      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e0bb      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dfc:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e08:	d0ec      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02e      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d12a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e32:	4b51      	ldr	r3, [pc, #324]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e40:	4b4d      	ldr	r3, [pc, #308]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	0f1b      	lsrs	r3, r3, #28
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	019a      	lsls	r2, r3, #6
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	071b      	lsls	r3, r3, #28
 8004e66:	4944      	ldr	r1, [pc, #272]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e6e:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	493d      	ldr	r1, [pc, #244]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d022      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9c:	d11d      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e9e:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	0f1b      	lsrs	r3, r3, #28
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	019a      	lsls	r2, r3, #6
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	071b      	lsls	r3, r3, #28
 8004ed2:	4929      	ldr	r1, [pc, #164]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d028      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ef4:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	019a      	lsls	r2, r3, #6
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	061b      	lsls	r3, r3, #24
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	071b      	lsls	r3, r3, #28
 8004f1a:	4917      	ldr	r1, [pc, #92]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4911      	ldr	r1, [pc, #68]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0e      	ldr	r2, [pc, #56]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fd f926 	bl	8002194 <HAL_GetTick>
 8004f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f4c:	f7fd f922 	bl	8002194 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e007      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6a:	d1ef      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800

08004f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f9a:	f040 80a3 	bne.w	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004f9e:	4ba8      	ldr	r3, [pc, #672]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004fac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fb4:	f000 808a 	beq.w	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fbe:	f200 8093 	bhi.w	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc8:	d07d      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fd0:	f200 808a 	bhi.w	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe0:	d039      	beq.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004fe2:	e081      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004fe4:	4b96      	ldr	r3, [pc, #600]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ff0:	4b93      	ldr	r3, [pc, #588]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff8:	4a92      	ldr	r2, [pc, #584]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e007      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005002:	4b8f      	ldr	r3, [pc, #572]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800500a:	4a8f      	ldr	r2, [pc, #572]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005012:	4b8b      	ldr	r3, [pc, #556]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005020:	4b87      	ldr	r3, [pc, #540]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	fb03 f202 	mul.w	r2, r3, r2
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800503a:	4b81      	ldr	r3, [pc, #516]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	617b      	str	r3, [r7, #20]
        break;
 8005054:	e049      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005056:	4b7a      	ldr	r3, [pc, #488]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005062:	4b77      	ldr	r3, [pc, #476]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506a:	4a76      	ldr	r2, [pc, #472]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e007      	b.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005074:	4b72      	ldr	r3, [pc, #456]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800507c:	4a72      	ldr	r2, [pc, #456]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005084:	4b6e      	ldr	r3, [pc, #440]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508a:	0e1b      	lsrs	r3, r3, #24
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005092:	4b6b      	ldr	r3, [pc, #428]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	fb03 f202 	mul.w	r2, r3, r2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80050ac:	4b64      	ldr	r3, [pc, #400]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e011      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80050c6:	4b61      	ldr	r3, [pc, #388]	; (800524c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80050c8:	617b      	str	r3, [r7, #20]
        break;
 80050ca:	e00e      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80050cc:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80050d8:	4b5a      	ldr	r3, [pc, #360]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80050da:	617b      	str	r3, [r7, #20]
        break;
 80050dc:	e005      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80050de:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050e0:	617b      	str	r3, [r7, #20]
        break;
 80050e2:	e002      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80050e8:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f0:	f040 80a3 	bne.w	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80050f4:	4b52      	ldr	r3, [pc, #328]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80050f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fa:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005102:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800510a:	f000 808a 	beq.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005114:	f200 809c 	bhi.w	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511e:	d07d      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005126:	f200 8093 	bhi.w	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005136:	d039      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005138:	e08a      	b.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005146:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800514e:	4a3d      	ldr	r2, [pc, #244]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e007      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005158:	4b39      	ldr	r3, [pc, #228]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005160:	4a39      	ldr	r2, [pc, #228]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	0e1b      	lsrs	r3, r3, #24
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005176:	4b32      	ldr	r3, [pc, #200]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	fb03 f202 	mul.w	r2, r3, r2
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
        break;
 80051aa:	e052      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80051ac:	4b24      	ldr	r3, [pc, #144]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051b8:	4b21      	ldr	r3, [pc, #132]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c0:	4a20      	ldr	r2, [pc, #128]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e007      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d2:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80051da:	4b19      	ldr	r3, [pc, #100]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	0e1b      	lsrs	r3, r3, #24
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80051ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ee:	099b      	lsrs	r3, r3, #6
 80051f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	fb03 f202 	mul.w	r2, r3, r2
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	3301      	adds	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]
        break;
 800521a:	e01a      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800521e:	617b      	str	r3, [r7, #20]
        break;
 8005220:	e017      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005230:	617b      	str	r3, [r7, #20]
        break;
 8005232:	e00e      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005236:	617b      	str	r3, [r7, #20]
        break;
 8005238:	e00b      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800523a:	bf00      	nop
 800523c:	e009      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	00f42400 	.word	0x00f42400
 8005248:	017d7840 	.word	0x017d7840
 800524c:	00bb8000 	.word	0x00bb8000
        break;
 8005250:	bf00      	nop

  return frequency;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e071      	b.n	800535a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7f5b      	ldrb	r3, [r3, #29]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb ffd6 	bl	8001238 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d053      	beq.n	8005348 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	22ca      	movs	r2, #202	; 0xca
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2253      	movs	r2, #83	; 0x53
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fa4d 	bl	8005750 <RTC_EnterInitMode>
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d12a      	bne.n	8005316 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6899      	ldr	r1, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b26      	ldr	r3, [pc, #152]	; (8005364 <HAL_RTC_Init+0x104>)
 80052cc:	400b      	ands	r3, r1
 80052ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6899      	ldr	r1, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68d2      	ldr	r2, [r2, #12]
 80052f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6919      	ldr	r1, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	041a      	lsls	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa56 	bl	80057be <RTC_ExitInitMode>
 8005312:	4603      	mov	r3, r0
 8005314:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d110      	bne.n	800533e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0208 	bic.w	r2, r2, #8
 800532a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	22ff      	movs	r2, #255	; 0xff
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
 8005346:	e001      	b.n	800534c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	ff8fffbf 	.word	0xff8fffbf

08005368 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	7f1b      	ldrb	r3, [r3, #28]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_RTC_SetTime+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e085      	b.n	8005490 <HAL_RTC_SetTime+0x128>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2202      	movs	r2, #2
 800538e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d126      	bne.n	80053e4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fa2a 	bl	8005808 <RTC_ByteToBcd2>
 80053b4:	4603      	mov	r3, r0
 80053b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fa23 	bl	8005808 <RTC_ByteToBcd2>
 80053c2:	4603      	mov	r3, r0
 80053c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	789b      	ldrb	r3, [r3, #2]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fa1b 	bl	8005808 <RTC_ByteToBcd2>
 80053d2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e018      	b.n	8005416 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2200      	movs	r2, #0
 80053f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005404:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800540a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	78db      	ldrb	r3, [r3, #3]
 8005410:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	22ca      	movs	r2, #202	; 0xca
 800541c:	625a      	str	r2, [r3, #36]	; 0x24
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2253      	movs	r2, #83	; 0x53
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f992 	bl	8005750 <RTC_EnterInitMode>
 800542c:	4603      	mov	r3, r0
 800542e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11e      	bne.n	8005474 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <HAL_RTC_SetTime+0x130>)
 800543e:	400b      	ands	r3, r1
 8005440:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005450:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6899      	ldr	r1, [r3, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	431a      	orrs	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f9a7 	bl	80057be <RTC_ExitInitMode>
 8005470:	4603      	mov	r3, r0
 8005472:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	771a      	strb	r2, [r3, #28]

  return status;
 800548e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd90      	pop	{r4, r7, pc}
 8005498:	007f7f7f 	.word	0x007f7f7f

0800549c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <HAL_RTC_GetTime+0xb8>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	0d9b      	lsrs	r3, r3, #22
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11a      	bne.n	800554a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f993 	bl	8005844 <RTC_Bcd2ToByte>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f98a 	bl	8005844 <RTC_Bcd2ToByte>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	789b      	ldrb	r3, [r3, #2]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f981 	bl	8005844 <RTC_Bcd2ToByte>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	007f7f7f 	.word	0x007f7f7f

08005558 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	7f1b      	ldrb	r3, [r3, #28]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_RTC_SetDate+0x1c>
 8005570:	2302      	movs	r3, #2
 8005572:	e06f      	b.n	8005654 <HAL_RTC_SetDate+0xfc>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2202      	movs	r2, #2
 800557e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10e      	bne.n	80055a4 <HAL_RTC_SetDate+0x4c>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	f023 0310 	bic.w	r3, r3, #16
 800559a:	b2db      	uxtb	r3, r3
 800559c:	330a      	adds	r3, #10
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d11c      	bne.n	80055e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	78db      	ldrb	r3, [r3, #3]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f92a 	bl	8005808 <RTC_ByteToBcd2>
 80055b4:	4603      	mov	r3, r0
 80055b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f923 	bl	8005808 <RTC_ByteToBcd2>
 80055c2:	4603      	mov	r3, r0
 80055c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	789b      	ldrb	r3, [r3, #2]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f91b 	bl	8005808 <RTC_ByteToBcd2>
 80055d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e00e      	b.n	8005602 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	78db      	ldrb	r3, [r3, #3]
 80055e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055f0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80055f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	22ca      	movs	r2, #202	; 0xca
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2253      	movs	r2, #83	; 0x53
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f89c 	bl	8005750 <RTC_EnterInitMode>
 8005618:	4603      	mov	r3, r0
 800561a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	6979      	ldr	r1, [r7, #20]
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_RTC_SetDate+0x104>)
 800562a:	400b      	ands	r3, r1
 800562c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f8c5 	bl	80057be <RTC_ExitInitMode>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]

  return status;
 8005652:	7cfb      	ldrb	r3, [r7, #19]
}
 8005654:	4618      	mov	r0, r3
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd90      	pop	{r4, r7, pc}
 800565c:	00ffff3f 	.word	0x00ffff3f

08005660 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <HAL_RTC_GetDate+0x9c>)
 8005678:	4013      	ands	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	0b5b      	lsrs	r3, r3, #13
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11a      	bne.n	80056f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	78db      	ldrb	r3, [r3, #3]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f8c0 	bl	8005844 <RTC_Bcd2ToByte>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f8b7 	bl	8005844 <RTC_Bcd2ToByte>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	789b      	ldrb	r3, [r3, #2]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f8ae 	bl	8005844 <RTC_Bcd2ToByte>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	00ffff3f 	.word	0x00ffff3f

08005700 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800571a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800571c:	f7fc fd3a 	bl	8002194 <HAL_GetTick>
 8005720:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005722:	e009      	b.n	8005738 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005724:	f7fc fd36 	bl	8002194 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005732:	d901      	bls.n	8005738 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e007      	b.n	8005748 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ee      	beq.n	8005724 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d122      	bne.n	80057b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800577c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800577e:	f7fc fd09 	bl	8002194 <HAL_GetTick>
 8005782:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005784:	e00c      	b.n	80057a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005786:	f7fc fd05 	bl	8002194 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005794:	d904      	bls.n	80057a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2204      	movs	r2, #4
 800579a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <RTC_EnterInitMode+0x64>
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d1e8      	bne.n	8005786 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff89 	bl	8005700 <HAL_RTC_WaitForSynchro>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2204      	movs	r2, #4
 80057f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005816:	e005      	b.n	8005824 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	3b0a      	subs	r3, #10
 8005822:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	2b09      	cmp	r3, #9
 8005828:	d8f6      	bhi.n	8005818 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	b2da      	uxtb	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4313      	orrs	r3, r2
 8005836:	b2db      	uxtb	r3, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	b2db      	uxtb	r3, r3
 8005870:	4413      	add	r3, r2
 8005872:	b2db      	uxtb	r3, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3350      	adds	r3, #80	; 0x50
 8005896:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3350      	adds	r3, #80	; 0x50
 80058c8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e156      	b.n	8005bb0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb fd1a 	bl	8001350 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f95b 	bl	8005be0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d00c      	beq.n	800594c <HAL_SAI_Init+0x68>
 8005932:	2b02      	cmp	r3, #2
 8005934:	d80d      	bhi.n	8005952 <HAL_SAI_Init+0x6e>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_SAI_Init+0x5c>
 800593a:	2b01      	cmp	r3, #1
 800593c:	d003      	beq.n	8005946 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800593e:	e008      	b.n	8005952 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
      break;
 8005944:	e006      	b.n	8005954 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005946:	2310      	movs	r3, #16
 8005948:	61fb      	str	r3, [r7, #28]
      break;
 800594a:	e003      	b.n	8005954 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800594c:	2320      	movs	r3, #32
 800594e:	61fb      	str	r3, [r7, #28]
      break;
 8005950:	e000      	b.n	8005954 <HAL_SAI_Init+0x70>
      break;
 8005952:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d81e      	bhi.n	800599a <HAL_SAI_Init+0xb6>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <HAL_SAI_Init+0x80>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005975 	.word	0x08005975
 8005968:	0800597b 	.word	0x0800597b
 800596c:	08005983 	.word	0x08005983
 8005970:	0800598b 	.word	0x0800598b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
    }
    break;
 8005978:	e010      	b.n	800599c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800597a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005980:	e00c      	b.n	800599c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005986:	617b      	str	r3, [r7, #20]
    }
    break;
 8005988:	e008      	b.n	800599c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800598a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800598e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005998:	e000      	b.n	800599c <HAL_SAI_Init+0xb8>
    default:
      break;
 800599a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a85      	ldr	r2, [pc, #532]	; (8005bb8 <HAL_SAI_Init+0x2d4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_SAI_Init+0xcc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a84      	ldr	r2, [pc, #528]	; (8005bbc <HAL_SAI_Init+0x2d8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d103      	bne.n	80059b8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80059b0:	4a83      	ldr	r2, [pc, #524]	; (8005bc0 <HAL_SAI_Init+0x2dc>)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e002      	b.n	80059be <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80059b8:	4a82      	ldr	r2, [pc, #520]	; (8005bc4 <HAL_SAI_Init+0x2e0>)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d04c      	beq.n	8005a60 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a7a      	ldr	r2, [pc, #488]	; (8005bb8 <HAL_SAI_Init+0x2d4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_SAI_Init+0xfa>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a78      	ldr	r2, [pc, #480]	; (8005bbc <HAL_SAI_Init+0x2d8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d104      	bne.n	80059e8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80059de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059e2:	f7ff facb 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 80059e6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a76      	ldr	r2, [pc, #472]	; (8005bc8 <HAL_SAI_Init+0x2e4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_SAI_Init+0x118>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a75      	ldr	r2, [pc, #468]	; (8005bcc <HAL_SAI_Init+0x2e8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d104      	bne.n	8005a06 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80059fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a00:	f7ff fabc 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8005a04:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	461a      	mov	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	025b      	lsls	r3, r3, #9
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4a6b      	ldr	r2, [pc, #428]	; (8005bd0 <HAL_SAI_Init+0x2ec>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	08da      	lsrs	r2, r3, #3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005a2c:	68f9      	ldr	r1, [r7, #12]
 8005a2e:	4b68      	ldr	r3, [pc, #416]	; (8005bd0 <HAL_SAI_Init+0x2ec>)
 8005a30:	fba3 2301 	umull	r2, r3, r3, r1
 8005a34:	08da      	lsrs	r2, r3, #3
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	1aca      	subs	r2, r1, r3
 8005a40:	2a08      	cmp	r2, #8
 8005a42:	d904      	bls.n	8005a4e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d104      	bne.n	8005a60 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	085a      	lsrs	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_SAI_Init+0x18c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d109      	bne.n	8005a84 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_SAI_Init+0x198>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e001      	b.n	8005a80 <HAL_SAI_Init+0x19c>
 8005a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e008      	b.n	8005a96 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <HAL_SAI_Init+0x1ae>
 8005a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a90:	e000      	b.n	8005a94 <HAL_SAI_Init+0x1b0>
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <HAL_SAI_Init+0x2f0>)
 8005aa2:	400b      	ands	r3, r1
 8005aa4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005aba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005ace:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ada:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	051b      	lsls	r3, r3, #20
 8005ae2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_SAI_Init+0x2f4>)
 8005af8:	400b      	ands	r3, r1
 8005afa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <HAL_SAI_Init+0x2f8>)
 8005b26:	400b      	ands	r3, r1
 8005b28:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6899      	ldr	r1, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005b3a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005b40:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005b46:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005b50:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68d9      	ldr	r1, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005b68:	400b      	ands	r3, r1
 8005b6a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40015804 	.word	0x40015804
 8005bbc:	40015824 	.word	0x40015824
 8005bc0:	40015800 	.word	0x40015800
 8005bc4:	40015c00 	.word	0x40015c00
 8005bc8:	40015c04 	.word	0x40015c04
 8005bcc:	40015c24 	.word	0x40015c24
 8005bd0:	cccccccd 	.word	0xcccccccd
 8005bd4:	ff05c010 	.word	0xff05c010
 8005bd8:	ffff1ff0 	.word	0xffff1ff0
 8005bdc:	fff88000 	.word	0xfff88000

08005be0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <SAI_Disable+0x68>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <SAI_Disable+0x6c>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	0b1b      	lsrs	r3, r3, #12
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c0a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1e5a      	subs	r2, r3, #1
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	72fb      	strb	r3, [r7, #11]
      break;
 8005c2a:	e006      	b.n	8005c3a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e8      	bne.n	8005c0c <SAI_Disable+0x2c>

  return status;
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	95cbec1b 	.word	0x95cbec1b

08005c50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e022      	b.n	8005ca8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fb fc37 	bl	80014e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f814 	bl	8005cb0 <HAL_SD_InitCard>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00a      	b.n	8005ca8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b08e      	sub	sp, #56	; 0x38
 8005cb4:	af04      	add	r7, sp, #16
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005ccc:	2376      	movs	r3, #118	; 0x76
 8005cce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681d      	ldr	r5, [r3, #0]
 8005cd4:	466c      	mov	r4, sp
 8005cd6:	f107 0314 	add.w	r3, r7, #20
 8005cda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ce2:	f107 0308 	add.w	r3, r7, #8
 8005ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f001 ff45 	bl	8007b78 <SDMMC_Init>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e059      	b.n	8005db4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 ff79 	bl	8007c0c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d28:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005d2a:	2002      	movs	r0, #2
 8005d2c:	f7fc fa3e 	bl	80021ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fff3 	bl	8006d1c <SD_PowerON>
 8005d36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e02e      	b.n	8005db4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 ff12 	bl	8006b80 <SD_InitCard>
 8005d5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e01b      	b.n	8005db4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 ffd3 	bl	8007d30 <SDMMC_CmdBlockLength>
 8005d8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00f      	beq.n	8005db2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <HAL_SD_InitCard+0x10c>)
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bdb0      	pop	{r4, r5, r7, pc}
 8005dbc:	004005ff 	.word	0x004005ff

08005dc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08c      	sub	sp, #48	; 0x30
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0c3      	b.n	8005f70 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 80bc 	bne.w	8005f6e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d907      	bls.n	8005e1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e0aa      	b.n	8005f70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	4a4e      	ldr	r2, [pc, #312]	; (8005f78 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	4a4d      	ldr	r2, [pc, #308]	; (8005f7c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005e48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2200      	movs	r2, #0
 8005e50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2200      	movs	r2, #0
 8005e58:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3380      	adds	r3, #128	; 0x80
 8005e80:	4619      	mov	r1, r3
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	025b      	lsls	r3, r3, #9
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	f7fd fa7d 	bl	8003388 <HAL_DMA_Start_IT>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d017      	beq.n	8005ec4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005ea2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a35      	ldr	r2, [pc, #212]	; (8005f80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e055      	b.n	8005f70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0208 	orr.w	r2, r2, #8
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d002      	beq.n	8005ee2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	025b      	lsls	r3, r3, #9
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	025b      	lsls	r3, r3, #9
 8005eec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005eee:	2390      	movs	r3, #144	; 0x90
 8005ef0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f107 0210 	add.w	r2, r7, #16
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fee5 	bl	8007cd8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d90a      	bls.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2282      	movs	r2, #130	; 0x82
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 ff49 	bl	8007db8 <SDMMC_CmdReadMultiBlock>
 8005f26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005f28:	e009      	b.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2281      	movs	r2, #129	; 0x81
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 ff1c 	bl	8007d74 <SDMMC_CmdReadSingleBlock>
 8005f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d012      	beq.n	8005f6a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a0d      	ldr	r2, [pc, #52]	; (8005f80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	431a      	orrs	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e002      	b.n	8005f70 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3730      	adds	r7, #48	; 0x30
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	0800698f 	.word	0x0800698f
 8005f7c:	08006a01 	.word	0x08006a01
 8005f80:	004005ff 	.word	0x004005ff

08005f84 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d107      	bne.n	8005fac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0c6      	b.n	800613a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	f040 80bf 	bne.w	8006138 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d907      	bls.n	8005fde <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e0ad      	b.n	800613a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 021a 	orr.w	r2, r2, #26
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	4a50      	ldr	r2, [pc, #320]	; (8006144 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	4a4f      	ldr	r2, [pc, #316]	; (8006148 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800600c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	2200      	movs	r2, #0
 8006014:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	2b01      	cmp	r3, #1
 800601c:	d002      	beq.n	8006024 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	025b      	lsls	r3, r3, #9
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d90a      	bls.n	8006040 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	22a0      	movs	r2, #160	; 0xa0
 800602e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006036:	4618      	mov	r0, r3
 8006038:	f001 ff02 	bl	8007e40 <SDMMC_CmdWriteMultiBlock>
 800603c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800603e:	e009      	b.n	8006054 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2290      	movs	r2, #144	; 0x90
 8006044:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800604c:	4618      	mov	r0, r3
 800604e:	f001 fed5 	bl	8007dfc <SDMMC_CmdWriteSingleBlock>
 8006052:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d012      	beq.n	8006080 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3b      	ldr	r2, [pc, #236]	; (800614c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	431a      	orrs	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e05c      	b.n	800613a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3380      	adds	r3, #128	; 0x80
 80060c0:	461a      	mov	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	025b      	lsls	r3, r3, #9
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	f7fd f95e 	bl	8003388 <HAL_DMA_Start_IT>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01a      	beq.n	8006108 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 021a 	bic.w	r2, r2, #26
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a19      	ldr	r2, [pc, #100]	; (800614c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e018      	b.n	800613a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	025b      	lsls	r3, r3, #9
 8006112:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006114:	2390      	movs	r3, #144	; 0x90
 8006116:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800611c:	2300      	movs	r3, #0
 800611e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006120:	2301      	movs	r3, #1
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f107 0210 	add.w	r2, r7, #16
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fdd2 	bl	8007cd8 <SDMMC_ConfigData>

      return HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	e000      	b.n	800613a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006138:	2302      	movs	r3, #2
  }
}
 800613a:	4618      	mov	r0, r3
 800613c:	3730      	adds	r7, #48	; 0x30
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	08006965 	.word	0x08006965
 8006148:	08006a01 	.word	0x08006a01
 800614c:	004005ff 	.word	0x004005ff

08006150 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_SD_IRQHandler+0x2e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 ffef 	bl	800715a <SD_Read_IT>
 800617c:	e15a      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 808d 	beq.w	80062a8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b9a      	ldr	r3, [pc, #616]	; (800640c <HAL_SD_IRQHandler+0x2bc>)
 80061a4:	400b      	ands	r3, r1
 80061a6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d039      	beq.n	8006236 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <HAL_SD_IRQHandler+0x86>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d011      	beq.n	80061fa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fe52 	bl	8007e84 <SDMMC_CmdStopTransfer>
 80061e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f921 	bl	800643c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8006202:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_SD_IRQHandler+0xd6>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f002 fac2 	bl	80087b0 <HAL_SD_RxCpltCallback>
 800622c:	e102      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f002 fab4 	bl	800879c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006234:	e0fe      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80f9 	beq.w	8006434 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d011      	beq.n	8006270 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f001 fe17 	bl	8007e84 <SDMMC_CmdStopTransfer>
 8006256:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d008      	beq.n	8006270 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8e6 	bl	800643c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 80dc 	bne.w	8006434 <HAL_SD_IRQHandler+0x2e4>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 80d6 	bne.w	8006434 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0208 	bic.w	r2, r2, #8
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f002 fa7b 	bl	800879c <HAL_SD_TxCpltCallback>
}
 80062a6:	e0c5      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_SD_IRQHandler+0x178>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 ff9b 	bl	80071fc <SD_Write_IT>
 80062c6:	e0b5      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80ae 	beq.w	8006434 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	f043 0202 	orr.w	r2, r3, #2
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f043 0208 	orr.w	r2, r3, #8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	f043 0210 	orr.w	r2, r3, #16
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f240 523a 	movw	r2, #1338	; 0x53a
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006358:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fd90 	bl	8007e84 <SDMMC_CmdStopTransfer>
 8006364:	4602      	mov	r2, r0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f857 	bl	800643c <HAL_SD_ErrorCallback>
}
 800638e:	e051      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006396:	2b00      	cmp	r3, #0
 8006398:	d04c      	beq.n	8006434 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_SD_IRQHandler+0x25e>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d011      	beq.n	80063d2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	4a17      	ldr	r2, [pc, #92]	; (8006410 <HAL_SD_IRQHandler+0x2c0>)
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd f844 	bl	8003448 <HAL_DMA_Abort_IT>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d036      	beq.n	8006434 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fb6a 	bl	8006aa4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80063d0:	e030      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_SD_IRQHandler+0x296>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <HAL_SD_IRQHandler+0x2c4>)
 80063ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fd f828 	bl	8003448 <HAL_DMA_Abort_IT>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01a      	beq.n	8006434 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fb85 	bl	8006b12 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006408:	e014      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
 800640a:	bf00      	nop
 800640c:	ffff3ec5 	.word	0xffff3ec5
 8006410:	08006aa5 	.word	0x08006aa5
 8006414:	08006b13 	.word	0x08006b13
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f002 f9ab 	bl	8008788 <HAL_SD_AbortCallback>
}
 8006432:	e7ff      	b.n	8006434 <HAL_SD_IRQHandler+0x2e4>
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645e:	0f9b      	lsrs	r3, r3, #30
 8006460:	b2da      	uxtb	r2, r3
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800646a:	0e9b      	lsrs	r3, r3, #26
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	b2da      	uxtb	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647c:	0e1b      	lsrs	r3, r3, #24
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	b2da      	uxtb	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648e:	0c1b      	lsrs	r3, r3, #16
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649a:	0a1b      	lsrs	r3, r3, #8
 800649c:	b2da      	uxtb	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b0:	0d1b      	lsrs	r3, r3, #20
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ce:	0bdb      	lsrs	r3, r3, #15
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e0:	0b9b      	lsrs	r3, r3, #14
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f2:	0b5b      	lsrs	r3, r3, #13
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006504:	0b1b      	lsrs	r3, r3, #12
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	b2da      	uxtb	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2200      	movs	r2, #0
 8006516:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	2b00      	cmp	r3, #0
 800651e:	d163      	bne.n	80065e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006524:	009a      	lsls	r2, r3, #2
 8006526:	f640 73fc 	movw	r3, #4092	; 0xffc
 800652a:	4013      	ands	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006530:	0f92      	lsrs	r2, r2, #30
 8006532:	431a      	orrs	r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653c:	0edb      	lsrs	r3, r3, #27
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	b2da      	uxtb	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654e:	0e1b      	lsrs	r3, r3, #24
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	b2da      	uxtb	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006560:	0d5b      	lsrs	r3, r3, #21
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	b2da      	uxtb	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006572:	0c9b      	lsrs	r3, r3, #18
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	b2da      	uxtb	r2, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	0bdb      	lsrs	r3, r3, #15
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	b2da      	uxtb	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	7e1b      	ldrb	r3, [r3, #24]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	3302      	adds	r3, #2
 80065a8:	2201      	movs	r2, #1
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80065b2:	fb03 f202 	mul.w	r2, r3, r2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	7a1b      	ldrb	r3, [r3, #8]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	2201      	movs	r2, #1
 80065c6:	409a      	lsls	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80065d4:	0a52      	lsrs	r2, r2, #9
 80065d6:	fb03 f202 	mul.w	r2, r3, r2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e4:	661a      	str	r2, [r3, #96]	; 0x60
 80065e6:	e031      	b.n	800664c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d11d      	bne.n	800662c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	431a      	orrs	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	3301      	adds	r3, #1
 800660c:	029a      	lsls	r2, r3, #10
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006620:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	661a      	str	r2, [r3, #96]	; 0x60
 800662a:	e00f      	b.n	800664c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a58      	ldr	r2, [pc, #352]	; (8006794 <HAL_SD_GetCardCSD+0x344>)
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e09d      	b.n	8006788 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006650:	0b9b      	lsrs	r3, r3, #14
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	09db      	lsrs	r3, r3, #7
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666a:	b2da      	uxtb	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667a:	b2da      	uxtb	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	0fdb      	lsrs	r3, r3, #31
 8006686:	b2da      	uxtb	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	0f5b      	lsrs	r3, r3, #29
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	b2da      	uxtb	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	0e9b      	lsrs	r3, r3, #26
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	0d9b      	lsrs	r3, r3, #22
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	0d5b      	lsrs	r3, r3, #21
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	0bdb      	lsrs	r3, r3, #15
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	0b9b      	lsrs	r3, r3, #14
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	0b5b      	lsrs	r3, r3, #13
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	0b1b      	lsrs	r3, r3, #12
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006746:	0a9b      	lsrs	r3, r3, #10
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	b2da      	uxtb	r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	b2da      	uxtb	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006776:	b2da      	uxtb	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	004005ff 	.word	0x004005ff

08006798 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b08e      	sub	sp, #56	; 0x38
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2203      	movs	r2, #3
 8006804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680c:	2b03      	cmp	r3, #3
 800680e:	d02e      	beq.n	800686e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d106      	bne.n	8006826 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
 8006824:	e029      	b.n	800687a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800682c:	d10a      	bne.n	8006844 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb2a 	bl	8006e88 <SD_WideBus_Enable>
 8006834:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
 8006842:	e01a      	b.n	800687a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fb67 	bl	8006f1e <SD_WideBus_Disable>
 8006850:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
 800685e:	e00c      	b.n	800687a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
 800686c:	e005      	b.n	800687a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a26      	ldr	r2, [pc, #152]	; (8006920 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006898:	e01f      	b.n	80068da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681d      	ldr	r5, [r3, #0]
 80068c0:	466c      	mov	r4, sp
 80068c2:	f107 0314 	add.w	r3, r7, #20
 80068c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068d4:	4628      	mov	r0, r5
 80068d6:	f001 f94f 	bl	8007b78 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 fa24 	bl	8007d30 <SDMMC_CmdBlockLength>
 80068e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00c      	beq.n	800690a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a0a      	ldr	r2, [pc, #40]	; (8006920 <HAL_SD_ConfigWideBusOperation+0x130>)
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006916:	4618      	mov	r0, r3
 8006918:	3728      	adds	r7, #40	; 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bdb0      	pop	{r4, r5, r7, pc}
 800691e:	bf00      	nop
 8006920:	004005ff 	.word	0x004005ff

08006924 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa7e 	bl	8006e38 <SD_SendStatus>
 800693c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	0a5b      	lsrs	r3, r3, #9
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800695a:	693b      	ldr	r3, [r7, #16]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006980:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	2b82      	cmp	r3, #130	; 0x82
 80069a2:	d111      	bne.n	80069c8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f001 fa6b 	bl	8007e84 <SDMMC_CmdStopTransfer>
 80069ae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fd3a 	bl	800643c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0208 	bic.w	r2, r2, #8
 80069d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fedd 	bl	80087b0 <HAL_SD_RxCpltCallback>
#endif
}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fc fec6 	bl	80037a0 <HAL_DMA_GetError>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d03e      	beq.n	8006a98 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d002      	beq.n	8006a36 <SD_DMAError+0x36>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d12d      	bne.n	8006a92 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <SD_DMAError+0xa0>)
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006a4c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f7ff ff62 	bl	8006924 <HAL_SD_GetCardState>
 8006a60:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b06      	cmp	r3, #6
 8006a66:	d002      	beq.n	8006a6e <SD_DMAError+0x6e>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d10a      	bne.n	8006a84 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fa06 	bl	8007e84 <SDMMC_CmdStopTransfer>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006a92:	6978      	ldr	r0, [r7, #20]
 8006a94:	f7ff fcd2 	bl	800643c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	004005ff 	.word	0x004005ff

08006aa4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f240 523a 	movw	r2, #1338	; 0x53a
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7ff ff31 	bl	8006924 <HAL_SD_GetCardState>
 8006ac2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d002      	beq.n	8006ade <SD_DMATxAbort+0x3a>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d10a      	bne.n	8006af4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 f9ce 	bl	8007e84 <SDMMC_CmdStopTransfer>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	431a      	orrs	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 fe43 	bl	8008788 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b02:	e002      	b.n	8006b0a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fc99 	bl	800643c <HAL_SD_ErrorCallback>
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff fefa 	bl	8006924 <HAL_SD_GetCardState>
 8006b30:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d002      	beq.n	8006b4c <SD_DMARxAbort+0x3a>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b05      	cmp	r3, #5
 8006b4a:	d10a      	bne.n	8006b62 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 f997 	bl	8007e84 <SDMMC_CmdStopTransfer>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 fe0c 	bl	8008788 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b70:	e002      	b.n	8006b78 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fc62 	bl	800643c <HAL_SD_ErrorCallback>
}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b80:	b5b0      	push	{r4, r5, r7, lr}
 8006b82:	b094      	sub	sp, #80	; 0x50
 8006b84:	af04      	add	r7, sp, #16
 8006b86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f849 	bl	8007c28 <SDMMC_GetPowerState>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ba0:	e0b8      	b.n	8006d14 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d02f      	beq.n	8006c0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fa73 	bl	800809a <SDMMC_CmdSendCID>
 8006bb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <SD_InitCard+0x40>
    {
      return errorstate;
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	e0a9      	b.n	8006d14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 f873 	bl	8007cb2 <SDMMC_GetResponse>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 f86a 	bl	8007cb2 <SDMMC_GetResponse>
 8006bde:	4602      	mov	r2, r0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2108      	movs	r1, #8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 f861 	bl	8007cb2 <SDMMC_GetResponse>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	210c      	movs	r1, #12
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f858 	bl	8007cb2 <SDMMC_GetResponse>
 8006c02:	4602      	mov	r2, r0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d00d      	beq.n	8006c2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f107 020e 	add.w	r2, r7, #14
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fa79 	bl	8008114 <SDMMC_CmdSetRelAdd>
 8006c22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <SD_InitCard+0xae>
    {
      return errorstate;
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	e072      	b.n	8006d14 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d036      	beq.n	8006ca4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c36:	89fb      	ldrh	r3, [r7, #14]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f001 fa43 	bl	80080d6 <SDMMC_CmdSendCSD>
 8006c50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5a:	e05b      	b.n	8006d14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 f825 	bl	8007cb2 <SDMMC_GetResponse>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2104      	movs	r1, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 f81c 	bl	8007cb2 <SDMMC_GetResponse>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2108      	movs	r1, #8
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 f813 	bl	8007cb2 <SDMMC_GetResponse>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	210c      	movs	r1, #12
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f80a 	bl	8007cb2 <SDMMC_GetResponse>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 f801 	bl	8007cb2 <SDMMC_GetResponse>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	0d1a      	lsrs	r2, r3, #20
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006cb8:	f107 0310 	add.w	r3, r7, #16
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fbc6 	bl	8006450 <HAL_SD_GetCardCSD>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cce:	e021      	b.n	8006d14 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	2200      	movs	r2, #0
 8006cdc:	461c      	mov	r4, r3
 8006cde:	4615      	mov	r5, r2
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	f001 f8ef 	bl	8007ec8 <SDMMC_CmdSelDesel>
 8006cea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <SD_InitCard+0x176>
  {
    return errorstate;
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	e00e      	b.n	8006d14 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681d      	ldr	r5, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	466c      	mov	r4, sp
 8006cfe:	f103 0210 	add.w	r2, r3, #16
 8006d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d08:	3304      	adds	r3, #4
 8006d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 ff33 	bl	8007b78 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3740      	adds	r7, #64	; 0x40
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bdb0      	pop	{r4, r5, r7, pc}

08006d1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 f8ea 	bl	8007f0e <SDMMC_CmdGoIdleState>
 8006d3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	e072      	b.n	8006e2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 f8fd 	bl	8007f4a <SDMMC_CmdOperCond>
 8006d50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 f8d3 	bl	8007f0e <SDMMC_CmdGoIdleState>
 8006d68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	e05b      	b.n	8006e2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d137      	bne.n	8006df2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 f8fd 	bl	8007f88 <SDMMC_CmdAppCommand>
 8006d8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02d      	beq.n	8006df2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d9a:	e047      	b.n	8006e2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f8f0 	bl	8007f88 <SDMMC_CmdAppCommand>
 8006da8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <SD_PowerON+0x98>
    {
      return errorstate;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	e03b      	b.n	8006e2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	491e      	ldr	r1, [pc, #120]	; (8006e34 <SD_PowerON+0x118>)
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 f906 	bl	8007fcc <SDMMC_CmdAppOperCommand>
 8006dc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dcc:	e02e      	b.n	8006e2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 ff6c 	bl	8007cb2 <SDMMC_GetResponse>
 8006dda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	0fdb      	lsrs	r3, r3, #31
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <SD_PowerON+0xcc>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <SD_PowerON+0xce>
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]

    count++;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d802      	bhi.n	8006e02 <SD_PowerON+0xe6>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0cc      	beq.n	8006d9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d902      	bls.n	8006e12 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e10:	e00c      	b.n	8006e2c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
 8006e22:	e002      	b.n	8006e2a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	c1100000 	.word	0xc1100000

08006e38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e4c:	e018      	b.n	8006e80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	041b      	lsls	r3, r3, #16
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f001 f97b 	bl	8008156 <SDMMC_CmdSendStatus>
 8006e60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	e009      	b.n	8006e80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 ff1d 	bl	8007cb2 <SDMMC_GetResponse>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 ff07 	bl	8007cb2 <SDMMC_GetResponse>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eae:	d102      	bne.n	8006eb6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eb4:	e02f      	b.n	8006f16 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f879 	bl	8006fb4 <SD_FindSCR>
 8006ec2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	e023      	b.n	8006f16 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01c      	beq.n	8006f12 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f001 f84f 	bl	8007f88 <SDMMC_CmdAppCommand>
 8006eea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	e00f      	b.n	8006f16 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2102      	movs	r1, #2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 f889 	bl	8008014 <SDMMC_CmdBusWidth>
 8006f02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	e003      	b.n	8006f16 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e001      	b.n	8006f16 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 febc 	bl	8007cb2 <SDMMC_GetResponse>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f44:	d102      	bne.n	8006f4c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f4a:	e02f      	b.n	8006fac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f4c:	f107 030c 	add.w	r3, r7, #12
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f82e 	bl	8006fb4 <SD_FindSCR>
 8006f58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	e023      	b.n	8006fac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01c      	beq.n	8006fa8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f001 f804 	bl	8007f88 <SDMMC_CmdAppCommand>
 8006f80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	e00f      	b.n	8006fac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 f83e 	bl	8008014 <SDMMC_CmdBusWidth>
 8006f98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	e003      	b.n	8006fac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e001      	b.n	8006fac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b08f      	sub	sp, #60	; 0x3c
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fbe:	f7fb f8e9 	bl	8002194 <HAL_GetTick>
 8006fc2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60bb      	str	r3, [r7, #8]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2108      	movs	r1, #8
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fea8 	bl	8007d30 <SDMMC_CmdBlockLength>
 8006fe0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SD_FindSCR+0x38>
  {
    return errorstate;
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	e0b2      	b.n	8007152 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f000 ffc5 	bl	8007f88 <SDMMC_CmdAppCommand>
 8006ffe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	e0a3      	b.n	8007152 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800700a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800700e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007010:	2308      	movs	r3, #8
 8007012:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007014:	2330      	movs	r3, #48	; 0x30
 8007016:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007018:	2302      	movs	r3, #2
 800701a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800701c:	2300      	movs	r3, #0
 800701e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007020:	2301      	movs	r3, #1
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f107 0210 	add.w	r2, r7, #16
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fe52 	bl	8007cd8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f001 f80d 	bl	8008058 <SDMMC_CmdSendSCR>
 800703e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d02a      	beq.n	800709c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	e083      	b.n	8007152 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00f      	beq.n	8007078 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6819      	ldr	r1, [r3, #0]
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	f107 0208 	add.w	r2, r7, #8
 8007064:	18d4      	adds	r4, r2, r3
 8007066:	4608      	mov	r0, r1
 8007068:	f000 fdb2 	bl	8007bd0 <SDMMC_ReadFIFO>
 800706c:	4603      	mov	r3, r0
 800706e:	6023      	str	r3, [r4, #0]
      index++;
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	3301      	adds	r3, #1
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
 8007076:	e006      	b.n	8007086 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d012      	beq.n	80070ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007086:	f7fb f885 	bl	8002194 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007094:	d102      	bne.n	800709c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007096:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800709a:	e05a      	b.n	8007152 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0cf      	beq.n	800704a <SD_FindSCR+0x96>
 80070aa:	e000      	b.n	80070ae <SD_FindSCR+0xfa>
      break;
 80070ac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2208      	movs	r2, #8
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80070c4:	2308      	movs	r3, #8
 80070c6:	e044      	b.n	8007152 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2202      	movs	r2, #2
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80070de:	2302      	movs	r3, #2
 80070e0:	e037      	b.n	8007152 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2220      	movs	r2, #32
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070f8:	2320      	movs	r3, #32
 80070fa:	e02a      	b.n	8007152 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f240 523a 	movw	r2, #1338	; 0x53a
 8007104:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	061a      	lsls	r2, r3, #24
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007112:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800711c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	601a      	str	r2, [r3, #0]
    scr++;
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	3304      	adds	r3, #4
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	061a      	lsls	r2, r3, #24
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800713a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007144:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	0e1b      	lsrs	r3, r3, #24
 800714a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	373c      	adds	r7, #60	; 0x3c
 8007156:	46bd      	mov	sp, r7
 8007158:	bd90      	pop	{r4, r7, pc}

0800715a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b086      	sub	sp, #24
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d03f      	beq.n	80071f4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e033      	b.n	80071e2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fd26 	bl	8007bd0 <SDMMC_ReadFIFO>
 8007184:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	3b01      	subs	r3, #1
 8007198:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	0c1b      	lsrs	r3, r3, #16
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	0e1b      	lsrs	r3, r3, #24
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3b01      	subs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	3301      	adds	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b07      	cmp	r3, #7
 80071e6:	d9c8      	bls.n	800717a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d043      	beq.n	800729e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e037      	b.n	800728c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	3b01      	subs	r3, #1
 800722c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	60bb      	str	r3, [r7, #8]
      tmp++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3b01      	subs	r3, #1
 8007244:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	041a      	lsls	r2, r3, #16
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4313      	orrs	r3, r2
 8007250:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	3b01      	subs	r3, #1
 800725c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	061a      	lsls	r2, r3, #24
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4313      	orrs	r3, r2
 8007268:	60bb      	str	r3, [r7, #8]
      tmp++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	3b01      	subs	r3, #1
 8007274:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f107 0208 	add.w	r2, r7, #8
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fcb2 	bl	8007bea <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	3301      	adds	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b07      	cmp	r3, #7
 8007290:	d9c4      	bls.n	800721c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800729e:	bf00      	nop
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e040      	b.n	800733a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fa fb25 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2224      	movs	r2, #36	; 0x24
 80072d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f82d 	bl	8007344 <UART_SetConfig>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e022      	b.n	800733a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa85 	bl	800780c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007310:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007320:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0201 	orr.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fb0c 	bl	8007950 <UART_CheckIdleState>
 8007338:	4603      	mov	r3, r0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4ba6      	ldr	r3, [pc, #664]	; (8007608 <UART_SetConfig+0x2c4>)
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	430b      	orrs	r3, r1
 800737a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a94      	ldr	r2, [pc, #592]	; (800760c <UART_SetConfig+0x2c8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d120      	bne.n	8007402 <UART_SetConfig+0xbe>
 80073c0:	4b93      	ldr	r3, [pc, #588]	; (8007610 <UART_SetConfig+0x2cc>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d816      	bhi.n	80073fc <UART_SetConfig+0xb8>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x90>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	080073eb 	.word	0x080073eb
 80073e0:	080073f7 	.word	0x080073f7
 80073e4:	2301      	movs	r3, #1
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e150      	b.n	800768c <UART_SetConfig+0x348>
 80073ea:	2302      	movs	r3, #2
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e14d      	b.n	800768c <UART_SetConfig+0x348>
 80073f0:	2304      	movs	r3, #4
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e14a      	b.n	800768c <UART_SetConfig+0x348>
 80073f6:	2308      	movs	r3, #8
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e147      	b.n	800768c <UART_SetConfig+0x348>
 80073fc:	2310      	movs	r3, #16
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e144      	b.n	800768c <UART_SetConfig+0x348>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a83      	ldr	r2, [pc, #524]	; (8007614 <UART_SetConfig+0x2d0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d132      	bne.n	8007472 <UART_SetConfig+0x12e>
 800740c:	4b80      	ldr	r3, [pc, #512]	; (8007610 <UART_SetConfig+0x2cc>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007412:	f003 030c 	and.w	r3, r3, #12
 8007416:	2b0c      	cmp	r3, #12
 8007418:	d828      	bhi.n	800746c <UART_SetConfig+0x128>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0xdc>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007455 	.word	0x08007455
 8007424:	0800746d 	.word	0x0800746d
 8007428:	0800746d 	.word	0x0800746d
 800742c:	0800746d 	.word	0x0800746d
 8007430:	08007461 	.word	0x08007461
 8007434:	0800746d 	.word	0x0800746d
 8007438:	0800746d 	.word	0x0800746d
 800743c:	0800746d 	.word	0x0800746d
 8007440:	0800745b 	.word	0x0800745b
 8007444:	0800746d 	.word	0x0800746d
 8007448:	0800746d 	.word	0x0800746d
 800744c:	0800746d 	.word	0x0800746d
 8007450:	08007467 	.word	0x08007467
 8007454:	2300      	movs	r3, #0
 8007456:	77fb      	strb	r3, [r7, #31]
 8007458:	e118      	b.n	800768c <UART_SetConfig+0x348>
 800745a:	2302      	movs	r3, #2
 800745c:	77fb      	strb	r3, [r7, #31]
 800745e:	e115      	b.n	800768c <UART_SetConfig+0x348>
 8007460:	2304      	movs	r3, #4
 8007462:	77fb      	strb	r3, [r7, #31]
 8007464:	e112      	b.n	800768c <UART_SetConfig+0x348>
 8007466:	2308      	movs	r3, #8
 8007468:	77fb      	strb	r3, [r7, #31]
 800746a:	e10f      	b.n	800768c <UART_SetConfig+0x348>
 800746c:	2310      	movs	r3, #16
 800746e:	77fb      	strb	r3, [r7, #31]
 8007470:	e10c      	b.n	800768c <UART_SetConfig+0x348>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a68      	ldr	r2, [pc, #416]	; (8007618 <UART_SetConfig+0x2d4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d120      	bne.n	80074be <UART_SetConfig+0x17a>
 800747c:	4b64      	ldr	r3, [pc, #400]	; (8007610 <UART_SetConfig+0x2cc>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007486:	2b30      	cmp	r3, #48	; 0x30
 8007488:	d013      	beq.n	80074b2 <UART_SetConfig+0x16e>
 800748a:	2b30      	cmp	r3, #48	; 0x30
 800748c:	d814      	bhi.n	80074b8 <UART_SetConfig+0x174>
 800748e:	2b20      	cmp	r3, #32
 8007490:	d009      	beq.n	80074a6 <UART_SetConfig+0x162>
 8007492:	2b20      	cmp	r3, #32
 8007494:	d810      	bhi.n	80074b8 <UART_SetConfig+0x174>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UART_SetConfig+0x15c>
 800749a:	2b10      	cmp	r3, #16
 800749c:	d006      	beq.n	80074ac <UART_SetConfig+0x168>
 800749e:	e00b      	b.n	80074b8 <UART_SetConfig+0x174>
 80074a0:	2300      	movs	r3, #0
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e0f2      	b.n	800768c <UART_SetConfig+0x348>
 80074a6:	2302      	movs	r3, #2
 80074a8:	77fb      	strb	r3, [r7, #31]
 80074aa:	e0ef      	b.n	800768c <UART_SetConfig+0x348>
 80074ac:	2304      	movs	r3, #4
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e0ec      	b.n	800768c <UART_SetConfig+0x348>
 80074b2:	2308      	movs	r3, #8
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e0e9      	b.n	800768c <UART_SetConfig+0x348>
 80074b8:	2310      	movs	r3, #16
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e0e6      	b.n	800768c <UART_SetConfig+0x348>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a56      	ldr	r2, [pc, #344]	; (800761c <UART_SetConfig+0x2d8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d120      	bne.n	800750a <UART_SetConfig+0x1c6>
 80074c8:	4b51      	ldr	r3, [pc, #324]	; (8007610 <UART_SetConfig+0x2cc>)
 80074ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074d2:	2bc0      	cmp	r3, #192	; 0xc0
 80074d4:	d013      	beq.n	80074fe <UART_SetConfig+0x1ba>
 80074d6:	2bc0      	cmp	r3, #192	; 0xc0
 80074d8:	d814      	bhi.n	8007504 <UART_SetConfig+0x1c0>
 80074da:	2b80      	cmp	r3, #128	; 0x80
 80074dc:	d009      	beq.n	80074f2 <UART_SetConfig+0x1ae>
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d810      	bhi.n	8007504 <UART_SetConfig+0x1c0>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <UART_SetConfig+0x1a8>
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d006      	beq.n	80074f8 <UART_SetConfig+0x1b4>
 80074ea:	e00b      	b.n	8007504 <UART_SetConfig+0x1c0>
 80074ec:	2300      	movs	r3, #0
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e0cc      	b.n	800768c <UART_SetConfig+0x348>
 80074f2:	2302      	movs	r3, #2
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e0c9      	b.n	800768c <UART_SetConfig+0x348>
 80074f8:	2304      	movs	r3, #4
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e0c6      	b.n	800768c <UART_SetConfig+0x348>
 80074fe:	2308      	movs	r3, #8
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e0c3      	b.n	800768c <UART_SetConfig+0x348>
 8007504:	2310      	movs	r3, #16
 8007506:	77fb      	strb	r3, [r7, #31]
 8007508:	e0c0      	b.n	800768c <UART_SetConfig+0x348>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a44      	ldr	r2, [pc, #272]	; (8007620 <UART_SetConfig+0x2dc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d125      	bne.n	8007560 <UART_SetConfig+0x21c>
 8007514:	4b3e      	ldr	r3, [pc, #248]	; (8007610 <UART_SetConfig+0x2cc>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007522:	d017      	beq.n	8007554 <UART_SetConfig+0x210>
 8007524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007528:	d817      	bhi.n	800755a <UART_SetConfig+0x216>
 800752a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752e:	d00b      	beq.n	8007548 <UART_SetConfig+0x204>
 8007530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007534:	d811      	bhi.n	800755a <UART_SetConfig+0x216>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <UART_SetConfig+0x1fe>
 800753a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753e:	d006      	beq.n	800754e <UART_SetConfig+0x20a>
 8007540:	e00b      	b.n	800755a <UART_SetConfig+0x216>
 8007542:	2300      	movs	r3, #0
 8007544:	77fb      	strb	r3, [r7, #31]
 8007546:	e0a1      	b.n	800768c <UART_SetConfig+0x348>
 8007548:	2302      	movs	r3, #2
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e09e      	b.n	800768c <UART_SetConfig+0x348>
 800754e:	2304      	movs	r3, #4
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e09b      	b.n	800768c <UART_SetConfig+0x348>
 8007554:	2308      	movs	r3, #8
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e098      	b.n	800768c <UART_SetConfig+0x348>
 800755a:	2310      	movs	r3, #16
 800755c:	77fb      	strb	r3, [r7, #31]
 800755e:	e095      	b.n	800768c <UART_SetConfig+0x348>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a2f      	ldr	r2, [pc, #188]	; (8007624 <UART_SetConfig+0x2e0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d125      	bne.n	80075b6 <UART_SetConfig+0x272>
 800756a:	4b29      	ldr	r3, [pc, #164]	; (8007610 <UART_SetConfig+0x2cc>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007578:	d017      	beq.n	80075aa <UART_SetConfig+0x266>
 800757a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800757e:	d817      	bhi.n	80075b0 <UART_SetConfig+0x26c>
 8007580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007584:	d00b      	beq.n	800759e <UART_SetConfig+0x25a>
 8007586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758a:	d811      	bhi.n	80075b0 <UART_SetConfig+0x26c>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <UART_SetConfig+0x254>
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007594:	d006      	beq.n	80075a4 <UART_SetConfig+0x260>
 8007596:	e00b      	b.n	80075b0 <UART_SetConfig+0x26c>
 8007598:	2301      	movs	r3, #1
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e076      	b.n	800768c <UART_SetConfig+0x348>
 800759e:	2302      	movs	r3, #2
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e073      	b.n	800768c <UART_SetConfig+0x348>
 80075a4:	2304      	movs	r3, #4
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e070      	b.n	800768c <UART_SetConfig+0x348>
 80075aa:	2308      	movs	r3, #8
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e06d      	b.n	800768c <UART_SetConfig+0x348>
 80075b0:	2310      	movs	r3, #16
 80075b2:	77fb      	strb	r3, [r7, #31]
 80075b4:	e06a      	b.n	800768c <UART_SetConfig+0x348>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1b      	ldr	r2, [pc, #108]	; (8007628 <UART_SetConfig+0x2e4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d138      	bne.n	8007632 <UART_SetConfig+0x2ee>
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <UART_SetConfig+0x2cc>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80075ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075ce:	d017      	beq.n	8007600 <UART_SetConfig+0x2bc>
 80075d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075d4:	d82a      	bhi.n	800762c <UART_SetConfig+0x2e8>
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	d00b      	beq.n	80075f4 <UART_SetConfig+0x2b0>
 80075dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e0:	d824      	bhi.n	800762c <UART_SetConfig+0x2e8>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <UART_SetConfig+0x2aa>
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d006      	beq.n	80075fa <UART_SetConfig+0x2b6>
 80075ec:	e01e      	b.n	800762c <UART_SetConfig+0x2e8>
 80075ee:	2300      	movs	r3, #0
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e04b      	b.n	800768c <UART_SetConfig+0x348>
 80075f4:	2302      	movs	r3, #2
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e048      	b.n	800768c <UART_SetConfig+0x348>
 80075fa:	2304      	movs	r3, #4
 80075fc:	77fb      	strb	r3, [r7, #31]
 80075fe:	e045      	b.n	800768c <UART_SetConfig+0x348>
 8007600:	2308      	movs	r3, #8
 8007602:	77fb      	strb	r3, [r7, #31]
 8007604:	e042      	b.n	800768c <UART_SetConfig+0x348>
 8007606:	bf00      	nop
 8007608:	efff69f3 	.word	0xefff69f3
 800760c:	40011000 	.word	0x40011000
 8007610:	40023800 	.word	0x40023800
 8007614:	40004400 	.word	0x40004400
 8007618:	40004800 	.word	0x40004800
 800761c:	40004c00 	.word	0x40004c00
 8007620:	40005000 	.word	0x40005000
 8007624:	40011400 	.word	0x40011400
 8007628:	40007800 	.word	0x40007800
 800762c:	2310      	movs	r3, #16
 800762e:	77fb      	strb	r3, [r7, #31]
 8007630:	e02c      	b.n	800768c <UART_SetConfig+0x348>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a72      	ldr	r2, [pc, #456]	; (8007800 <UART_SetConfig+0x4bc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d125      	bne.n	8007688 <UART_SetConfig+0x344>
 800763c:	4b71      	ldr	r3, [pc, #452]	; (8007804 <UART_SetConfig+0x4c0>)
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007646:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800764a:	d017      	beq.n	800767c <UART_SetConfig+0x338>
 800764c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007650:	d817      	bhi.n	8007682 <UART_SetConfig+0x33e>
 8007652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007656:	d00b      	beq.n	8007670 <UART_SetConfig+0x32c>
 8007658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800765c:	d811      	bhi.n	8007682 <UART_SetConfig+0x33e>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <UART_SetConfig+0x326>
 8007662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007666:	d006      	beq.n	8007676 <UART_SetConfig+0x332>
 8007668:	e00b      	b.n	8007682 <UART_SetConfig+0x33e>
 800766a:	2300      	movs	r3, #0
 800766c:	77fb      	strb	r3, [r7, #31]
 800766e:	e00d      	b.n	800768c <UART_SetConfig+0x348>
 8007670:	2302      	movs	r3, #2
 8007672:	77fb      	strb	r3, [r7, #31]
 8007674:	e00a      	b.n	800768c <UART_SetConfig+0x348>
 8007676:	2304      	movs	r3, #4
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e007      	b.n	800768c <UART_SetConfig+0x348>
 800767c:	2308      	movs	r3, #8
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e004      	b.n	800768c <UART_SetConfig+0x348>
 8007682:	2310      	movs	r3, #16
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e001      	b.n	800768c <UART_SetConfig+0x348>
 8007688:	2310      	movs	r3, #16
 800768a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007694:	d15b      	bne.n	800774e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007696:	7ffb      	ldrb	r3, [r7, #31]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d828      	bhi.n	80076ee <UART_SetConfig+0x3aa>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0x360>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076d9 	.word	0x080076d9
 80076b0:	080076ef 	.word	0x080076ef
 80076b4:	080076df 	.word	0x080076df
 80076b8:	080076ef 	.word	0x080076ef
 80076bc:	080076ef 	.word	0x080076ef
 80076c0:	080076ef 	.word	0x080076ef
 80076c4:	080076e7 	.word	0x080076e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c8:	f7fd f808 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 80076cc:	61b8      	str	r0, [r7, #24]
        break;
 80076ce:	e013      	b.n	80076f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d0:	f7fd f818 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 80076d4:	61b8      	str	r0, [r7, #24]
        break;
 80076d6:	e00f      	b.n	80076f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d8:	4b4b      	ldr	r3, [pc, #300]	; (8007808 <UART_SetConfig+0x4c4>)
 80076da:	61bb      	str	r3, [r7, #24]
        break;
 80076dc:	e00c      	b.n	80076f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076de:	f7fc ff2b 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80076e2:	61b8      	str	r0, [r7, #24]
        break;
 80076e4:	e008      	b.n	80076f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	61bb      	str	r3, [r7, #24]
        break;
 80076ec:	e004      	b.n	80076f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	77bb      	strb	r3, [r7, #30]
        break;
 80076f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d074      	beq.n	80077e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	005a      	lsls	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	441a      	add	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d916      	bls.n	8007748 <UART_SetConfig+0x404>
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007720:	d212      	bcs.n	8007748 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f023 030f 	bic.w	r3, r3, #15
 800772a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	085b      	lsrs	r3, r3, #1
 8007730:	b29b      	uxth	r3, r3
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	b29a      	uxth	r2, r3
 8007738:	89fb      	ldrh	r3, [r7, #14]
 800773a:	4313      	orrs	r3, r2
 800773c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	89fa      	ldrh	r2, [r7, #14]
 8007744:	60da      	str	r2, [r3, #12]
 8007746:	e04f      	b.n	80077e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	77bb      	strb	r3, [r7, #30]
 800774c:	e04c      	b.n	80077e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800774e:	7ffb      	ldrb	r3, [r7, #31]
 8007750:	2b08      	cmp	r3, #8
 8007752:	d828      	bhi.n	80077a6 <UART_SetConfig+0x462>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <UART_SetConfig+0x418>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	080077a7 	.word	0x080077a7
 800776c:	08007797 	.word	0x08007797
 8007770:	080077a7 	.word	0x080077a7
 8007774:	080077a7 	.word	0x080077a7
 8007778:	080077a7 	.word	0x080077a7
 800777c:	0800779f 	.word	0x0800779f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fc ffac 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8007784:	61b8      	str	r0, [r7, #24]
        break;
 8007786:	e013      	b.n	80077b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007788:	f7fc ffbc 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 800778c:	61b8      	str	r0, [r7, #24]
        break;
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007790:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <UART_SetConfig+0x4c4>)
 8007792:	61bb      	str	r3, [r7, #24]
        break;
 8007794:	e00c      	b.n	80077b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007796:	f7fc fecf 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 800779a:	61b8      	str	r0, [r7, #24]
        break;
 800779c:	e008      	b.n	80077b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a2:	61bb      	str	r3, [r7, #24]
        break;
 80077a4:	e004      	b.n	80077b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	77bb      	strb	r3, [r7, #30]
        break;
 80077ae:	bf00      	nop
    }

    if (pclk != 0U)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d018      	beq.n	80077e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	085a      	lsrs	r2, r3, #1
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	441a      	add	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b0f      	cmp	r3, #15
 80077ce:	d909      	bls.n	80077e4 <UART_SetConfig+0x4a0>
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d6:	d205      	bcs.n	80077e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	b29a      	uxth	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60da      	str	r2, [r3, #12]
 80077e2:	e001      	b.n	80077e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	40007c00 	.word	0x40007c00
 8007804:	40023800 	.word	0x40023800
 8007808:	00f42400 	.word	0x00f42400

0800780c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01a      	beq.n	8007922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800790a:	d10a      	bne.n	8007922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	605a      	str	r2, [r3, #4]
  }
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af02      	add	r7, sp, #8
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007960:	f7fa fc18 	bl	8002194 <HAL_GetTick>
 8007964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0308 	and.w	r3, r3, #8
 8007970:	2b08      	cmp	r3, #8
 8007972:	d10e      	bne.n	8007992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f831 	bl	80079ea <UART_WaitOnFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e027      	b.n	80079e2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b04      	cmp	r3, #4
 800799e:	d10e      	bne.n	80079be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f81b 	bl	80079ea <UART_WaitOnFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e011      	b.n	80079e2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b09c      	sub	sp, #112	; 0x70
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079fa:	e0a7      	b.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a02:	f000 80a3 	beq.w	8007b4c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a06:	f7fa fbc5 	bl	8002194 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x32>
 8007a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d13f      	bne.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a30:	667b      	str	r3, [r7, #100]	; 0x64
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e6      	bne.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	663b      	str	r3, [r7, #96]	; 0x60
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e068      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d050      	beq.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab8:	d148      	bne.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ac2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e6      	bne.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	613b      	str	r3, [r7, #16]
   return(result);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f023 0301 	bic.w	r3, r3, #1
 8007b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b16:	623a      	str	r2, [r7, #32]
 8007b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	69f9      	ldr	r1, [r7, #28]
 8007b1c:	6a3a      	ldr	r2, [r7, #32]
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e5      	bne.n	8007af6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e010      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69da      	ldr	r2, [r3, #28]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	4013      	ands	r3, r2
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2301      	moveq	r3, #1
 8007b5e:	2300      	movne	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	f43f af48 	beq.w	80079fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3770      	adds	r7, #112	; 0x70
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007b78:	b084      	sub	sp, #16
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	f107 001c 	add.w	r0, r7, #28
 8007b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007b8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007b90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007b92:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007b96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007b9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007b9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007ba2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <SDMMC_Init+0x54>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	b004      	add	sp, #16
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	ffff8100 	.word	0xffff8100

08007bd0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2203      	movs	r2, #3
 8007c18:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0303 	and.w	r3, r3, #3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007c68:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007c6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <SDMMC_SendCommand+0x50>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	fffff000 	.word	0xfffff000

08007c98 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	b2db      	uxtb	r3, r3
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3314      	adds	r3, #20
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
}  
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cfe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007d04:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007d0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0

}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007d3e:	2310      	movs	r3, #16
 8007d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff ff74 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d60:	2110      	movs	r1, #16
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa1a 	bl	800819c <SDMMC_GetCmdResp1>
 8007d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007d82:	2311      	movs	r3, #17
 8007d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d86:	2340      	movs	r3, #64	; 0x40
 8007d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d94:	f107 0308 	add.w	r3, r7, #8
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff ff52 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da4:	2111      	movs	r1, #17
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9f8 	bl	800819c <SDMMC_GetCmdResp1>
 8007dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dae:	69fb      	ldr	r3, [r7, #28]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007dc6:	2312      	movs	r3, #18
 8007dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dca:	2340      	movs	r3, #64	; 0x40
 8007dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dd8:	f107 0308 	add.w	r3, r7, #8
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff ff30 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de8:	2112      	movs	r1, #18
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f9d6 	bl	800819c <SDMMC_GetCmdResp1>
 8007df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007df2:	69fb      	ldr	r3, [r7, #28]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007e0a:	2318      	movs	r3, #24
 8007e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e0e:	2340      	movs	r3, #64	; 0x40
 8007e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e1c:	f107 0308 	add.w	r3, r7, #8
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff0e 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2c:	2118      	movs	r1, #24
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f9b4 	bl	800819c <SDMMC_GetCmdResp1>
 8007e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e36:	69fb      	ldr	r3, [r7, #28]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007e4e:	2319      	movs	r3, #25
 8007e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff feec 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e70:	2119      	movs	r1, #25
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f992 	bl	800819c <SDMMC_GetCmdResp1>
 8007e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007e90:	230c      	movs	r3, #12
 8007e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff fecb 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007eae:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <SDMMC_CmdStopTransfer+0x40>)
 8007eb0:	210c      	movs	r1, #12
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f972 	bl	800819c <SDMMC_GetCmdResp1>
 8007eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eba:	69fb      	ldr	r3, [r7, #28]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	05f5e100 	.word	0x05f5e100

08007ec8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007ed8:	2307      	movs	r3, #7
 8007eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007edc:	2340      	movs	r3, #64	; 0x40
 8007ede:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eea:	f107 0310 	add.w	r3, r7, #16
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff fea7 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efa:	2107      	movs	r1, #7
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f94d 	bl	800819c <SDMMC_GetCmdResp1>
 8007f02:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3728      	adds	r7, #40	; 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b088      	sub	sp, #32
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f2c:	f107 0308 	add.w	r3, r7, #8
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fe86 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb67 	bl	800860c <SDMMC_GetCmdError>
 8007f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f40:	69fb      	ldr	r3, [r7, #28]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3720      	adds	r7, #32
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f58:	2308      	movs	r3, #8
 8007f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f5c:	2340      	movs	r3, #64	; 0x40
 8007f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f6a:	f107 0308 	add.w	r3, r7, #8
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fe67 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fafa 	bl	8008570 <SDMMC_GetCmdResp7>
 8007f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007f96:	2337      	movs	r3, #55	; 0x37
 8007f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f9a:	2340      	movs	r3, #64	; 0x40
 8007f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fa8:	f107 0308 	add.w	r3, r7, #8
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fe48 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fb8:	2137      	movs	r1, #55	; 0x37
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f8ee 	bl	800819c <SDMMC_GetCmdResp1>
 8007fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <SDMMC_CmdAppOperCommand+0x44>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007fde:	2329      	movs	r3, #41	; 0x29
 8007fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe2:	2340      	movs	r3, #64	; 0x40
 8007fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff fe24 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa03 	bl	8008408 <SDMMC_GetCmdResp3>
 8008002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008004:	69fb      	ldr	r3, [r7, #28]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	80100000 	.word	0x80100000

08008014 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008022:	2306      	movs	r3, #6
 8008024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008026:	2340      	movs	r3, #64	; 0x40
 8008028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fe02 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008040:	f241 3288 	movw	r2, #5000	; 0x1388
 8008044:	2106      	movs	r1, #6
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8a8 	bl	800819c <SDMMC_GetCmdResp1>
 800804c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800804e:	69fb      	ldr	r3, [r7, #28]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008064:	2333      	movs	r3, #51	; 0x33
 8008066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008068:	2340      	movs	r3, #64	; 0x40
 800806a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008076:	f107 0308 	add.w	r3, r7, #8
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fde1 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008082:	f241 3288 	movw	r2, #5000	; 0x1388
 8008086:	2133      	movs	r1, #51	; 0x33
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f887 	bl	800819c <SDMMC_GetCmdResp1>
 800808e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008090:	69fb      	ldr	r3, [r7, #28]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b088      	sub	sp, #32
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80080a6:	2302      	movs	r3, #2
 80080a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80080aa:	23c0      	movs	r3, #192	; 0xc0
 80080ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080b8:	f107 0308 	add.w	r3, r7, #8
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fdc0 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f957 	bl	8008378 <SDMMC_GetCmdResp2>
 80080ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080cc:	69fb      	ldr	r3, [r7, #28]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b088      	sub	sp, #32
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80080e4:	2309      	movs	r3, #9
 80080e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80080e8:	23c0      	movs	r3, #192	; 0xc0
 80080ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fda1 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f938 	bl	8008378 <SDMMC_GetCmdResp2>
 8008108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800810a:	69fb      	ldr	r3, [r7, #28]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3720      	adds	r7, #32
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008122:	2303      	movs	r3, #3
 8008124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008126:	2340      	movs	r3, #64	; 0x40
 8008128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800812e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008134:	f107 0308 	add.w	r3, r7, #8
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fd82 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	2103      	movs	r1, #3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f99d 	bl	8008484 <SDMMC_GetCmdResp6>
 800814a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b088      	sub	sp, #32
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008164:	230d      	movs	r3, #13
 8008166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fd61 	bl	8007c44 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008182:	f241 3288 	movw	r2, #5000	; 0x1388
 8008186:	210d      	movs	r1, #13
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f807 	bl	800819c <SDMMC_GetCmdResp1>
 800818e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008190:	69fb      	ldr	r3, [r7, #28]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	460b      	mov	r3, r1
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80081aa:	4b70      	ldr	r3, [pc, #448]	; (800836c <SDMMC_GetCmdResp1+0x1d0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a70      	ldr	r2, [pc, #448]	; (8008370 <SDMMC_GetCmdResp1+0x1d4>)
 80081b0:	fba2 2303 	umull	r2, r3, r2, r3
 80081b4:	0a5a      	lsrs	r2, r3, #9
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	fb02 f303 	mul.w	r3, r2, r3
 80081bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	1e5a      	subs	r2, r3, #1
 80081c2:	61fa      	str	r2, [r7, #28]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081cc:	e0c9      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0ef      	beq.n	80081be <SDMMC_GetCmdResp1+0x22>
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1ea      	bne.n	80081be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2204      	movs	r2, #4
 80081f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081fa:	2304      	movs	r3, #4
 80081fc:	e0b1      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008210:	2301      	movs	r3, #1
 8008212:	e0a6      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	22c5      	movs	r2, #197	; 0xc5
 8008218:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fd3c 	bl	8007c98 <SDMMC_GetCommandResponse>
 8008220:	4603      	mov	r3, r0
 8008222:	461a      	mov	r2, r3
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	4293      	cmp	r3, r2
 8008228:	d001      	beq.n	800822e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800822a:	2301      	movs	r3, #1
 800822c:	e099      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800822e:	2100      	movs	r1, #0
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fd3e 	bl	8007cb2 <SDMMC_GetResponse>
 8008236:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4b4e      	ldr	r3, [pc, #312]	; (8008374 <SDMMC_GetCmdResp1+0x1d8>)
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008242:	2300      	movs	r3, #0
 8008244:	e08d      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	da02      	bge.n	8008252 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800824c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008250:	e087      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	e080      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800826a:	2380      	movs	r3, #128	; 0x80
 800826c:	e079      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800827c:	e071      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800828c:	e069      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800829c:	e061      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80082a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082ac:	e059      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80082b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082bc:	e051      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082cc:	e049      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80082d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082dc:	e041      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80082e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ec:	e039      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80082f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082fc:	e031      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800830c:	e029      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008318:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800831c:	e021      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800832c:	e019      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800833c:	e011      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008348:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800834c:	e009      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008358:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800835c:	e001      	b.n	8008362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800835e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008362:	4618      	mov	r0, r3
 8008364:	3720      	adds	r7, #32
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000000 	.word	0x20000000
 8008370:	10624dd3 	.word	0x10624dd3
 8008374:	fdffe008 	.word	0xfdffe008

08008378 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008380:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <SDMMC_GetCmdResp2+0x88>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <SDMMC_GetCmdResp2+0x8c>)
 8008386:	fba2 2303 	umull	r2, r3, r2, r3
 800838a:	0a5b      	lsrs	r3, r3, #9
 800838c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008390:	fb02 f303 	mul.w	r3, r2, r3
 8008394:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	60fa      	str	r2, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083a4:	e026      	b.n	80083f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0ef      	beq.n	8008396 <SDMMC_GetCmdResp2+0x1e>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ea      	bne.n	8008396 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2204      	movs	r2, #4
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083d2:	2304      	movs	r3, #4
 80083d4:	e00e      	b.n	80083f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e003      	b.n	80083f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	22c5      	movs	r2, #197	; 0xc5
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	20000000 	.word	0x20000000
 8008404:	10624dd3 	.word	0x10624dd3

08008408 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008410:	4b1a      	ldr	r3, [pc, #104]	; (800847c <SDMMC_GetCmdResp3+0x74>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a1a      	ldr	r2, [pc, #104]	; (8008480 <SDMMC_GetCmdResp3+0x78>)
 8008416:	fba2 2303 	umull	r2, r3, r2, r3
 800841a:	0a5b      	lsrs	r3, r3, #9
 800841c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008420:	fb02 f303 	mul.w	r3, r2, r3
 8008424:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	1e5a      	subs	r2, r3, #1
 800842a:	60fa      	str	r2, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008434:	e01b      	b.n	800846e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ef      	beq.n	8008426 <SDMMC_GetCmdResp3+0x1e>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1ea      	bne.n	8008426 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2204      	movs	r2, #4
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008462:	2304      	movs	r3, #4
 8008464:	e003      	b.n	800846e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	22c5      	movs	r2, #197	; 0xc5
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000000 	.word	0x20000000
 8008480:	10624dd3 	.word	0x10624dd3

08008484 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	460b      	mov	r3, r1
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008492:	4b35      	ldr	r3, [pc, #212]	; (8008568 <SDMMC_GetCmdResp6+0xe4>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a35      	ldr	r2, [pc, #212]	; (800856c <SDMMC_GetCmdResp6+0xe8>)
 8008498:	fba2 2303 	umull	r2, r3, r2, r3
 800849c:	0a5b      	lsrs	r3, r3, #9
 800849e:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	1e5a      	subs	r2, r3, #1
 80084ac:	61fa      	str	r2, [r7, #28]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084b6:	e052      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0ef      	beq.n	80084a8 <SDMMC_GetCmdResp6+0x24>
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1ea      	bne.n	80084a8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2204      	movs	r2, #4
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084e4:	2304      	movs	r3, #4
 80084e6:	e03a      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e02f      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fbca 	bl	8007c98 <SDMMC_GetCommandResponse>
 8008504:	4603      	mov	r3, r0
 8008506:	461a      	mov	r2, r3
 8008508:	7afb      	ldrb	r3, [r7, #11]
 800850a:	4293      	cmp	r3, r2
 800850c:	d001      	beq.n	8008512 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800850e:	2301      	movs	r3, #1
 8008510:	e025      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	22c5      	movs	r2, #197	; 0xc5
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008518:	2100      	movs	r1, #0
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fbc9 	bl	8007cb2 <SDMMC_GetResponse>
 8008520:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008536:	2300      	movs	r3, #0
 8008538:	e011      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008548:	e009      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008558:	e001      	b.n	800855e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800855a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000000 	.word	0x20000000
 800856c:	10624dd3 	.word	0x10624dd3

08008570 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008578:	4b22      	ldr	r3, [pc, #136]	; (8008604 <SDMMC_GetCmdResp7+0x94>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <SDMMC_GetCmdResp7+0x98>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	0a5b      	lsrs	r3, r3, #9
 8008584:	f241 3288 	movw	r2, #5000	; 0x1388
 8008588:	fb02 f303 	mul.w	r3, r2, r3
 800858c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1e5a      	subs	r2, r3, #1
 8008592:	60fa      	str	r2, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800859c:	e02c      	b.n	80085f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0ef      	beq.n	800858e <SDMMC_GetCmdResp7+0x1e>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1ea      	bne.n	800858e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2204      	movs	r2, #4
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085ca:	2304      	movs	r3, #4
 80085cc:	e014      	b.n	80085f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e009      	b.n	80085f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2240      	movs	r2, #64	; 0x40
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80085f6:	2300      	movs	r3, #0
  
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20000000 	.word	0x20000000
 8008608:	10624dd3 	.word	0x10624dd3

0800860c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <SDMMC_GetCmdError+0x50>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a11      	ldr	r2, [pc, #68]	; (8008660 <SDMMC_GetCmdError+0x54>)
 800861a:	fba2 2303 	umull	r2, r3, r2, r3
 800861e:	0a5b      	lsrs	r3, r3, #9
 8008620:	f241 3288 	movw	r2, #5000	; 0x1388
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1e5a      	subs	r2, r3, #1
 800862e:	60fa      	str	r2, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008638:	e009      	b.n	800864e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f1      	beq.n	800862a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	22c5      	movs	r2, #197	; 0xc5
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20000000 	.word	0x20000000
 8008660:	10624dd3 	.word	0x10624dd3

08008664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008668:	4904      	ldr	r1, [pc, #16]	; (800867c <MX_FATFS_Init+0x18>)
 800866a:	4805      	ldr	r0, [pc, #20]	; (8008680 <MX_FATFS_Init+0x1c>)
 800866c:	f002 fd0e 	bl	800b08c <FATFS_LinkDriver>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	4b03      	ldr	r3, [pc, #12]	; (8008684 <MX_FATFS_Init+0x20>)
 8008676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008678:	bf00      	nop
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200045f0 	.word	0x200045f0
 8008680:	0800ce94 	.word	0x0800ce94
 8008684:	200045ec 	.word	0x200045ec

08008688 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800868c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800868e:	4618      	mov	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80086a2:	f000 f896 	bl	80087d2 <BSP_SD_IsDetected>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d001      	beq.n	80086b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80086ac:	2302      	movs	r3, #2
 80086ae:	e012      	b.n	80086d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80086b0:	480b      	ldr	r0, [pc, #44]	; (80086e0 <BSP_SD_Init+0x48>)
 80086b2:	f7fd facd 	bl	8005c50 <HAL_SD_Init>
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80086c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086c4:	4806      	ldr	r0, [pc, #24]	; (80086e0 <BSP_SD_Init+0x48>)
 80086c6:	f7fe f893 	bl	80067f0 <HAL_SD_ConfigWideBusOperation>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80086d4:	79fb      	ldrb	r3, [r7, #7]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200043f4 	.word	0x200043f4

080086e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	68f9      	ldr	r1, [r7, #12]
 80086fa:	4806      	ldr	r0, [pc, #24]	; (8008714 <BSP_SD_ReadBlocks_DMA+0x30>)
 80086fc:	f7fd fb60 	bl	8005dc0 <HAL_SD_ReadBlocks_DMA>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200043f4 	.word	0x200043f4

08008718 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	68f9      	ldr	r1, [r7, #12]
 800872e:	4806      	ldr	r0, [pc, #24]	; (8008748 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008730:	f7fd fc28 	bl	8005f84 <HAL_SD_WriteBlocks_DMA>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200043f4 	.word	0x200043f4

0800874c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <BSP_SD_GetCardState+0x1c>)
 8008752:	f7fe f8e7 	bl	8006924 <HAL_SD_GetCardState>
 8008756:	4603      	mov	r3, r0
 8008758:	2b04      	cmp	r3, #4
 800875a:	bf14      	ite	ne
 800875c:	2301      	movne	r3, #1
 800875e:	2300      	moveq	r3, #0
 8008760:	b2db      	uxtb	r3, r3
}
 8008762:	4618      	mov	r0, r3
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200043f4 	.word	0x200043f4

0800876c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4803      	ldr	r0, [pc, #12]	; (8008784 <BSP_SD_GetCardInfo+0x18>)
 8008778:	f7fe f80e 	bl	8006798 <HAL_SD_GetCardInfo>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	200043f4 	.word	0x200043f4

08008788 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008790:	f000 f818 	bl	80087c4 <BSP_SD_AbortCallback>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80087a4:	f000 f9a8 	bl	8008af8 <BSP_SD_WriteCpltCallback>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80087b8:	f000 f9aa 	bl	8008b10 <BSP_SD_ReadCpltCallback>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0

}
 80087c8:	bf00      	nop
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80087d8:	2301      	movs	r3, #1
 80087da:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80087dc:	f000 f80c 	bl	80087f8 <BSP_PlatformIsDetected>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80087e6:	2300      	movs	r3, #0
 80087e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	b2db      	uxtb	r3, r3
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80087fe:	2301      	movs	r3, #1
 8008800:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008806:	4806      	ldr	r0, [pc, #24]	; (8008820 <BSP_PlatformIsDetected+0x28>)
 8008808:	f7fb fa62 	bl	8003cd0 <HAL_GPIO_ReadPin>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008812:	2300      	movs	r3, #0
 8008814:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008816:	79fb      	ldrb	r3, [r7, #7]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40020400 	.word	0x40020400

08008824 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800882c:	f7f9 fcb2 	bl	8002194 <HAL_GetTick>
 8008830:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008832:	e006      	b.n	8008842 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008834:	f7ff ff8a 	bl	800874c <BSP_SD_GetCardState>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800883e:	2300      	movs	r3, #0
 8008840:	e009      	b.n	8008856 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008842:	f7f9 fca7 	bl	8002194 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	429a      	cmp	r2, r3
 8008850:	d8f0      	bhi.n	8008834 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <SD_CheckStatus+0x38>)
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008870:	f7ff ff6c 	bl	800874c <BSP_SD_GetCardState>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d107      	bne.n	800888a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800887a:	4b07      	ldr	r3, [pc, #28]	; (8008898 <SD_CheckStatus+0x38>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	4b04      	ldr	r3, [pc, #16]	; (8008898 <SD_CheckStatus+0x38>)
 8008888:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800888a:	4b03      	ldr	r3, [pc, #12]	; (8008898 <SD_CheckStatus+0x38>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b2db      	uxtb	r3, r3
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000009 	.word	0x20000009

0800889c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80088a6:	f7ff fef7 	bl	8008698 <BSP_SD_Init>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d107      	bne.n	80088c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff ffd4 	bl	8008860 <SD_CheckStatus>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <SD_initialize+0x34>)
 80088be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <SD_initialize+0x34>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b2db      	uxtb	r3, r3
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000009 	.word	0x20000009

080088d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ffbd 	bl	8008860 <SD_CheckStatus>
 80088e6:	4603      	mov	r3, r0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008904:	f247 5030 	movw	r0, #30000	; 0x7530
 8008908:	f7ff ff8c 	bl	8008824 <SD_CheckStatusWithTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	da01      	bge.n	8008916 <SD_read+0x26>
  {
    return res;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	e03b      	b.n	800898e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	68b8      	ldr	r0, [r7, #8]
 800891c:	f7ff fee2 	bl	80086e4 <BSP_SD_ReadBlocks_DMA>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d132      	bne.n	800898c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008926:	4b1c      	ldr	r3, [pc, #112]	; (8008998 <SD_read+0xa8>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800892c:	f7f9 fc32 	bl	8002194 <HAL_GetTick>
 8008930:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008932:	bf00      	nop
 8008934:	4b18      	ldr	r3, [pc, #96]	; (8008998 <SD_read+0xa8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d108      	bne.n	800894e <SD_read+0x5e>
 800893c:	f7f9 fc2a 	bl	8002194 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	f247 522f 	movw	r2, #29999	; 0x752f
 800894a:	4293      	cmp	r3, r2
 800894c:	d9f2      	bls.n	8008934 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <SD_read+0xa8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]
 800895a:	e017      	b.n	800898c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800895c:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <SD_read+0xa8>)
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008962:	f7f9 fc17 	bl	8002194 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008968:	e007      	b.n	800897a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800896a:	f7ff feef 	bl	800874c <BSP_SD_GetCardState>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <SD_read+0x8a>
          {
            res = RES_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008978:	e008      	b.n	800898c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800897a:	f7f9 fc0b 	bl	8002194 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	f247 522f 	movw	r2, #29999	; 0x752f
 8008988:	4293      	cmp	r3, r2
 800898a:	d9ee      	bls.n	800896a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20004a58 	.word	0x20004a58

0800899c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80089b0:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <SD_write+0xa8>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80089b6:	f247 5030 	movw	r0, #30000	; 0x7530
 80089ba:	f7ff ff33 	bl	8008824 <SD_CheckStatusWithTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	da01      	bge.n	80089c8 <SD_write+0x2c>
  {
    return res;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	e038      	b.n	8008a3a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	68b8      	ldr	r0, [r7, #8]
 80089ce:	f7ff fea3 	bl	8008718 <BSP_SD_WriteBlocks_DMA>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d12f      	bne.n	8008a38 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80089d8:	f7f9 fbdc 	bl	8002194 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80089de:	bf00      	nop
 80089e0:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <SD_write+0xa8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d108      	bne.n	80089fa <SD_write+0x5e>
 80089e8:	f7f9 fbd4 	bl	8002194 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d9f2      	bls.n	80089e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80089fa:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <SD_write+0xa8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
 8008a06:	e017      	b.n	8008a38 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008a08:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <SD_write+0xa8>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008a0e:	f7f9 fbc1 	bl	8002194 <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008a14:	e007      	b.n	8008a26 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008a16:	f7ff fe99 	bl	800874c <BSP_SD_GetCardState>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <SD_write+0x8a>
          {
            res = RES_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75fb      	strb	r3, [r7, #23]
            break;
 8008a24:	e008      	b.n	8008a38 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008a26:	f7f9 fbb5 	bl	8002194 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f247 522f 	movw	r2, #29999	; 0x752f
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d9ee      	bls.n	8008a16 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20004a54 	.word	0x20004a54

08008a48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08c      	sub	sp, #48	; 0x30
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	603a      	str	r2, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
 8008a54:	460b      	mov	r3, r1
 8008a56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a5e:	4b25      	ldr	r3, [pc, #148]	; (8008af4 <SD_ioctl+0xac>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <SD_ioctl+0x28>
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e03c      	b.n	8008aea <SD_ioctl+0xa2>

  switch (cmd)
 8008a70:	79bb      	ldrb	r3, [r7, #6]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d834      	bhi.n	8008ae0 <SD_ioctl+0x98>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <SD_ioctl+0x34>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a95 	.word	0x08008a95
 8008a84:	08008aad 	.word	0x08008aad
 8008a88:	08008ac7 	.word	0x08008ac7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a92:	e028      	b.n	8008ae6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a94:	f107 030c 	add.w	r3, r7, #12
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff fe67 	bl	800876c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008aaa:	e01c      	b.n	8008ae6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008aac:	f107 030c 	add.w	r3, r7, #12
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fe5b 	bl	800876c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ac4:	e00f      	b.n	8008ae6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ac6:	f107 030c 	add.w	r3, r7, #12
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff fe4e 	bl	800876c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	0a5a      	lsrs	r2, r3, #9
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ade:	e002      	b.n	8008ae6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008ae0:	2304      	movs	r3, #4
 8008ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3730      	adds	r7, #48	; 0x30
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000009 	.word	0x20000009

08008af8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008afc:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <BSP_SD_WriteCpltCallback+0x14>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
}
 8008b02:	bf00      	nop
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	20004a54 	.word	0x20004a54

08008b10 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008b10:	b480      	push	{r7}
 8008b12:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008b14:	4b03      	ldr	r3, [pc, #12]	; (8008b24 <BSP_SD_ReadCpltCallback+0x14>)
 8008b16:	2201      	movs	r2, #1
 8008b18:	601a      	str	r2, [r3, #0]
}
 8008b1a:	bf00      	nop
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	20004a58 	.word	0x20004a58

08008b28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	4a08      	ldr	r2, [pc, #32]	; (8008b58 <disk_status+0x30>)
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	79fa      	ldrb	r2, [r7, #7]
 8008b40:	4905      	ldr	r1, [pc, #20]	; (8008b58 <disk_status+0x30>)
 8008b42:	440a      	add	r2, r1
 8008b44:	7a12      	ldrb	r2, [r2, #8]
 8008b46:	4610      	mov	r0, r2
 8008b48:	4798      	blx	r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20004a84 	.word	0x20004a84

08008b5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <disk_initialize+0x48>)
 8008b6e:	5cd3      	ldrb	r3, [r2, r3]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d111      	bne.n	8008b98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	4a0b      	ldr	r2, [pc, #44]	; (8008ba4 <disk_initialize+0x48>)
 8008b78:	2101      	movs	r1, #1
 8008b7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	4a09      	ldr	r2, [pc, #36]	; (8008ba4 <disk_initialize+0x48>)
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	79fa      	ldrb	r2, [r7, #7]
 8008b8a:	4906      	ldr	r1, [pc, #24]	; (8008ba4 <disk_initialize+0x48>)
 8008b8c:	440a      	add	r2, r1
 8008b8e:	7a12      	ldrb	r2, [r2, #8]
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20004a84 	.word	0x20004a84

08008ba8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008ba8:	b590      	push	{r4, r7, lr}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <disk_read+0x3c>)
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	689c      	ldr	r4, [r3, #8]
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4a07      	ldr	r2, [pc, #28]	; (8008be4 <disk_read+0x3c>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	7a18      	ldrb	r0, [r3, #8]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	47a0      	blx	r4
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd90      	pop	{r4, r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20004a84 	.word	0x20004a84

08008be8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008be8:	b590      	push	{r4, r7, lr}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	4a0a      	ldr	r2, [pc, #40]	; (8008c24 <disk_write+0x3c>)
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	68dc      	ldr	r4, [r3, #12]
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	4a07      	ldr	r2, [pc, #28]	; (8008c24 <disk_write+0x3c>)
 8008c08:	4413      	add	r3, r2
 8008c0a:	7a18      	ldrb	r0, [r3, #8]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	47a0      	blx	r4
 8008c14:	4603      	mov	r3, r0
 8008c16:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20004a84 	.word	0x20004a84

08008c28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	603a      	str	r2, [r7, #0]
 8008c32:	71fb      	strb	r3, [r7, #7]
 8008c34:	460b      	mov	r3, r1
 8008c36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <disk_ioctl+0x38>)
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	79fa      	ldrb	r2, [r7, #7]
 8008c46:	4906      	ldr	r1, [pc, #24]	; (8008c60 <disk_ioctl+0x38>)
 8008c48:	440a      	add	r2, r1
 8008c4a:	7a10      	ldrb	r0, [r2, #8]
 8008c4c:	79b9      	ldrb	r1, [r7, #6]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4798      	blx	r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]
  return res;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20004a84 	.word	0x20004a84

08008c64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c74:	89fb      	ldrh	r3, [r7, #14]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	b21a      	sxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b21b      	sxth	r3, r3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	b21b      	sxth	r3, r3
 8008c84:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c86:	89fb      	ldrh	r3, [r7, #14]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3303      	adds	r3, #3
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	3202      	adds	r2, #2
 8008cac:	7812      	ldrb	r2, [r2, #0]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	3201      	adds	r2, #1
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7812      	ldrb	r2, [r2, #0]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	887a      	ldrh	r2, [r7, #2]
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	887b      	ldrh	r3, [r7, #2]
 8008cf4:	0a1b      	lsrs	r3, r3, #8
 8008cf6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	887a      	ldrh	r2, [r7, #2]
 8008d00:	b2d2      	uxtb	r2, r2
 8008d02:	701a      	strb	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	0a1b      	lsrs	r3, r3, #8
 8008d2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	b2d2      	uxtb	r2, r2
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	0a1b      	lsrs	r3, r3, #8
 8008d4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	b2d2      	uxtb	r2, r2
 8008d5a:	701a      	strb	r2, [r3, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00d      	beq.n	8008d9e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	1c53      	adds	r3, r2, #1
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	1c59      	adds	r1, r3, #1
 8008d8c:	6179      	str	r1, [r7, #20]
 8008d8e:	7812      	ldrb	r2, [r2, #0]
 8008d90:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	607b      	str	r3, [r7, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f1      	bne.n	8008d82 <mem_cpy+0x1a>
	}
}
 8008d9e:	bf00      	nop
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008daa:	b480      	push	{r7}
 8008dac:	b087      	sub	sp, #28
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	617a      	str	r2, [r7, #20]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	607b      	str	r3, [r7, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f3      	bne.n	8008dba <mem_set+0x10>
}
 8008dd2:	bf00      	nop
 8008dd4:	bf00      	nop
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008de0:	b480      	push	{r7}
 8008de2:	b089      	sub	sp, #36	; 0x24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	61fa      	str	r2, [r7, #28]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	4619      	mov	r1, r3
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	61ba      	str	r2, [r7, #24]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	1acb      	subs	r3, r1, r3
 8008e0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <mem_cmp+0x40>
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0eb      	beq.n	8008df8 <mem_cmp+0x18>

	return r;
 8008e20:	697b      	ldr	r3, [r7, #20]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3724      	adds	r7, #36	; 0x24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e38:	e002      	b.n	8008e40 <chk_chr+0x12>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	607b      	str	r3, [r7, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <chk_chr+0x26>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d1f2      	bne.n	8008e3a <chk_chr+0xc>
	return *str;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	781b      	ldrb	r3, [r3, #0]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e029      	b.n	8008ecc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008e78:	4a27      	ldr	r2, [pc, #156]	; (8008f18 <chk_lock+0xb4>)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	4413      	add	r3, r2
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01d      	beq.n	8008ec2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e86:	4a24      	ldr	r2, [pc, #144]	; (8008f18 <chk_lock+0xb4>)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	4413      	add	r3, r2
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d116      	bne.n	8008ec6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e98:	4a1f      	ldr	r2, [pc, #124]	; (8008f18 <chk_lock+0xb4>)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d10c      	bne.n	8008ec6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008eac:	4a1a      	ldr	r2, [pc, #104]	; (8008f18 <chk_lock+0xb4>)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d102      	bne.n	8008ec6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ec0:	e007      	b.n	8008ed2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d9d2      	bls.n	8008e78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d109      	bne.n	8008eec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <chk_lock+0x80>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d101      	bne.n	8008ee8 <chk_lock+0x84>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e010      	b.n	8008f0a <chk_lock+0xa6>
 8008ee8:	2312      	movs	r3, #18
 8008eea:	e00e      	b.n	8008f0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d108      	bne.n	8008f04 <chk_lock+0xa0>
 8008ef2:	4a09      	ldr	r2, [pc, #36]	; (8008f18 <chk_lock+0xb4>)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	4413      	add	r3, r2
 8008efa:	330c      	adds	r3, #12
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f02:	d101      	bne.n	8008f08 <chk_lock+0xa4>
 8008f04:	2310      	movs	r3, #16
 8008f06:	e000      	b.n	8008f0a <chk_lock+0xa6>
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20004a64 	.word	0x20004a64

08008f1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f22:	2300      	movs	r3, #0
 8008f24:	607b      	str	r3, [r7, #4]
 8008f26:	e002      	b.n	8008f2e <enq_lock+0x12>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	607b      	str	r3, [r7, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d806      	bhi.n	8008f42 <enq_lock+0x26>
 8008f34:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <enq_lock+0x40>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	4413      	add	r3, r2
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f2      	bne.n	8008f28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	bf14      	ite	ne
 8008f48:	2301      	movne	r3, #1
 8008f4a:	2300      	moveq	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20004a64 	.word	0x20004a64

08008f60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e01f      	b.n	8008fb0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f70:	4a41      	ldr	r2, [pc, #260]	; (8009078 <inc_lock+0x118>)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	011b      	lsls	r3, r3, #4
 8008f76:	4413      	add	r3, r2
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d113      	bne.n	8008faa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f82:	4a3d      	ldr	r2, [pc, #244]	; (8009078 <inc_lock+0x118>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	4413      	add	r3, r2
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d109      	bne.n	8008faa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f96:	4a38      	ldr	r2, [pc, #224]	; (8009078 <inc_lock+0x118>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	4413      	add	r3, r2
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d006      	beq.n	8008fb8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d9dc      	bls.n	8008f70 <inc_lock+0x10>
 8008fb6:	e000      	b.n	8008fba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008fb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d132      	bne.n	8009026 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	e002      	b.n	8008fcc <inc_lock+0x6c>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d806      	bhi.n	8008fe0 <inc_lock+0x80>
 8008fd2:	4a29      	ldr	r2, [pc, #164]	; (8009078 <inc_lock+0x118>)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	4413      	add	r3, r2
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f2      	bne.n	8008fc6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d101      	bne.n	8008fea <inc_lock+0x8a>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e040      	b.n	800906c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4922      	ldr	r1, [pc, #136]	; (8009078 <inc_lock+0x118>)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	440b      	add	r3, r1
 8008ff6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	491e      	ldr	r1, [pc, #120]	; (8009078 <inc_lock+0x118>)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	011b      	lsls	r3, r3, #4
 8009002:	440b      	add	r3, r1
 8009004:	3304      	adds	r3, #4
 8009006:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695a      	ldr	r2, [r3, #20]
 800900c:	491a      	ldr	r1, [pc, #104]	; (8009078 <inc_lock+0x118>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	440b      	add	r3, r1
 8009014:	3308      	adds	r3, #8
 8009016:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009018:	4a17      	ldr	r2, [pc, #92]	; (8009078 <inc_lock+0x118>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	4413      	add	r3, r2
 8009020:	330c      	adds	r3, #12
 8009022:	2200      	movs	r2, #0
 8009024:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <inc_lock+0xe0>
 800902c:	4a12      	ldr	r2, [pc, #72]	; (8009078 <inc_lock+0x118>)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	4413      	add	r3, r2
 8009034:	330c      	adds	r3, #12
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <inc_lock+0xe0>
 800903c:	2300      	movs	r3, #0
 800903e:	e015      	b.n	800906c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d108      	bne.n	8009058 <inc_lock+0xf8>
 8009046:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <inc_lock+0x118>)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	4413      	add	r3, r2
 800904e:	330c      	adds	r3, #12
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	3301      	adds	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	e001      	b.n	800905c <inc_lock+0xfc>
 8009058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800905c:	4906      	ldr	r1, [pc, #24]	; (8009078 <inc_lock+0x118>)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	440b      	add	r3, r1
 8009064:	330c      	adds	r3, #12
 8009066:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20004a64 	.word	0x20004a64

0800907c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3b01      	subs	r3, #1
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d825      	bhi.n	80090dc <dec_lock+0x60>
		n = Files[i].ctr;
 8009090:	4a17      	ldr	r2, [pc, #92]	; (80090f0 <dec_lock+0x74>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	4413      	add	r3, r2
 8009098:	330c      	adds	r3, #12
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800909e:	89fb      	ldrh	r3, [r7, #14]
 80090a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a4:	d101      	bne.n	80090aa <dec_lock+0x2e>
 80090a6:	2300      	movs	r3, #0
 80090a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80090aa:	89fb      	ldrh	r3, [r7, #14]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <dec_lock+0x3a>
 80090b0:	89fb      	ldrh	r3, [r7, #14]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090b6:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <dec_lock+0x74>)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	4413      	add	r3, r2
 80090be:	330c      	adds	r3, #12
 80090c0:	89fa      	ldrh	r2, [r7, #14]
 80090c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090c4:	89fb      	ldrh	r3, [r7, #14]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d105      	bne.n	80090d6 <dec_lock+0x5a>
 80090ca:	4a09      	ldr	r2, [pc, #36]	; (80090f0 <dec_lock+0x74>)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	4413      	add	r3, r2
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	737b      	strb	r3, [r7, #13]
 80090da:	e001      	b.n	80090e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090dc:	2302      	movs	r3, #2
 80090de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20004a64 	.word	0x20004a64

080090f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	e010      	b.n	8009124 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009102:	4a0d      	ldr	r2, [pc, #52]	; (8009138 <clear_lock+0x44>)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	4413      	add	r3, r2
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d105      	bne.n	800911e <clear_lock+0x2a>
 8009112:	4a09      	ldr	r2, [pc, #36]	; (8009138 <clear_lock+0x44>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	4413      	add	r3, r2
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d9eb      	bls.n	8009102 <clear_lock+0xe>
	}
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20004a64 	.word	0x20004a64

0800913c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	78db      	ldrb	r3, [r3, #3]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d034      	beq.n	80091ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7858      	ldrb	r0, [r3, #1]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009160:	2301      	movs	r3, #1
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	f7ff fd40 	bl	8008be8 <disk_write>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <sync_window+0x38>
			res = FR_DISK_ERR;
 800916e:	2301      	movs	r3, #1
 8009170:	73fb      	strb	r3, [r7, #15]
 8009172:	e022      	b.n	80091ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	1ad2      	subs	r2, r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	429a      	cmp	r2, r3
 8009188:	d217      	bcs.n	80091ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	789b      	ldrb	r3, [r3, #2]
 800918e:	613b      	str	r3, [r7, #16]
 8009190:	e010      	b.n	80091b4 <sync_window+0x78>
					wsect += fs->fsize;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7858      	ldrb	r0, [r3, #1]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091a6:	2301      	movs	r3, #1
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	f7ff fd1d 	bl	8008be8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	613b      	str	r3, [r7, #16]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d8eb      	bhi.n	8009192 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d01b      	beq.n	8009214 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ffad 	bl	800913c <sync_window>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d113      	bne.n	8009214 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7858      	ldrb	r0, [r3, #1]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091f6:	2301      	movs	r3, #1
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	f7ff fcd5 	bl	8008ba8 <disk_read>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009208:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800920a:	2301      	movs	r3, #1
 800920c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ff87 	bl	800913c <sync_window>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d158      	bne.n	80092ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b03      	cmp	r3, #3
 800923e:	d148      	bne.n	80092d2 <sync_fs+0xb2>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	791b      	ldrb	r3, [r3, #4]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d144      	bne.n	80092d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3330      	adds	r3, #48	; 0x30
 800924c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009250:	2100      	movs	r1, #0
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fda9 	bl	8008daa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3330      	adds	r3, #48	; 0x30
 800925c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009260:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fd38 	bl	8008cda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3330      	adds	r3, #48	; 0x30
 800926e:	4921      	ldr	r1, [pc, #132]	; (80092f4 <sync_fs+0xd4>)
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fd4d 	bl	8008d10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3330      	adds	r3, #48	; 0x30
 800927a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800927e:	491e      	ldr	r1, [pc, #120]	; (80092f8 <sync_fs+0xd8>)
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fd45 	bl	8008d10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3330      	adds	r3, #48	; 0x30
 800928a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7ff fd3b 	bl	8008d10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3330      	adds	r3, #48	; 0x30
 800929e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f7ff fd31 	bl	8008d10 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	7858      	ldrb	r0, [r3, #1]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	2301      	movs	r3, #1
 80092c8:	f7ff fc8e 	bl	8008be8 <disk_write>
			fs->fsi_flag = 0;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	2200      	movs	r2, #0
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fca4 	bl	8008c28 <disk_ioctl>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <sync_fs+0xca>
 80092e6:	2301      	movs	r3, #1
 80092e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	41615252 	.word	0x41615252
 80092f8:	61417272 	.word	0x61417272

080092fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	3b02      	subs	r3, #2
 800930a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	3b02      	subs	r3, #2
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	429a      	cmp	r2, r3
 8009316:	d301      	bcc.n	800931c <clust2sect+0x20>
 8009318:	2300      	movs	r3, #0
 800931a:	e008      	b.n	800932e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	895b      	ldrh	r3, [r3, #10]
 8009320:	461a      	mov	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	fb03 f202 	mul.w	r2, r3, r2
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	4413      	add	r3, r2
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d904      	bls.n	800935a <get_fat+0x20>
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d302      	bcc.n	8009360 <get_fat+0x26>
		val = 1;	/* Internal error */
 800935a:	2301      	movs	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	e08f      	b.n	8009480 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009364:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b03      	cmp	r3, #3
 800936c:	d062      	beq.n	8009434 <get_fat+0xfa>
 800936e:	2b03      	cmp	r3, #3
 8009370:	dc7c      	bgt.n	800946c <get_fat+0x132>
 8009372:	2b01      	cmp	r3, #1
 8009374:	d002      	beq.n	800937c <get_fat+0x42>
 8009376:	2b02      	cmp	r3, #2
 8009378:	d042      	beq.n	8009400 <get_fat+0xc6>
 800937a:	e077      	b.n	800946c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6a1a      	ldr	r2, [r3, #32]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	0a5b      	lsrs	r3, r3, #9
 8009392:	4413      	add	r3, r2
 8009394:	4619      	mov	r1, r3
 8009396:	6938      	ldr	r0, [r7, #16]
 8009398:	f7ff ff14 	bl	80091c4 <move_window>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d167      	bne.n	8009472 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	60fa      	str	r2, [r7, #12]
 80093a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	4413      	add	r3, r2
 80093b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6a1a      	ldr	r2, [r3, #32]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	0a5b      	lsrs	r3, r3, #9
 80093be:	4413      	add	r3, r2
 80093c0:	4619      	mov	r1, r3
 80093c2:	6938      	ldr	r0, [r7, #16]
 80093c4:	f7ff fefe 	bl	80091c4 <move_window>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d153      	bne.n	8009476 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4413      	add	r3, r2
 80093d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	461a      	mov	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <get_fat+0xbc>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	091b      	lsrs	r3, r3, #4
 80093f4:	e002      	b.n	80093fc <get_fat+0xc2>
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093fc:	617b      	str	r3, [r7, #20]
			break;
 80093fe:	e03f      	b.n	8009480 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6a1a      	ldr	r2, [r3, #32]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	4413      	add	r3, r2
 800940a:	4619      	mov	r1, r3
 800940c:	6938      	ldr	r0, [r7, #16]
 800940e:	f7ff fed9 	bl	80091c4 <move_window>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d130      	bne.n	800947a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009426:	4413      	add	r3, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fc1b 	bl	8008c64 <ld_word>
 800942e:	4603      	mov	r3, r0
 8009430:	617b      	str	r3, [r7, #20]
			break;
 8009432:	e025      	b.n	8009480 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6a1a      	ldr	r2, [r3, #32]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	09db      	lsrs	r3, r3, #7
 800943c:	4413      	add	r3, r2
 800943e:	4619      	mov	r1, r3
 8009440:	6938      	ldr	r0, [r7, #16]
 8009442:	f7ff febf 	bl	80091c4 <move_window>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d118      	bne.n	800947e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800945a:	4413      	add	r3, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff fc19 	bl	8008c94 <ld_dword>
 8009462:	4603      	mov	r3, r0
 8009464:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009468:	617b      	str	r3, [r7, #20]
			break;
 800946a:	e009      	b.n	8009480 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800946c:	2301      	movs	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e006      	b.n	8009480 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009472:	bf00      	nop
 8009474:	e004      	b.n	8009480 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009476:	bf00      	nop
 8009478:	e002      	b.n	8009480 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800947e:	bf00      	nop
		}
	}

	return val;
 8009480:	697b      	ldr	r3, [r7, #20]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800948a:	b590      	push	{r4, r7, lr}
 800948c:	b089      	sub	sp, #36	; 0x24
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009496:	2302      	movs	r3, #2
 8009498:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b01      	cmp	r3, #1
 800949e:	f240 80d2 	bls.w	8009646 <put_fat+0x1bc>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	f080 80cc 	bcs.w	8009646 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	f000 8096 	beq.w	80095e4 <put_fat+0x15a>
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	f300 80cd 	bgt.w	8009658 <put_fat+0x1ce>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d002      	beq.n	80094c8 <put_fat+0x3e>
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d06e      	beq.n	80095a4 <put_fat+0x11a>
 80094c6:	e0c7      	b.n	8009658 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	4413      	add	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	0a5b      	lsrs	r3, r3, #9
 80094de:	4413      	add	r3, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff fe6e 	bl	80091c4 <move_window>
 80094e8:	4603      	mov	r3, r0
 80094ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094ec:	7ffb      	ldrb	r3, [r7, #31]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f040 80ab 	bne.w	800964a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	1c59      	adds	r1, r3, #1
 80094fe:	61b9      	str	r1, [r7, #24]
 8009500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009504:	4413      	add	r3, r2
 8009506:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00d      	beq.n	800952e <put_fat+0xa4>
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	b25b      	sxtb	r3, r3
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	b25a      	sxtb	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	b25b      	sxtb	r3, r3
 8009526:	4313      	orrs	r3, r2
 8009528:	b25b      	sxtb	r3, r3
 800952a:	b2db      	uxtb	r3, r3
 800952c:	e001      	b.n	8009532 <put_fat+0xa8>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	0a5b      	lsrs	r3, r3, #9
 8009544:	4413      	add	r3, r2
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fe3b 	bl	80091c4 <move_window>
 800954e:	4603      	mov	r3, r0
 8009550:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009552:	7ffb      	ldrb	r3, [r7, #31]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d17a      	bne.n	800964e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009564:	4413      	add	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <put_fat+0xf0>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	091b      	lsrs	r3, r3, #4
 8009576:	b2db      	uxtb	r3, r3
 8009578:	e00e      	b.n	8009598 <put_fat+0x10e>
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	b25b      	sxtb	r3, r3
 8009580:	f023 030f 	bic.w	r3, r3, #15
 8009584:	b25a      	sxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	0a1b      	lsrs	r3, r3, #8
 800958a:	b25b      	sxtb	r3, r3
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	b25b      	sxtb	r3, r3
 8009592:	4313      	orrs	r3, r2
 8009594:	b25b      	sxtb	r3, r3
 8009596:	b2db      	uxtb	r3, r3
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2201      	movs	r2, #1
 80095a0:	70da      	strb	r2, [r3, #3]
			break;
 80095a2:	e059      	b.n	8009658 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1a      	ldr	r2, [r3, #32]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	4413      	add	r3, r2
 80095ae:	4619      	mov	r1, r3
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff fe07 	bl	80091c4 <move_window>
 80095b6:	4603      	mov	r3, r0
 80095b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095ba:	7ffb      	ldrb	r3, [r7, #31]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d148      	bne.n	8009652 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095ce:	4413      	add	r3, r2
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	b292      	uxth	r2, r2
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fb7f 	bl	8008cda <st_word>
			fs->wflag = 1;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	70da      	strb	r2, [r3, #3]
			break;
 80095e2:	e039      	b.n	8009658 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a1a      	ldr	r2, [r3, #32]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	09db      	lsrs	r3, r3, #7
 80095ec:	4413      	add	r3, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff fde7 	bl	80091c4 <move_window>
 80095f6:	4603      	mov	r3, r0
 80095f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095fa:	7ffb      	ldrb	r3, [r7, #31]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d12a      	bne.n	8009656 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009614:	4413      	add	r3, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff fb3c 	bl	8008c94 <ld_dword>
 800961c:	4603      	mov	r3, r0
 800961e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009622:	4323      	orrs	r3, r4
 8009624:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009634:	4413      	add	r3, r2
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff fb69 	bl	8008d10 <st_dword>
			fs->wflag = 1;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	70da      	strb	r2, [r3, #3]
			break;
 8009644:	e008      	b.n	8009658 <put_fat+0x1ce>
		}
	}
 8009646:	bf00      	nop
 8009648:	e006      	b.n	8009658 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800964a:	bf00      	nop
 800964c:	e004      	b.n	8009658 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800964e:	bf00      	nop
 8009650:	e002      	b.n	8009658 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009652:	bf00      	nop
 8009654:	e000      	b.n	8009658 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009656:	bf00      	nop
	return res;
 8009658:	7ffb      	ldrb	r3, [r7, #31]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3724      	adds	r7, #36	; 0x24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd90      	pop	{r4, r7, pc}

08009662 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b088      	sub	sp, #32
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d904      	bls.n	8009688 <remove_chain+0x26>
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	429a      	cmp	r2, r3
 8009686:	d301      	bcc.n	800968c <remove_chain+0x2a>
 8009688:	2302      	movs	r3, #2
 800968a:	e04b      	b.n	8009724 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00c      	beq.n	80096ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	69b8      	ldr	r0, [r7, #24]
 800969a:	f7ff fef6 	bl	800948a <put_fat>
 800969e:	4603      	mov	r3, r0
 80096a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80096a2:	7ffb      	ldrb	r3, [r7, #31]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <remove_chain+0x4a>
 80096a8:	7ffb      	ldrb	r3, [r7, #31]
 80096aa:	e03b      	b.n	8009724 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff fe43 	bl	800933a <get_fat>
 80096b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d031      	beq.n	8009720 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d101      	bne.n	80096c6 <remove_chain+0x64>
 80096c2:	2302      	movs	r3, #2
 80096c4:	e02e      	b.n	8009724 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096cc:	d101      	bne.n	80096d2 <remove_chain+0x70>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e028      	b.n	8009724 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80096d2:	2200      	movs	r2, #0
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	69b8      	ldr	r0, [r7, #24]
 80096d8:	f7ff fed7 	bl	800948a <put_fat>
 80096dc:	4603      	mov	r3, r0
 80096de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80096e0:	7ffb      	ldrb	r3, [r7, #31]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <remove_chain+0x88>
 80096e6:	7ffb      	ldrb	r3, [r7, #31]
 80096e8:	e01c      	b.n	8009724 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	3b02      	subs	r3, #2
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d20b      	bcs.n	8009710 <remove_chain+0xae>
			fs->free_clst++;
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	791b      	ldrb	r3, [r3, #4]
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	b2da      	uxtb	r2, r3
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	429a      	cmp	r2, r3
 800971c:	d3c6      	bcc.n	80096ac <remove_chain+0x4a>
 800971e:	e000      	b.n	8009722 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009720:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3720      	adds	r7, #32
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10d      	bne.n	800975e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <create_chain+0x2c>
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	429a      	cmp	r2, r3
 8009756:	d31b      	bcc.n	8009790 <create_chain+0x64>
 8009758:	2301      	movs	r3, #1
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	e018      	b.n	8009790 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fdea 	bl	800933a <get_fat>
 8009766:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d801      	bhi.n	8009772 <create_chain+0x46>
 800976e:	2301      	movs	r3, #1
 8009770:	e070      	b.n	8009854 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009778:	d101      	bne.n	800977e <create_chain+0x52>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	e06a      	b.n	8009854 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	429a      	cmp	r2, r3
 8009786:	d201      	bcs.n	800978c <create_chain+0x60>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	e063      	b.n	8009854 <create_chain+0x128>
		scl = clst;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	3301      	adds	r3, #1
 8009798:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d307      	bcc.n	80097b4 <create_chain+0x88>
				ncl = 2;
 80097a4:	2302      	movs	r3, #2
 80097a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d901      	bls.n	80097b4 <create_chain+0x88>
 80097b0:	2300      	movs	r3, #0
 80097b2:	e04f      	b.n	8009854 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80097b4:	69f9      	ldr	r1, [r7, #28]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fdbf 	bl	800933a <get_fat>
 80097bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00e      	beq.n	80097e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d003      	beq.n	80097d2 <create_chain+0xa6>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d0:	d101      	bne.n	80097d6 <create_chain+0xaa>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	e03e      	b.n	8009854 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d1da      	bne.n	8009794 <create_chain+0x68>
 80097de:	2300      	movs	r3, #0
 80097e0:	e038      	b.n	8009854 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80097e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097e8:	69f9      	ldr	r1, [r7, #28]
 80097ea:	6938      	ldr	r0, [r7, #16]
 80097ec:	f7ff fe4d 	bl	800948a <put_fat>
 80097f0:	4603      	mov	r3, r0
 80097f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d109      	bne.n	800980e <create_chain+0xe2>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d006      	beq.n	800980e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6938      	ldr	r0, [r7, #16]
 8009806:	f7ff fe40 	bl	800948a <put_fat>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d116      	bne.n	8009842 <create_chain+0x116>
		fs->last_clst = ncl;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	3b02      	subs	r3, #2
 8009824:	429a      	cmp	r2, r3
 8009826:	d804      	bhi.n	8009832 <create_chain+0x106>
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	1e5a      	subs	r2, r3, #1
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	791b      	ldrb	r3, [r3, #4]
 8009836:	f043 0301 	orr.w	r3, r3, #1
 800983a:	b2da      	uxtb	r2, r3
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	711a      	strb	r2, [r3, #4]
 8009840:	e007      	b.n	8009852 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d102      	bne.n	800984e <create_chain+0x122>
 8009848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800984c:	e000      	b.n	8009850 <create_chain+0x124>
 800984e:	2301      	movs	r3, #1
 8009850:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009852:	69fb      	ldr	r3, [r7, #28]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3720      	adds	r7, #32
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	3304      	adds	r3, #4
 8009872:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	0a5b      	lsrs	r3, r3, #9
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	8952      	ldrh	r2, [r2, #10]
 800987c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009880:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	1d1a      	adds	r2, r3, #4
 8009886:	613a      	str	r2, [r7, #16]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <clmt_clust+0x3a>
 8009892:	2300      	movs	r3, #0
 8009894:	e010      	b.n	80098b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	429a      	cmp	r2, r3
 800989c:	d307      	bcc.n	80098ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	3304      	adds	r3, #4
 80098aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80098ac:	e7e9      	b.n	8009882 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80098ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	4413      	add	r3, r2
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098da:	d204      	bcs.n	80098e6 <dir_sdi+0x22>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f003 031f 	and.w	r3, r3, #31
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80098e6:	2302      	movs	r3, #2
 80098e8:	e063      	b.n	80099b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <dir_sdi+0x46>
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d902      	bls.n	800990a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10c      	bne.n	800992a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	8912      	ldrh	r2, [r2, #8]
 8009918:	4293      	cmp	r3, r2
 800991a:	d301      	bcc.n	8009920 <dir_sdi+0x5c>
 800991c:	2302      	movs	r3, #2
 800991e:	e048      	b.n	80099b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	61da      	str	r2, [r3, #28]
 8009928:	e029      	b.n	800997e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	895b      	ldrh	r3, [r3, #10]
 800992e:	025b      	lsls	r3, r3, #9
 8009930:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009932:	e019      	b.n	8009968 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6979      	ldr	r1, [r7, #20]
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fcfe 	bl	800933a <get_fat>
 800993e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009946:	d101      	bne.n	800994c <dir_sdi+0x88>
 8009948:	2301      	movs	r3, #1
 800994a:	e032      	b.n	80099b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d904      	bls.n	800995c <dir_sdi+0x98>
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	429a      	cmp	r2, r3
 800995a:	d301      	bcc.n	8009960 <dir_sdi+0x9c>
 800995c:	2302      	movs	r3, #2
 800995e:	e028      	b.n	80099b2 <dir_sdi+0xee>
			ofs -= csz;
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	429a      	cmp	r2, r3
 800996e:	d2e1      	bcs.n	8009934 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009970:	6979      	ldr	r1, [r7, #20]
 8009972:	6938      	ldr	r0, [r7, #16]
 8009974:	f7ff fcc2 	bl	80092fc <clust2sect>
 8009978:	4602      	mov	r2, r0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <dir_sdi+0xcc>
 800998c:	2302      	movs	r3, #2
 800998e:	e010      	b.n	80099b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69da      	ldr	r2, [r3, #28]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	0a5b      	lsrs	r3, r3, #9
 8009998:	441a      	add	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099aa:	441a      	add	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	3320      	adds	r3, #32
 80099d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <dir_next+0x28>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099e0:	d301      	bcc.n	80099e6 <dir_next+0x2c>
 80099e2:	2304      	movs	r3, #4
 80099e4:	e0aa      	b.n	8009b3c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 8098 	bne.w	8009b22 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10b      	bne.n	8009a1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	095b      	lsrs	r3, r3, #5
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	8912      	ldrh	r2, [r2, #8]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	f0c0 8088 	bcc.w	8009b22 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	61da      	str	r2, [r3, #28]
 8009a18:	2304      	movs	r3, #4
 8009a1a:	e08f      	b.n	8009b3c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	0a5b      	lsrs	r3, r3, #9
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	8952      	ldrh	r2, [r2, #10]
 8009a24:	3a01      	subs	r2, #1
 8009a26:	4013      	ands	r3, r2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d17a      	bne.n	8009b22 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7ff fc80 	bl	800933a <get_fat>
 8009a3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d801      	bhi.n	8009a46 <dir_next+0x8c>
 8009a42:	2302      	movs	r3, #2
 8009a44:	e07a      	b.n	8009b3c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a4c:	d101      	bne.n	8009a52 <dir_next+0x98>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e074      	b.n	8009b3c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d358      	bcc.n	8009b0e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	61da      	str	r2, [r3, #28]
 8009a68:	2304      	movs	r3, #4
 8009a6a:	e067      	b.n	8009b3c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7ff fe59 	bl	800972c <create_chain>
 8009a7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <dir_next+0xcc>
 8009a82:	2307      	movs	r3, #7
 8009a84:	e05a      	b.n	8009b3c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <dir_next+0xd6>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e055      	b.n	8009b3c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a96:	d101      	bne.n	8009a9c <dir_next+0xe2>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e04f      	b.n	8009b3c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f7ff fb4d 	bl	800913c <sync_window>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d001      	beq.n	8009aac <dir_next+0xf2>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e047      	b.n	8009b3c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	3330      	adds	r3, #48	; 0x30
 8009ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff f977 	bl	8008daa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009abc:	2300      	movs	r3, #0
 8009abe:	613b      	str	r3, [r7, #16]
 8009ac0:	6979      	ldr	r1, [r7, #20]
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff fc1a 	bl	80092fc <clust2sect>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ace:	e012      	b.n	8009af6 <dir_next+0x13c>
						fs->wflag = 1;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff fb30 	bl	800913c <sync_window>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <dir_next+0x12c>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e02a      	b.n	8009b3c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	895b      	ldrh	r3, [r3, #10]
 8009afa:	461a      	mov	r2, r3
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d3e6      	bcc.n	8009ad0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	1ad2      	subs	r2, r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fbf0 	bl	80092fc <clust2sect>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff feb4 	bl	80098c4 <dir_sdi>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d12b      	bne.n	8009bbe <dir_alloc+0x7a>
		n = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff fb27 	bl	80091c4 <move_window>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d11d      	bne.n	8009bbc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2be5      	cmp	r3, #229	; 0xe5
 8009b88:	d004      	beq.n	8009b94 <dir_alloc+0x50>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d107      	bne.n	8009ba4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	3301      	adds	r3, #1
 8009b98:	613b      	str	r3, [r7, #16]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d102      	bne.n	8009ba8 <dir_alloc+0x64>
 8009ba2:	e00c      	b.n	8009bbe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009ba8:	2101      	movs	r1, #1
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff ff05 	bl	80099ba <dir_next>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d0d7      	beq.n	8009b6a <dir_alloc+0x26>
 8009bba:	e000      	b.n	8009bbe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009bbc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d101      	bne.n	8009bc8 <dir_alloc+0x84>
 8009bc4:	2307      	movs	r3, #7
 8009bc6:	75fb      	strb	r3, [r7, #23]
	return res;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	331a      	adds	r3, #26
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff f83f 	bl	8008c64 <ld_word>
 8009be6:	4603      	mov	r3, r0
 8009be8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d109      	bne.n	8009c06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	3314      	adds	r3, #20
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff f834 	bl	8008c64 <ld_word>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	041b      	lsls	r3, r3, #16
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009c06:	68fb      	ldr	r3, [r7, #12]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	331a      	adds	r3, #26
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	b292      	uxth	r2, r2
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff f857 	bl	8008cda <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d109      	bne.n	8009c48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f103 0214 	add.w	r2, r3, #20
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	0c1b      	lsrs	r3, r3, #16
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f7ff f849 	bl	8008cda <st_word>
	}
}
 8009c48:	bf00      	nop
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c5e:	2100      	movs	r1, #0
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fe2f 	bl	80098c4 <dir_sdi>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <dir_find+0x24>
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	e03e      	b.n	8009cf2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6938      	ldr	r0, [r7, #16]
 8009c7c:	f7ff faa2 	bl	80091c4 <move_window>
 8009c80:	4603      	mov	r3, r0
 8009c82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d12f      	bne.n	8009cea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <dir_find+0x4e>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	75fb      	strb	r3, [r7, #23]
 8009c9c:	e028      	b.n	8009cf0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	330b      	adds	r3, #11
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	330b      	adds	r3, #11
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 0308 	and.w	r3, r3, #8
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <dir_find+0x86>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a18      	ldr	r0, [r3, #32]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	220b      	movs	r2, #11
 8009cca:	4619      	mov	r1, r3
 8009ccc:	f7ff f888 	bl	8008de0 <mem_cmp>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00b      	beq.n	8009cee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fe6e 	bl	80099ba <dir_next>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0c5      	beq.n	8009c74 <dir_find+0x24>
 8009ce8:	e002      	b.n	8009cf0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009cee:	bf00      	nop

	return res;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009d08:	2101      	movs	r1, #1
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff ff1a 	bl	8009b44 <dir_alloc>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d11c      	bne.n	8009d54 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	68b8      	ldr	r0, [r7, #8]
 8009d22:	f7ff fa4f 	bl	80091c4 <move_window>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d111      	bne.n	8009d54 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	2220      	movs	r2, #32
 8009d36:	2100      	movs	r1, #0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7ff f836 	bl	8008daa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a18      	ldr	r0, [r3, #32]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3324      	adds	r3, #36	; 0x24
 8009d46:	220b      	movs	r2, #11
 8009d48:	4619      	mov	r1, r3
 8009d4a:	f7ff f80d 	bl	8008d68 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2201      	movs	r2, #1
 8009d52:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3324      	adds	r3, #36	; 0x24
 8009d74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009d76:	220b      	movs	r2, #11
 8009d78:	2120      	movs	r1, #32
 8009d7a:	68b8      	ldr	r0, [r7, #8]
 8009d7c:	f7ff f815 	bl	8008daa <mem_set>
	si = i = 0; ni = 8;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	61fb      	str	r3, [r7, #28]
 8009d88:	2308      	movs	r3, #8
 8009d8a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	61fa      	str	r2, [r7, #28]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4413      	add	r3, r2
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d9a:	7efb      	ldrb	r3, [r7, #27]
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d94e      	bls.n	8009e3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009da0:	7efb      	ldrb	r3, [r7, #27]
 8009da2:	2b2f      	cmp	r3, #47	; 0x2f
 8009da4:	d006      	beq.n	8009db4 <create_name+0x54>
 8009da6:	7efb      	ldrb	r3, [r7, #27]
 8009da8:	2b5c      	cmp	r3, #92	; 0x5c
 8009daa:	d110      	bne.n	8009dce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009dac:	e002      	b.n	8009db4 <create_name+0x54>
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	3301      	adds	r3, #1
 8009db2:	61fb      	str	r3, [r7, #28]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	4413      	add	r3, r2
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b2f      	cmp	r3, #47	; 0x2f
 8009dbe:	d0f6      	beq.n	8009dae <create_name+0x4e>
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8009dca:	d0f0      	beq.n	8009dae <create_name+0x4e>
			break;
 8009dcc:	e038      	b.n	8009e40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009dce:	7efb      	ldrb	r3, [r7, #27]
 8009dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8009dd2:	d003      	beq.n	8009ddc <create_name+0x7c>
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d30c      	bcc.n	8009df6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2b0b      	cmp	r3, #11
 8009de0:	d002      	beq.n	8009de8 <create_name+0x88>
 8009de2:	7efb      	ldrb	r3, [r7, #27]
 8009de4:	2b2e      	cmp	r3, #46	; 0x2e
 8009de6:	d001      	beq.n	8009dec <create_name+0x8c>
 8009de8:	2306      	movs	r3, #6
 8009dea:	e044      	b.n	8009e76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009dec:	2308      	movs	r3, #8
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	230b      	movs	r3, #11
 8009df2:	617b      	str	r3, [r7, #20]
			continue;
 8009df4:	e022      	b.n	8009e3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009df6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	da04      	bge.n	8009e08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009dfe:	7efb      	ldrb	r3, [r7, #27]
 8009e00:	3b80      	subs	r3, #128	; 0x80
 8009e02:	4a1f      	ldr	r2, [pc, #124]	; (8009e80 <create_name+0x120>)
 8009e04:	5cd3      	ldrb	r3, [r2, r3]
 8009e06:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009e08:	7efb      	ldrb	r3, [r7, #27]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	481d      	ldr	r0, [pc, #116]	; (8009e84 <create_name+0x124>)
 8009e0e:	f7ff f80e 	bl	8008e2e <chk_chr>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <create_name+0xbc>
 8009e18:	2306      	movs	r3, #6
 8009e1a:	e02c      	b.n	8009e76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009e1c:	7efb      	ldrb	r3, [r7, #27]
 8009e1e:	2b60      	cmp	r3, #96	; 0x60
 8009e20:	d905      	bls.n	8009e2e <create_name+0xce>
 8009e22:	7efb      	ldrb	r3, [r7, #27]
 8009e24:	2b7a      	cmp	r3, #122	; 0x7a
 8009e26:	d802      	bhi.n	8009e2e <create_name+0xce>
 8009e28:	7efb      	ldrb	r3, [r7, #27]
 8009e2a:	3b20      	subs	r3, #32
 8009e2c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	613a      	str	r2, [r7, #16]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	4413      	add	r3, r2
 8009e38:	7efa      	ldrb	r2, [r7, #27]
 8009e3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009e3c:	e7a6      	b.n	8009d8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	441a      	add	r2, r3
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <create_name+0xf4>
 8009e50:	2306      	movs	r3, #6
 8009e52:	e010      	b.n	8009e76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2be5      	cmp	r3, #229	; 0xe5
 8009e5a:	d102      	bne.n	8009e62 <create_name+0x102>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2205      	movs	r2, #5
 8009e60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e62:	7efb      	ldrb	r3, [r7, #27]
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	d801      	bhi.n	8009e6c <create_name+0x10c>
 8009e68:	2204      	movs	r2, #4
 8009e6a:	e000      	b.n	8009e6e <create_name+0x10e>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	330b      	adds	r3, #11
 8009e72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009e74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	0800cea8 	.word	0x0800cea8
 8009e84:	0800cdf8 	.word	0x0800cdf8

08009e88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e9c:	e002      	b.n	8009ea4 <follow_path+0x1c>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8009eaa:	d0f8      	beq.n	8009e9e <follow_path+0x16>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b5c      	cmp	r3, #92	; 0x5c
 8009eb2:	d0f4      	beq.n	8009e9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b1f      	cmp	r3, #31
 8009ec0:	d80a      	bhi.n	8009ed8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2280      	movs	r2, #128	; 0x80
 8009ec6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff fcf9 	bl	80098c4 <dir_sdi>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]
 8009ed6:	e043      	b.n	8009f60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ed8:	463b      	mov	r3, r7
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff ff3f 	bl	8009d60 <create_name>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d134      	bne.n	8009f56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff feaf 	bl	8009c50 <dir_find>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009efc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00a      	beq.n	8009f1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d127      	bne.n	8009f5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f0a:	7afb      	ldrb	r3, [r7, #11]
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d122      	bne.n	8009f5a <follow_path+0xd2>
 8009f14:	2305      	movs	r3, #5
 8009f16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f18:	e01f      	b.n	8009f5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f1a:	7afb      	ldrb	r3, [r7, #11]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d11c      	bne.n	8009f5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	799b      	ldrb	r3, [r3, #6]
 8009f28:	f003 0310 	and.w	r3, r3, #16
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009f30:	2305      	movs	r3, #5
 8009f32:	75fb      	strb	r3, [r7, #23]
 8009f34:	e014      	b.n	8009f60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f44:	4413      	add	r3, r2
 8009f46:	4619      	mov	r1, r3
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fe42 	bl	8009bd2 <ld_clust>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f54:	e7c0      	b.n	8009ed8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f56:	bf00      	nop
 8009f58:	e002      	b.n	8009f60 <follow_path+0xd8>
				break;
 8009f5a:	bf00      	nop
 8009f5c:	e000      	b.n	8009f60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f5e:	bf00      	nop
			}
		}
	}

	return res;
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b087      	sub	sp, #28
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d031      	beq.n	8009fe4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	e002      	b.n	8009f8e <get_ldnumber+0x24>
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d903      	bls.n	8009f9e <get_ldnumber+0x34>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b3a      	cmp	r3, #58	; 0x3a
 8009f9c:	d1f4      	bne.n	8009f88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b3a      	cmp	r3, #58	; 0x3a
 8009fa4:	d11c      	bne.n	8009fe0 <get_ldnumber+0x76>
			tp = *path;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	60fa      	str	r2, [r7, #12]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	3b30      	subs	r3, #48	; 0x30
 8009fb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b09      	cmp	r3, #9
 8009fbc:	d80e      	bhi.n	8009fdc <get_ldnumber+0x72>
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d10a      	bne.n	8009fdc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d107      	bne.n	8009fdc <get_ldnumber+0x72>
					vol = (int)i;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	617b      	str	r3, [r7, #20]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	e002      	b.n	8009fe6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009fe4:	693b      	ldr	r3, [r7, #16]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
	...

08009ff4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	70da      	strb	r2, [r3, #3]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff f8d8 	bl	80091c4 <move_window>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <check_fs+0x2a>
 800a01a:	2304      	movs	r3, #4
 800a01c:	e038      	b.n	800a090 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3330      	adds	r3, #48	; 0x30
 800a022:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fe1c 	bl	8008c64 <ld_word>
 800a02c:	4603      	mov	r3, r0
 800a02e:	461a      	mov	r2, r3
 800a030:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a034:	429a      	cmp	r2, r3
 800a036:	d001      	beq.n	800a03c <check_fs+0x48>
 800a038:	2303      	movs	r3, #3
 800a03a:	e029      	b.n	800a090 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a042:	2be9      	cmp	r3, #233	; 0xe9
 800a044:	d009      	beq.n	800a05a <check_fs+0x66>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a04c:	2beb      	cmp	r3, #235	; 0xeb
 800a04e:	d11e      	bne.n	800a08e <check_fs+0x9a>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a056:	2b90      	cmp	r3, #144	; 0x90
 800a058:	d119      	bne.n	800a08e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3330      	adds	r3, #48	; 0x30
 800a05e:	3336      	adds	r3, #54	; 0x36
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe fe17 	bl	8008c94 <ld_dword>
 800a066:	4603      	mov	r3, r0
 800a068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a06c:	4a0a      	ldr	r2, [pc, #40]	; (800a098 <check_fs+0xa4>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d101      	bne.n	800a076 <check_fs+0x82>
 800a072:	2300      	movs	r3, #0
 800a074:	e00c      	b.n	800a090 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3330      	adds	r3, #48	; 0x30
 800a07a:	3352      	adds	r3, #82	; 0x52
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe fe09 	bl	8008c94 <ld_dword>
 800a082:	4603      	mov	r3, r0
 800a084:	4a05      	ldr	r2, [pc, #20]	; (800a09c <check_fs+0xa8>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d101      	bne.n	800a08e <check_fs+0x9a>
 800a08a:	2300      	movs	r3, #0
 800a08c:	e000      	b.n	800a090 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a08e:	2302      	movs	r3, #2
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	00544146 	.word	0x00544146
 800a09c:	33544146 	.word	0x33544146

0800a0a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b096      	sub	sp, #88	; 0x58
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7ff ff58 	bl	8009f6a <get_ldnumber>
 800a0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	da01      	bge.n	800a0c6 <find_volume+0x26>
 800a0c2:	230b      	movs	r3, #11
 800a0c4:	e22d      	b.n	800a522 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a0c6:	4aa1      	ldr	r2, [pc, #644]	; (800a34c <find_volume+0x2ac>)
 800a0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <find_volume+0x3a>
 800a0d6:	230c      	movs	r3, #12
 800a0d8:	e223      	b.n	800a522 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	f023 0301 	bic.w	r3, r3, #1
 800a0e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d01a      	beq.n	800a126 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	785b      	ldrb	r3, [r3, #1]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fd17 	bl	8008b28 <disk_status>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10c      	bne.n	800a126 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d007      	beq.n	800a122 <find_volume+0x82>
 800a112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a11e:	230a      	movs	r3, #10
 800a120:	e1ff      	b.n	800a522 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a122:	2300      	movs	r3, #0
 800a124:	e1fd      	b.n	800a522 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	785b      	ldrb	r3, [r3, #1]
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fd0f 	bl	8008b5c <disk_initialize>
 800a13e:	4603      	mov	r3, r0
 800a140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a150:	2303      	movs	r3, #3
 800a152:	e1e6      	b.n	800a522 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <find_volume+0xca>
 800a15a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a15e:	f003 0304 	and.w	r3, r3, #4
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a166:	230a      	movs	r3, #10
 800a168:	e1db      	b.n	800a522 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a16e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a172:	f7ff ff3f 	bl	8009ff4 <check_fs>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a17c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a180:	2b02      	cmp	r3, #2
 800a182:	d149      	bne.n	800a218 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a184:	2300      	movs	r3, #0
 800a186:	643b      	str	r3, [r7, #64]	; 0x40
 800a188:	e01e      	b.n	800a1c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a198:	4413      	add	r3, r2
 800a19a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	3304      	adds	r3, #4
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <find_volume+0x114>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fd72 	bl	8008c94 <ld_dword>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	e000      	b.n	800a1b6 <find_volume+0x116>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	3358      	adds	r3, #88	; 0x58
 800a1bc:	443b      	add	r3, r7
 800a1be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a1c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d9dd      	bls.n	800a18a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a1d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <find_volume+0x13e>
 800a1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	3358      	adds	r3, #88	; 0x58
 800a1e4:	443b      	add	r3, r7
 800a1e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <find_volume+0x15e>
 800a1f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1f6:	f7ff fefd 	bl	8009ff4 <check_fs>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	e000      	b.n	800a200 <find_volume+0x160>
 800a1fe:	2303      	movs	r3, #3
 800a200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d905      	bls.n	800a218 <find_volume+0x178>
 800a20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a20e:	3301      	adds	r3, #1
 800a210:	643b      	str	r3, [r7, #64]	; 0x40
 800a212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a214:	2b03      	cmp	r3, #3
 800a216:	d9e2      	bls.n	800a1de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d101      	bne.n	800a224 <find_volume+0x184>
 800a220:	2301      	movs	r3, #1
 800a222:	e17e      	b.n	800a522 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d901      	bls.n	800a230 <find_volume+0x190>
 800a22c:	230d      	movs	r3, #13
 800a22e:	e178      	b.n	800a522 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	3330      	adds	r3, #48	; 0x30
 800a234:	330b      	adds	r3, #11
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fd14 	bl	8008c64 <ld_word>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a242:	d001      	beq.n	800a248 <find_volume+0x1a8>
 800a244:	230d      	movs	r3, #13
 800a246:	e16c      	b.n	800a522 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	3330      	adds	r3, #48	; 0x30
 800a24c:	3316      	adds	r3, #22
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe fd08 	bl	8008c64 <ld_word>
 800a254:	4603      	mov	r3, r0
 800a256:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <find_volume+0x1cc>
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	3330      	adds	r3, #48	; 0x30
 800a262:	3324      	adds	r3, #36	; 0x24
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe fd15 	bl	8008c94 <ld_dword>
 800a26a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a270:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	789b      	ldrb	r3, [r3, #2]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d005      	beq.n	800a290 <find_volume+0x1f0>
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	789b      	ldrb	r3, [r3, #2]
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d001      	beq.n	800a290 <find_volume+0x1f0>
 800a28c:	230d      	movs	r3, #13
 800a28e:	e148      	b.n	800a522 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	789b      	ldrb	r3, [r3, #2]
 800a294:	461a      	mov	r2, r3
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	fb02 f303 	mul.w	r3, r2, r3
 800a29c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	895b      	ldrh	r3, [r3, #10]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <find_volume+0x224>
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	895b      	ldrh	r3, [r3, #10]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	895b      	ldrh	r3, [r3, #10]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4013      	ands	r3, r2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <find_volume+0x228>
 800a2c4:	230d      	movs	r3, #13
 800a2c6:	e12c      	b.n	800a522 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	3330      	adds	r3, #48	; 0x30
 800a2cc:	3311      	adds	r3, #17
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fcc8 	bl	8008c64 <ld_word>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	891b      	ldrh	r3, [r3, #8]
 800a2e0:	f003 030f 	and.w	r3, r3, #15
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <find_volume+0x24e>
 800a2ea:	230d      	movs	r3, #13
 800a2ec:	e119      	b.n	800a522 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	3330      	adds	r3, #48	; 0x30
 800a2f2:	3313      	adds	r3, #19
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fcb5 	bl	8008c64 <ld_word>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a300:	2b00      	cmp	r3, #0
 800a302:	d106      	bne.n	800a312 <find_volume+0x272>
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	3330      	adds	r3, #48	; 0x30
 800a308:	3320      	adds	r3, #32
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fcc2 	bl	8008c94 <ld_dword>
 800a310:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	3330      	adds	r3, #48	; 0x30
 800a316:	330e      	adds	r3, #14
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fca3 	bl	8008c64 <ld_word>
 800a31e:	4603      	mov	r3, r0
 800a320:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <find_volume+0x28c>
 800a328:	230d      	movs	r3, #13
 800a32a:	e0fa      	b.n	800a522 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a32c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a330:	4413      	add	r3, r2
 800a332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a334:	8912      	ldrh	r2, [r2, #8]
 800a336:	0912      	lsrs	r2, r2, #4
 800a338:	b292      	uxth	r2, r2
 800a33a:	4413      	add	r3, r2
 800a33c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	429a      	cmp	r2, r3
 800a344:	d204      	bcs.n	800a350 <find_volume+0x2b0>
 800a346:	230d      	movs	r3, #13
 800a348:	e0eb      	b.n	800a522 <find_volume+0x482>
 800a34a:	bf00      	nop
 800a34c:	20004a5c 	.word	0x20004a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a358:	8952      	ldrh	r2, [r2, #10]
 800a35a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <find_volume+0x2ca>
 800a366:	230d      	movs	r3, #13
 800a368:	e0db      	b.n	800a522 <find_volume+0x482>
		fmt = FS_FAT32;
 800a36a:	2303      	movs	r3, #3
 800a36c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a376:	4293      	cmp	r3, r2
 800a378:	d802      	bhi.n	800a380 <find_volume+0x2e0>
 800a37a:	2302      	movs	r3, #2
 800a37c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a386:	4293      	cmp	r3, r2
 800a388:	d802      	bhi.n	800a390 <find_volume+0x2f0>
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	1c9a      	adds	r2, r3, #2
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a39c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a39e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a2:	441a      	add	r2, r3
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a3a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	441a      	add	r2, r3
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a3b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d11e      	bne.n	800a3f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	3330      	adds	r3, #48	; 0x30
 800a3be:	332a      	adds	r3, #42	; 0x2a
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe fc4f 	bl	8008c64 <ld_word>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <find_volume+0x330>
 800a3cc:	230d      	movs	r3, #13
 800a3ce:	e0a8      	b.n	800a522 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	891b      	ldrh	r3, [r3, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <find_volume+0x33c>
 800a3d8:	230d      	movs	r3, #13
 800a3da:	e0a2      	b.n	800a522 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	3330      	adds	r3, #48	; 0x30
 800a3e0:	332c      	adds	r3, #44	; 0x2c
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fc56 	bl	8008c94 <ld_dword>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a3f6:	e01f      	b.n	800a438 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	891b      	ldrh	r3, [r3, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <find_volume+0x364>
 800a400:	230d      	movs	r3, #13
 800a402:	e08e      	b.n	800a522 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	6a1a      	ldr	r2, [r3, #32]
 800a408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40a:	441a      	add	r2, r3
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a414:	2b02      	cmp	r3, #2
 800a416:	d103      	bne.n	800a420 <find_volume+0x380>
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	e00a      	b.n	800a436 <find_volume+0x396>
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	695a      	ldr	r2, [r3, #20]
 800a424:	4613      	mov	r3, r2
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	4413      	add	r3, r2
 800a42a:	085a      	lsrs	r2, r3, #1
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a436:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	699a      	ldr	r2, [r3, #24]
 800a43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a43e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a442:	0a5b      	lsrs	r3, r3, #9
 800a444:	429a      	cmp	r2, r3
 800a446:	d201      	bcs.n	800a44c <find_volume+0x3ac>
 800a448:	230d      	movs	r3, #13
 800a44a:	e06a      	b.n	800a522 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a452:	611a      	str	r2, [r3, #16]
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	2280      	movs	r2, #128	; 0x80
 800a460:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a462:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a466:	2b03      	cmp	r3, #3
 800a468:	d149      	bne.n	800a4fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	3330      	adds	r3, #48	; 0x30
 800a46e:	3330      	adds	r3, #48	; 0x30
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe fbf7 	bl	8008c64 <ld_word>
 800a476:	4603      	mov	r3, r0
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d140      	bne.n	800a4fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a47e:	3301      	adds	r3, #1
 800a480:	4619      	mov	r1, r3
 800a482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a484:	f7fe fe9e 	bl	80091c4 <move_window>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d137      	bne.n	800a4fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	2200      	movs	r2, #0
 800a492:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	3330      	adds	r3, #48	; 0x30
 800a498:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe fbe1 	bl	8008c64 <ld_word>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d127      	bne.n	800a4fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	3330      	adds	r3, #48	; 0x30
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fbee 	bl	8008c94 <ld_dword>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4a1c      	ldr	r2, [pc, #112]	; (800a52c <find_volume+0x48c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d11e      	bne.n	800a4fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	3330      	adds	r3, #48	; 0x30
 800a4c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe fbe3 	bl	8008c94 <ld_dword>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4a17      	ldr	r2, [pc, #92]	; (800a530 <find_volume+0x490>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d113      	bne.n	800a4fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	3330      	adds	r3, #48	; 0x30
 800a4da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe fbd8 	bl	8008c94 <ld_dword>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	3330      	adds	r3, #48	; 0x30
 800a4ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fbce 	bl	8008c94 <ld_dword>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a504:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <find_volume+0x494>)
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	3301      	adds	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	4b09      	ldr	r3, [pc, #36]	; (800a534 <find_volume+0x494>)
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <find_volume+0x494>)
 800a514:	881a      	ldrh	r2, [r3, #0]
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a51a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a51c:	f7fe fdea 	bl	80090f4 <clear_lock>
#endif
	return FR_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3758      	adds	r7, #88	; 0x58
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	41615252 	.word	0x41615252
 800a530:	61417272 	.word	0x61417272
 800a534:	20004a60 	.word	0x20004a60

0800a538 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a542:	2309      	movs	r3, #9
 800a544:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01c      	beq.n	800a586 <validate+0x4e>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d018      	beq.n	800a586 <validate+0x4e>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d013      	beq.n	800a586 <validate+0x4e>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	889a      	ldrh	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	88db      	ldrh	r3, [r3, #6]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d10c      	bne.n	800a586 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fad8 	bl	8008b28 <disk_status>
 800a578:	4603      	mov	r3, r0
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <validate+0x4e>
			res = FR_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <validate+0x5a>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	e000      	b.n	800a594 <validate+0x5c>
 800a592:	2300      	movs	r3, #0
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	6013      	str	r3, [r2, #0]
	return res;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a5b6:	f107 0310 	add.w	r3, r7, #16
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fcd5 	bl	8009f6a <get_ldnumber>
 800a5c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	da01      	bge.n	800a5cc <f_mount+0x28>
 800a5c8:	230b      	movs	r3, #11
 800a5ca:	e02b      	b.n	800a624 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a5cc:	4a17      	ldr	r2, [pc, #92]	; (800a62c <f_mount+0x88>)
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a5dc:	69b8      	ldr	r0, [r7, #24]
 800a5de:	f7fe fd89 	bl	80090f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	490d      	ldr	r1, [pc, #52]	; (800a62c <f_mount+0x88>)
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <f_mount+0x66>
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d001      	beq.n	800a60e <f_mount+0x6a>
 800a60a:	2300      	movs	r3, #0
 800a60c:	e00a      	b.n	800a624 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a60e:	f107 010c 	add.w	r1, r7, #12
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	2200      	movs	r2, #0
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff fd41 	bl	800a0a0 <find_volume>
 800a61e:	4603      	mov	r3, r0
 800a620:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a622:	7dfb      	ldrb	r3, [r7, #23]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3720      	adds	r7, #32
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20004a5c 	.word	0x20004a5c

0800a630 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b098      	sub	sp, #96	; 0x60
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <f_open+0x18>
 800a644:	2309      	movs	r3, #9
 800a646:	e1ad      	b.n	800a9a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a64e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a650:	79fa      	ldrb	r2, [r7, #7]
 800a652:	f107 0110 	add.w	r1, r7, #16
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff fd20 	bl	800a0a0 <find_volume>
 800a660:	4603      	mov	r3, r0
 800a662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f040 8191 	bne.w	800a992 <f_open+0x362>
		dj.obj.fs = fs;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	f107 0314 	add.w	r3, r7, #20
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fc03 	bl	8009e88 <follow_path>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d11a      	bne.n	800a6c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a690:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a694:	b25b      	sxtb	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	da03      	bge.n	800a6a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a69a:	2306      	movs	r3, #6
 800a69c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6a0:	e011      	b.n	800a6c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a6a2:	79fb      	ldrb	r3, [r7, #7]
 800a6a4:	f023 0301 	bic.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bf14      	ite	ne
 800a6ac:	2301      	movne	r3, #1
 800a6ae:	2300      	moveq	r3, #0
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f107 0314 	add.w	r3, r7, #20
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fbd2 	bl	8008e64 <chk_lock>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	f003 031c 	and.w	r3, r3, #28
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d07f      	beq.n	800a7d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d017      	beq.n	800a708 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d10e      	bne.n	800a6fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a6e0:	f7fe fc1c 	bl	8008f1c <enq_lock>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d006      	beq.n	800a6f8 <f_open+0xc8>
 800a6ea:	f107 0314 	add.w	r3, r7, #20
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fb03 	bl	8009cfa <dir_register>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	e000      	b.n	800a6fa <f_open+0xca>
 800a6f8:	2312      	movs	r3, #18
 800a6fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	f043 0308 	orr.w	r3, r3, #8
 800a704:	71fb      	strb	r3, [r7, #7]
 800a706:	e010      	b.n	800a72a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a708:	7ebb      	ldrb	r3, [r7, #26]
 800a70a:	f003 0311 	and.w	r3, r3, #17
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <f_open+0xea>
					res = FR_DENIED;
 800a712:	2307      	movs	r3, #7
 800a714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a718:	e007      	b.n	800a72a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <f_open+0xfa>
 800a724:	2308      	movs	r3, #8
 800a726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a72a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d168      	bne.n	800a804 <f_open+0x1d4>
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d063      	beq.n	800a804 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a73c:	f7fd ffa4 	bl	8008688 <get_fattime>
 800a740:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	330e      	adds	r3, #14
 800a746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fae1 	bl	8008d10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	3316      	adds	r3, #22
 800a752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fadb 	bl	8008d10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75c:	330b      	adds	r3, #11
 800a75e:	2220      	movs	r2, #32
 800a760:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fa32 	bl	8009bd2 <ld_clust>
 800a76e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a774:	2200      	movs	r2, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff fa4a 	bl	8009c10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	331c      	adds	r3, #28
 800a780:	2100      	movs	r1, #0
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fac4 	bl	8008d10 <st_dword>
					fs->wflag = 1;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2201      	movs	r2, #1
 800a78c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d037      	beq.n	800a804 <f_open+0x1d4>
						dw = fs->winsect;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a79a:	f107 0314 	add.w	r3, r7, #20
 800a79e:	2200      	movs	r2, #0
 800a7a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe ff5d 	bl	8009662 <remove_chain>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a7ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d126      	bne.n	800a804 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fd02 	bl	80091c4 <move_window>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7ca:	3a01      	subs	r2, #1
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	e019      	b.n	800a804 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d115      	bne.n	800a804 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a7d8:	7ebb      	ldrb	r3, [r7, #26]
 800a7da:	f003 0310 	and.w	r3, r3, #16
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <f_open+0x1ba>
					res = FR_NO_FILE;
 800a7e2:	2304      	movs	r3, #4
 800a7e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7e8:	e00c      	b.n	800a804 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	f003 0302 	and.w	r3, r3, #2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d007      	beq.n	800a804 <f_open+0x1d4>
 800a7f4:	7ebb      	ldrb	r3, [r7, #26]
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <f_open+0x1d4>
						res = FR_DENIED;
 800a7fe:	2307      	movs	r3, #7
 800a800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d128      	bne.n	800a85e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	f003 0308 	and.w	r3, r3, #8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a81c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	f023 0301 	bic.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	bf14      	ite	ne
 800a836:	2301      	movne	r3, #1
 800a838:	2300      	moveq	r3, #0
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	461a      	mov	r2, r3
 800a83e:	f107 0314 	add.w	r3, r7, #20
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fb8b 	bl	8008f60 <inc_lock>
 800a84a:	4602      	mov	r2, r0
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <f_open+0x22e>
 800a858:	2302      	movs	r3, #2
 800a85a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a85e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a862:	2b00      	cmp	r3, #0
 800a864:	f040 8095 	bne.w	800a992 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff f9af 	bl	8009bd2 <ld_clust>
 800a874:	4602      	mov	r2, r0
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	331c      	adds	r3, #28
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fa08 	bl	8008c94 <ld_dword>
 800a884:	4602      	mov	r2, r0
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	88da      	ldrh	r2, [r3, #6]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	79fa      	ldrb	r2, [r7, #7]
 800a8a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3330      	adds	r3, #48	; 0x30
 800a8ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fa72 	bl	8008daa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	f003 0320 	and.w	r3, r3, #32
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d060      	beq.n	800a992 <f_open+0x362>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d05c      	beq.n	800a992 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	895b      	ldrh	r3, [r3, #10]
 800a8e4:	025b      	lsls	r3, r3, #9
 800a8e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a8f4:	e016      	b.n	800a924 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fd1d 	bl	800933a <get_fat>
 800a900:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a904:	2b01      	cmp	r3, #1
 800a906:	d802      	bhi.n	800a90e <f_open+0x2de>
 800a908:	2302      	movs	r3, #2
 800a90a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a90e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a914:	d102      	bne.n	800a91c <f_open+0x2ec>
 800a916:	2301      	movs	r3, #1
 800a918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a91c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	657b      	str	r3, [r7, #84]	; 0x54
 800a924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <f_open+0x304>
 800a92c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a930:	429a      	cmp	r2, r3
 800a932:	d8e0      	bhi.n	800a8f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a938:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a93a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d127      	bne.n	800a992 <f_open+0x362>
 800a942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d022      	beq.n	800a992 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe fcd3 	bl	80092fc <clust2sect>
 800a956:	6478      	str	r0, [r7, #68]	; 0x44
 800a958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d103      	bne.n	800a966 <f_open+0x336>
						res = FR_INT_ERR;
 800a95e:	2302      	movs	r3, #2
 800a960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a964:	e015      	b.n	800a992 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a968:	0a5a      	lsrs	r2, r3, #9
 800a96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a96c:	441a      	add	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	7858      	ldrb	r0, [r3, #1]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a1a      	ldr	r2, [r3, #32]
 800a980:	2301      	movs	r3, #1
 800a982:	f7fe f911 	bl	8008ba8 <disk_read>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <f_open+0x362>
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <f_open+0x370>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3760      	adds	r7, #96	; 0x60
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08c      	sub	sp, #48	; 0x30
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f107 0210 	add.w	r2, r7, #16
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7ff fdb3 	bl	800a538 <validate>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a9d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d107      	bne.n	800a9f0 <f_write+0x44>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	7d5b      	ldrb	r3, [r3, #21]
 800a9e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <f_write+0x4a>
 800a9f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9f4:	e14b      	b.n	800ac8e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	7d1b      	ldrb	r3, [r3, #20]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <f_write+0x5a>
 800aa02:	2307      	movs	r3, #7
 800aa04:	e143      	b.n	800ac8e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	699a      	ldr	r2, [r3, #24]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	441a      	add	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	f080 812d 	bcs.w	800ac72 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	43db      	mvns	r3, r3
 800aa1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aa20:	e127      	b.n	800ac72 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 80e3 	bne.w	800abf6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	0a5b      	lsrs	r3, r3, #9
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	8952      	ldrh	r2, [r2, #10]
 800aa3a:	3a01      	subs	r2, #1
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d143      	bne.n	800aace <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10c      	bne.n	800aa68 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d11a      	bne.n	800aa90 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe fe64 	bl	800972c <create_chain>
 800aa64:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa66:	e013      	b.n	800aa90 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	4619      	mov	r1, r3
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f7fe fef0 	bl	800985c <clmt_clust>
 800aa7c:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa7e:	e007      	b.n	800aa90 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	69db      	ldr	r3, [r3, #28]
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7fe fe4f 	bl	800972c <create_chain>
 800aa8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80f2 	beq.w	800ac7c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d104      	bne.n	800aaa8 <f_write+0xfc>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	755a      	strb	r2, [r3, #21]
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e0f2      	b.n	800ac8e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaae:	d104      	bne.n	800aaba <f_write+0x10e>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2201      	movs	r2, #1
 800aab4:	755a      	strb	r2, [r3, #21]
 800aab6:	2301      	movs	r3, #1
 800aab8:	e0e9      	b.n	800ac8e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aabe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <f_write+0x122>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aacc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
 800aad2:	b25b      	sxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da18      	bge.n	800ab0a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	7858      	ldrb	r0, [r3, #1]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a1a      	ldr	r2, [r3, #32]
 800aae6:	2301      	movs	r3, #1
 800aae8:	f7fe f87e 	bl	8008be8 <disk_write>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d004      	beq.n	800aafc <f_write+0x150>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	755a      	strb	r2, [r3, #21]
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e0c8      	b.n	800ac8e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	7d1b      	ldrb	r3, [r3, #20]
 800ab00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fe fbf2 	bl	80092fc <clust2sect>
 800ab18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d104      	bne.n	800ab2a <f_write+0x17e>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2202      	movs	r2, #2
 800ab24:	755a      	strb	r2, [r3, #21]
 800ab26:	2302      	movs	r3, #2
 800ab28:	e0b1      	b.n	800ac8e <f_write+0x2e2>
			sect += csect;
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	4413      	add	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	0a5b      	lsrs	r3, r3, #9
 800ab36:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d03c      	beq.n	800abb8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	4413      	add	r3, r2
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	8952      	ldrh	r2, [r2, #10]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d905      	bls.n	800ab58 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	895b      	ldrh	r3, [r3, #10]
 800ab50:	461a      	mov	r2, r3
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	7858      	ldrb	r0, [r3, #1]
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	69f9      	ldr	r1, [r7, #28]
 800ab62:	f7fe f841 	bl	8008be8 <disk_write>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d004      	beq.n	800ab76 <f_write+0x1ca>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	755a      	strb	r2, [r3, #21]
 800ab72:	2301      	movs	r3, #1
 800ab74:	e08b      	b.n	800ac8e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a1a      	ldr	r2, [r3, #32]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	6a3a      	ldr	r2, [r7, #32]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d915      	bls.n	800abb0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1a      	ldr	r2, [r3, #32]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	025b      	lsls	r3, r3, #9
 800ab94:	69fa      	ldr	r2, [r7, #28]
 800ab96:	4413      	add	r3, r2
 800ab98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	f7fe f8e3 	bl	8008d68 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	7d1b      	ldrb	r3, [r3, #20]
 800aba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	025b      	lsls	r3, r3, #9
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800abb6:	e03f      	b.n	800ac38 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d016      	beq.n	800abf0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	699a      	ldr	r2, [r3, #24]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abca:	429a      	cmp	r2, r3
 800abcc:	d210      	bcs.n	800abf0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	7858      	ldrb	r0, [r3, #1]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abd8:	2301      	movs	r3, #1
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	f7fd ffe4 	bl	8008ba8 <disk_read>
 800abe0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d004      	beq.n	800abf0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	755a      	strb	r2, [r3, #21]
 800abec:	2301      	movs	r3, #1
 800abee:	e04e      	b.n	800ac8e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ac04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d901      	bls.n	800ac10 <f_write+0x264>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1e:	4413      	add	r3, r2
 800ac20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac22:	69f9      	ldr	r1, [r7, #28]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe f89f 	bl	8008d68 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	7d1b      	ldrb	r3, [r3, #20]
 800ac2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ac38:	69fa      	ldr	r2, [r7, #28]
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	4413      	add	r3, r2
 800ac3e:	61fb      	str	r3, [r7, #28]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	699a      	ldr	r2, [r3, #24]
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	441a      	add	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	619a      	str	r2, [r3, #24]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	bf38      	it	cc
 800ac58:	461a      	movcc	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	60da      	str	r2, [r3, #12]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	441a      	add	r2, r3
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f47f aed4 	bne.w	800aa22 <f_write+0x76>
 800ac7a:	e000      	b.n	800ac7e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac7c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	7d1b      	ldrb	r3, [r3, #20]
 800ac82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3730      	adds	r7, #48	; 0x30
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f107 0208 	add.w	r2, r7, #8
 800aca4:	4611      	mov	r1, r2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7ff fc46 	bl	800a538 <validate>
 800acac:	4603      	mov	r3, r0
 800acae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d168      	bne.n	800ad88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7d1b      	ldrb	r3, [r3, #20]
 800acba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d062      	beq.n	800ad88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
 800acc6:	b25b      	sxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da15      	bge.n	800acf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	7858      	ldrb	r0, [r3, #1]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1a      	ldr	r2, [r3, #32]
 800acda:	2301      	movs	r3, #1
 800acdc:	f7fd ff84 	bl	8008be8 <disk_write>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <f_sync+0x54>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e04f      	b.n	800ad8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	7d1b      	ldrb	r3, [r3, #20]
 800acee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800acf8:	f7fd fcc6 	bl	8008688 <get_fattime>
 800acfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fe fa5c 	bl	80091c4 <move_window>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d138      	bne.n	800ad88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	330b      	adds	r3, #11
 800ad20:	781a      	ldrb	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	330b      	adds	r3, #11
 800ad26:	f042 0220 	orr.w	r2, r2, #32
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	461a      	mov	r2, r3
 800ad38:	68f9      	ldr	r1, [r7, #12]
 800ad3a:	f7fe ff69 	bl	8009c10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 021c 	add.w	r2, r3, #28
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f7fd ffe0 	bl	8008d10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3316      	adds	r3, #22
 800ad54:	6939      	ldr	r1, [r7, #16]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd ffda 	bl	8008d10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3312      	adds	r3, #18
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd ffb9 	bl	8008cda <st_word>
					fs->wflag = 1;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fa55 	bl	8009220 <sync_fs>
 800ad76:	4603      	mov	r3, r0
 800ad78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	7d1b      	ldrb	r3, [r3, #20]
 800ad7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff ff7b 	bl	800ac96 <f_sync>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d118      	bne.n	800addc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f107 0208 	add.w	r2, r7, #8
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff fbc0 	bl	800a538 <validate>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10c      	bne.n	800addc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe f958 	bl	800907c <dec_lock>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b096      	sub	sp, #88	; 0x58
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800adee:	f107 0108 	add.w	r1, r7, #8
 800adf2:	1d3b      	adds	r3, r7, #4
 800adf4:	2202      	movs	r2, #2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff f952 	bl	800a0a0 <find_volume>
 800adfc:	4603      	mov	r3, r0
 800adfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800ae06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f040 80ec 	bne.w	800afe8 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	f107 030c 	add.w	r3, r7, #12
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff f835 	bl	8009e88 <follow_path>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ae24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d102      	bne.n	800ae32 <f_mkdir+0x4c>
 800ae2c:	2308      	movs	r3, #8
 800ae2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ae32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae36:	2b04      	cmp	r3, #4
 800ae38:	f040 80d6 	bne.w	800afe8 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ae3c:	f107 030c 	add.w	r3, r7, #12
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe fc72 	bl	800972c <create_chain>
 800ae48:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	895b      	ldrh	r3, [r3, #10]
 800ae4e:	025b      	lsls	r3, r3, #9
 800ae50:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ae58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d102      	bne.n	800ae64 <f_mkdir+0x7e>
 800ae5e:	2307      	movs	r3, #7
 800ae60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800ae64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d102      	bne.n	800ae70 <f_mkdir+0x8a>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae76:	d102      	bne.n	800ae7e <f_mkdir+0x98>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ae7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <f_mkdir+0xae>
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe f957 	bl	800913c <sync_window>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800ae94:	f7fd fbf8 	bl	8008688 <get_fattime>
 800ae98:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ae9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d16a      	bne.n	800af78 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fa28 	bl	80092fc <clust2sect>
 800aeac:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3330      	adds	r3, #48	; 0x30
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800aeb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb8:	2100      	movs	r1, #0
 800aeba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aebc:	f7fd ff75 	bl	8008daa <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800aec0:	220b      	movs	r2, #11
 800aec2:	2120      	movs	r1, #32
 800aec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aec6:	f7fd ff70 	bl	8008daa <mem_set>
					dir[DIR_Name] = '.';
 800aeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aecc:	222e      	movs	r2, #46	; 0x2e
 800aece:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	330b      	adds	r3, #11
 800aed4:	2210      	movs	r2, #16
 800aed6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800aed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeda:	3316      	adds	r3, #22
 800aedc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fd ff16 	bl	8008d10 <st_dword>
					st_clust(fs, dir, dcl);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fe90 	bl	8009c10 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800aef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef2:	3320      	adds	r3, #32
 800aef4:	2220      	movs	r2, #32
 800aef6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fd ff35 	bl	8008d68 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800aefe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af00:	3321      	adds	r3, #33	; 0x21
 800af02:	222e      	movs	r2, #46	; 0x2e
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d106      	bne.n	800af20 <f_mkdir+0x13a>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af18:	429a      	cmp	r2, r3
 800af1a:	d101      	bne.n	800af20 <f_mkdir+0x13a>
 800af1c:	2300      	movs	r3, #0
 800af1e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800af20:	68b8      	ldr	r0, [r7, #8]
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	3320      	adds	r3, #32
 800af26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af28:	4619      	mov	r1, r3
 800af2a:	f7fe fe71 	bl	8009c10 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	895b      	ldrh	r3, [r3, #10]
 800af32:	653b      	str	r3, [r7, #80]	; 0x50
 800af34:	e01b      	b.n	800af6e <f_mkdir+0x188>
					fs->winsect = dsc++;
 800af36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2201      	movs	r2, #1
 800af44:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe f8f7 	bl	800913c <sync_window>
 800af4e:	4603      	mov	r3, r0
 800af50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800af54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10c      	bne.n	800af76 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800af5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af60:	2100      	movs	r1, #0
 800af62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af64:	f7fd ff21 	bl	8008daa <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800af68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af6a:	3b01      	subs	r3, #1
 800af6c:	653b      	str	r3, [r7, #80]	; 0x50
 800af6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e0      	bne.n	800af36 <f_mkdir+0x150>
 800af74:	e000      	b.n	800af78 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800af76:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800af78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d107      	bne.n	800af90 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800af80:	f107 030c 	add.w	r3, r7, #12
 800af84:	4618      	mov	r0, r3
 800af86:	f7fe feb8 	bl	8009cfa <dir_register>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800af90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af94:	2b00      	cmp	r3, #0
 800af96:	d120      	bne.n	800afda <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	3316      	adds	r3, #22
 800afa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fd feb4 	bl	8008d10 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fe2e 	bl	8009c10 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800afb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb6:	330b      	adds	r3, #11
 800afb8:	2210      	movs	r2, #16
 800afba:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2201      	movs	r2, #1
 800afc0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800afc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10e      	bne.n	800afe8 <f_mkdir+0x202>
					res = sync_fs(fs);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fe f927 	bl	8009220 <sync_fs>
 800afd2:	4603      	mov	r3, r0
 800afd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800afd8:	e006      	b.n	800afe8 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800afda:	f107 030c 	add.w	r3, r7, #12
 800afde:	2200      	movs	r2, #0
 800afe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fe fb3d 	bl	8009662 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800afe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800afec:	4618      	mov	r0, r3
 800afee:	3758      	adds	r7, #88	; 0x58
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	4613      	mov	r3, r2
 800b000:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b002:	2301      	movs	r3, #1
 800b004:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b00a:	4b1f      	ldr	r3, [pc, #124]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b00c:	7a5b      	ldrb	r3, [r3, #9]
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d131      	bne.n	800b078 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b014:	4b1c      	ldr	r3, [pc, #112]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b016:	7a5b      	ldrb	r3, [r3, #9]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	461a      	mov	r2, r3
 800b01c:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b01e:	2100      	movs	r1, #0
 800b020:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b022:	4b19      	ldr	r3, [pc, #100]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b024:	7a5b      	ldrb	r3, [r3, #9]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	4a17      	ldr	r2, [pc, #92]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b032:	4b15      	ldr	r3, [pc, #84]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b034:	7a5b      	ldrb	r3, [r3, #9]
 800b036:	b2db      	uxtb	r3, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	4b13      	ldr	r3, [pc, #76]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b03c:	4413      	add	r3, r2
 800b03e:	79fa      	ldrb	r2, [r7, #7]
 800b040:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b042:	4b11      	ldr	r3, [pc, #68]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b044:	7a5b      	ldrb	r3, [r3, #9]
 800b046:	b2db      	uxtb	r3, r3
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	b2d1      	uxtb	r1, r2
 800b04c:	4a0e      	ldr	r2, [pc, #56]	; (800b088 <FATFS_LinkDriverEx+0x94>)
 800b04e:	7251      	strb	r1, [r2, #9]
 800b050:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b052:	7dbb      	ldrb	r3, [r7, #22]
 800b054:	3330      	adds	r3, #48	; 0x30
 800b056:	b2da      	uxtb	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3301      	adds	r3, #1
 800b060:	223a      	movs	r2, #58	; 0x3a
 800b062:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3302      	adds	r3, #2
 800b068:	222f      	movs	r2, #47	; 0x2f
 800b06a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	3303      	adds	r3, #3
 800b070:	2200      	movs	r2, #0
 800b072:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	20004a84 	.word	0x20004a84

0800b08c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b096:	2200      	movs	r2, #0
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff ffaa 	bl	800aff4 <FATFS_LinkDriverEx>
 800b0a0:	4603      	mov	r3, r0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b0b6:	4830      	ldr	r0, [pc, #192]	; (800b178 <Preprocessing_Init+0xcc>)
 800b0b8:	f7f6 ff5e 	bl	8001f78 <Window_Init>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d000      	beq.n	800b0c4 <Preprocessing_Init+0x18>
  {
    while(1);
 800b0c2:	e7fe      	b.n	800b0c2 <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800b0c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b0c8:	482c      	ldr	r0, [pc, #176]	; (800b17c <Preprocessing_Init+0xd0>)
 800b0ca:	f000 fa15 	bl	800b4f8 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800b0ce:	4b2c      	ldr	r3, [pc, #176]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0d0:	4a2a      	ldr	r2, [pc, #168]	; (800b17c <Preprocessing_Init+0xd0>)
 800b0d2:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800b0d4:	4b2a      	ldr	r3, [pc, #168]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800b0da:	4b29      	ldr	r3, [pc, #164]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0dc:	4a26      	ldr	r2, [pc, #152]	; (800b178 <Preprocessing_Init+0xcc>)
 800b0de:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800b0e0:	4b27      	ldr	r3, [pc, #156]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0e2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b0e6:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800b0e8:	4b25      	ldr	r3, [pc, #148]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0ee:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800b0f0:	4b23      	ldr	r3, [pc, #140]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0f6:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800b0f8:	4b21      	ldr	r3, [pc, #132]	; (800b180 <Preprocessing_Init+0xd4>)
 800b0fa:	4a22      	ldr	r2, [pc, #136]	; (800b184 <Preprocessing_Init+0xd8>)
 800b0fc:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800b0fe:	4b22      	ldr	r3, [pc, #136]	; (800b188 <Preprocessing_Init+0xdc>)
 800b100:	4a22      	ldr	r2, [pc, #136]	; (800b18c <Preprocessing_Init+0xe0>)
 800b102:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800b104:	4b20      	ldr	r3, [pc, #128]	; (800b188 <Preprocessing_Init+0xdc>)
 800b106:	4a22      	ldr	r2, [pc, #136]	; (800b190 <Preprocessing_Init+0xe4>)
 800b108:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800b10a:	4b1f      	ldr	r3, [pc, #124]	; (800b188 <Preprocessing_Init+0xdc>)
 800b10c:	4a21      	ldr	r2, [pc, #132]	; (800b194 <Preprocessing_Init+0xe8>)
 800b10e:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800b110:	4b1d      	ldr	r3, [pc, #116]	; (800b188 <Preprocessing_Init+0xdc>)
 800b112:	2280      	movs	r2, #128	; 0x80
 800b114:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800b116:	4b1c      	ldr	r3, [pc, #112]	; (800b188 <Preprocessing_Init+0xdc>)
 800b118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b11c:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800b11e:	4b1a      	ldr	r3, [pc, #104]	; (800b188 <Preprocessing_Init+0xdc>)
 800b120:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b124:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800b126:	4b18      	ldr	r3, [pc, #96]	; (800b188 <Preprocessing_Init+0xdc>)
 800b128:	f04f 0200 	mov.w	r2, #0
 800b12c:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800b12e:	4b16      	ldr	r3, [pc, #88]	; (800b188 <Preprocessing_Init+0xdc>)
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800b13a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b13e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b142:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b146:	4b10      	ldr	r3, [pc, #64]	; (800b188 <Preprocessing_Init+0xdc>)
 800b148:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800b14c:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <Preprocessing_Init+0xdc>)
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800b154:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <Preprocessing_Init+0xdc>)
 800b156:	2201      	movs	r2, #1
 800b158:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800b15a:	4b0b      	ldr	r3, [pc, #44]	; (800b188 <Preprocessing_Init+0xdc>)
 800b15c:	2201      	movs	r2, #1
 800b15e:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800b160:	4809      	ldr	r0, [pc, #36]	; (800b188 <Preprocessing_Init+0xdc>)
 800b162:	f7f6 fc84 	bl	8001a6e <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800b166:	4b0c      	ldr	r3, [pc, #48]	; (800b198 <Preprocessing_Init+0xec>)
 800b168:	4a05      	ldr	r2, [pc, #20]	; (800b180 <Preprocessing_Init+0xd4>)
 800b16a:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800b16c:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <Preprocessing_Init+0xec>)
 800b16e:	4a06      	ldr	r2, [pc, #24]	; (800b188 <Preprocessing_Init+0xdc>)
 800b170:	605a      	str	r2, [r3, #4]
}
 800b172:	bf00      	nop
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20004afc 	.word	0x20004afc
 800b17c:	20004a90 	.word	0x20004a90
 800b180:	20004ad8 	.word	0x20004ad8
 800b184:	20005afc 	.word	0x20005afc
 800b188:	20004aa8 	.word	0x20004aa8
 800b18c:	20007a1c 	.word	0x20007a1c
 800b190:	20007c1c 	.word	0x20007c1c
 800b194:	20006afc 	.word	0x20006afc
 800b198:	20004af4 	.word	0x20004af4

0800b19c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a08      	ldr	r2, [pc, #32]	; (800b1c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d103      	bne.n	800b1b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800b1ac:	4b07      	ldr	r3, [pc, #28]	; (800b1cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800b1b2:	e002      	b.n	800b1ba <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800b1b4:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	200000f8 	.word	0x200000f8
 800b1cc:	200042dc 	.word	0x200042dc
 800b1d0:	200042e4 	.word	0x200042e4

0800b1d4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a08      	ldr	r2, [pc, #32]	; (800b200 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d103      	bne.n	800b1ec <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800b1e4:	4b07      	ldr	r3, [pc, #28]	; (800b204 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800b1ea:	e002      	b.n	800b1f2 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800b1ec:	4b06      	ldr	r3, [pc, #24]	; (800b208 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	200000f8 	.word	0x200000f8
 800b204:	200042e0 	.word	0x200042e0
 800b208:	200042e8 	.word	0x200042e8

0800b20c <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800b212:	4b52      	ldr	r3, [pc, #328]	; (800b35c <checkMicrophone+0x150>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d14a      	bne.n	800b2b0 <checkMicrophone+0xa4>
 800b21a:	4b51      	ldr	r3, [pc, #324]	; (800b360 <checkMicrophone+0x154>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d146      	bne.n	800b2b0 <checkMicrophone+0xa4>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800b222:	2300      	movs	r3, #0
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	e039      	b.n	800b29c <checkMicrophone+0x90>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b228:	4b4e      	ldr	r3, [pc, #312]	; (800b364 <checkMicrophone+0x158>)
 800b22a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b22e:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800b232:	2b01      	cmp	r3, #1
 800b234:	d028      	beq.n	800b288 <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b236:	4a4c      	ldr	r2, [pc, #304]	; (800b368 <checkMicrophone+0x15c>)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23e:	121b      	asrs	r3, r3, #8
 800b240:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b244:	db0b      	blt.n	800b25e <checkMicrophone+0x52>
 800b246:	4a48      	ldr	r2, [pc, #288]	; (800b368 <checkMicrophone+0x15c>)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b24e:	121b      	asrs	r3, r3, #8
 800b250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b254:	4293      	cmp	r3, r2
 800b256:	bfa8      	it	ge
 800b258:	4613      	movge	r3, r2
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	e001      	b.n	800b262 <checkMicrophone+0x56>
 800b25e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b262:	4b40      	ldr	r3, [pc, #256]	; (800b364 <checkMicrophone+0x158>)
 800b264:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b268:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b26c:	493d      	ldr	r1, [pc, #244]	; (800b364 <checkMicrophone+0x158>)
 800b26e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b272:	4b3c      	ldr	r3, [pc, #240]	; (800b364 <checkMicrophone+0x158>)
 800b274:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b278:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b27c:	3301      	adds	r3, #1
 800b27e:	4a39      	ldr	r2, [pc, #228]	; (800b364 <checkMicrophone+0x158>)
 800b280:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800b284:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b288:	4b36      	ldr	r3, [pc, #216]	; (800b364 <checkMicrophone+0x158>)
 800b28a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b28e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b292:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
		for(int i = 0; i < 1024; i++)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3301      	adds	r3, #1
 800b29a:	607b      	str	r3, [r7, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2a2:	dbc1      	blt.n	800b228 <checkMicrophone+0x1c>
				BufferCtl.wr_state!= BUFFER_FULL;
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800b2a4:	4b2d      	ldr	r3, [pc, #180]	; (800b35c <checkMicrophone+0x150>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800b2aa:	4b2d      	ldr	r3, [pc, #180]	; (800b360 <checkMicrophone+0x154>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800b2b0:	4b2e      	ldr	r3, [pc, #184]	; (800b36c <checkMicrophone+0x160>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d14b      	bne.n	800b350 <checkMicrophone+0x144>
 800b2b8:	4b2d      	ldr	r3, [pc, #180]	; (800b370 <checkMicrophone+0x164>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d147      	bne.n	800b350 <checkMicrophone+0x144>
	{
		for(int i = 1024; i < 2048; i++)
 800b2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c4:	603b      	str	r3, [r7, #0]
 800b2c6:	e039      	b.n	800b33c <checkMicrophone+0x130>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b2c8:	4b26      	ldr	r3, [pc, #152]	; (800b364 <checkMicrophone+0x158>)
 800b2ca:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b2ce:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d028      	beq.n	800b328 <checkMicrophone+0x11c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b2d6:	4a24      	ldr	r2, [pc, #144]	; (800b368 <checkMicrophone+0x15c>)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2de:	121b      	asrs	r3, r3, #8
 800b2e0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b2e4:	db0b      	blt.n	800b2fe <checkMicrophone+0xf2>
 800b2e6:	4a20      	ldr	r2, [pc, #128]	; (800b368 <checkMicrophone+0x15c>)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ee:	121b      	asrs	r3, r3, #8
 800b2f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	bfa8      	it	ge
 800b2f8:	4613      	movge	r3, r2
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	e001      	b.n	800b302 <checkMicrophone+0xf6>
 800b2fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b302:	4b18      	ldr	r3, [pc, #96]	; (800b364 <checkMicrophone+0x158>)
 800b304:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b308:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b30c:	4915      	ldr	r1, [pc, #84]	; (800b364 <checkMicrophone+0x158>)
 800b30e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b312:	4b14      	ldr	r3, [pc, #80]	; (800b364 <checkMicrophone+0x158>)
 800b314:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b318:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b31c:	3301      	adds	r3, #1
 800b31e:	4a11      	ldr	r2, [pc, #68]	; (800b364 <checkMicrophone+0x158>)
 800b320:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800b324:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b328:	4b0e      	ldr	r3, [pc, #56]	; (800b364 <checkMicrophone+0x158>)
 800b32a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b32e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b332:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
		for(int i = 1024; i < 2048; i++)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	603b      	str	r3, [r7, #0]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b342:	dbc1      	blt.n	800b2c8 <checkMicrophone+0xbc>
			{
				BufferCtl.wr_state!= BUFFER_FULL;
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800b344:	4b09      	ldr	r3, [pc, #36]	; (800b36c <checkMicrophone+0x160>)
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <checkMicrophone+0x164>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	601a      	str	r2, [r3, #0]
	}
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	200042dc 	.word	0x200042dc
 800b360:	200042e4 	.word	0x200042e4
 800b364:	20007e1c 	.word	0x20007e1c
 800b368:	200002dc 	.word	0x200002dc
 800b36c:	200042e0 	.word	0x200042e0
 800b370:	200042e8 	.word	0x200042e8

0800b374 <get_date>:
extern RTC_HandleTypeDef hrtc;


//returns a string containing current date
char* get_date( char* date)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af02      	add	r7, sp, #8
 800b37a:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800b37c:	f107 030c 	add.w	r3, r7, #12
 800b380:	2200      	movs	r2, #0
 800b382:	4619      	mov	r1, r3
 800b384:	480a      	ldr	r0, [pc, #40]	; (800b3b0 <get_date+0x3c>)
 800b386:	f7fa f96b 	bl	8005660 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	461a      	mov	r2, r3
 800b38e:	7b7b      	ldrb	r3, [r7, #13]
 800b390:	4619      	mov	r1, r3
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	460b      	mov	r3, r1
 800b39c:	4905      	ldr	r1, [pc, #20]	; (800b3b4 <get_date+0x40>)
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa8e 	bl	800b8c0 <siprintf>

	 return date;
 800b3a4:	687b      	ldr	r3, [r7, #4]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200042ec 	.word	0x200042ec
 800b3b4:	0800ce3c 	.word	0x0800ce3c

0800b3b8 <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08c      	sub	sp, #48	; 0x30
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800b3c0:	2364      	movs	r3, #100	; 0x64
 800b3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3c6:	236d      	movs	r3, #109	; 0x6d
 800b3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3cc:	2379      	movs	r3, #121	; 0x79
 800b3ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b3d2:	2368      	movs	r3, #104	; 0x68
 800b3d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800b3d8:	236d      	movs	r3, #109	; 0x6d
 800b3da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3de:	2373      	movs	r3, #115	; 0x73
 800b3e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800b3e4:	f107 030c 	add.w	r3, r7, #12
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	480c      	ldr	r0, [pc, #48]	; (800b420 <get_time_filename+0x68>)
 800b3ee:	f7fa f855 	bl	800549c <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4809      	ldr	r0, [pc, #36]	; (800b420 <get_time_filename+0x68>)
 800b3fc:	f7fa f930 	bl	8005660 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d.wav", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800b400:	7b3b      	ldrb	r3, [r7, #12]
 800b402:	461a      	mov	r2, r3
 800b404:	7b7b      	ldrb	r3, [r7, #13]
 800b406:	4619      	mov	r1, r3
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	460b      	mov	r3, r1
 800b40e:	4905      	ldr	r1, [pc, #20]	; (800b424 <get_time_filename+0x6c>)
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fa55 	bl	800b8c0 <siprintf>
	 return name;
 800b416:	687b      	ldr	r3, [r7, #4]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3728      	adds	r7, #40	; 0x28
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	200042ec 	.word	0x200042ec
 800b424:	0800ce60 	.word	0x0800ce60

0800b428 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800b42c:	2200      	movs	r2, #0
 800b42e:	4906      	ldr	r1, [pc, #24]	; (800b448 <SDInit+0x20>)
 800b430:	4806      	ldr	r0, [pc, #24]	; (800b44c <SDInit+0x24>)
 800b432:	f7ff f8b7 	bl	800a5a4 <f_mount>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <SDInit+0x18>
	      {
	          Error_Handler();
 800b43c:	f7f5 fe8a 	bl	8001154 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200045f0 	.word	0x200045f0
 800b44c:	200045f4 	.word	0x200045f4

0800b450 <createFile>:

int createFile(char* file_name)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800b458:	220a      	movs	r2, #10
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4807      	ldr	r0, [pc, #28]	; (800b47c <createFile+0x2c>)
 800b45e:	f7ff f8e7 	bl	800a630 <f_open>
 800b462:	4603      	mov	r3, r0
 800b464:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <createFile+0x22>
	  {
		  return -1;
 800b46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b470:	e000      	b.n	800b474 <createFile+0x24>
	  }
	  return 0;
 800b472:	2300      	movs	r3, #0

}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	20004824 	.word	0x20004824

0800b480 <writeToFile>:
int writeToFile(char* text, int size)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	f107 030c 	add.w	r3, r7, #12
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	4804      	ldr	r0, [pc, #16]	; (800b4a4 <writeToFile+0x24>)
 800b494:	f7ff fa8a 	bl	800a9ac <f_write>
	return byteswritten;
 800b498:	68fb      	ldr	r3, [r7, #12]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20004824 	.word	0x20004824

0800b4a8 <SDclose>:
int SDclose()
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800b4ac:	4802      	ldr	r0, [pc, #8]	; (800b4b8 <SDclose+0x10>)
 800b4ae:	f7ff fc70 	bl	800ad92 <f_close>
	return 0;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20004824 	.word	0x20004824

0800b4bc <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4cc:	d10a      	bne.n	800b4e4 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800b4ce:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	bf0c      	ite	eq
 800b4d6:	2301      	moveq	r3, #1
 800b4d8:	2300      	movne	r3, #0
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800b4e0:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800b4e2:	e000      	b.n	800b4e6 <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800b4e4:	bf00      	nop
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	200002d8 	.word	0x200002d8

0800b4f8 <arm_rfft_fast_init_f32>:
 800b4f8:	084b      	lsrs	r3, r1, #1
 800b4fa:	2b80      	cmp	r3, #128	; 0x80
 800b4fc:	b430      	push	{r4, r5}
 800b4fe:	8201      	strh	r1, [r0, #16]
 800b500:	8003      	strh	r3, [r0, #0]
 800b502:	d070      	beq.n	800b5e6 <arm_rfft_fast_init_f32+0xee>
 800b504:	d916      	bls.n	800b534 <arm_rfft_fast_init_f32+0x3c>
 800b506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b50a:	d05f      	beq.n	800b5cc <arm_rfft_fast_init_f32+0xd4>
 800b50c:	d936      	bls.n	800b57c <arm_rfft_fast_init_f32+0x84>
 800b50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b512:	d026      	beq.n	800b562 <arm_rfft_fast_init_f32+0x6a>
 800b514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b518:	d112      	bne.n	800b540 <arm_rfft_fast_init_f32+0x48>
 800b51a:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800b51e:	4c38      	ldr	r4, [pc, #224]	; (800b600 <arm_rfft_fast_init_f32+0x108>)
 800b520:	4938      	ldr	r1, [pc, #224]	; (800b604 <arm_rfft_fast_init_f32+0x10c>)
 800b522:	2300      	movs	r3, #0
 800b524:	4a38      	ldr	r2, [pc, #224]	; (800b608 <arm_rfft_fast_init_f32+0x110>)
 800b526:	8185      	strh	r5, [r0, #12]
 800b528:	6084      	str	r4, [r0, #8]
 800b52a:	6041      	str	r1, [r0, #4]
 800b52c:	6142      	str	r2, [r0, #20]
 800b52e:	4618      	mov	r0, r3
 800b530:	bc30      	pop	{r4, r5}
 800b532:	4770      	bx	lr
 800b534:	2b20      	cmp	r3, #32
 800b536:	d031      	beq.n	800b59c <arm_rfft_fast_init_f32+0xa4>
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d006      	beq.n	800b54a <arm_rfft_fast_init_f32+0x52>
 800b53c:	2b10      	cmp	r3, #16
 800b53e:	d039      	beq.n	800b5b4 <arm_rfft_fast_init_f32+0xbc>
 800b540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b544:	bc30      	pop	{r4, r5}
 800b546:	4618      	mov	r0, r3
 800b548:	4770      	bx	lr
 800b54a:	2538      	movs	r5, #56	; 0x38
 800b54c:	4c2f      	ldr	r4, [pc, #188]	; (800b60c <arm_rfft_fast_init_f32+0x114>)
 800b54e:	4930      	ldr	r1, [pc, #192]	; (800b610 <arm_rfft_fast_init_f32+0x118>)
 800b550:	2300      	movs	r3, #0
 800b552:	4a30      	ldr	r2, [pc, #192]	; (800b614 <arm_rfft_fast_init_f32+0x11c>)
 800b554:	8185      	strh	r5, [r0, #12]
 800b556:	6084      	str	r4, [r0, #8]
 800b558:	6041      	str	r1, [r0, #4]
 800b55a:	6142      	str	r2, [r0, #20]
 800b55c:	4618      	mov	r0, r3
 800b55e:	bc30      	pop	{r4, r5}
 800b560:	4770      	bx	lr
 800b562:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800b566:	4c2c      	ldr	r4, [pc, #176]	; (800b618 <arm_rfft_fast_init_f32+0x120>)
 800b568:	492c      	ldr	r1, [pc, #176]	; (800b61c <arm_rfft_fast_init_f32+0x124>)
 800b56a:	2300      	movs	r3, #0
 800b56c:	4a2c      	ldr	r2, [pc, #176]	; (800b620 <arm_rfft_fast_init_f32+0x128>)
 800b56e:	8185      	strh	r5, [r0, #12]
 800b570:	6084      	str	r4, [r0, #8]
 800b572:	6041      	str	r1, [r0, #4]
 800b574:	6142      	str	r2, [r0, #20]
 800b576:	4618      	mov	r0, r3
 800b578:	bc30      	pop	{r4, r5}
 800b57a:	4770      	bx	lr
 800b57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b580:	d1de      	bne.n	800b540 <arm_rfft_fast_init_f32+0x48>
 800b582:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800b586:	4c27      	ldr	r4, [pc, #156]	; (800b624 <arm_rfft_fast_init_f32+0x12c>)
 800b588:	4927      	ldr	r1, [pc, #156]	; (800b628 <arm_rfft_fast_init_f32+0x130>)
 800b58a:	2300      	movs	r3, #0
 800b58c:	4a27      	ldr	r2, [pc, #156]	; (800b62c <arm_rfft_fast_init_f32+0x134>)
 800b58e:	8185      	strh	r5, [r0, #12]
 800b590:	6084      	str	r4, [r0, #8]
 800b592:	6041      	str	r1, [r0, #4]
 800b594:	6142      	str	r2, [r0, #20]
 800b596:	4618      	mov	r0, r3
 800b598:	bc30      	pop	{r4, r5}
 800b59a:	4770      	bx	lr
 800b59c:	2530      	movs	r5, #48	; 0x30
 800b59e:	4c24      	ldr	r4, [pc, #144]	; (800b630 <arm_rfft_fast_init_f32+0x138>)
 800b5a0:	4924      	ldr	r1, [pc, #144]	; (800b634 <arm_rfft_fast_init_f32+0x13c>)
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4a24      	ldr	r2, [pc, #144]	; (800b638 <arm_rfft_fast_init_f32+0x140>)
 800b5a6:	8185      	strh	r5, [r0, #12]
 800b5a8:	6084      	str	r4, [r0, #8]
 800b5aa:	6041      	str	r1, [r0, #4]
 800b5ac:	6142      	str	r2, [r0, #20]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	bc30      	pop	{r4, r5}
 800b5b2:	4770      	bx	lr
 800b5b4:	2514      	movs	r5, #20
 800b5b6:	4c21      	ldr	r4, [pc, #132]	; (800b63c <arm_rfft_fast_init_f32+0x144>)
 800b5b8:	4921      	ldr	r1, [pc, #132]	; (800b640 <arm_rfft_fast_init_f32+0x148>)
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	4a21      	ldr	r2, [pc, #132]	; (800b644 <arm_rfft_fast_init_f32+0x14c>)
 800b5be:	8185      	strh	r5, [r0, #12]
 800b5c0:	6084      	str	r4, [r0, #8]
 800b5c2:	6041      	str	r1, [r0, #4]
 800b5c4:	6142      	str	r2, [r0, #20]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	bc30      	pop	{r4, r5}
 800b5ca:	4770      	bx	lr
 800b5cc:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800b5d0:	4c1d      	ldr	r4, [pc, #116]	; (800b648 <arm_rfft_fast_init_f32+0x150>)
 800b5d2:	491e      	ldr	r1, [pc, #120]	; (800b64c <arm_rfft_fast_init_f32+0x154>)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4a1e      	ldr	r2, [pc, #120]	; (800b650 <arm_rfft_fast_init_f32+0x158>)
 800b5d8:	8185      	strh	r5, [r0, #12]
 800b5da:	6084      	str	r4, [r0, #8]
 800b5dc:	6041      	str	r1, [r0, #4]
 800b5de:	6142      	str	r2, [r0, #20]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	bc30      	pop	{r4, r5}
 800b5e4:	4770      	bx	lr
 800b5e6:	25d0      	movs	r5, #208	; 0xd0
 800b5e8:	4c1a      	ldr	r4, [pc, #104]	; (800b654 <arm_rfft_fast_init_f32+0x15c>)
 800b5ea:	491b      	ldr	r1, [pc, #108]	; (800b658 <arm_rfft_fast_init_f32+0x160>)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4a1b      	ldr	r2, [pc, #108]	; (800b65c <arm_rfft_fast_init_f32+0x164>)
 800b5f0:	8185      	strh	r5, [r0, #12]
 800b5f2:	6084      	str	r4, [r0, #8]
 800b5f4:	6041      	str	r1, [r0, #4]
 800b5f6:	6142      	str	r2, [r0, #20]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	bc30      	pop	{r4, r5}
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	0801bd30 	.word	0x0801bd30
 800b604:	0800cf28 	.word	0x0800cf28
 800b608:	08013098 	.word	0x08013098
 800b60c:	08011028 	.word	0x08011028
 800b610:	0801daf0 	.word	0x0801daf0
 800b614:	0801ffe0 	.word	0x0801ffe0
 800b618:	08019a18 	.word	0x08019a18
 800b61c:	08017918 	.word	0x08017918
 800b620:	08011098 	.word	0x08011098
 800b624:	0801fc70 	.word	0x0801fc70
 800b628:	08017098 	.word	0x08017098
 800b62c:	0801dcf0 	.word	0x0801dcf0
 800b630:	0801a8d0 	.word	0x0801a8d0
 800b634:	08019918 	.word	0x08019918
 800b638:	08010f28 	.word	0x08010f28
 800b63c:	0801a828 	.word	0x0801a828
 800b640:	08017898 	.word	0x08017898
 800b644:	0801a850 	.word	0x0801a850
 800b648:	0801e4f0 	.word	0x0801e4f0
 800b64c:	0801ad30 	.word	0x0801ad30
 800b650:	0801e870 	.word	0x0801e870
 800b654:	080201e0 	.word	0x080201e0
 800b658:	0801a930 	.word	0x0801a930
 800b65c:	0801f870 	.word	0x0801f870

0800b660 <__errno>:
 800b660:	4b01      	ldr	r3, [pc, #4]	; (800b668 <__errno+0x8>)
 800b662:	6818      	ldr	r0, [r3, #0]
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	2000000c 	.word	0x2000000c

0800b66c <__libc_init_array>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	4d0d      	ldr	r5, [pc, #52]	; (800b6a4 <__libc_init_array+0x38>)
 800b670:	4c0d      	ldr	r4, [pc, #52]	; (800b6a8 <__libc_init_array+0x3c>)
 800b672:	1b64      	subs	r4, r4, r5
 800b674:	10a4      	asrs	r4, r4, #2
 800b676:	2600      	movs	r6, #0
 800b678:	42a6      	cmp	r6, r4
 800b67a:	d109      	bne.n	800b690 <__libc_init_array+0x24>
 800b67c:	4d0b      	ldr	r5, [pc, #44]	; (800b6ac <__libc_init_array+0x40>)
 800b67e:	4c0c      	ldr	r4, [pc, #48]	; (800b6b0 <__libc_init_array+0x44>)
 800b680:	f001 fba8 	bl	800cdd4 <_init>
 800b684:	1b64      	subs	r4, r4, r5
 800b686:	10a4      	asrs	r4, r4, #2
 800b688:	2600      	movs	r6, #0
 800b68a:	42a6      	cmp	r6, r4
 800b68c:	d105      	bne.n	800b69a <__libc_init_array+0x2e>
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	f855 3b04 	ldr.w	r3, [r5], #4
 800b694:	4798      	blx	r3
 800b696:	3601      	adds	r6, #1
 800b698:	e7ee      	b.n	800b678 <__libc_init_array+0xc>
 800b69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b69e:	4798      	blx	r3
 800b6a0:	3601      	adds	r6, #1
 800b6a2:	e7f2      	b.n	800b68a <__libc_init_array+0x1e>
 800b6a4:	08020800 	.word	0x08020800
 800b6a8:	08020800 	.word	0x08020800
 800b6ac:	08020800 	.word	0x08020800
 800b6b0:	08020804 	.word	0x08020804

0800b6b4 <memcpy>:
 800b6b4:	440a      	add	r2, r1
 800b6b6:	4291      	cmp	r1, r2
 800b6b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b6bc:	d100      	bne.n	800b6c0 <memcpy+0xc>
 800b6be:	4770      	bx	lr
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ca:	4291      	cmp	r1, r2
 800b6cc:	d1f9      	bne.n	800b6c2 <memcpy+0xe>
 800b6ce:	bd10      	pop	{r4, pc}

0800b6d0 <memset>:
 800b6d0:	4402      	add	r2, r0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d100      	bne.n	800b6da <memset+0xa>
 800b6d8:	4770      	bx	lr
 800b6da:	f803 1b01 	strb.w	r1, [r3], #1
 800b6de:	e7f9      	b.n	800b6d4 <memset+0x4>

0800b6e0 <_free_r>:
 800b6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	d044      	beq.n	800b770 <_free_r+0x90>
 800b6e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ea:	9001      	str	r0, [sp, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f1a1 0404 	sub.w	r4, r1, #4
 800b6f2:	bfb8      	it	lt
 800b6f4:	18e4      	addlt	r4, r4, r3
 800b6f6:	f000 f903 	bl	800b900 <__malloc_lock>
 800b6fa:	4a1e      	ldr	r2, [pc, #120]	; (800b774 <_free_r+0x94>)
 800b6fc:	9801      	ldr	r0, [sp, #4]
 800b6fe:	6813      	ldr	r3, [r2, #0]
 800b700:	b933      	cbnz	r3, 800b710 <_free_r+0x30>
 800b702:	6063      	str	r3, [r4, #4]
 800b704:	6014      	str	r4, [r2, #0]
 800b706:	b003      	add	sp, #12
 800b708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b70c:	f000 b8fe 	b.w	800b90c <__malloc_unlock>
 800b710:	42a3      	cmp	r3, r4
 800b712:	d908      	bls.n	800b726 <_free_r+0x46>
 800b714:	6825      	ldr	r5, [r4, #0]
 800b716:	1961      	adds	r1, r4, r5
 800b718:	428b      	cmp	r3, r1
 800b71a:	bf01      	itttt	eq
 800b71c:	6819      	ldreq	r1, [r3, #0]
 800b71e:	685b      	ldreq	r3, [r3, #4]
 800b720:	1949      	addeq	r1, r1, r5
 800b722:	6021      	streq	r1, [r4, #0]
 800b724:	e7ed      	b.n	800b702 <_free_r+0x22>
 800b726:	461a      	mov	r2, r3
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	b10b      	cbz	r3, 800b730 <_free_r+0x50>
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d9fa      	bls.n	800b726 <_free_r+0x46>
 800b730:	6811      	ldr	r1, [r2, #0]
 800b732:	1855      	adds	r5, r2, r1
 800b734:	42a5      	cmp	r5, r4
 800b736:	d10b      	bne.n	800b750 <_free_r+0x70>
 800b738:	6824      	ldr	r4, [r4, #0]
 800b73a:	4421      	add	r1, r4
 800b73c:	1854      	adds	r4, r2, r1
 800b73e:	42a3      	cmp	r3, r4
 800b740:	6011      	str	r1, [r2, #0]
 800b742:	d1e0      	bne.n	800b706 <_free_r+0x26>
 800b744:	681c      	ldr	r4, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	6053      	str	r3, [r2, #4]
 800b74a:	4421      	add	r1, r4
 800b74c:	6011      	str	r1, [r2, #0]
 800b74e:	e7da      	b.n	800b706 <_free_r+0x26>
 800b750:	d902      	bls.n	800b758 <_free_r+0x78>
 800b752:	230c      	movs	r3, #12
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	e7d6      	b.n	800b706 <_free_r+0x26>
 800b758:	6825      	ldr	r5, [r4, #0]
 800b75a:	1961      	adds	r1, r4, r5
 800b75c:	428b      	cmp	r3, r1
 800b75e:	bf04      	itt	eq
 800b760:	6819      	ldreq	r1, [r3, #0]
 800b762:	685b      	ldreq	r3, [r3, #4]
 800b764:	6063      	str	r3, [r4, #4]
 800b766:	bf04      	itt	eq
 800b768:	1949      	addeq	r1, r1, r5
 800b76a:	6021      	streq	r1, [r4, #0]
 800b76c:	6054      	str	r4, [r2, #4]
 800b76e:	e7ca      	b.n	800b706 <_free_r+0x26>
 800b770:	b003      	add	sp, #12
 800b772:	bd30      	pop	{r4, r5, pc}
 800b774:	2000fb30 	.word	0x2000fb30

0800b778 <sbrk_aligned>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	4e0e      	ldr	r6, [pc, #56]	; (800b7b4 <sbrk_aligned+0x3c>)
 800b77c:	460c      	mov	r4, r1
 800b77e:	6831      	ldr	r1, [r6, #0]
 800b780:	4605      	mov	r5, r0
 800b782:	b911      	cbnz	r1, 800b78a <sbrk_aligned+0x12>
 800b784:	f000 f88c 	bl	800b8a0 <_sbrk_r>
 800b788:	6030      	str	r0, [r6, #0]
 800b78a:	4621      	mov	r1, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	f000 f887 	bl	800b8a0 <_sbrk_r>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	d00a      	beq.n	800b7ac <sbrk_aligned+0x34>
 800b796:	1cc4      	adds	r4, r0, #3
 800b798:	f024 0403 	bic.w	r4, r4, #3
 800b79c:	42a0      	cmp	r0, r4
 800b79e:	d007      	beq.n	800b7b0 <sbrk_aligned+0x38>
 800b7a0:	1a21      	subs	r1, r4, r0
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f000 f87c 	bl	800b8a0 <_sbrk_r>
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	d101      	bne.n	800b7b0 <sbrk_aligned+0x38>
 800b7ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	2000fb34 	.word	0x2000fb34

0800b7b8 <_malloc_r>:
 800b7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7bc:	1ccd      	adds	r5, r1, #3
 800b7be:	f025 0503 	bic.w	r5, r5, #3
 800b7c2:	3508      	adds	r5, #8
 800b7c4:	2d0c      	cmp	r5, #12
 800b7c6:	bf38      	it	cc
 800b7c8:	250c      	movcc	r5, #12
 800b7ca:	2d00      	cmp	r5, #0
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	db01      	blt.n	800b7d4 <_malloc_r+0x1c>
 800b7d0:	42a9      	cmp	r1, r5
 800b7d2:	d905      	bls.n	800b7e0 <_malloc_r+0x28>
 800b7d4:	230c      	movs	r3, #12
 800b7d6:	603b      	str	r3, [r7, #0]
 800b7d8:	2600      	movs	r6, #0
 800b7da:	4630      	mov	r0, r6
 800b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e0:	4e2e      	ldr	r6, [pc, #184]	; (800b89c <_malloc_r+0xe4>)
 800b7e2:	f000 f88d 	bl	800b900 <__malloc_lock>
 800b7e6:	6833      	ldr	r3, [r6, #0]
 800b7e8:	461c      	mov	r4, r3
 800b7ea:	bb34      	cbnz	r4, 800b83a <_malloc_r+0x82>
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	f7ff ffc2 	bl	800b778 <sbrk_aligned>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	d14d      	bne.n	800b896 <_malloc_r+0xde>
 800b7fa:	6834      	ldr	r4, [r6, #0]
 800b7fc:	4626      	mov	r6, r4
 800b7fe:	2e00      	cmp	r6, #0
 800b800:	d140      	bne.n	800b884 <_malloc_r+0xcc>
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	4631      	mov	r1, r6
 800b806:	4638      	mov	r0, r7
 800b808:	eb04 0803 	add.w	r8, r4, r3
 800b80c:	f000 f848 	bl	800b8a0 <_sbrk_r>
 800b810:	4580      	cmp	r8, r0
 800b812:	d13a      	bne.n	800b88a <_malloc_r+0xd2>
 800b814:	6821      	ldr	r1, [r4, #0]
 800b816:	3503      	adds	r5, #3
 800b818:	1a6d      	subs	r5, r5, r1
 800b81a:	f025 0503 	bic.w	r5, r5, #3
 800b81e:	3508      	adds	r5, #8
 800b820:	2d0c      	cmp	r5, #12
 800b822:	bf38      	it	cc
 800b824:	250c      	movcc	r5, #12
 800b826:	4629      	mov	r1, r5
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff ffa5 	bl	800b778 <sbrk_aligned>
 800b82e:	3001      	adds	r0, #1
 800b830:	d02b      	beq.n	800b88a <_malloc_r+0xd2>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	442b      	add	r3, r5
 800b836:	6023      	str	r3, [r4, #0]
 800b838:	e00e      	b.n	800b858 <_malloc_r+0xa0>
 800b83a:	6822      	ldr	r2, [r4, #0]
 800b83c:	1b52      	subs	r2, r2, r5
 800b83e:	d41e      	bmi.n	800b87e <_malloc_r+0xc6>
 800b840:	2a0b      	cmp	r2, #11
 800b842:	d916      	bls.n	800b872 <_malloc_r+0xba>
 800b844:	1961      	adds	r1, r4, r5
 800b846:	42a3      	cmp	r3, r4
 800b848:	6025      	str	r5, [r4, #0]
 800b84a:	bf18      	it	ne
 800b84c:	6059      	strne	r1, [r3, #4]
 800b84e:	6863      	ldr	r3, [r4, #4]
 800b850:	bf08      	it	eq
 800b852:	6031      	streq	r1, [r6, #0]
 800b854:	5162      	str	r2, [r4, r5]
 800b856:	604b      	str	r3, [r1, #4]
 800b858:	4638      	mov	r0, r7
 800b85a:	f104 060b 	add.w	r6, r4, #11
 800b85e:	f000 f855 	bl	800b90c <__malloc_unlock>
 800b862:	f026 0607 	bic.w	r6, r6, #7
 800b866:	1d23      	adds	r3, r4, #4
 800b868:	1af2      	subs	r2, r6, r3
 800b86a:	d0b6      	beq.n	800b7da <_malloc_r+0x22>
 800b86c:	1b9b      	subs	r3, r3, r6
 800b86e:	50a3      	str	r3, [r4, r2]
 800b870:	e7b3      	b.n	800b7da <_malloc_r+0x22>
 800b872:	6862      	ldr	r2, [r4, #4]
 800b874:	42a3      	cmp	r3, r4
 800b876:	bf0c      	ite	eq
 800b878:	6032      	streq	r2, [r6, #0]
 800b87a:	605a      	strne	r2, [r3, #4]
 800b87c:	e7ec      	b.n	800b858 <_malloc_r+0xa0>
 800b87e:	4623      	mov	r3, r4
 800b880:	6864      	ldr	r4, [r4, #4]
 800b882:	e7b2      	b.n	800b7ea <_malloc_r+0x32>
 800b884:	4634      	mov	r4, r6
 800b886:	6876      	ldr	r6, [r6, #4]
 800b888:	e7b9      	b.n	800b7fe <_malloc_r+0x46>
 800b88a:	230c      	movs	r3, #12
 800b88c:	603b      	str	r3, [r7, #0]
 800b88e:	4638      	mov	r0, r7
 800b890:	f000 f83c 	bl	800b90c <__malloc_unlock>
 800b894:	e7a1      	b.n	800b7da <_malloc_r+0x22>
 800b896:	6025      	str	r5, [r4, #0]
 800b898:	e7de      	b.n	800b858 <_malloc_r+0xa0>
 800b89a:	bf00      	nop
 800b89c:	2000fb30 	.word	0x2000fb30

0800b8a0 <_sbrk_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d06      	ldr	r5, [pc, #24]	; (800b8bc <_sbrk_r+0x1c>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	602b      	str	r3, [r5, #0]
 800b8ac:	f7f5 ffbc 	bl	8001828 <_sbrk>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_sbrk_r+0x1a>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_sbrk_r+0x1a>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	2000fb38 	.word	0x2000fb38

0800b8c0 <siprintf>:
 800b8c0:	b40e      	push	{r1, r2, r3}
 800b8c2:	b500      	push	{lr}
 800b8c4:	b09c      	sub	sp, #112	; 0x70
 800b8c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b8c8:	9002      	str	r0, [sp, #8]
 800b8ca:	9006      	str	r0, [sp, #24]
 800b8cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8d0:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <siprintf+0x38>)
 800b8d2:	9107      	str	r1, [sp, #28]
 800b8d4:	9104      	str	r1, [sp, #16]
 800b8d6:	4909      	ldr	r1, [pc, #36]	; (800b8fc <siprintf+0x3c>)
 800b8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8dc:	9105      	str	r1, [sp, #20]
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	a902      	add	r1, sp, #8
 800b8e4:	f000 f8a2 	bl	800ba2c <_svfiprintf_r>
 800b8e8:	9b02      	ldr	r3, [sp, #8]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	b01c      	add	sp, #112	; 0x70
 800b8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8f4:	b003      	add	sp, #12
 800b8f6:	4770      	bx	lr
 800b8f8:	2000000c 	.word	0x2000000c
 800b8fc:	ffff0208 	.word	0xffff0208

0800b900 <__malloc_lock>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__malloc_lock+0x8>)
 800b902:	f000 bb27 	b.w	800bf54 <__retarget_lock_acquire_recursive>
 800b906:	bf00      	nop
 800b908:	2000fb3c 	.word	0x2000fb3c

0800b90c <__malloc_unlock>:
 800b90c:	4801      	ldr	r0, [pc, #4]	; (800b914 <__malloc_unlock+0x8>)
 800b90e:	f000 bb22 	b.w	800bf56 <__retarget_lock_release_recursive>
 800b912:	bf00      	nop
 800b914:	2000fb3c 	.word	0x2000fb3c

0800b918 <_realloc_r>:
 800b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	4680      	mov	r8, r0
 800b91e:	4614      	mov	r4, r2
 800b920:	460e      	mov	r6, r1
 800b922:	b921      	cbnz	r1, 800b92e <_realloc_r+0x16>
 800b924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	4611      	mov	r1, r2
 800b92a:	f7ff bf45 	b.w	800b7b8 <_malloc_r>
 800b92e:	b92a      	cbnz	r2, 800b93c <_realloc_r+0x24>
 800b930:	f7ff fed6 	bl	800b6e0 <_free_r>
 800b934:	4625      	mov	r5, r4
 800b936:	4628      	mov	r0, r5
 800b938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93c:	f000 fb26 	bl	800bf8c <_malloc_usable_size_r>
 800b940:	4284      	cmp	r4, r0
 800b942:	4607      	mov	r7, r0
 800b944:	d802      	bhi.n	800b94c <_realloc_r+0x34>
 800b946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b94a:	d812      	bhi.n	800b972 <_realloc_r+0x5a>
 800b94c:	4621      	mov	r1, r4
 800b94e:	4640      	mov	r0, r8
 800b950:	f7ff ff32 	bl	800b7b8 <_malloc_r>
 800b954:	4605      	mov	r5, r0
 800b956:	2800      	cmp	r0, #0
 800b958:	d0ed      	beq.n	800b936 <_realloc_r+0x1e>
 800b95a:	42bc      	cmp	r4, r7
 800b95c:	4622      	mov	r2, r4
 800b95e:	4631      	mov	r1, r6
 800b960:	bf28      	it	cs
 800b962:	463a      	movcs	r2, r7
 800b964:	f7ff fea6 	bl	800b6b4 <memcpy>
 800b968:	4631      	mov	r1, r6
 800b96a:	4640      	mov	r0, r8
 800b96c:	f7ff feb8 	bl	800b6e0 <_free_r>
 800b970:	e7e1      	b.n	800b936 <_realloc_r+0x1e>
 800b972:	4635      	mov	r5, r6
 800b974:	e7df      	b.n	800b936 <_realloc_r+0x1e>

0800b976 <__ssputs_r>:
 800b976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97a:	688e      	ldr	r6, [r1, #8]
 800b97c:	429e      	cmp	r6, r3
 800b97e:	4682      	mov	sl, r0
 800b980:	460c      	mov	r4, r1
 800b982:	4690      	mov	r8, r2
 800b984:	461f      	mov	r7, r3
 800b986:	d838      	bhi.n	800b9fa <__ssputs_r+0x84>
 800b988:	898a      	ldrh	r2, [r1, #12]
 800b98a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b98e:	d032      	beq.n	800b9f6 <__ssputs_r+0x80>
 800b990:	6825      	ldr	r5, [r4, #0]
 800b992:	6909      	ldr	r1, [r1, #16]
 800b994:	eba5 0901 	sub.w	r9, r5, r1
 800b998:	6965      	ldr	r5, [r4, #20]
 800b99a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b99e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	444b      	add	r3, r9
 800b9a6:	106d      	asrs	r5, r5, #1
 800b9a8:	429d      	cmp	r5, r3
 800b9aa:	bf38      	it	cc
 800b9ac:	461d      	movcc	r5, r3
 800b9ae:	0553      	lsls	r3, r2, #21
 800b9b0:	d531      	bpl.n	800ba16 <__ssputs_r+0xa0>
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7ff ff00 	bl	800b7b8 <_malloc_r>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	b950      	cbnz	r0, 800b9d2 <__ssputs_r+0x5c>
 800b9bc:	230c      	movs	r3, #12
 800b9be:	f8ca 3000 	str.w	r3, [sl]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d2:	6921      	ldr	r1, [r4, #16]
 800b9d4:	464a      	mov	r2, r9
 800b9d6:	f7ff fe6d 	bl	800b6b4 <memcpy>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	6126      	str	r6, [r4, #16]
 800b9e8:	6165      	str	r5, [r4, #20]
 800b9ea:	444e      	add	r6, r9
 800b9ec:	eba5 0509 	sub.w	r5, r5, r9
 800b9f0:	6026      	str	r6, [r4, #0]
 800b9f2:	60a5      	str	r5, [r4, #8]
 800b9f4:	463e      	mov	r6, r7
 800b9f6:	42be      	cmp	r6, r7
 800b9f8:	d900      	bls.n	800b9fc <__ssputs_r+0x86>
 800b9fa:	463e      	mov	r6, r7
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	4632      	mov	r2, r6
 800ba00:	4641      	mov	r1, r8
 800ba02:	f000 faa9 	bl	800bf58 <memmove>
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	1b9b      	subs	r3, r3, r6
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	4433      	add	r3, r6
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	2000      	movs	r0, #0
 800ba14:	e7db      	b.n	800b9ce <__ssputs_r+0x58>
 800ba16:	462a      	mov	r2, r5
 800ba18:	f7ff ff7e 	bl	800b918 <_realloc_r>
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d1e1      	bne.n	800b9e6 <__ssputs_r+0x70>
 800ba22:	6921      	ldr	r1, [r4, #16]
 800ba24:	4650      	mov	r0, sl
 800ba26:	f7ff fe5b 	bl	800b6e0 <_free_r>
 800ba2a:	e7c7      	b.n	800b9bc <__ssputs_r+0x46>

0800ba2c <_svfiprintf_r>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	4698      	mov	r8, r3
 800ba32:	898b      	ldrh	r3, [r1, #12]
 800ba34:	061b      	lsls	r3, r3, #24
 800ba36:	b09d      	sub	sp, #116	; 0x74
 800ba38:	4607      	mov	r7, r0
 800ba3a:	460d      	mov	r5, r1
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	d50e      	bpl.n	800ba5e <_svfiprintf_r+0x32>
 800ba40:	690b      	ldr	r3, [r1, #16]
 800ba42:	b963      	cbnz	r3, 800ba5e <_svfiprintf_r+0x32>
 800ba44:	2140      	movs	r1, #64	; 0x40
 800ba46:	f7ff feb7 	bl	800b7b8 <_malloc_r>
 800ba4a:	6028      	str	r0, [r5, #0]
 800ba4c:	6128      	str	r0, [r5, #16]
 800ba4e:	b920      	cbnz	r0, 800ba5a <_svfiprintf_r+0x2e>
 800ba50:	230c      	movs	r3, #12
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba58:	e0d1      	b.n	800bbfe <_svfiprintf_r+0x1d2>
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	616b      	str	r3, [r5, #20]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9309      	str	r3, [sp, #36]	; 0x24
 800ba62:	2320      	movs	r3, #32
 800ba64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba6c:	2330      	movs	r3, #48	; 0x30
 800ba6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc18 <_svfiprintf_r+0x1ec>
 800ba72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba76:	f04f 0901 	mov.w	r9, #1
 800ba7a:	4623      	mov	r3, r4
 800ba7c:	469a      	mov	sl, r3
 800ba7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba82:	b10a      	cbz	r2, 800ba88 <_svfiprintf_r+0x5c>
 800ba84:	2a25      	cmp	r2, #37	; 0x25
 800ba86:	d1f9      	bne.n	800ba7c <_svfiprintf_r+0x50>
 800ba88:	ebba 0b04 	subs.w	fp, sl, r4
 800ba8c:	d00b      	beq.n	800baa6 <_svfiprintf_r+0x7a>
 800ba8e:	465b      	mov	r3, fp
 800ba90:	4622      	mov	r2, r4
 800ba92:	4629      	mov	r1, r5
 800ba94:	4638      	mov	r0, r7
 800ba96:	f7ff ff6e 	bl	800b976 <__ssputs_r>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	f000 80aa 	beq.w	800bbf4 <_svfiprintf_r+0x1c8>
 800baa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa2:	445a      	add	r2, fp
 800baa4:	9209      	str	r2, [sp, #36]	; 0x24
 800baa6:	f89a 3000 	ldrb.w	r3, [sl]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 80a2 	beq.w	800bbf4 <_svfiprintf_r+0x1c8>
 800bab0:	2300      	movs	r3, #0
 800bab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baba:	f10a 0a01 	add.w	sl, sl, #1
 800babe:	9304      	str	r3, [sp, #16]
 800bac0:	9307      	str	r3, [sp, #28]
 800bac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac6:	931a      	str	r3, [sp, #104]	; 0x68
 800bac8:	4654      	mov	r4, sl
 800baca:	2205      	movs	r2, #5
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	4851      	ldr	r0, [pc, #324]	; (800bc18 <_svfiprintf_r+0x1ec>)
 800bad2:	f7f4 fbb5 	bl	8000240 <memchr>
 800bad6:	9a04      	ldr	r2, [sp, #16]
 800bad8:	b9d8      	cbnz	r0, 800bb12 <_svfiprintf_r+0xe6>
 800bada:	06d0      	lsls	r0, r2, #27
 800badc:	bf44      	itt	mi
 800bade:	2320      	movmi	r3, #32
 800bae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae4:	0711      	lsls	r1, r2, #28
 800bae6:	bf44      	itt	mi
 800bae8:	232b      	movmi	r3, #43	; 0x2b
 800baea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baee:	f89a 3000 	ldrb.w	r3, [sl]
 800baf2:	2b2a      	cmp	r3, #42	; 0x2a
 800baf4:	d015      	beq.n	800bb22 <_svfiprintf_r+0xf6>
 800baf6:	9a07      	ldr	r2, [sp, #28]
 800baf8:	4654      	mov	r4, sl
 800bafa:	2000      	movs	r0, #0
 800bafc:	f04f 0c0a 	mov.w	ip, #10
 800bb00:	4621      	mov	r1, r4
 800bb02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb06:	3b30      	subs	r3, #48	; 0x30
 800bb08:	2b09      	cmp	r3, #9
 800bb0a:	d94e      	bls.n	800bbaa <_svfiprintf_r+0x17e>
 800bb0c:	b1b0      	cbz	r0, 800bb3c <_svfiprintf_r+0x110>
 800bb0e:	9207      	str	r2, [sp, #28]
 800bb10:	e014      	b.n	800bb3c <_svfiprintf_r+0x110>
 800bb12:	eba0 0308 	sub.w	r3, r0, r8
 800bb16:	fa09 f303 	lsl.w	r3, r9, r3
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	46a2      	mov	sl, r4
 800bb20:	e7d2      	b.n	800bac8 <_svfiprintf_r+0x9c>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	1d19      	adds	r1, r3, #4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	9103      	str	r1, [sp, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfbb      	ittet	lt
 800bb2e:	425b      	neglt	r3, r3
 800bb30:	f042 0202 	orrlt.w	r2, r2, #2
 800bb34:	9307      	strge	r3, [sp, #28]
 800bb36:	9307      	strlt	r3, [sp, #28]
 800bb38:	bfb8      	it	lt
 800bb3a:	9204      	strlt	r2, [sp, #16]
 800bb3c:	7823      	ldrb	r3, [r4, #0]
 800bb3e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb40:	d10c      	bne.n	800bb5c <_svfiprintf_r+0x130>
 800bb42:	7863      	ldrb	r3, [r4, #1]
 800bb44:	2b2a      	cmp	r3, #42	; 0x2a
 800bb46:	d135      	bne.n	800bbb4 <_svfiprintf_r+0x188>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	1d1a      	adds	r2, r3, #4
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	9203      	str	r2, [sp, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	bfb8      	it	lt
 800bb54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb58:	3402      	adds	r4, #2
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc28 <_svfiprintf_r+0x1fc>
 800bb60:	7821      	ldrb	r1, [r4, #0]
 800bb62:	2203      	movs	r2, #3
 800bb64:	4650      	mov	r0, sl
 800bb66:	f7f4 fb6b 	bl	8000240 <memchr>
 800bb6a:	b140      	cbz	r0, 800bb7e <_svfiprintf_r+0x152>
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	eba0 000a 	sub.w	r0, r0, sl
 800bb72:	fa03 f000 	lsl.w	r0, r3, r0
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	4303      	orrs	r3, r0
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	4826      	ldr	r0, [pc, #152]	; (800bc1c <_svfiprintf_r+0x1f0>)
 800bb84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb88:	2206      	movs	r2, #6
 800bb8a:	f7f4 fb59 	bl	8000240 <memchr>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d038      	beq.n	800bc04 <_svfiprintf_r+0x1d8>
 800bb92:	4b23      	ldr	r3, [pc, #140]	; (800bc20 <_svfiprintf_r+0x1f4>)
 800bb94:	bb1b      	cbnz	r3, 800bbde <_svfiprintf_r+0x1b2>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	3307      	adds	r3, #7
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba4:	4433      	add	r3, r6
 800bba6:	9309      	str	r3, [sp, #36]	; 0x24
 800bba8:	e767      	b.n	800ba7a <_svfiprintf_r+0x4e>
 800bbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbae:	460c      	mov	r4, r1
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	e7a5      	b.n	800bb00 <_svfiprintf_r+0xd4>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	3401      	adds	r4, #1
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f04f 0c0a 	mov.w	ip, #10
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc6:	3a30      	subs	r2, #48	; 0x30
 800bbc8:	2a09      	cmp	r2, #9
 800bbca:	d903      	bls.n	800bbd4 <_svfiprintf_r+0x1a8>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c5      	beq.n	800bb5c <_svfiprintf_r+0x130>
 800bbd0:	9105      	str	r1, [sp, #20]
 800bbd2:	e7c3      	b.n	800bb5c <_svfiprintf_r+0x130>
 800bbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd8:	4604      	mov	r4, r0
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7f0      	b.n	800bbc0 <_svfiprintf_r+0x194>
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <_svfiprintf_r+0x1f8>)
 800bbe6:	a904      	add	r1, sp, #16
 800bbe8:	4638      	mov	r0, r7
 800bbea:	f3af 8000 	nop.w
 800bbee:	1c42      	adds	r2, r0, #1
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	d1d6      	bne.n	800bba2 <_svfiprintf_r+0x176>
 800bbf4:	89ab      	ldrh	r3, [r5, #12]
 800bbf6:	065b      	lsls	r3, r3, #25
 800bbf8:	f53f af2c 	bmi.w	800ba54 <_svfiprintf_r+0x28>
 800bbfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbfe:	b01d      	add	sp, #116	; 0x74
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	ab03      	add	r3, sp, #12
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <_svfiprintf_r+0x1f8>)
 800bc0c:	a904      	add	r1, sp, #16
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f000 f87a 	bl	800bd08 <_printf_i>
 800bc14:	e7eb      	b.n	800bbee <_svfiprintf_r+0x1c2>
 800bc16:	bf00      	nop
 800bc18:	08020380 	.word	0x08020380
 800bc1c:	0802038a 	.word	0x0802038a
 800bc20:	00000000 	.word	0x00000000
 800bc24:	0800b977 	.word	0x0800b977
 800bc28:	08020386 	.word	0x08020386

0800bc2c <_printf_common>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	4616      	mov	r6, r2
 800bc32:	4699      	mov	r9, r3
 800bc34:	688a      	ldr	r2, [r1, #8]
 800bc36:	690b      	ldr	r3, [r1, #16]
 800bc38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	bfb8      	it	lt
 800bc40:	4613      	movlt	r3, r2
 800bc42:	6033      	str	r3, [r6, #0]
 800bc44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc48:	4607      	mov	r7, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	b10a      	cbz	r2, 800bc52 <_printf_common+0x26>
 800bc4e:	3301      	adds	r3, #1
 800bc50:	6033      	str	r3, [r6, #0]
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	0699      	lsls	r1, r3, #26
 800bc56:	bf42      	ittt	mi
 800bc58:	6833      	ldrmi	r3, [r6, #0]
 800bc5a:	3302      	addmi	r3, #2
 800bc5c:	6033      	strmi	r3, [r6, #0]
 800bc5e:	6825      	ldr	r5, [r4, #0]
 800bc60:	f015 0506 	ands.w	r5, r5, #6
 800bc64:	d106      	bne.n	800bc74 <_printf_common+0x48>
 800bc66:	f104 0a19 	add.w	sl, r4, #25
 800bc6a:	68e3      	ldr	r3, [r4, #12]
 800bc6c:	6832      	ldr	r2, [r6, #0]
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dc26      	bgt.n	800bcc2 <_printf_common+0x96>
 800bc74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc78:	1e13      	subs	r3, r2, #0
 800bc7a:	6822      	ldr	r2, [r4, #0]
 800bc7c:	bf18      	it	ne
 800bc7e:	2301      	movne	r3, #1
 800bc80:	0692      	lsls	r2, r2, #26
 800bc82:	d42b      	bmi.n	800bcdc <_printf_common+0xb0>
 800bc84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc88:	4649      	mov	r1, r9
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	47c0      	blx	r8
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d01e      	beq.n	800bcd0 <_printf_common+0xa4>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	68e5      	ldr	r5, [r4, #12]
 800bc96:	6832      	ldr	r2, [r6, #0]
 800bc98:	f003 0306 	and.w	r3, r3, #6
 800bc9c:	2b04      	cmp	r3, #4
 800bc9e:	bf08      	it	eq
 800bca0:	1aad      	subeq	r5, r5, r2
 800bca2:	68a3      	ldr	r3, [r4, #8]
 800bca4:	6922      	ldr	r2, [r4, #16]
 800bca6:	bf0c      	ite	eq
 800bca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcac:	2500      	movne	r5, #0
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bfc4      	itt	gt
 800bcb2:	1a9b      	subgt	r3, r3, r2
 800bcb4:	18ed      	addgt	r5, r5, r3
 800bcb6:	2600      	movs	r6, #0
 800bcb8:	341a      	adds	r4, #26
 800bcba:	42b5      	cmp	r5, r6
 800bcbc:	d11a      	bne.n	800bcf4 <_printf_common+0xc8>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e008      	b.n	800bcd4 <_printf_common+0xa8>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	4638      	mov	r0, r7
 800bcca:	47c0      	blx	r8
 800bccc:	3001      	adds	r0, #1
 800bcce:	d103      	bne.n	800bcd8 <_printf_common+0xac>
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd8:	3501      	adds	r5, #1
 800bcda:	e7c6      	b.n	800bc6a <_printf_common+0x3e>
 800bcdc:	18e1      	adds	r1, r4, r3
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	2030      	movs	r0, #48	; 0x30
 800bce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bce6:	4422      	add	r2, r4
 800bce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcf0:	3302      	adds	r3, #2
 800bcf2:	e7c7      	b.n	800bc84 <_printf_common+0x58>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	47c0      	blx	r8
 800bcfe:	3001      	adds	r0, #1
 800bd00:	d0e6      	beq.n	800bcd0 <_printf_common+0xa4>
 800bd02:	3601      	adds	r6, #1
 800bd04:	e7d9      	b.n	800bcba <_printf_common+0x8e>
	...

0800bd08 <_printf_i>:
 800bd08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	7e0f      	ldrb	r7, [r1, #24]
 800bd0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd10:	2f78      	cmp	r7, #120	; 0x78
 800bd12:	4691      	mov	r9, r2
 800bd14:	4680      	mov	r8, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	469a      	mov	sl, r3
 800bd1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd1e:	d807      	bhi.n	800bd30 <_printf_i+0x28>
 800bd20:	2f62      	cmp	r7, #98	; 0x62
 800bd22:	d80a      	bhi.n	800bd3a <_printf_i+0x32>
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	f000 80d8 	beq.w	800beda <_printf_i+0x1d2>
 800bd2a:	2f58      	cmp	r7, #88	; 0x58
 800bd2c:	f000 80a3 	beq.w	800be76 <_printf_i+0x16e>
 800bd30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd38:	e03a      	b.n	800bdb0 <_printf_i+0xa8>
 800bd3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd3e:	2b15      	cmp	r3, #21
 800bd40:	d8f6      	bhi.n	800bd30 <_printf_i+0x28>
 800bd42:	a101      	add	r1, pc, #4	; (adr r1, 800bd48 <_printf_i+0x40>)
 800bd44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd48:	0800bda1 	.word	0x0800bda1
 800bd4c:	0800bdb5 	.word	0x0800bdb5
 800bd50:	0800bd31 	.word	0x0800bd31
 800bd54:	0800bd31 	.word	0x0800bd31
 800bd58:	0800bd31 	.word	0x0800bd31
 800bd5c:	0800bd31 	.word	0x0800bd31
 800bd60:	0800bdb5 	.word	0x0800bdb5
 800bd64:	0800bd31 	.word	0x0800bd31
 800bd68:	0800bd31 	.word	0x0800bd31
 800bd6c:	0800bd31 	.word	0x0800bd31
 800bd70:	0800bd31 	.word	0x0800bd31
 800bd74:	0800bec1 	.word	0x0800bec1
 800bd78:	0800bde5 	.word	0x0800bde5
 800bd7c:	0800bea3 	.word	0x0800bea3
 800bd80:	0800bd31 	.word	0x0800bd31
 800bd84:	0800bd31 	.word	0x0800bd31
 800bd88:	0800bee3 	.word	0x0800bee3
 800bd8c:	0800bd31 	.word	0x0800bd31
 800bd90:	0800bde5 	.word	0x0800bde5
 800bd94:	0800bd31 	.word	0x0800bd31
 800bd98:	0800bd31 	.word	0x0800bd31
 800bd9c:	0800beab 	.word	0x0800beab
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	602a      	str	r2, [r5, #0]
 800bda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e0a3      	b.n	800befc <_printf_i+0x1f4>
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	6829      	ldr	r1, [r5, #0]
 800bdb8:	0606      	lsls	r6, r0, #24
 800bdba:	f101 0304 	add.w	r3, r1, #4
 800bdbe:	d50a      	bpl.n	800bdd6 <_printf_i+0xce>
 800bdc0:	680e      	ldr	r6, [r1, #0]
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	2e00      	cmp	r6, #0
 800bdc6:	da03      	bge.n	800bdd0 <_printf_i+0xc8>
 800bdc8:	232d      	movs	r3, #45	; 0x2d
 800bdca:	4276      	negs	r6, r6
 800bdcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd0:	485e      	ldr	r0, [pc, #376]	; (800bf4c <_printf_i+0x244>)
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	e019      	b.n	800be0a <_printf_i+0x102>
 800bdd6:	680e      	ldr	r6, [r1, #0]
 800bdd8:	602b      	str	r3, [r5, #0]
 800bdda:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdde:	bf18      	it	ne
 800bde0:	b236      	sxthne	r6, r6
 800bde2:	e7ef      	b.n	800bdc4 <_printf_i+0xbc>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	6820      	ldr	r0, [r4, #0]
 800bde8:	1d19      	adds	r1, r3, #4
 800bdea:	6029      	str	r1, [r5, #0]
 800bdec:	0601      	lsls	r1, r0, #24
 800bdee:	d501      	bpl.n	800bdf4 <_printf_i+0xec>
 800bdf0:	681e      	ldr	r6, [r3, #0]
 800bdf2:	e002      	b.n	800bdfa <_printf_i+0xf2>
 800bdf4:	0646      	lsls	r6, r0, #25
 800bdf6:	d5fb      	bpl.n	800bdf0 <_printf_i+0xe8>
 800bdf8:	881e      	ldrh	r6, [r3, #0]
 800bdfa:	4854      	ldr	r0, [pc, #336]	; (800bf4c <_printf_i+0x244>)
 800bdfc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdfe:	bf0c      	ite	eq
 800be00:	2308      	moveq	r3, #8
 800be02:	230a      	movne	r3, #10
 800be04:	2100      	movs	r1, #0
 800be06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be0a:	6865      	ldr	r5, [r4, #4]
 800be0c:	60a5      	str	r5, [r4, #8]
 800be0e:	2d00      	cmp	r5, #0
 800be10:	bfa2      	ittt	ge
 800be12:	6821      	ldrge	r1, [r4, #0]
 800be14:	f021 0104 	bicge.w	r1, r1, #4
 800be18:	6021      	strge	r1, [r4, #0]
 800be1a:	b90e      	cbnz	r6, 800be20 <_printf_i+0x118>
 800be1c:	2d00      	cmp	r5, #0
 800be1e:	d04d      	beq.n	800bebc <_printf_i+0x1b4>
 800be20:	4615      	mov	r5, r2
 800be22:	fbb6 f1f3 	udiv	r1, r6, r3
 800be26:	fb03 6711 	mls	r7, r3, r1, r6
 800be2a:	5dc7      	ldrb	r7, [r0, r7]
 800be2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be30:	4637      	mov	r7, r6
 800be32:	42bb      	cmp	r3, r7
 800be34:	460e      	mov	r6, r1
 800be36:	d9f4      	bls.n	800be22 <_printf_i+0x11a>
 800be38:	2b08      	cmp	r3, #8
 800be3a:	d10b      	bne.n	800be54 <_printf_i+0x14c>
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	07de      	lsls	r6, r3, #31
 800be40:	d508      	bpl.n	800be54 <_printf_i+0x14c>
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	6861      	ldr	r1, [r4, #4]
 800be46:	4299      	cmp	r1, r3
 800be48:	bfde      	ittt	le
 800be4a:	2330      	movle	r3, #48	; 0x30
 800be4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800be54:	1b52      	subs	r2, r2, r5
 800be56:	6122      	str	r2, [r4, #16]
 800be58:	f8cd a000 	str.w	sl, [sp]
 800be5c:	464b      	mov	r3, r9
 800be5e:	aa03      	add	r2, sp, #12
 800be60:	4621      	mov	r1, r4
 800be62:	4640      	mov	r0, r8
 800be64:	f7ff fee2 	bl	800bc2c <_printf_common>
 800be68:	3001      	adds	r0, #1
 800be6a:	d14c      	bne.n	800bf06 <_printf_i+0x1fe>
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be70:	b004      	add	sp, #16
 800be72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be76:	4835      	ldr	r0, [pc, #212]	; (800bf4c <_printf_i+0x244>)
 800be78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be7c:	6829      	ldr	r1, [r5, #0]
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	f851 6b04 	ldr.w	r6, [r1], #4
 800be84:	6029      	str	r1, [r5, #0]
 800be86:	061d      	lsls	r5, r3, #24
 800be88:	d514      	bpl.n	800beb4 <_printf_i+0x1ac>
 800be8a:	07df      	lsls	r7, r3, #31
 800be8c:	bf44      	itt	mi
 800be8e:	f043 0320 	orrmi.w	r3, r3, #32
 800be92:	6023      	strmi	r3, [r4, #0]
 800be94:	b91e      	cbnz	r6, 800be9e <_printf_i+0x196>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	f023 0320 	bic.w	r3, r3, #32
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	2310      	movs	r3, #16
 800bea0:	e7b0      	b.n	800be04 <_printf_i+0xfc>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	f043 0320 	orr.w	r3, r3, #32
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	2378      	movs	r3, #120	; 0x78
 800beac:	4828      	ldr	r0, [pc, #160]	; (800bf50 <_printf_i+0x248>)
 800beae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beb2:	e7e3      	b.n	800be7c <_printf_i+0x174>
 800beb4:	0659      	lsls	r1, r3, #25
 800beb6:	bf48      	it	mi
 800beb8:	b2b6      	uxthmi	r6, r6
 800beba:	e7e6      	b.n	800be8a <_printf_i+0x182>
 800bebc:	4615      	mov	r5, r2
 800bebe:	e7bb      	b.n	800be38 <_printf_i+0x130>
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	6826      	ldr	r6, [r4, #0]
 800bec4:	6961      	ldr	r1, [r4, #20]
 800bec6:	1d18      	adds	r0, r3, #4
 800bec8:	6028      	str	r0, [r5, #0]
 800beca:	0635      	lsls	r5, r6, #24
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	d501      	bpl.n	800bed4 <_printf_i+0x1cc>
 800bed0:	6019      	str	r1, [r3, #0]
 800bed2:	e002      	b.n	800beda <_printf_i+0x1d2>
 800bed4:	0670      	lsls	r0, r6, #25
 800bed6:	d5fb      	bpl.n	800bed0 <_printf_i+0x1c8>
 800bed8:	8019      	strh	r1, [r3, #0]
 800beda:	2300      	movs	r3, #0
 800bedc:	6123      	str	r3, [r4, #16]
 800bede:	4615      	mov	r5, r2
 800bee0:	e7ba      	b.n	800be58 <_printf_i+0x150>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	1d1a      	adds	r2, r3, #4
 800bee6:	602a      	str	r2, [r5, #0]
 800bee8:	681d      	ldr	r5, [r3, #0]
 800beea:	6862      	ldr	r2, [r4, #4]
 800beec:	2100      	movs	r1, #0
 800beee:	4628      	mov	r0, r5
 800bef0:	f7f4 f9a6 	bl	8000240 <memchr>
 800bef4:	b108      	cbz	r0, 800befa <_printf_i+0x1f2>
 800bef6:	1b40      	subs	r0, r0, r5
 800bef8:	6060      	str	r0, [r4, #4]
 800befa:	6863      	ldr	r3, [r4, #4]
 800befc:	6123      	str	r3, [r4, #16]
 800befe:	2300      	movs	r3, #0
 800bf00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf04:	e7a8      	b.n	800be58 <_printf_i+0x150>
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	462a      	mov	r2, r5
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	47d0      	blx	sl
 800bf10:	3001      	adds	r0, #1
 800bf12:	d0ab      	beq.n	800be6c <_printf_i+0x164>
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	079b      	lsls	r3, r3, #30
 800bf18:	d413      	bmi.n	800bf42 <_printf_i+0x23a>
 800bf1a:	68e0      	ldr	r0, [r4, #12]
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	4298      	cmp	r0, r3
 800bf20:	bfb8      	it	lt
 800bf22:	4618      	movlt	r0, r3
 800bf24:	e7a4      	b.n	800be70 <_printf_i+0x168>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4632      	mov	r2, r6
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	47d0      	blx	sl
 800bf30:	3001      	adds	r0, #1
 800bf32:	d09b      	beq.n	800be6c <_printf_i+0x164>
 800bf34:	3501      	adds	r5, #1
 800bf36:	68e3      	ldr	r3, [r4, #12]
 800bf38:	9903      	ldr	r1, [sp, #12]
 800bf3a:	1a5b      	subs	r3, r3, r1
 800bf3c:	42ab      	cmp	r3, r5
 800bf3e:	dcf2      	bgt.n	800bf26 <_printf_i+0x21e>
 800bf40:	e7eb      	b.n	800bf1a <_printf_i+0x212>
 800bf42:	2500      	movs	r5, #0
 800bf44:	f104 0619 	add.w	r6, r4, #25
 800bf48:	e7f5      	b.n	800bf36 <_printf_i+0x22e>
 800bf4a:	bf00      	nop
 800bf4c:	08020391 	.word	0x08020391
 800bf50:	080203a2 	.word	0x080203a2

0800bf54 <__retarget_lock_acquire_recursive>:
 800bf54:	4770      	bx	lr

0800bf56 <__retarget_lock_release_recursive>:
 800bf56:	4770      	bx	lr

0800bf58 <memmove>:
 800bf58:	4288      	cmp	r0, r1
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	eb01 0402 	add.w	r4, r1, r2
 800bf60:	d902      	bls.n	800bf68 <memmove+0x10>
 800bf62:	4284      	cmp	r4, r0
 800bf64:	4623      	mov	r3, r4
 800bf66:	d807      	bhi.n	800bf78 <memmove+0x20>
 800bf68:	1e43      	subs	r3, r0, #1
 800bf6a:	42a1      	cmp	r1, r4
 800bf6c:	d008      	beq.n	800bf80 <memmove+0x28>
 800bf6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf76:	e7f8      	b.n	800bf6a <memmove+0x12>
 800bf78:	4402      	add	r2, r0
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	428a      	cmp	r2, r1
 800bf7e:	d100      	bne.n	800bf82 <memmove+0x2a>
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf8a:	e7f7      	b.n	800bf7c <memmove+0x24>

0800bf8c <_malloc_usable_size_r>:
 800bf8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf90:	1f18      	subs	r0, r3, #4
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	bfbc      	itt	lt
 800bf96:	580b      	ldrlt	r3, [r1, r0]
 800bf98:	18c0      	addlt	r0, r0, r3
 800bf9a:	4770      	bx	lr

0800bf9c <with_errnof>:
 800bf9c:	b513      	push	{r0, r1, r4, lr}
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bfa4:	f7ff fb5c 	bl	800b660 <__errno>
 800bfa8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bfac:	6004      	str	r4, [r0, #0]
 800bfae:	b002      	add	sp, #8
 800bfb0:	bd10      	pop	{r4, pc}

0800bfb2 <xflowf>:
 800bfb2:	b130      	cbz	r0, 800bfc2 <xflowf+0x10>
 800bfb4:	eef1 7a40 	vneg.f32	s15, s0
 800bfb8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfbc:	2022      	movs	r0, #34	; 0x22
 800bfbe:	f7ff bfed 	b.w	800bf9c <with_errnof>
 800bfc2:	eef0 7a40 	vmov.f32	s15, s0
 800bfc6:	e7f7      	b.n	800bfb8 <xflowf+0x6>

0800bfc8 <__math_uflowf>:
 800bfc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfd0 <__math_uflowf+0x8>
 800bfcc:	f7ff bff1 	b.w	800bfb2 <xflowf>
 800bfd0:	10000000 	.word	0x10000000

0800bfd4 <__math_may_uflowf>:
 800bfd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfdc <__math_may_uflowf+0x8>
 800bfd8:	f7ff bfeb 	b.w	800bfb2 <xflowf>
 800bfdc:	1a200000 	.word	0x1a200000

0800bfe0 <__math_oflowf>:
 800bfe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfe8 <__math_oflowf+0x8>
 800bfe4:	f7ff bfe5 	b.w	800bfb2 <xflowf>
 800bfe8:	70000000 	.word	0x70000000

0800bfec <__math_divzerof>:
 800bfec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bff0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bff4:	2800      	cmp	r0, #0
 800bff6:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800bffa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c008 <__math_divzerof+0x1c>
 800bffe:	2022      	movs	r0, #34	; 0x22
 800c000:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c004:	f7ff bfca 	b.w	800bf9c <with_errnof>
 800c008:	00000000 	.word	0x00000000

0800c00c <__math_invalidf>:
 800c00c:	eef0 7a40 	vmov.f32	s15, s0
 800c010:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c014:	eef4 7a67 	vcmp.f32	s15, s15
 800c018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c020:	d602      	bvs.n	800c028 <__math_invalidf+0x1c>
 800c022:	2021      	movs	r0, #33	; 0x21
 800c024:	f7ff bfba 	b.w	800bf9c <with_errnof>
 800c028:	4770      	bx	lr
 800c02a:	0000      	movs	r0, r0
 800c02c:	0000      	movs	r0, r0
	...

0800c030 <cos>:
 800c030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c032:	eeb0 7b40 	vmov.f64	d7, d0
 800c036:	ee17 3a90 	vmov	r3, s15
 800c03a:	4a21      	ldr	r2, [pc, #132]	; (800c0c0 <cos+0x90>)
 800c03c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c040:	4293      	cmp	r3, r2
 800c042:	dc06      	bgt.n	800c052 <cos+0x22>
 800c044:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800c0b8 <cos+0x88>
 800c048:	b005      	add	sp, #20
 800c04a:	f85d eb04 	ldr.w	lr, [sp], #4
 800c04e:	f000 ba5b 	b.w	800c508 <__kernel_cos>
 800c052:	4a1c      	ldr	r2, [pc, #112]	; (800c0c4 <cos+0x94>)
 800c054:	4293      	cmp	r3, r2
 800c056:	dd04      	ble.n	800c062 <cos+0x32>
 800c058:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c05c:	b005      	add	sp, #20
 800c05e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c062:	4668      	mov	r0, sp
 800c064:	f000 f90c 	bl	800c280 <__ieee754_rem_pio2>
 800c068:	f000 0003 	and.w	r0, r0, #3
 800c06c:	2801      	cmp	r0, #1
 800c06e:	d009      	beq.n	800c084 <cos+0x54>
 800c070:	2802      	cmp	r0, #2
 800c072:	d010      	beq.n	800c096 <cos+0x66>
 800c074:	b9b0      	cbnz	r0, 800c0a4 <cos+0x74>
 800c076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c07a:	ed9d 0b00 	vldr	d0, [sp]
 800c07e:	f000 fa43 	bl	800c508 <__kernel_cos>
 800c082:	e7eb      	b.n	800c05c <cos+0x2c>
 800c084:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c088:	ed9d 0b00 	vldr	d0, [sp]
 800c08c:	f000 fd40 	bl	800cb10 <__kernel_sin>
 800c090:	eeb1 0b40 	vneg.f64	d0, d0
 800c094:	e7e2      	b.n	800c05c <cos+0x2c>
 800c096:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c09a:	ed9d 0b00 	vldr	d0, [sp]
 800c09e:	f000 fa33 	bl	800c508 <__kernel_cos>
 800c0a2:	e7f5      	b.n	800c090 <cos+0x60>
 800c0a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0a8:	ed9d 0b00 	vldr	d0, [sp]
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	f000 fd2f 	bl	800cb10 <__kernel_sin>
 800c0b2:	e7d3      	b.n	800c05c <cos+0x2c>
 800c0b4:	f3af 8000 	nop.w
	...
 800c0c0:	3fe921fb 	.word	0x3fe921fb
 800c0c4:	7fefffff 	.word	0x7fefffff

0800c0c8 <expf>:
 800c0c8:	ee10 2a10 	vmov	r2, s0
 800c0cc:	f240 412a 	movw	r1, #1066	; 0x42a
 800c0d0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800c0d4:	428b      	cmp	r3, r1
 800c0d6:	b430      	push	{r4, r5}
 800c0d8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c0dc:	d92a      	bls.n	800c134 <expf+0x6c>
 800c0de:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800c0e2:	d058      	beq.n	800c196 <expf+0xce>
 800c0e4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c0e8:	d303      	bcc.n	800c0f2 <expf+0x2a>
 800c0ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c0ee:	bc30      	pop	{r4, r5}
 800c0f0:	4770      	bx	lr
 800c0f2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c19c <expf+0xd4>
 800c0f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fe:	dd03      	ble.n	800c108 <expf+0x40>
 800c100:	bc30      	pop	{r4, r5}
 800c102:	2000      	movs	r0, #0
 800c104:	f7ff bf6c 	b.w	800bfe0 <__math_oflowf>
 800c108:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c1a0 <expf+0xd8>
 800c10c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c114:	d503      	bpl.n	800c11e <expf+0x56>
 800c116:	bc30      	pop	{r4, r5}
 800c118:	2000      	movs	r0, #0
 800c11a:	f7ff bf55 	b.w	800bfc8 <__math_uflowf>
 800c11e:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c1a4 <expf+0xdc>
 800c122:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12a:	d503      	bpl.n	800c134 <expf+0x6c>
 800c12c:	bc30      	pop	{r4, r5}
 800c12e:	2000      	movs	r0, #0
 800c130:	f7ff bf50 	b.w	800bfd4 <__math_may_uflowf>
 800c134:	4b1c      	ldr	r3, [pc, #112]	; (800c1a8 <expf+0xe0>)
 800c136:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c13a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800c13e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800c142:	eeb0 7b44 	vmov.f64	d7, d4
 800c146:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c14a:	ee17 0a10 	vmov	r0, s14
 800c14e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c152:	f000 021f 	and.w	r2, r0, #31
 800c156:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c15a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800c15e:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c162:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800c166:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800c16a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c16e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800c172:	684d      	ldr	r5, [r1, #4]
 800c174:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800c178:	2100      	movs	r1, #0
 800c17a:	190a      	adds	r2, r1, r4
 800c17c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800c180:	eea5 0b07 	vfma.f64	d0, d5, d7
 800c184:	ec43 2b17 	vmov	d7, r2, r3
 800c188:	eea6 0b04 	vfma.f64	d0, d6, d4
 800c18c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c190:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c194:	e7ab      	b.n	800c0ee <expf+0x26>
 800c196:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c1ac <expf+0xe4>
 800c19a:	e7a8      	b.n	800c0ee <expf+0x26>
 800c19c:	42b17217 	.word	0x42b17217
 800c1a0:	c2cff1b4 	.word	0xc2cff1b4
 800c1a4:	c2ce8ecf 	.word	0xc2ce8ecf
 800c1a8:	080203b8 	.word	0x080203b8
 800c1ac:	00000000 	.word	0x00000000

0800c1b0 <logf>:
 800c1b0:	ee10 3a10 	vmov	r3, s0
 800c1b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c1b8:	b410      	push	{r4}
 800c1ba:	d055      	beq.n	800c268 <logf+0xb8>
 800c1bc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800c1c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800c1c4:	d31a      	bcc.n	800c1fc <logf+0x4c>
 800c1c6:	005a      	lsls	r2, r3, #1
 800c1c8:	d104      	bne.n	800c1d4 <logf+0x24>
 800c1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	f7ff bf0c 	b.w	800bfec <__math_divzerof>
 800c1d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c1d8:	d043      	beq.n	800c262 <logf+0xb2>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	db02      	blt.n	800c1e4 <logf+0x34>
 800c1de:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c1e2:	d303      	bcc.n	800c1ec <logf+0x3c>
 800c1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e8:	f7ff bf10 	b.w	800c00c <__math_invalidf>
 800c1ec:	eddf 7a20 	vldr	s15, [pc, #128]	; 800c270 <logf+0xc0>
 800c1f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1f4:	ee10 3a10 	vmov	r3, s0
 800c1f8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800c1fc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800c200:	491c      	ldr	r1, [pc, #112]	; (800c274 <logf+0xc4>)
 800c202:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800c206:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c20a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800c20e:	0dd4      	lsrs	r4, r2, #23
 800c210:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c214:	05e4      	lsls	r4, r4, #23
 800c216:	ed90 6b00 	vldr	d6, [r0]
 800c21a:	1b1b      	subs	r3, r3, r4
 800c21c:	ee07 3a90 	vmov	s15, r3
 800c220:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800c224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c228:	15d2      	asrs	r2, r2, #23
 800c22a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c22e:	ed90 6b02 	vldr	d6, [r0, #8]
 800c232:	ee20 4b00 	vmul.f64	d4, d0, d0
 800c236:	ee07 2a90 	vmov	s15, r2
 800c23a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c23e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c242:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800c246:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800c24a:	eea5 7b00 	vfma.f64	d7, d5, d0
 800c24e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800c252:	ee30 0b06 	vadd.f64	d0, d0, d6
 800c256:	eea5 7b04 	vfma.f64	d7, d5, d4
 800c25a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c25e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c278 <logf+0xc8>
 800c26c:	e7f9      	b.n	800c262 <logf+0xb2>
 800c26e:	bf00      	nop
 800c270:	4b000000 	.word	0x4b000000
 800c274:	08020500 	.word	0x08020500
	...

0800c280 <__ieee754_rem_pio2>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	eeb0 7b40 	vmov.f64	d7, d0
 800c286:	ee17 5a90 	vmov	r5, s15
 800c28a:	4b99      	ldr	r3, [pc, #612]	; (800c4f0 <__ieee754_rem_pio2+0x270>)
 800c28c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c290:	429e      	cmp	r6, r3
 800c292:	b088      	sub	sp, #32
 800c294:	4604      	mov	r4, r0
 800c296:	dc07      	bgt.n	800c2a8 <__ieee754_rem_pio2+0x28>
 800c298:	2200      	movs	r2, #0
 800c29a:	2300      	movs	r3, #0
 800c29c:	ed84 0b00 	vstr	d0, [r4]
 800c2a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	e01b      	b.n	800c2e0 <__ieee754_rem_pio2+0x60>
 800c2a8:	4b92      	ldr	r3, [pc, #584]	; (800c4f4 <__ieee754_rem_pio2+0x274>)
 800c2aa:	429e      	cmp	r6, r3
 800c2ac:	dc3b      	bgt.n	800c326 <__ieee754_rem_pio2+0xa6>
 800c2ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800c4b0 <__ieee754_rem_pio2+0x230>
 800c2b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c2bc:	dd19      	ble.n	800c2f2 <__ieee754_rem_pio2+0x72>
 800c2be:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c2c2:	429e      	cmp	r6, r3
 800c2c4:	d00e      	beq.n	800c2e4 <__ieee754_rem_pio2+0x64>
 800c2c6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c4b8 <__ieee754_rem_pio2+0x238>
 800c2ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c2ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c2d2:	ed84 5b00 	vstr	d5, [r4]
 800c2d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2da:	ed84 7b02 	vstr	d7, [r4, #8]
 800c2de:	2001      	movs	r0, #1
 800c2e0:	b008      	add	sp, #32
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c4c0 <__ieee754_rem_pio2+0x240>
 800c2e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2ec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c4c8 <__ieee754_rem_pio2+0x248>
 800c2f0:	e7eb      	b.n	800c2ca <__ieee754_rem_pio2+0x4a>
 800c2f2:	429e      	cmp	r6, r3
 800c2f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c2f8:	d00e      	beq.n	800c318 <__ieee754_rem_pio2+0x98>
 800c2fa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800c4b8 <__ieee754_rem_pio2+0x238>
 800c2fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c302:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c306:	ed84 5b00 	vstr	d5, [r4]
 800c30a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c312:	ed84 7b02 	vstr	d7, [r4, #8]
 800c316:	e7e3      	b.n	800c2e0 <__ieee754_rem_pio2+0x60>
 800c318:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c4c0 <__ieee754_rem_pio2+0x240>
 800c31c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c320:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c4c8 <__ieee754_rem_pio2+0x248>
 800c324:	e7eb      	b.n	800c2fe <__ieee754_rem_pio2+0x7e>
 800c326:	4b74      	ldr	r3, [pc, #464]	; (800c4f8 <__ieee754_rem_pio2+0x278>)
 800c328:	429e      	cmp	r6, r3
 800c32a:	dc70      	bgt.n	800c40e <__ieee754_rem_pio2+0x18e>
 800c32c:	f000 fc48 	bl	800cbc0 <fabs>
 800c330:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c334:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c4d0 <__ieee754_rem_pio2+0x250>
 800c338:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c33c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c340:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c344:	ee17 0a90 	vmov	r0, s15
 800c348:	eeb1 4b45 	vneg.f64	d4, d5
 800c34c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c4b0 <__ieee754_rem_pio2+0x230>
 800c350:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c354:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c4b8 <__ieee754_rem_pio2+0x238>
 800c358:	281f      	cmp	r0, #31
 800c35a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c35e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c362:	dc08      	bgt.n	800c376 <__ieee754_rem_pio2+0xf6>
 800c364:	4b65      	ldr	r3, [pc, #404]	; (800c4fc <__ieee754_rem_pio2+0x27c>)
 800c366:	1e42      	subs	r2, r0, #1
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	42b3      	cmp	r3, r6
 800c36e:	d002      	beq.n	800c376 <__ieee754_rem_pio2+0xf6>
 800c370:	ed84 6b00 	vstr	d6, [r4]
 800c374:	e026      	b.n	800c3c4 <__ieee754_rem_pio2+0x144>
 800c376:	ee16 3a90 	vmov	r3, s13
 800c37a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c37e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c382:	2b10      	cmp	r3, #16
 800c384:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c388:	ddf2      	ble.n	800c370 <__ieee754_rem_pio2+0xf0>
 800c38a:	eeb0 6b40 	vmov.f64	d6, d0
 800c38e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800c4c0 <__ieee754_rem_pio2+0x240>
 800c392:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800c4c8 <__ieee754_rem_pio2+0x248>
 800c396:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c39a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c39e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c3a2:	eeb0 7b40 	vmov.f64	d7, d0
 800c3a6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c3aa:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c3ae:	ee13 3a90 	vmov	r3, s7
 800c3b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	2b31      	cmp	r3, #49	; 0x31
 800c3ba:	dc17      	bgt.n	800c3ec <__ieee754_rem_pio2+0x16c>
 800c3bc:	eeb0 0b46 	vmov.f64	d0, d6
 800c3c0:	ed84 3b00 	vstr	d3, [r4]
 800c3c4:	ed94 6b00 	vldr	d6, [r4]
 800c3c8:	2d00      	cmp	r5, #0
 800c3ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c3ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c3d2:	ed84 0b02 	vstr	d0, [r4, #8]
 800c3d6:	da83      	bge.n	800c2e0 <__ieee754_rem_pio2+0x60>
 800c3d8:	eeb1 6b46 	vneg.f64	d6, d6
 800c3dc:	eeb1 0b40 	vneg.f64	d0, d0
 800c3e0:	ed84 6b00 	vstr	d6, [r4]
 800c3e4:	ed84 0b02 	vstr	d0, [r4, #8]
 800c3e8:	4240      	negs	r0, r0
 800c3ea:	e779      	b.n	800c2e0 <__ieee754_rem_pio2+0x60>
 800c3ec:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800c4d8 <__ieee754_rem_pio2+0x258>
 800c3f0:	eeb0 0b46 	vmov.f64	d0, d6
 800c3f4:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c3f8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c3fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800c4e0 <__ieee754_rem_pio2+0x260>
 800c400:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c404:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c408:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c40c:	e7b0      	b.n	800c370 <__ieee754_rem_pio2+0xf0>
 800c40e:	4b3c      	ldr	r3, [pc, #240]	; (800c500 <__ieee754_rem_pio2+0x280>)
 800c410:	429e      	cmp	r6, r3
 800c412:	dd06      	ble.n	800c422 <__ieee754_rem_pio2+0x1a2>
 800c414:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c418:	ed80 7b02 	vstr	d7, [r0, #8]
 800c41c:	ed80 7b00 	vstr	d7, [r0]
 800c420:	e740      	b.n	800c2a4 <__ieee754_rem_pio2+0x24>
 800c422:	1532      	asrs	r2, r6, #20
 800c424:	ee10 0a10 	vmov	r0, s0
 800c428:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c42c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c430:	ec41 0b17 	vmov	d7, r0, r1
 800c434:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c438:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800c4e8 <__ieee754_rem_pio2+0x268>
 800c43c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c440:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c444:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c448:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c44c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c450:	a902      	add	r1, sp, #8
 800c452:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c456:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c45a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c45e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c462:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c466:	2603      	movs	r6, #3
 800c468:	4608      	mov	r0, r1
 800c46a:	ed91 7b04 	vldr	d7, [r1, #16]
 800c46e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c476:	4633      	mov	r3, r6
 800c478:	f1a1 0108 	sub.w	r1, r1, #8
 800c47c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800c480:	d0f3      	beq.n	800c46a <__ieee754_rem_pio2+0x1ea>
 800c482:	4920      	ldr	r1, [pc, #128]	; (800c504 <__ieee754_rem_pio2+0x284>)
 800c484:	9101      	str	r1, [sp, #4]
 800c486:	2102      	movs	r1, #2
 800c488:	9100      	str	r1, [sp, #0]
 800c48a:	4621      	mov	r1, r4
 800c48c:	f000 f8a8 	bl	800c5e0 <__kernel_rem_pio2>
 800c490:	2d00      	cmp	r5, #0
 800c492:	f6bf af25 	bge.w	800c2e0 <__ieee754_rem_pio2+0x60>
 800c496:	ed94 7b00 	vldr	d7, [r4]
 800c49a:	eeb1 7b47 	vneg.f64	d7, d7
 800c49e:	ed84 7b00 	vstr	d7, [r4]
 800c4a2:	ed94 7b02 	vldr	d7, [r4, #8]
 800c4a6:	eeb1 7b47 	vneg.f64	d7, d7
 800c4aa:	ed84 7b02 	vstr	d7, [r4, #8]
 800c4ae:	e79b      	b.n	800c3e8 <__ieee754_rem_pio2+0x168>
 800c4b0:	54400000 	.word	0x54400000
 800c4b4:	3ff921fb 	.word	0x3ff921fb
 800c4b8:	1a626331 	.word	0x1a626331
 800c4bc:	3dd0b461 	.word	0x3dd0b461
 800c4c0:	1a600000 	.word	0x1a600000
 800c4c4:	3dd0b461 	.word	0x3dd0b461
 800c4c8:	2e037073 	.word	0x2e037073
 800c4cc:	3ba3198a 	.word	0x3ba3198a
 800c4d0:	6dc9c883 	.word	0x6dc9c883
 800c4d4:	3fe45f30 	.word	0x3fe45f30
 800c4d8:	2e000000 	.word	0x2e000000
 800c4dc:	3ba3198a 	.word	0x3ba3198a
 800c4e0:	252049c1 	.word	0x252049c1
 800c4e4:	397b839a 	.word	0x397b839a
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	41700000 	.word	0x41700000
 800c4f0:	3fe921fb 	.word	0x3fe921fb
 800c4f4:	4002d97b 	.word	0x4002d97b
 800c4f8:	413921fb 	.word	0x413921fb
 800c4fc:	08020620 	.word	0x08020620
 800c500:	7fefffff 	.word	0x7fefffff
 800c504:	080206a0 	.word	0x080206a0

0800c508 <__kernel_cos>:
 800c508:	ee10 1a90 	vmov	r1, s1
 800c50c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c510:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c514:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c518:	da05      	bge.n	800c526 <__kernel_cos+0x1e>
 800c51a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c51e:	ee17 3a90 	vmov	r3, s15
 800c522:	2b00      	cmp	r3, #0
 800c524:	d03d      	beq.n	800c5a2 <__kernel_cos+0x9a>
 800c526:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c52a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c5a8 <__kernel_cos+0xa0>
 800c52e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c5b0 <__kernel_cos+0xa8>
 800c532:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c536:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c5b8 <__kernel_cos+0xb0>
 800c53a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c53e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c5c0 <__kernel_cos+0xb8>
 800c542:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c546:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c5c8 <__kernel_cos+0xc0>
 800c54a:	4b23      	ldr	r3, [pc, #140]	; (800c5d8 <__kernel_cos+0xd0>)
 800c54c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c550:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c5d0 <__kernel_cos+0xc8>
 800c554:	4299      	cmp	r1, r3
 800c556:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c55a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c55e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c562:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c566:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c56a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c56e:	dc04      	bgt.n	800c57a <__kernel_cos+0x72>
 800c570:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c574:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c578:	4770      	bx	lr
 800c57a:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <__kernel_cos+0xd4>)
 800c57c:	4299      	cmp	r1, r3
 800c57e:	dc0d      	bgt.n	800c59c <__kernel_cos+0x94>
 800c580:	2200      	movs	r2, #0
 800c582:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c586:	ec43 2b15 	vmov	d5, r2, r3
 800c58a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c58e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c592:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c596:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c59a:	4770      	bx	lr
 800c59c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c5a0:	e7f3      	b.n	800c58a <__kernel_cos+0x82>
 800c5a2:	eeb0 0b44 	vmov.f64	d0, d4
 800c5a6:	4770      	bx	lr
 800c5a8:	be8838d4 	.word	0xbe8838d4
 800c5ac:	bda8fae9 	.word	0xbda8fae9
 800c5b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c5b4:	3e21ee9e 	.word	0x3e21ee9e
 800c5b8:	809c52ad 	.word	0x809c52ad
 800c5bc:	be927e4f 	.word	0xbe927e4f
 800c5c0:	19cb1590 	.word	0x19cb1590
 800c5c4:	3efa01a0 	.word	0x3efa01a0
 800c5c8:	16c15177 	.word	0x16c15177
 800c5cc:	bf56c16c 	.word	0xbf56c16c
 800c5d0:	5555554c 	.word	0x5555554c
 800c5d4:	3fa55555 	.word	0x3fa55555
 800c5d8:	3fd33332 	.word	0x3fd33332
 800c5dc:	3fe90000 	.word	0x3fe90000

0800c5e0 <__kernel_rem_pio2>:
 800c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	ed2d 8b06 	vpush	{d8-d10}
 800c5e8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	9002      	str	r0, [sp, #8]
 800c5f0:	49c5      	ldr	r1, [pc, #788]	; (800c908 <__kernel_rem_pio2+0x328>)
 800c5f2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800c5f4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800c5f8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	f112 0f14 	cmn.w	r2, #20
 800c602:	bfa8      	it	ge
 800c604:	2018      	movge	r0, #24
 800c606:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800c60a:	bfb8      	it	lt
 800c60c:	2000      	movlt	r0, #0
 800c60e:	f06f 0417 	mvn.w	r4, #23
 800c612:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800c8f0 <__kernel_rem_pio2+0x310>
 800c616:	bfa4      	itt	ge
 800c618:	f1a2 0a03 	subge.w	sl, r2, #3
 800c61c:	fb9a f0f0 	sdivge	r0, sl, r0
 800c620:	fb00 4404 	mla	r4, r0, r4, r4
 800c624:	1a46      	subs	r6, r0, r1
 800c626:	4414      	add	r4, r2
 800c628:	eb09 0c01 	add.w	ip, r9, r1
 800c62c:	ad1a      	add	r5, sp, #104	; 0x68
 800c62e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800c632:	2200      	movs	r2, #0
 800c634:	4562      	cmp	r2, ip
 800c636:	dd10      	ble.n	800c65a <__kernel_rem_pio2+0x7a>
 800c638:	9a01      	ldr	r2, [sp, #4]
 800c63a:	ab1a      	add	r3, sp, #104	; 0x68
 800c63c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c640:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800c644:	f04f 0c00 	mov.w	ip, #0
 800c648:	45cc      	cmp	ip, r9
 800c64a:	dc26      	bgt.n	800c69a <__kernel_rem_pio2+0xba>
 800c64c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800c8f0 <__kernel_rem_pio2+0x310>
 800c650:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c654:	4616      	mov	r6, r2
 800c656:	2500      	movs	r5, #0
 800c658:	e015      	b.n	800c686 <__kernel_rem_pio2+0xa6>
 800c65a:	42d6      	cmn	r6, r2
 800c65c:	d409      	bmi.n	800c672 <__kernel_rem_pio2+0x92>
 800c65e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c66a:	eca5 7b02 	vstmia	r5!, {d7}
 800c66e:	3201      	adds	r2, #1
 800c670:	e7e0      	b.n	800c634 <__kernel_rem_pio2+0x54>
 800c672:	eeb0 7b46 	vmov.f64	d7, d6
 800c676:	e7f8      	b.n	800c66a <__kernel_rem_pio2+0x8a>
 800c678:	ecb8 5b02 	vldmia	r8!, {d5}
 800c67c:	ed96 6b00 	vldr	d6, [r6]
 800c680:	3501      	adds	r5, #1
 800c682:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c686:	428d      	cmp	r5, r1
 800c688:	f1a6 0608 	sub.w	r6, r6, #8
 800c68c:	ddf4      	ble.n	800c678 <__kernel_rem_pio2+0x98>
 800c68e:	ecaa 7b02 	vstmia	sl!, {d7}
 800c692:	f10c 0c01 	add.w	ip, ip, #1
 800c696:	3208      	adds	r2, #8
 800c698:	e7d6      	b.n	800c648 <__kernel_rem_pio2+0x68>
 800c69a:	ab06      	add	r3, sp, #24
 800c69c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c8f8 <__kernel_rem_pio2+0x318>
 800c6a0:	ed9f ab97 	vldr	d10, [pc, #604]	; 800c900 <__kernel_rem_pio2+0x320>
 800c6a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c6a8:	9303      	str	r3, [sp, #12]
 800c6aa:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800c6ae:	464d      	mov	r5, r9
 800c6b0:	00eb      	lsls	r3, r5, #3
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	ab92      	add	r3, sp, #584	; 0x248
 800c6b6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c6ba:	f10d 0b18 	add.w	fp, sp, #24
 800c6be:	ab6a      	add	r3, sp, #424	; 0x1a8
 800c6c0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800c6c4:	465e      	mov	r6, fp
 800c6c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f1a2 0208 	sub.w	r2, r2, #8
 800c6d2:	dc4c      	bgt.n	800c76e <__kernel_rem_pio2+0x18e>
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	9105      	str	r1, [sp, #20]
 800c6d8:	f000 faf2 	bl	800ccc0 <scalbn>
 800c6dc:	eeb0 8b40 	vmov.f64	d8, d0
 800c6e0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c6e4:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c6e8:	f000 fa76 	bl	800cbd8 <floor>
 800c6ec:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c6f0:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c6f4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c6fe:	ee17 8a90 	vmov	r8, s15
 800c702:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c706:	9905      	ldr	r1, [sp, #20]
 800c708:	dd43      	ble.n	800c792 <__kernel_rem_pio2+0x1b2>
 800c70a:	1e68      	subs	r0, r5, #1
 800c70c:	ab06      	add	r3, sp, #24
 800c70e:	f1c4 0c18 	rsb	ip, r4, #24
 800c712:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800c716:	fa46 f20c 	asr.w	r2, r6, ip
 800c71a:	4490      	add	r8, r2
 800c71c:	fa02 f20c 	lsl.w	r2, r2, ip
 800c720:	1ab6      	subs	r6, r6, r2
 800c722:	f1c4 0217 	rsb	r2, r4, #23
 800c726:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800c72a:	4116      	asrs	r6, r2
 800c72c:	2e00      	cmp	r6, #0
 800c72e:	dd3f      	ble.n	800c7b0 <__kernel_rem_pio2+0x1d0>
 800c730:	f04f 0c00 	mov.w	ip, #0
 800c734:	f108 0801 	add.w	r8, r8, #1
 800c738:	4660      	mov	r0, ip
 800c73a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c73e:	4565      	cmp	r5, ip
 800c740:	dc6e      	bgt.n	800c820 <__kernel_rem_pio2+0x240>
 800c742:	2c00      	cmp	r4, #0
 800c744:	dd04      	ble.n	800c750 <__kernel_rem_pio2+0x170>
 800c746:	2c01      	cmp	r4, #1
 800c748:	d07f      	beq.n	800c84a <__kernel_rem_pio2+0x26a>
 800c74a:	2c02      	cmp	r4, #2
 800c74c:	f000 8087 	beq.w	800c85e <__kernel_rem_pio2+0x27e>
 800c750:	2e02      	cmp	r6, #2
 800c752:	d12d      	bne.n	800c7b0 <__kernel_rem_pio2+0x1d0>
 800c754:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c758:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c75c:	b340      	cbz	r0, 800c7b0 <__kernel_rem_pio2+0x1d0>
 800c75e:	4620      	mov	r0, r4
 800c760:	9105      	str	r1, [sp, #20]
 800c762:	f000 faad 	bl	800ccc0 <scalbn>
 800c766:	9905      	ldr	r1, [sp, #20]
 800c768:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c76c:	e020      	b.n	800c7b0 <__kernel_rem_pio2+0x1d0>
 800c76e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c772:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c776:	3801      	subs	r0, #1
 800c778:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c77c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c780:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c784:	eca6 0a01 	vstmia	r6!, {s0}
 800c788:	ed92 0b00 	vldr	d0, [r2]
 800c78c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c790:	e79c      	b.n	800c6cc <__kernel_rem_pio2+0xec>
 800c792:	d105      	bne.n	800c7a0 <__kernel_rem_pio2+0x1c0>
 800c794:	1e6a      	subs	r2, r5, #1
 800c796:	ab06      	add	r3, sp, #24
 800c798:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800c79c:	15f6      	asrs	r6, r6, #23
 800c79e:	e7c5      	b.n	800c72c <__kernel_rem_pio2+0x14c>
 800c7a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c7a4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ac:	da36      	bge.n	800c81c <__kernel_rem_pio2+0x23c>
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b8:	f040 80aa 	bne.w	800c910 <__kernel_rem_pio2+0x330>
 800c7bc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800c7c0:	4658      	mov	r0, fp
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4548      	cmp	r0, r9
 800c7c6:	da52      	bge.n	800c86e <__kernel_rem_pio2+0x28e>
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	f000 8081 	beq.w	800c8d0 <__kernel_rem_pio2+0x2f0>
 800c7ce:	ab06      	add	r3, sp, #24
 800c7d0:	3c18      	subs	r4, #24
 800c7d2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8087 	beq.w	800c8ea <__kernel_rem_pio2+0x30a>
 800c7dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f000 fa6d 	bl	800ccc0 <scalbn>
 800c7e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c7ea:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800c8f8 <__kernel_rem_pio2+0x318>
 800c7ee:	a96a      	add	r1, sp, #424	; 0x1a8
 800c7f0:	f103 0208 	add.w	r2, r3, #8
 800c7f4:	1888      	adds	r0, r1, r2
 800c7f6:	4659      	mov	r1, fp
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	f280 80b7 	bge.w	800c96c <__kernel_rem_pio2+0x38c>
 800c7fe:	4659      	mov	r1, fp
 800c800:	2900      	cmp	r1, #0
 800c802:	f2c0 80d5 	blt.w	800c9b0 <__kernel_rem_pio2+0x3d0>
 800c806:	a86a      	add	r0, sp, #424	; 0x1a8
 800c808:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800c80c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800c8f0 <__kernel_rem_pio2+0x310>
 800c810:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800c90c <__kernel_rem_pio2+0x32c>
 800c814:	2400      	movs	r4, #0
 800c816:	ebab 0001 	sub.w	r0, fp, r1
 800c81a:	e0be      	b.n	800c99a <__kernel_rem_pio2+0x3ba>
 800c81c:	2602      	movs	r6, #2
 800c81e:	e787      	b.n	800c730 <__kernel_rem_pio2+0x150>
 800c820:	f8db 2000 	ldr.w	r2, [fp]
 800c824:	b958      	cbnz	r0, 800c83e <__kernel_rem_pio2+0x25e>
 800c826:	b122      	cbz	r2, 800c832 <__kernel_rem_pio2+0x252>
 800c828:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c82c:	f8cb 2000 	str.w	r2, [fp]
 800c830:	2201      	movs	r2, #1
 800c832:	f10c 0c01 	add.w	ip, ip, #1
 800c836:	f10b 0b04 	add.w	fp, fp, #4
 800c83a:	4610      	mov	r0, r2
 800c83c:	e77f      	b.n	800c73e <__kernel_rem_pio2+0x15e>
 800c83e:	ebae 0202 	sub.w	r2, lr, r2
 800c842:	f8cb 2000 	str.w	r2, [fp]
 800c846:	4602      	mov	r2, r0
 800c848:	e7f3      	b.n	800c832 <__kernel_rem_pio2+0x252>
 800c84a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800c84e:	ab06      	add	r3, sp, #24
 800c850:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c854:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c858:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800c85c:	e778      	b.n	800c750 <__kernel_rem_pio2+0x170>
 800c85e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800c862:	ab06      	add	r3, sp, #24
 800c864:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800c868:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800c86c:	e7f4      	b.n	800c858 <__kernel_rem_pio2+0x278>
 800c86e:	ab06      	add	r3, sp, #24
 800c870:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c874:	3801      	subs	r0, #1
 800c876:	431a      	orrs	r2, r3
 800c878:	e7a4      	b.n	800c7c4 <__kernel_rem_pio2+0x1e4>
 800c87a:	f10c 0c01 	add.w	ip, ip, #1
 800c87e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c882:	2800      	cmp	r0, #0
 800c884:	d0f9      	beq.n	800c87a <__kernel_rem_pio2+0x29a>
 800c886:	9b04      	ldr	r3, [sp, #16]
 800c888:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c88c:	eb0d 0203 	add.w	r2, sp, r3
 800c890:	9b01      	ldr	r3, [sp, #4]
 800c892:	18e8      	adds	r0, r5, r3
 800c894:	ab1a      	add	r3, sp, #104	; 0x68
 800c896:	1c6e      	adds	r6, r5, #1
 800c898:	3a98      	subs	r2, #152	; 0x98
 800c89a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c89e:	4465      	add	r5, ip
 800c8a0:	42b5      	cmp	r5, r6
 800c8a2:	f6ff af05 	blt.w	800c6b0 <__kernel_rem_pio2+0xd0>
 800c8a6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800c8aa:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c8ae:	ee07 3a90 	vmov	s15, r3
 800c8b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c8b6:	f04f 0c00 	mov.w	ip, #0
 800c8ba:	eca0 7b02 	vstmia	r0!, {d7}
 800c8be:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800c8f0 <__kernel_rem_pio2+0x310>
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	458c      	cmp	ip, r1
 800c8c6:	dd07      	ble.n	800c8d8 <__kernel_rem_pio2+0x2f8>
 800c8c8:	eca2 7b02 	vstmia	r2!, {d7}
 800c8cc:	3601      	adds	r6, #1
 800c8ce:	e7e7      	b.n	800c8a0 <__kernel_rem_pio2+0x2c0>
 800c8d0:	9a03      	ldr	r2, [sp, #12]
 800c8d2:	f04f 0c01 	mov.w	ip, #1
 800c8d6:	e7d2      	b.n	800c87e <__kernel_rem_pio2+0x29e>
 800c8d8:	ecbe 5b02 	vldmia	lr!, {d5}
 800c8dc:	ed38 6b02 	vldmdb	r8!, {d6}
 800c8e0:	f10c 0c01 	add.w	ip, ip, #1
 800c8e4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c8e8:	e7ec      	b.n	800c8c4 <__kernel_rem_pio2+0x2e4>
 800c8ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c8ee:	e76e      	b.n	800c7ce <__kernel_rem_pio2+0x1ee>
	...
 800c8fc:	3e700000 	.word	0x3e700000
 800c900:	00000000 	.word	0x00000000
 800c904:	41700000 	.word	0x41700000
 800c908:	080207e8 	.word	0x080207e8
 800c90c:	080207a8 	.word	0x080207a8
 800c910:	4260      	negs	r0, r4
 800c912:	eeb0 0b48 	vmov.f64	d0, d8
 800c916:	f000 f9d3 	bl	800ccc0 <scalbn>
 800c91a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800caf8 <__kernel_rem_pio2+0x518>
 800c91e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c926:	db18      	blt.n	800c95a <__kernel_rem_pio2+0x37a>
 800c928:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800cb00 <__kernel_rem_pio2+0x520>
 800c92c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c930:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c934:	aa06      	add	r2, sp, #24
 800c936:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c93a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c93e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c942:	f105 0b01 	add.w	fp, r5, #1
 800c946:	ee10 3a10 	vmov	r3, s0
 800c94a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c94e:	ee17 3a10 	vmov	r3, s14
 800c952:	3418      	adds	r4, #24
 800c954:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800c958:	e740      	b.n	800c7dc <__kernel_rem_pio2+0x1fc>
 800c95a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c95e:	aa06      	add	r2, sp, #24
 800c960:	ee10 3a10 	vmov	r3, s0
 800c964:	46ab      	mov	fp, r5
 800c966:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c96a:	e737      	b.n	800c7dc <__kernel_rem_pio2+0x1fc>
 800c96c:	ac06      	add	r4, sp, #24
 800c96e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800c972:	9401      	str	r4, [sp, #4]
 800c974:	ee07 4a90 	vmov	s15, r4
 800c978:	3901      	subs	r1, #1
 800c97a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c97e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c982:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c986:	ed20 7b02 	vstmdb	r0!, {d7}
 800c98a:	e735      	b.n	800c7f8 <__kernel_rem_pio2+0x218>
 800c98c:	ecbc 5b02 	vldmia	ip!, {d5}
 800c990:	ecb5 6b02 	vldmia	r5!, {d6}
 800c994:	3401      	adds	r4, #1
 800c996:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c99a:	454c      	cmp	r4, r9
 800c99c:	dc01      	bgt.n	800c9a2 <__kernel_rem_pio2+0x3c2>
 800c99e:	4284      	cmp	r4, r0
 800c9a0:	ddf4      	ble.n	800c98c <__kernel_rem_pio2+0x3ac>
 800c9a2:	ac42      	add	r4, sp, #264	; 0x108
 800c9a4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800c9a8:	ed80 7b00 	vstr	d7, [r0]
 800c9ac:	3901      	subs	r1, #1
 800c9ae:	e727      	b.n	800c800 <__kernel_rem_pio2+0x220>
 800c9b0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c9b2:	2902      	cmp	r1, #2
 800c9b4:	dc0a      	bgt.n	800c9cc <__kernel_rem_pio2+0x3ec>
 800c9b6:	2900      	cmp	r1, #0
 800c9b8:	dc2c      	bgt.n	800ca14 <__kernel_rem_pio2+0x434>
 800c9ba:	d045      	beq.n	800ca48 <__kernel_rem_pio2+0x468>
 800c9bc:	f008 0007 	and.w	r0, r8, #7
 800c9c0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800c9c4:	ecbd 8b06 	vpop	{d8-d10}
 800c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9cc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800c9ce:	2a03      	cmp	r2, #3
 800c9d0:	d1f4      	bne.n	800c9bc <__kernel_rem_pio2+0x3dc>
 800c9d2:	aa42      	add	r2, sp, #264	; 0x108
 800c9d4:	4413      	add	r3, r2
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4658      	mov	r0, fp
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	f1a1 0108 	sub.w	r1, r1, #8
 800c9e2:	dc54      	bgt.n	800ca8e <__kernel_rem_pio2+0x4ae>
 800c9e4:	4659      	mov	r1, fp
 800c9e6:	2901      	cmp	r1, #1
 800c9e8:	f1a2 0208 	sub.w	r2, r2, #8
 800c9ec:	dc5f      	bgt.n	800caae <__kernel_rem_pio2+0x4ce>
 800c9ee:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800cb08 <__kernel_rem_pio2+0x528>
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	f1bb 0f01 	cmp.w	fp, #1
 800c9f8:	dc69      	bgt.n	800cace <__kernel_rem_pio2+0x4ee>
 800c9fa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800c9fe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800ca02:	2e00      	cmp	r6, #0
 800ca04:	d16a      	bne.n	800cadc <__kernel_rem_pio2+0x4fc>
 800ca06:	ed87 5b00 	vstr	d5, [r7]
 800ca0a:	ed87 6b02 	vstr	d6, [r7, #8]
 800ca0e:	ed87 7b04 	vstr	d7, [r7, #16]
 800ca12:	e7d3      	b.n	800c9bc <__kernel_rem_pio2+0x3dc>
 800ca14:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800cb08 <__kernel_rem_pio2+0x528>
 800ca18:	ab42      	add	r3, sp, #264	; 0x108
 800ca1a:	441a      	add	r2, r3
 800ca1c:	465b      	mov	r3, fp
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	da26      	bge.n	800ca70 <__kernel_rem_pio2+0x490>
 800ca22:	b35e      	cbz	r6, 800ca7c <__kernel_rem_pio2+0x49c>
 800ca24:	eeb1 7b46 	vneg.f64	d7, d6
 800ca28:	ed87 7b00 	vstr	d7, [r7]
 800ca2c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800ca30:	aa44      	add	r2, sp, #272	; 0x110
 800ca32:	2301      	movs	r3, #1
 800ca34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ca38:	459b      	cmp	fp, r3
 800ca3a:	da22      	bge.n	800ca82 <__kernel_rem_pio2+0x4a2>
 800ca3c:	b10e      	cbz	r6, 800ca42 <__kernel_rem_pio2+0x462>
 800ca3e:	eeb1 7b47 	vneg.f64	d7, d7
 800ca42:	ed87 7b02 	vstr	d7, [r7, #8]
 800ca46:	e7b9      	b.n	800c9bc <__kernel_rem_pio2+0x3dc>
 800ca48:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cb08 <__kernel_rem_pio2+0x528>
 800ca4c:	ab42      	add	r3, sp, #264	; 0x108
 800ca4e:	441a      	add	r2, r3
 800ca50:	f1bb 0f00 	cmp.w	fp, #0
 800ca54:	da05      	bge.n	800ca62 <__kernel_rem_pio2+0x482>
 800ca56:	b10e      	cbz	r6, 800ca5c <__kernel_rem_pio2+0x47c>
 800ca58:	eeb1 7b47 	vneg.f64	d7, d7
 800ca5c:	ed87 7b00 	vstr	d7, [r7]
 800ca60:	e7ac      	b.n	800c9bc <__kernel_rem_pio2+0x3dc>
 800ca62:	ed32 6b02 	vldmdb	r2!, {d6}
 800ca66:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ca6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ca6e:	e7ef      	b.n	800ca50 <__kernel_rem_pio2+0x470>
 800ca70:	ed32 7b02 	vldmdb	r2!, {d7}
 800ca74:	3b01      	subs	r3, #1
 800ca76:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ca7a:	e7d0      	b.n	800ca1e <__kernel_rem_pio2+0x43e>
 800ca7c:	eeb0 7b46 	vmov.f64	d7, d6
 800ca80:	e7d2      	b.n	800ca28 <__kernel_rem_pio2+0x448>
 800ca82:	ecb2 6b02 	vldmia	r2!, {d6}
 800ca86:	3301      	adds	r3, #1
 800ca88:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ca8c:	e7d4      	b.n	800ca38 <__kernel_rem_pio2+0x458>
 800ca8e:	ed91 7b00 	vldr	d7, [r1]
 800ca92:	ed91 5b02 	vldr	d5, [r1, #8]
 800ca96:	3801      	subs	r0, #1
 800ca98:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ca9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800caa0:	ed81 6b00 	vstr	d6, [r1]
 800caa4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800caa8:	ed81 7b02 	vstr	d7, [r1, #8]
 800caac:	e796      	b.n	800c9dc <__kernel_rem_pio2+0x3fc>
 800caae:	ed92 7b00 	vldr	d7, [r2]
 800cab2:	ed92 5b02 	vldr	d5, [r2, #8]
 800cab6:	3901      	subs	r1, #1
 800cab8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cabc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cac0:	ed82 6b00 	vstr	d6, [r2]
 800cac4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cac8:	ed82 7b02 	vstr	d7, [r2, #8]
 800cacc:	e78b      	b.n	800c9e6 <__kernel_rem_pio2+0x406>
 800cace:	ed33 6b02 	vldmdb	r3!, {d6}
 800cad2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cad6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cada:	e78b      	b.n	800c9f4 <__kernel_rem_pio2+0x414>
 800cadc:	eeb1 5b45 	vneg.f64	d5, d5
 800cae0:	eeb1 6b46 	vneg.f64	d6, d6
 800cae4:	ed87 5b00 	vstr	d5, [r7]
 800cae8:	eeb1 7b47 	vneg.f64	d7, d7
 800caec:	ed87 6b02 	vstr	d6, [r7, #8]
 800caf0:	e78d      	b.n	800ca0e <__kernel_rem_pio2+0x42e>
 800caf2:	bf00      	nop
 800caf4:	f3af 8000 	nop.w
 800caf8:	00000000 	.word	0x00000000
 800cafc:	41700000 	.word	0x41700000
 800cb00:	00000000 	.word	0x00000000
 800cb04:	3e700000 	.word	0x3e700000
	...

0800cb10 <__kernel_sin>:
 800cb10:	ee10 3a90 	vmov	r3, s1
 800cb14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb18:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb1c:	da04      	bge.n	800cb28 <__kernel_sin+0x18>
 800cb1e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800cb22:	ee17 3a90 	vmov	r3, s15
 800cb26:	b35b      	cbz	r3, 800cb80 <__kernel_sin+0x70>
 800cb28:	ee20 6b00 	vmul.f64	d6, d0, d0
 800cb2c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800cb30:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800cb88 <__kernel_sin+0x78>
 800cb34:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cb90 <__kernel_sin+0x80>
 800cb38:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cb3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cb98 <__kernel_sin+0x88>
 800cb40:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cb44:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cba0 <__kernel_sin+0x90>
 800cb48:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cb4c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cba8 <__kernel_sin+0x98>
 800cb50:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cb54:	b930      	cbnz	r0, 800cb64 <__kernel_sin+0x54>
 800cb56:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cbb0 <__kernel_sin+0xa0>
 800cb5a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cb5e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800cb62:	4770      	bx	lr
 800cb64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800cb68:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cb6c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800cb70:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800cb74:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cbb8 <__kernel_sin+0xa8>
 800cb78:	eea5 1b07 	vfma.f64	d1, d5, d7
 800cb7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	f3af 8000 	nop.w
 800cb88:	5acfd57c 	.word	0x5acfd57c
 800cb8c:	3de5d93a 	.word	0x3de5d93a
 800cb90:	8a2b9ceb 	.word	0x8a2b9ceb
 800cb94:	be5ae5e6 	.word	0xbe5ae5e6
 800cb98:	57b1fe7d 	.word	0x57b1fe7d
 800cb9c:	3ec71de3 	.word	0x3ec71de3
 800cba0:	19c161d5 	.word	0x19c161d5
 800cba4:	bf2a01a0 	.word	0xbf2a01a0
 800cba8:	1110f8a6 	.word	0x1110f8a6
 800cbac:	3f811111 	.word	0x3f811111
 800cbb0:	55555549 	.word	0x55555549
 800cbb4:	bfc55555 	.word	0xbfc55555
 800cbb8:	55555549 	.word	0x55555549
 800cbbc:	3fc55555 	.word	0x3fc55555

0800cbc0 <fabs>:
 800cbc0:	ec51 0b10 	vmov	r0, r1, d0
 800cbc4:	ee10 2a10 	vmov	r2, s0
 800cbc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbcc:	ec43 2b10 	vmov	d0, r2, r3
 800cbd0:	4770      	bx	lr
 800cbd2:	0000      	movs	r0, r0
 800cbd4:	0000      	movs	r0, r0
	...

0800cbd8 <floor>:
 800cbd8:	ee10 1a90 	vmov	r1, s1
 800cbdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cbe0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800cbe4:	2b13      	cmp	r3, #19
 800cbe6:	b530      	push	{r4, r5, lr}
 800cbe8:	ee10 0a10 	vmov	r0, s0
 800cbec:	ee10 5a10 	vmov	r5, s0
 800cbf0:	dc31      	bgt.n	800cc56 <floor+0x7e>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	da15      	bge.n	800cc22 <floor+0x4a>
 800cbf6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ccb0 <floor+0xd8>
 800cbfa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cbfe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc06:	dd07      	ble.n	800cc18 <floor+0x40>
 800cc08:	2900      	cmp	r1, #0
 800cc0a:	da4e      	bge.n	800ccaa <floor+0xd2>
 800cc0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc10:	4318      	orrs	r0, r3
 800cc12:	d001      	beq.n	800cc18 <floor+0x40>
 800cc14:	4928      	ldr	r1, [pc, #160]	; (800ccb8 <floor+0xe0>)
 800cc16:	2000      	movs	r0, #0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	ec43 2b10 	vmov	d0, r2, r3
 800cc20:	e020      	b.n	800cc64 <floor+0x8c>
 800cc22:	4a26      	ldr	r2, [pc, #152]	; (800ccbc <floor+0xe4>)
 800cc24:	411a      	asrs	r2, r3
 800cc26:	ea01 0402 	and.w	r4, r1, r2
 800cc2a:	4304      	orrs	r4, r0
 800cc2c:	d01a      	beq.n	800cc64 <floor+0x8c>
 800cc2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ccb0 <floor+0xd8>
 800cc32:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cc36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3e:	ddeb      	ble.n	800cc18 <floor+0x40>
 800cc40:	2900      	cmp	r1, #0
 800cc42:	bfbe      	ittt	lt
 800cc44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800cc48:	fa40 f303 	asrlt.w	r3, r0, r3
 800cc4c:	18c9      	addlt	r1, r1, r3
 800cc4e:	ea21 0102 	bic.w	r1, r1, r2
 800cc52:	2000      	movs	r0, #0
 800cc54:	e7e0      	b.n	800cc18 <floor+0x40>
 800cc56:	2b33      	cmp	r3, #51	; 0x33
 800cc58:	dd05      	ble.n	800cc66 <floor+0x8e>
 800cc5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc5e:	d101      	bne.n	800cc64 <floor+0x8c>
 800cc60:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cc64:	bd30      	pop	{r4, r5, pc}
 800cc66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cc6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc6e:	40e2      	lsrs	r2, r4
 800cc70:	4202      	tst	r2, r0
 800cc72:	d0f7      	beq.n	800cc64 <floor+0x8c>
 800cc74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ccb0 <floor+0xd8>
 800cc78:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cc7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc84:	ddc8      	ble.n	800cc18 <floor+0x40>
 800cc86:	2900      	cmp	r1, #0
 800cc88:	da02      	bge.n	800cc90 <floor+0xb8>
 800cc8a:	2b14      	cmp	r3, #20
 800cc8c:	d103      	bne.n	800cc96 <floor+0xbe>
 800cc8e:	3101      	adds	r1, #1
 800cc90:	ea20 0002 	bic.w	r0, r0, r2
 800cc94:	e7c0      	b.n	800cc18 <floor+0x40>
 800cc96:	2401      	movs	r4, #1
 800cc98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cc9c:	fa04 f303 	lsl.w	r3, r4, r3
 800cca0:	4418      	add	r0, r3
 800cca2:	42a8      	cmp	r0, r5
 800cca4:	bf38      	it	cc
 800cca6:	1909      	addcc	r1, r1, r4
 800cca8:	e7f2      	b.n	800cc90 <floor+0xb8>
 800ccaa:	2000      	movs	r0, #0
 800ccac:	4601      	mov	r1, r0
 800ccae:	e7b3      	b.n	800cc18 <floor+0x40>
 800ccb0:	8800759c 	.word	0x8800759c
 800ccb4:	7e37e43c 	.word	0x7e37e43c
 800ccb8:	bff00000 	.word	0xbff00000
 800ccbc:	000fffff 	.word	0x000fffff

0800ccc0 <scalbn>:
 800ccc0:	ee10 1a90 	vmov	r1, s1
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ccca:	b98c      	cbnz	r4, 800ccf0 <scalbn+0x30>
 800cccc:	ee10 3a10 	vmov	r3, s0
 800ccd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	d011      	beq.n	800ccfc <scalbn+0x3c>
 800ccd8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800cda0 <scalbn+0xe0>
 800ccdc:	4b3c      	ldr	r3, [pc, #240]	; (800cdd0 <scalbn+0x110>)
 800ccde:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cce2:	4298      	cmp	r0, r3
 800cce4:	da0b      	bge.n	800ccfe <scalbn+0x3e>
 800cce6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800cda8 <scalbn+0xe8>
 800ccea:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ccee:	e005      	b.n	800ccfc <scalbn+0x3c>
 800ccf0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ccf4:	429c      	cmp	r4, r3
 800ccf6:	d107      	bne.n	800cd08 <scalbn+0x48>
 800ccf8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	ee10 1a90 	vmov	r1, s1
 800cd02:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cd06:	3c36      	subs	r4, #54	; 0x36
 800cd08:	4404      	add	r4, r0
 800cd0a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800cd0e:	429c      	cmp	r4, r3
 800cd10:	dd0d      	ble.n	800cd2e <scalbn+0x6e>
 800cd12:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800cdb0 <scalbn+0xf0>
 800cd16:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800cdb8 <scalbn+0xf8>
 800cd1a:	eeb0 6b47 	vmov.f64	d6, d7
 800cd1e:	ee10 3a90 	vmov	r3, s1
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	fe27 7b05 	vselge.f64	d7, d7, d5
 800cd28:	ee27 0b06 	vmul.f64	d0, d7, d6
 800cd2c:	e7e6      	b.n	800ccfc <scalbn+0x3c>
 800cd2e:	2c00      	cmp	r4, #0
 800cd30:	dd0a      	ble.n	800cd48 <scalbn+0x88>
 800cd32:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800cd36:	ec53 2b10 	vmov	r2, r3, d0
 800cd3a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800cd3e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800cd42:	ec43 2b10 	vmov	d0, r2, r3
 800cd46:	e7d9      	b.n	800ccfc <scalbn+0x3c>
 800cd48:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800cd4c:	da19      	bge.n	800cd82 <scalbn+0xc2>
 800cd4e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd52:	4298      	cmp	r0, r3
 800cd54:	ee10 3a90 	vmov	r3, s1
 800cd58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd5c:	dd09      	ble.n	800cd72 <scalbn+0xb2>
 800cd5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800cdb0 <scalbn+0xf0>
 800cd62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800cdb8 <scalbn+0xf8>
 800cd66:	eeb0 7b40 	vmov.f64	d7, d0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800cd70:	e7bb      	b.n	800ccea <scalbn+0x2a>
 800cd72:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800cda8 <scalbn+0xe8>
 800cd76:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800cdc0 <scalbn+0x100>
 800cd7a:	eeb0 7b40 	vmov.f64	d7, d0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	e7f4      	b.n	800cd6c <scalbn+0xac>
 800cd82:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800cd86:	ec53 2b10 	vmov	r2, r3, d0
 800cd8a:	3436      	adds	r4, #54	; 0x36
 800cd8c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800cd90:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800cd94:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800cdc8 <scalbn+0x108>
 800cd98:	ec43 2b10 	vmov	d0, r2, r3
 800cd9c:	e7a5      	b.n	800ccea <scalbn+0x2a>
 800cd9e:	bf00      	nop
 800cda0:	00000000 	.word	0x00000000
 800cda4:	43500000 	.word	0x43500000
 800cda8:	c2f8f359 	.word	0xc2f8f359
 800cdac:	01a56e1f 	.word	0x01a56e1f
 800cdb0:	8800759c 	.word	0x8800759c
 800cdb4:	7e37e43c 	.word	0x7e37e43c
 800cdb8:	8800759c 	.word	0x8800759c
 800cdbc:	fe37e43c 	.word	0xfe37e43c
 800cdc0:	c2f8f359 	.word	0xc2f8f359
 800cdc4:	81a56e1f 	.word	0x81a56e1f
 800cdc8:	00000000 	.word	0x00000000
 800cdcc:	3c900000 	.word	0x3c900000
 800cdd0:	ffff3cb0 	.word	0xffff3cb0

0800cdd4 <_init>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	bf00      	nop
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr

0800cde0 <_fini>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	bf00      	nop
 800cde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde6:	bc08      	pop	{r3}
 800cde8:	469e      	mov	lr, r3
 800cdea:	4770      	bx	lr
