
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b178  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800b370  0800b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b494  0800b494  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b49c  0800b49c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800b4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033c84  2000000c  0800b4b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20033c90  0800b4b0  00023c90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2ee  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb2  00000000  00000000  0003e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00042ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00044610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033e35  00000000  00000000  00045b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023260  00000000  00000000  00079935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001268aa  00000000  00000000  0009cb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c343f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c44  00000000  00000000  001c3490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800b358 	.word	0x0800b358

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800b358 	.word	0x0800b358

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <MX_ADC1_Init+0x9c>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_ADC1_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ADC1_Init+0x98>)
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <MX_ADC1_Init+0xa0>)
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_ADC1_Init+0x98>)
 800058a:	2201      	movs	r2, #1
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x98>)
 800059e:	f001 fa07 	bl	80019b0 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a8:	f000 fd3c 	bl	8001024 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_ADC1_Init+0xa4>)
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_ADC1_Init+0x98>)
 80005be:	f001 fa3b 	bl	8001a38 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c8:	f000 fd2c 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40012000 	.word	0x40012000
 80005dc:	0f000001 	.word	0x0f000001
 80005e0:	10000012 	.word	0x10000012

080005e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_ADC_MspInit+0x38>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10b      	bne.n	800060e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40012000 	.word	0x40012000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f001 fd55 	bl	80020fc <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f000 fce4 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000070 	.word	0x20000070
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80006ac:	4b63      	ldr	r3, [pc, #396]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ae:	4a64      	ldr	r2, [pc, #400]	; (8000840 <MX_DFSDM1_Init+0x198>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006b2:	4b62      	ldr	r3, [pc, #392]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80006b8:	4b60      	ldr	r3, [pc, #384]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80006be:	4b5f      	ldr	r3, [pc, #380]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 80006ca:	4b5c      	ldr	r3, [pc, #368]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80006d6:	4b59      	ldr	r3, [pc, #356]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80006dc:	4b57      	ldr	r3, [pc, #348]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80006ec:	4b53      	ldr	r3, [pc, #332]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80006f2:	4b52      	ldr	r3, [pc, #328]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006fa:	f001 fea9 	bl	8002450 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <MX_DFSDM1_Init+0x1a0>)
 8000702:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000704:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800070a:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800070c:	2201      	movs	r2, #1
 800070e:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000710:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000712:	2201      	movs	r2, #1
 8000714:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000716:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 800071c:	4b49      	ldr	r3, [pc, #292]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800071e:	2201      	movs	r2, #1
 8000720:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 8000722:	4b48      	ldr	r3, [pc, #288]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000724:	2200      	movs	r2, #0
 8000726:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000728:	4b46      	ldr	r3, [pc, #280]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800072e:	4b45      	ldr	r3, [pc, #276]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000734:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000736:	4b43      	ldr	r3, [pc, #268]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000738:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800073c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000746:	2201      	movs	r2, #1
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800074a:	483e      	ldr	r0, [pc, #248]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800074c:	f001 fe80 	bl	8002450 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_DFSDM1_Init+0x1a8>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000762:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000766:	2204      	movs	r2, #4
 8000768:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000786:	2204      	movs	r2, #4
 8000788:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80007a2:	482a      	ldr	r0, [pc, #168]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 80007a4:	f001 fd94 	bl	80022d0 <HAL_DFSDM_ChannelInit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 80007ae:	f000 fc39 	bl	8001024 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_DFSDM1_Init+0x1b0>)
 80007b6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f2:	220a      	movs	r2, #10
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007fe:	2202      	movs	r2, #2
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 8000804:	f001 fd64 	bl	80022d0 <HAL_DFSDM_ChannelInit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 800080e:	f000 fc09 	bl	8001024 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000812:	2201      	movs	r2, #1
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000818:	f001 fef4 	bl	8002604 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 800081c:	490f      	ldr	r1, [pc, #60]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000820:	f001 ff36 	bl	8002690 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000824:	2201      	movs	r2, #1
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800082a:	f001 feeb 	bl	8002604 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 800082e:	2101      	movs	r1, #1
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000832:	f001 ff2d 	bl	8002690 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	40017500 	.word	0x40017500
 8000844:	200000e8 	.word	0x200000e8
 8000848:	40017580 	.word	0x40017580
 800084c:	2000013c 	.word	0x2000013c
 8000850:	40017400 	.word	0x40017400
 8000854:	20000174 	.word	0x20000174
 8000858:	40017420 	.word	0x40017420
 800085c:	00010002 	.word	0x00010002

08000860 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000878:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d145      	bne.n	800090c <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000880:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10b      	bne.n	80008aa <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a5e      	ldr	r2, [pc, #376]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a58      	ldr	r2, [pc, #352]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80008d2:	230a      	movs	r3, #10
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	484d      	ldr	r0, [pc, #308]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008de:	f002 fc29 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e2:	2308      	movs	r3, #8
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4845      	ldr	r0, [pc, #276]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008fe:	f002 fc19 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800090a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d137      	bne.n	8000986 <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000918:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <HAL_DFSDM_FilterMspInit+0x1c0>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000922:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000936:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800093a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000956:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800095e:	482f      	ldr	r0, [pc, #188]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000960:	f002 f842 	bl	80029e8 <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 800096a:	f000 fb5b 	bl	8001024 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
 8000980:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_DFSDM_FilterMspInit+0x1c4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d137      	bne.n	8000a00 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009da:	f002 f805 	bl	80029e8 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 80009e4:	f000 fb1e 	bl	8001024 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000270 	.word	0x20000270
 8000a0c:	2000026c 	.word	0x2000026c
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40017500 	.word	0x40017500
 8000a1c:	200001ac 	.word	0x200001ac
 8000a20:	40026410 	.word	0x40026410
 8000a24:	40017580 	.word	0x40017580
 8000a28:	2000020c 	.word	0x2000020c
 8000a2c:	40026488 	.word	0x40026488

08000a30 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d145      	bne.n	8000adc <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10b      	bne.n	8000a7a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000aae:	f002 fb41 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ace:	f002 fb31 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ada:	6013      	str	r3, [r2, #0]
  }
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000270 	.word	0x20000270
 8000ae8:	2000026c 	.word	0x2000026c
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_DMA_Init+0x78>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <MX_DMA_Init+0x78>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_DMA_Init+0x78>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2038      	movs	r0, #56	; 0x38
 8000b18:	f001 fab9 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1c:	2038      	movs	r0, #56	; 0x38
 8000b1e:	f001 fad2 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2039      	movs	r0, #57	; 0x39
 8000b28:	f001 fab1 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b2c:	2039      	movs	r0, #57	; 0x39
 8000b2e:	f001 faca 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	203b      	movs	r0, #59	; 0x3b
 8000b38:	f001 faa9 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b3c:	203b      	movs	r0, #59	; 0x3b
 8000b3e:	f001 fac2 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2044      	movs	r0, #68	; 0x44
 8000b48:	f001 faa1 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000b4c:	2044      	movs	r0, #68	; 0x44
 8000b4e:	f001 faba 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2045      	movs	r0, #69	; 0x45
 8000b58:	f001 fa99 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b5c:	2045      	movs	r0, #69	; 0x45
 8000b5e:	f001 fab2 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a5c      	ldr	r2, [pc, #368]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b5a      	ldr	r3, [pc, #360]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a56      	ldr	r2, [pc, #344]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a4a      	ldr	r2, [pc, #296]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a44      	ldr	r2, [pc, #272]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c16:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a38      	ldr	r2, [pc, #224]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a2c      	ldr	r2, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c64:	4826      	ldr	r0, [pc, #152]	; (8000d00 <MX_GPIO_Init+0x190>)
 8000c66:	f002 fc29 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210b      	movs	r1, #11
 8000c6e:	4825      	ldr	r0, [pc, #148]	; (8000d04 <MX_GPIO_Init+0x194>)
 8000c70:	f002 fc24 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <MX_GPIO_Init+0x198>)
 8000c8c:	f002 fa52 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_GPIO_Init+0x190>)
 8000caa:	f002 fa43 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480f      	ldr	r0, [pc, #60]	; (8000d04 <MX_GPIO_Init+0x194>)
 8000cc6:	f002 fa35 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <MX_GPIO_Init+0x19c>)
 8000ce0:	f002 fa28 	bl	8003134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2028      	movs	r0, #40	; 0x28
 8000cea:	f001 f9d0 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cee:	2028      	movs	r0, #40	; 0x28
 8000cf0:	f001 f9e9 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40022000 	.word	0x40022000
 8000d04:	40022400 	.word	0x40022400
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
}
 8000d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d1a:	f3bf 8f6f 	isb	sy
}
 8000d1e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <SCB_EnableICache+0x48>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d28:	f3bf 8f4f 	dsb	sy
}
 8000d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d2e:	f3bf 8f6f 	isb	sy
}
 8000d32:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <SCB_EnableICache+0x48>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <SCB_EnableICache+0x48>)
 8000d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
}
 8000d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d46:	f3bf 8f6f 	isb	sy
}
 8000d4a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6a:	f3bf 8f4f 	dsb	sy
}
 8000d6e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	0b5b      	lsrs	r3, r3, #13
 8000d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d80:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d8a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	015a      	lsls	r2, r3, #5
 8000d90:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d94:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d9a:	4911      	ldr	r1, [pc, #68]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1ef      	bne.n	8000d8c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	60fa      	str	r2, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e5      	bne.n	8000d82 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
}
 8000dba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
}
 8000dcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dce:	f3bf 8f6f 	isb	sy
}
 8000dd2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	recording = 0;
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <main+0xdc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
	char file_name[10] = "test.wav";
 8000df0:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <main+0xe0>)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000df6:	c303      	stmia	r3!, {r0, r1}
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	737b      	strb	r3, [r7, #13]
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000dfe:	f7ff ff87 	bl	8000d10 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e02:	f7ff ffab 	bl	8000d5c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 fd52 	bl	80018ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f869 	bl	8000ee0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e0e:	f000 f8d9 	bl	8000fc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e12:	f7ff fead 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e16:	f7ff fe6d 	bl	8000af4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000e1a:	f7ff fc45 	bl	80006a8 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000e1e:	f000 f98f 	bl	8001140 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000e22:	f7ff fb8b 	bl	800053c <MX_ADC1_Init>
  MX_UART4_Init();
 8000e26:	f000 fc67 	bl	80016f8 <MX_UART4_Init>
  MX_CRC_Init();
 8000e2a:	f7ff fbfb 	bl	8000624 <MX_CRC_Init>
  MX_RTC_Init();
 8000e2e:	f000 f8ff 	bl	8001030 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000e32:	f000 fa8f 	bl	8001354 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000e36:	f006 fef5 	bl	8007c24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3e:	4922      	ldr	r1, [pc, #136]	; (8000ec8 <main+0xe4>)
 8000e40:	4822      	ldr	r0, [pc, #136]	; (8000ecc <main+0xe8>)
 8000e42:	f001 fc55 	bl	80026f0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <main+0x6c>
    {
      Error_Handler();
 8000e4c:	f000 f8ea 	bl	8001024 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e54:	491e      	ldr	r1, [pc, #120]	; (8000ed0 <main+0xec>)
 8000e56:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <main+0xf0>)
 8000e58:	f001 fc4a 	bl	80026f0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <main+0x82>
    {
      Error_Handler();
 8000e62:	f000 f8df 	bl	8001024 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!recording);
 8000e66:	bf00      	nop
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <main+0xdc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0fb      	beq.n	8000e68 <main+0x84>

	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8000e70:	e001      	b.n	8000e76 <main+0x92>
	  {
		  checkMicrophone();
 8000e72:	f009 ff59 	bl	800ad28 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <main+0xdc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <main+0xa6>
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <main+0xf4>)
 8000e80:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f3      	beq.n	8000e72 <main+0x8e>
	  }

	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8000e8a:	4914      	ldr	r1, [pc, #80]	; (8000edc <main+0xf8>)
 8000e8c:	f64a 4044 	movw	r0, #44100	; 0xac44
 8000e90:	f00a f8ec 	bl	800b06c <WavProcess_EncInit>
	  SDInit();
 8000e94:	f00a f862 	bl	800af5c <SDInit>
	  createFile(file_name);
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a f888 	bl	800afb0 <createFile>
	  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 8000ea0:	212c      	movs	r1, #44	; 0x2c
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <main+0xf8>)
 8000ea4:	f00a f89a 	bl	800afdc <writeToFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.fptr);
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <main+0xf4>)
 8000eaa:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <main+0xf4>)
 8000eb4:	f00a f892 	bl	800afdc <writeToFile>
	  SDclose();
 8000eb8:	f00a f8a4 	bl	800b004 <SDclose>
  {
 8000ebc:	e7d3      	b.n	8000e66 <main+0x82>
 8000ebe:	bf00      	nop
 8000ec0:	20000274 	.word	0x20000274
 8000ec4:	0800b370 	.word	0x0800b370
 8000ec8:	20002278 	.word	0x20002278
 8000ecc:	200000e8 	.word	0x200000e8
 8000ed0:	20000278 	.word	0x20000278
 8000ed4:	20000094 	.word	0x20000094
 8000ed8:	20006c54 	.word	0x20006c54
 8000edc:	20033c64 	.word	0x20033c64

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2234      	movs	r2, #52	; 0x34
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00a fa2a 	bl	800b348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <SystemClock_Config+0xdc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <SystemClock_Config+0xdc>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <SystemClock_Config+0xdc>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <SystemClock_Config+0xe0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <SystemClock_Config+0xe0>)
 8000f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <SystemClock_Config+0xe0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f34:	2309      	movs	r3, #9
 8000f36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f4c:	2319      	movs	r3, #25
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f50:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000f54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fb2a 	bl	80035c0 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f72:	f000 f857 	bl	8001024 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f76:	f002 fad3 	bl	8003520 <HAL_PWREx_EnableOverDrive>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f80:	f000 f850 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fdba 	bl	8003b1c <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000fae:	f000 f839 	bl	8001024 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	; 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0a4      	sub	sp, #144	; 0x90
 8000fc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2290      	movs	r2, #144	; 0x90
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00a f9b9 	bl	800b348 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <PeriphCommonClock_Config+0x5c>)
 8000fd8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8000fda:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000fde:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8000fec:	2306      	movs	r3, #6
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8000ff8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4618      	mov	r0, r3
 800100a:	f002 ff6d 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001014:	f000 f806 	bl	8001024 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3790      	adds	r7, #144	; 0x90
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	18300000 	.word	0x18300000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <MX_RTC_Init+0xac>)
 800104a:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <MX_RTC_Init+0xb0>)
 800104c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_RTC_Init+0xac>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_RTC_Init+0xac>)
 8001056:	227f      	movs	r2, #127	; 0x7f
 8001058:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_RTC_Init+0xac>)
 800105c:	22ff      	movs	r2, #255	; 0xff
 800105e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_RTC_Init+0xac>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_RTC_Init+0xac>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_RTC_Init+0xac>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001072:	481a      	ldr	r0, [pc, #104]	; (80010dc <MX_RTC_Init+0xac>)
 8001074:	f003 fcd2 	bl	8004a1c <HAL_RTC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800107e:	f7ff ffd1 	bl	8001024 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001082:	2300      	movs	r3, #0
 8001084:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001086:	2300      	movs	r3, #0
 8001088:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800108a:	2300      	movs	r3, #0
 800108c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	480f      	ldr	r0, [pc, #60]	; (80010dc <MX_RTC_Init+0xac>)
 800109e:	f003 fd41 	bl	8004b24 <HAL_RTC_SetTime>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80010a8:	f7ff ffbc 	bl	8001024 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010ac:	2301      	movs	r3, #1
 80010ae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010b0:	2301      	movs	r3, #1
 80010b2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	2201      	movs	r2, #1
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <MX_RTC_Init+0xac>)
 80010c4:	f003 fdc8 	bl	8004c58 <HAL_RTC_SetDate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80010ce:	f7ff ffa9 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20006288 	.word	0x20006288
 80010e0:	40002800 	.word	0x40002800

080010e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0a6      	sub	sp, #152	; 0x98
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	2290      	movs	r2, #144	; 0x90
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00a f927 	bl	800b348 <memset>
  if(rtcHandle->Instance==RTC)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_RTC_MspInit+0x54>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d114      	bne.n	800112e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001104:	2320      	movs	r3, #32
 8001106:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fee8 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800111e:	f7ff ff81 	bl	8001024 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_RTC_MspInit+0x58>)
 8001124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <HAL_RTC_MspInit+0x58>)
 8001128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800112e:	bf00      	nop
 8001130:	3798      	adds	r7, #152	; 0x98
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40002800 	.word	0x40002800
 800113c:	40023800 	.word	0x40023800

08001140 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001146:	4a2b      	ldr	r2, [pc, #172]	; (80011f4 <MX_SAI2_Init+0xb4>)
 8001148:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_SAI2_Init+0xb0>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_SAI2_Init+0xb0>)
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_SAI2_Init+0xb0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001174:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_SAI2_Init+0xb0>)
 800117e:	2201      	movs	r2, #1
 8001180:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_SAI2_Init+0xb8>)
 8001186:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_SAI2_Init+0xb0>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_SAI2_Init+0xb0>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_SAI2_Init+0xb0>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011a2:	2220      	movs	r2, #32
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011c0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_SAI2_Init+0xb0>)
 80011dc:	f003 fe62 	bl	8004ea4 <HAL_SAI_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80011e6:	f7ff ff1d 	bl	8001024 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200062a8 	.word	0x200062a8
 80011f4:	40015c24 	.word	0x40015c24
 80011f8:	0002ee00 	.word	0x0002ee00

080011fc <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a4a      	ldr	r2, [pc, #296]	; (8001334 <HAL_SAI_MspInit+0x138>)
 800120a:	4293      	cmp	r3, r2
 800120c:	f040 808e 	bne.w	800132c <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001210:	4b49      	ldr	r3, [pc, #292]	; (8001338 <HAL_SAI_MspInit+0x13c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10b      	bne.n	8001230 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001218:	4b48      	ldr	r3, [pc, #288]	; (800133c <HAL_SAI_MspInit+0x140>)
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	4a47      	ldr	r2, [pc, #284]	; (800133c <HAL_SAI_MspInit+0x140>)
 800121e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001222:	6453      	str	r3, [r2, #68]	; 0x44
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <HAL_SAI_MspInit+0x140>)
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <HAL_SAI_MspInit+0x13c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <HAL_SAI_MspInit+0x13c>)
 8001238:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123a:	2340      	movs	r3, #64	; 0x40
 800123c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800124a:	230a      	movs	r3, #10
 800124c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4619      	mov	r1, r3
 8001254:	483a      	ldr	r0, [pc, #232]	; (8001340 <HAL_SAI_MspInit+0x144>)
 8001256:	f001 ff6d 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800125a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800126c:	230a      	movs	r3, #10
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4833      	ldr	r0, [pc, #204]	; (8001344 <HAL_SAI_MspInit+0x148>)
 8001278:	f001 ff5c 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800128c:	230a      	movs	r3, #10
 800128e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	482c      	ldr	r0, [pc, #176]	; (8001348 <HAL_SAI_MspInit+0x14c>)
 8001298:	f001 ff4c 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129c:	2304      	movs	r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 80012ac:	2308      	movs	r3, #8
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	4824      	ldr	r0, [pc, #144]	; (8001348 <HAL_SAI_MspInit+0x14c>)
 80012b8:	f001 ff3c 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012be:	4a24      	ldr	r2, [pc, #144]	; (8001350 <HAL_SAI_MspInit+0x154>)
 80012c0:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012c4:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 80012c8:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012dc:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ec:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_SAI_MspInit+0x150>)
 80012f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012fc:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_SAI_MspInit+0x150>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <HAL_SAI_MspInit+0x150>)
 8001306:	f001 fb6f 	bl	80029e8 <HAL_DMA_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 8001310:	f7ff fe88 	bl	8001024 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_SAI_MspInit+0x150>)
 8001318:	671a      	str	r2, [r3, #112]	; 0x70
 800131a:	4a0c      	ldr	r2, [pc, #48]	; (800134c <HAL_SAI_MspInit+0x150>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_SAI_MspInit+0x150>)
 8001324:	66da      	str	r2, [r3, #108]	; 0x6c
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_SAI_MspInit+0x150>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40015c24 	.word	0x40015c24
 8001338:	2000638c 	.word	0x2000638c
 800133c:	40023800 	.word	0x40023800
 8001340:	40021000 	.word	0x40021000
 8001344:	40021800 	.word	0x40021800
 8001348:	40020000 	.word	0x40020000
 800134c:	2000632c 	.word	0x2000632c
 8001350:	40026428 	.word	0x40026428

08001354 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <MX_SDMMC1_SD_Init+0x3c>)
 800135c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <MX_SDMMC1_SD_Init+0x38>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20006390 	.word	0x20006390
 8001390:	40012c00 	.word	0x40012c00

08001394 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0ae      	sub	sp, #184	; 0xb8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2290      	movs	r2, #144	; 0x90
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f009 ffc7 	bl	800b348 <memset>
  if(sdHandle->Instance==SDMMC1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a74      	ldr	r2, [pc, #464]	; (8001590 <HAL_SD_MspInit+0x1fc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f040 80e0 	bne.w	8001586 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80013c6:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80013ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fd83 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80013e8:	f7ff fe1c 	bl	8001024 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013ec:	4b69      	ldr	r3, [pc, #420]	; (8001594 <HAL_SD_MspInit+0x200>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	4a68      	ldr	r2, [pc, #416]	; (8001594 <HAL_SD_MspInit+0x200>)
 80013f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f6:	6453      	str	r3, [r2, #68]	; 0x44
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <HAL_SD_MspInit+0x200>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	4b63      	ldr	r3, [pc, #396]	; (8001594 <HAL_SD_MspInit+0x200>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a62      	ldr	r2, [pc, #392]	; (8001594 <HAL_SD_MspInit+0x200>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b60      	ldr	r3, [pc, #384]	; (8001594 <HAL_SD_MspInit+0x200>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_SD_MspInit+0x200>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a5c      	ldr	r2, [pc, #368]	; (8001594 <HAL_SD_MspInit+0x200>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <HAL_SD_MspInit+0x200>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001434:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800144e:	230c      	movs	r3, #12
 8001450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001458:	4619      	mov	r1, r3
 800145a:	484f      	ldr	r0, [pc, #316]	; (8001598 <HAL_SD_MspInit+0x204>)
 800145c:	f001 fe6a 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001460:	2304      	movs	r3, #4
 8001462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001478:	230c      	movs	r3, #12
 800147a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001482:	4619      	mov	r1, r3
 8001484:	4845      	ldr	r0, [pc, #276]	; (800159c <HAL_SD_MspInit+0x208>)
 8001486:	f001 fe55 	bl	8003134 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800148a:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <HAL_SD_MspInit+0x210>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 8001492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001496:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014be:	2220      	movs	r2, #32
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014d0:	2203      	movs	r2, #3
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014e4:	482e      	ldr	r0, [pc, #184]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014e6:	f001 fa7f 	bl	80029e8 <HAL_DMA_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80014f0:	f7ff fd98 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_SD_MspInit+0x20c>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001502:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <HAL_SD_MspInit+0x218>)
 8001504:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_SD_MspInit+0x214>)
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001528:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_SD_MspInit+0x214>)
 800152c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001530:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001534:	2220      	movs	r2, #32
 8001536:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_SD_MspInit+0x214>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001540:	2204      	movs	r2, #4
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001546:	2203      	movs	r2, #3
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_SD_MspInit+0x214>)
 800154c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001554:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800155a:	4813      	ldr	r0, [pc, #76]	; (80015a8 <HAL_SD_MspInit+0x214>)
 800155c:	f001 fa44 	bl	80029e8 <HAL_DMA_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001566:	f7ff fd5d 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_SD_MspInit+0x214>)
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_SD_MspInit+0x214>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2031      	movs	r0, #49	; 0x31
 800157c:	f000 fd87 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001580:	2031      	movs	r0, #49	; 0x31
 8001582:	f000 fda0 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001586:	bf00      	nop
 8001588:	37b8      	adds	r7, #184	; 0xb8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40012c00 	.word	0x40012c00
 8001594:	40023800 	.word	0x40023800
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	20006414 	.word	0x20006414
 80015a4:	400264a0 	.word	0x400264a0
 80015a8:	20006474 	.word	0x20006474
 80015ac:	40026458 	.word	0x40026458

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_MspInit+0x44>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_MspInit+0x44>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_MspInit+0x44>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x44>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x44>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x44>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f970 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 8001650:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001654:	f001 ff4c 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <SDMMC1_IRQHandler+0x10>)
 8001662:	f004 f855 	bl	8005710 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20006390 	.word	0x20006390

08001670 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA2_Stream0_IRQHandler+0x10>)
 8001676:	f001 fae7 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001ac 	.word	0x200001ac

08001684 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA2_Stream1_IRQHandler+0x10>)
 800168a:	f001 fadd 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000632c 	.word	0x2000632c

08001698 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA2_Stream3_IRQHandler+0x10>)
 800169e:	f001 fad3 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20006474 	.word	0x20006474

080016ac <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA2_Stream5_IRQHandler+0x10>)
 80016b2:	f001 fac9 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000020c 	.word	0x2000020c

080016c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA2_Stream6_IRQHandler+0x10>)
 80016c6:	f001 fabf 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20006414 	.word	0x20006414

080016d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_UART4_Init+0x58>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_UART4_Init+0x5c>)
 8001700:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_UART4_Init+0x58>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_UART4_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_UART4_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_UART4_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_UART4_Init+0x58>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_UART4_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_UART4_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_UART4_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_UART4_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_UART4_Init+0x58>)
 800173c:	f005 f893 	bl	8006866 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001746:	f7ff fc6d 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200064d4 	.word	0x200064d4
 8001754:	40004c00 	.word	0x40004c00

08001758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ae      	sub	sp, #184	; 0xb8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2290      	movs	r2, #144	; 0x90
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f009 fde5 	bl	800b348 <memset>
  if(uartHandle->Instance==UART4)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a32      	ldr	r2, [pc, #200]	; (800184c <HAL_UART_MspInit+0xf4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d15d      	bne.n	8001844 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800178e:	2300      	movs	r3, #0
 8001790:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fba6 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017a2:	f7ff fc3f 	bl	8001024 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a23      	ldr	r2, [pc, #140]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_UART_MspInit+0xf8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001806:	2308      	movs	r3, #8
 8001808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001810:	4619      	mov	r1, r3
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <HAL_UART_MspInit+0xfc>)
 8001814:	f001 fc8e 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001832:	2306      	movs	r3, #6
 8001834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_UART_MspInit+0x100>)
 8001840:	f001 fc78 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001844:	bf00      	nop
 8001846:	37b8      	adds	r7, #184	; 0xb8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40004c00 	.word	0x40004c00
 8001850:	40023800 	.word	0x40023800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40020000 	.word	0x40020000

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001878:	4c0b      	ldr	r4, [pc, #44]	; (80018a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001886:	f7ff ff25 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f009 fd39 	bl	800b300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff faa9 	bl	8000de4 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018a0:	0800b4a4 	.word	0x0800b4a4
  ldr r2, =_sbss
 80018a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018a8:	20033c90 	.word	0x20033c90

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>

080018ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b2:	2003      	movs	r0, #3
 80018b4:	f000 fbe0 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b8:	200f      	movs	r0, #15
 80018ba:	f000 f805 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018be:	f7ff fe77 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fbfb 	bl	80020e2 <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	f000 fbc3 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	20000008 	.word	0x20000008
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	2000655c 	.word	0x2000655c

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000655c 	.word	0x2000655c

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e031      	b.n	8001a2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fe08 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_ADC_Init+0x84>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f970 	bl	8001ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	ffffeefd 	.word	0xffffeefd

08001a38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e136      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x28a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d93a      	bls.n	8001ada <HAL_ADC_ConfigChannel+0xa2>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a6c:	d035      	beq.n	8001ada <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68d9      	ldr	r1, [r3, #12]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1e      	subs	r3, #30
 8001a84:	2207      	movs	r2, #7
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	400a      	ands	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a8d      	ldr	r2, [pc, #564]	; (8001cd0 <HAL_ADC_ConfigChannel+0x298>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68d9      	ldr	r1, [r3, #12]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	061a      	lsls	r2, r3, #24
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab2:	e035      	b.n	8001b20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68d9      	ldr	r1, [r3, #12]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4403      	add	r3, r0
 8001acc:	3b1e      	subs	r3, #30
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad8:	e022      	b.n	8001b20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	2207      	movs	r2, #7
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43da      	mvns	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	400a      	ands	r2, r1
 8001afc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6919      	ldr	r1, [r3, #16]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4403      	add	r3, r0
 8001b16:	409a      	lsls	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d824      	bhi.n	8001b72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b05      	subs	r3, #5
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b05      	subs	r3, #5
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b70:	e04c      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d824      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b23      	subs	r3, #35	; 0x23
 8001b8c:	221f      	movs	r2, #31
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	400a      	ands	r2, r1
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b23      	subs	r3, #35	; 0x23
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc2:	e023      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b41      	subs	r3, #65	; 0x41
 8001bd6:	221f      	movs	r2, #31
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b41      	subs	r3, #65	; 0x41
 8001c00:	fa00 f203 	lsl.w	r2, r0, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a30      	ldr	r2, [pc, #192]	; (8001cd4 <HAL_ADC_ConfigChannel+0x29c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1f4>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_ADC_ConfigChannel+0x29c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10f      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d10b      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c48:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c54:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_ADC_ConfigChannel+0x29c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d12b      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x280>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_ADC_ConfigChannel+0x298>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d003      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d122      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c7c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c88:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <HAL_ADC_ConfigChannel+0x298>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_ADC_ConfigChannel+0x2a4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0c9a      	lsrs	r2, r3, #18
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001caa:	e002      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	10000012 	.word	0x10000012
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001cec:	4b78      	ldr	r3, [pc, #480]	; (8001ed0 <ADC_Init+0x1ec>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a77      	ldr	r2, [pc, #476]	; (8001ed0 <ADC_Init+0x1ec>)
 8001cf2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cf6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <ADC_Init+0x1ec>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4973      	ldr	r1, [pc, #460]	; (8001ed0 <ADC_Init+0x1ec>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	021a      	lsls	r2, r3, #8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <ADC_Init+0x1f0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d022      	beq.n	8001dbe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	e00f      	b.n	8001dde <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0202 	bic.w	r2, r2, #2
 8001dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	005a      	lsls	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	3b01      	subs	r3, #1
 8001e38:	035a      	lsls	r2, r3, #13
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e007      	b.n	8001e54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	051a      	lsls	r2, r3, #20
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e96:	025a      	lsls	r2, r3, #9
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	029a      	lsls	r2, r3, #10
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	40012300 	.word	0x40012300
 8001ed4:	0f000001 	.word	0x0f000001

08001ed8 <__NVIC_SetPriorityGrouping>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <__NVIC_SetPriorityGrouping+0x40>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <__NVIC_SetPriorityGrouping+0x40>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00
 8001f1c:	05fa0000 	.word	0x05fa0000

08001f20 <__NVIC_GetPriorityGrouping>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	; (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff29 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff3e 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff31 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e054      	b.n	80021b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7f5b      	ldrb	r3, [r3, #29]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe faa2 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	791b      	ldrb	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_CRC_Init+0xc4>)
 8002138:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0218 	bic.w	r2, r2, #24
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	e00c      	b.n	8002166 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6899      	ldr	r1, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	461a      	mov	r2, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f834 	bl	80021c4 <HAL_CRCEx_Polynomial_Set>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e028      	b.n	80021b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	795b      	ldrb	r3, [r3, #5]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	e004      	b.n	8002184 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6912      	ldr	r2, [r2, #16]
 8002182:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	04c11db7 	.word	0x04c11db7

080021c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021d4:	231f      	movs	r3, #31
 80021d6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021d8:	bf00      	nop
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	613a      	str	r2, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_CRCEx_Polynomial_Set+0x34>
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b18      	cmp	r3, #24
 80021fc:	d846      	bhi.n	800228c <HAL_CRCEx_Polynomial_Set+0xc8>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002293 	.word	0x08002293
 8002208:	0800228d 	.word	0x0800228d
 800220c:	0800228d 	.word	0x0800228d
 8002210:	0800228d 	.word	0x0800228d
 8002214:	0800228d 	.word	0x0800228d
 8002218:	0800228d 	.word	0x0800228d
 800221c:	0800228d 	.word	0x0800228d
 8002220:	0800228d 	.word	0x0800228d
 8002224:	08002281 	.word	0x08002281
 8002228:	0800228d 	.word	0x0800228d
 800222c:	0800228d 	.word	0x0800228d
 8002230:	0800228d 	.word	0x0800228d
 8002234:	0800228d 	.word	0x0800228d
 8002238:	0800228d 	.word	0x0800228d
 800223c:	0800228d 	.word	0x0800228d
 8002240:	0800228d 	.word	0x0800228d
 8002244:	08002275 	.word	0x08002275
 8002248:	0800228d 	.word	0x0800228d
 800224c:	0800228d 	.word	0x0800228d
 8002250:	0800228d 	.word	0x0800228d
 8002254:	0800228d 	.word	0x0800228d
 8002258:	0800228d 	.word	0x0800228d
 800225c:	0800228d 	.word	0x0800228d
 8002260:	0800228d 	.word	0x0800228d
 8002264:	08002269 	.word	0x08002269
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d913      	bls.n	8002296 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002272:	e010      	b.n	8002296 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b07      	cmp	r3, #7
 8002278:	d90f      	bls.n	800229a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800227e:	e00c      	b.n	800229a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d90b      	bls.n	800229e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800228a:	e008      	b.n	800229e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
      break;
 8002290:	e006      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002292:	bf00      	nop
 8002294:	e004      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002296:	bf00      	nop
 8002298:	e002      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800229e:	bf00      	nop
  }
  if (status == HAL_OK)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 0118 	bic.w	r1, r3, #24
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0ac      	b.n	800243c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fadc 	bl	80028a4 <DFSDM_GetChannelFromInstance>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a55      	ldr	r2, [pc, #340]	; (8002444 <HAL_DFSDM_ChannelInit+0x174>)
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e09f      	b.n	800243c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fe fb97 	bl	8000a30 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_DFSDM_ChannelInit+0x178>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_DFSDM_ChannelInit+0x178>)
 800230a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 800230c:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <HAL_DFSDM_ChannelInit+0x178>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d125      	bne.n	8002360 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 800231a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800231e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002320:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4948      	ldr	r1, [pc, #288]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a46      	ldr	r2, [pc, #280]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002334:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002338:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	493f      	ldr	r1, [pc, #252]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002354:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3c      	ldr	r2, [pc, #240]	; (800244c <HAL_DFSDM_ChannelInit+0x17c>)
 800235a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800236e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800237e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002384:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 020f 	bic.w	r2, r2, #15
 800239c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80023c4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f002 0207 	and.w	r2, r2, #7
 80023f0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fa3a 	bl	80028a4 <DFSDM_GetChannelFromInstance>
 8002430:	4602      	mov	r2, r0
 8002432:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_DFSDM_ChannelInit+0x174>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20006564 	.word	0x20006564
 8002448:	20006560 	.word	0x20006560
 800244c:	40017400 	.word	0x40017400

08002450 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0c6      	b.n	80025f0 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_DFSDM_FilterInit+0x1a8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d109      	bne.n	8002480 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002470:	2b01      	cmp	r3, #1
 8002472:	d003      	beq.n	800247c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b7      	b.n	80025f0 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fe f9e1 	bl	8000860 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80024ac:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7a1b      	ldrb	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80024d6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7a5b      	ldrb	r3, [r3, #9]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_DFSDM_FilterInit+0x1ac>)
 800250e:	400b      	ands	r3, r1
 8002510:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d108      	bne.n	800252c <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7c1b      	ldrb	r3, [r3, #16]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0210 	orr.w	r2, r2, #16
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0210 	bic.w	r2, r2, #16
 8002554:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7c5b      	ldrb	r3, [r3, #17]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e007      	b.n	8002580 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0220 	bic.w	r2, r2, #32
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6959      	ldr	r1, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_DFSDM_FilterInit+0x1b0>)
 800258c:	400b      	ands	r3, r1
 800258e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6959      	ldr	r1, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	3b01      	subs	r3, #1
 80025a0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80025a2:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80025aa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7c1a      	ldrb	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40017500 	.word	0x40017500
 80025fc:	ffff80f7 	.word	0xffff80f7
 8002600:	1c00ff00 	.word	0x1c00ff00

08002604 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02c      	beq.n	8002678 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002624:	2bff      	cmp	r3, #255	; 0xff
 8002626:	d027      	beq.n	8002678 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002634:	400b      	ands	r3, r1
 8002636:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10d      	bne.n	800265a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800264c:	431a      	orrs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e00a      	b.n	8002670 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
 8002676:	e001      	b.n	800267c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800267c:	7dfb      	ldrb	r3, [r7, #23]
}
 800267e:	4618      	mov	r0, r3
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	f8fbffff 	.word	0xf8fbffff

08002690 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	d016      	beq.n	80026e0 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	b292      	uxth	r2, r2
 80026ba:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f000 f8d2 	bl	8002866 <DFSDM_GetInjChannelsNbr>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	e000      	b.n	80026da <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80026d8:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6493      	str	r3, [r2, #72]	; 0x48
 80026de:	e001      	b.n	80026e4 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
 8002710:	e066      	b.n	80027e0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002720:	d002      	beq.n	8002728 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e05b      	b.n	80027e0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10e      	bne.n	800274e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	75fb      	strb	r3, [r7, #23]
 800274c:	e048      	b.n	80027e0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002768:	d102      	bne.n	8002770 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
 800276e:	e037      	b.n	80027e0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d004      	beq.n	8002784 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002780:	2b03      	cmp	r3, #3
 8002782:	d12b      	bne.n	80027dc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	4a18      	ldr	r2, [pc, #96]	; (80027ec <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002792:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800279a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279e:	d101      	bne.n	80027a4 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 80027a2:	e000      	b.n	80027a6 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 80027a4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	331c      	adds	r3, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f000 f9c2 	bl	8002b44 <HAL_DMA_Start_IT>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	22ff      	movs	r2, #255	; 0xff
 80027ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80027d2:	e005      	b.n	80027e0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f8b1 	bl	800293c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80027da:	e001      	b.n	80027e0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	08002829 	.word	0x08002829
 80027f0:	08002845 	.word	0x08002845
 80027f4:	0800280d 	.word	0x0800280d

080027f8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f008 fa4c 	bl	800acb8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f008 fa5a 	bl	800acf0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2203      	movs	r2, #3
 8002856:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff ffcd 	bl	80027f8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	b29b      	uxth	r3, r3
 8002876:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002878:	e00a      	b.n	8002890 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f1      	bne.n	800287a <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <DFSDM_GetChannelFromInstance+0x7c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d102      	bne.n	80028ba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e02b      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <DFSDM_GetChannelFromInstance+0x80>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d102      	bne.n	80028c8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e024      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <DFSDM_GetChannelFromInstance+0x84>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d102      	bne.n	80028d6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80028d0:	2302      	movs	r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e01d      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <DFSDM_GetChannelFromInstance+0x88>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d102      	bne.n	80028e4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80028de:	2303      	movs	r3, #3
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e016      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <DFSDM_GetChannelFromInstance+0x8c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d102      	bne.n	80028f2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80028ec:	2304      	movs	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e00f      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <DFSDM_GetChannelFromInstance+0x90>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d102      	bne.n	8002900 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80028fa:	2305      	movs	r3, #5
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e008      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <DFSDM_GetChannelFromInstance+0x94>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002908:	2306      	movs	r3, #6
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e001      	b.n	8002912 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800290e:	2307      	movs	r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40017400 	.word	0x40017400
 8002924:	40017420 	.word	0x40017420
 8002928:	40017440 	.word	0x40017440
 800292c:	40017460 	.word	0x40017460
 8002930:	40017480 	.word	0x40017480
 8002934:	400174a0 	.word	0x400174a0
 8002938:	400174c0 	.word	0x400174c0

0800293c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e033      	b.n	80029c6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800297c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002994:	2b03      	cmp	r3, #3
 8002996:	d116      	bne.n	80029c6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0202 	orr.w	r2, r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <DFSDM_RegConvStart+0x84>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	e000      	b.n	80029c2 <DFSDM_RegConvStart+0x86>
 80029c0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <DFSDM_RegConvStart+0x98>
 80029d0:	2202      	movs	r2, #2
 80029d2:	e000      	b.n	80029d6 <DFSDM_RegConvStart+0x9a>
 80029d4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7fe ffac 	bl	8001950 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e099      	b.n	8002b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a24:	e00f      	b.n	8002a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a26:	f7fe ff93 	bl	8001950 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d908      	bls.n	8002a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e078      	b.n	8002b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e8      	bne.n	8002a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_DMA_Init+0x158>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f023 0307 	bic.w	r3, r3, #7
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d117      	bne.n	8002b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 faa5 	bl	800303c <DMA_CheckFifoParam>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b06:	2301      	movs	r3, #1
 8002b08:	e016      	b.n	8002b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa5c 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	223f      	movs	r2, #63	; 0x3f
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	e010803f 	.word	0xe010803f

08002b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_DMA_Start_IT+0x26>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e048      	b.n	8002bfc <HAL_DMA_Start_IT+0xb8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d137      	bne.n	8002bee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f9ee 	bl	8002f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	223f      	movs	r2, #63	; 0x3f
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0216 	orr.w	r2, r2, #22
 8002bb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bc2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e005      	b.n	8002bfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d004      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00c      	b.n	8002c3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c54:	4b8e      	ldr	r3, [pc, #568]	; (8002e90 <HAL_DMA_IRQHandler+0x248>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a8e      	ldr	r2, [pc, #568]	; (8002e94 <HAL_DMA_IRQHandler+0x24c>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2208      	movs	r2, #8
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2210      	movs	r2, #16
 8002d26:	409a      	lsls	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d043      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03c      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	2210      	movs	r2, #16
 8002d44:	409a      	lsls	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e01f      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0208 	bic.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 808f 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8087 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	2220      	movs	r2, #32
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d136      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0216 	bic.w	r2, r2, #22
 8002e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x1da>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0208 	bic.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	223f      	movs	r2, #63	; 0x3f
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d07e      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
        }
        return;
 8002e5e:	e079      	b.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d031      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e02c      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000
 8002e94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d023      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e01e      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0210 	bic.w	r2, r2, #16
 8002ec6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2205      	movs	r2, #5
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d307      	bcc.n	8002f30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f2      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x2cc>
 8002f2e:	e000      	b.n	8002f32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
 8002f52:	e000      	b.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f54:	bf00      	nop
    }
  }
}
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d108      	bne.n	8002fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb2:	e007      	b.n	8002fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <DMA_CalcBaseAndBitshift+0x60>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d908      	bls.n	8003010 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8003006:	4013      	ands	r3, r2
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	659a      	str	r2, [r3, #88]	; 0x58
 800300e:	e006      	b.n	800301e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	aaaaaaab 	.word	0xaaaaaaab
 8003034:	0800b3d8 	.word	0x0800b3d8
 8003038:	fffffc00 	.word	0xfffffc00

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d856      	bhi.n	800310a <DMA_CheckFifoParam+0xce>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	0800310b 	.word	0x0800310b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d046      	beq.n	800310e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e043      	b.n	800310e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308e:	d140      	bne.n	8003112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03d      	b.n	8003112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d837      	bhi.n	8003116 <DMA_CheckFifoParam+0xda>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e030      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d025      	beq.n	800311a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e022      	b.n	800311a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030dc:	d11f      	bne.n	800311e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01c      	b.n	800311e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d903      	bls.n	80030f2 <DMA_CheckFifoParam+0xb6>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f0:	e018      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      break;
 80030f6:	e015      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e00b      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310a:	bf00      	nop
 800310c:	e00a      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e008      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;   
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
    }
  } 
  
  return status; 
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e175      	b.n	8003440 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	f040 8164 	bne.w	800343a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d005      	beq.n	800318a <HAL_GPIO_Init+0x56>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d017      	beq.n	8003228 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d123      	bne.n	800327c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80be 	beq.w	800343a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_GPIO_Init+0x324>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a65      	ldr	r2, [pc, #404]	; (8003458 <HAL_GPIO_Init+0x324>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_GPIO_Init+0x324>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032d6:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_GPIO_Init+0x328>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_GPIO_Init+0x32c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d037      	beq.n	8003372 <HAL_GPIO_Init+0x23e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_GPIO_Init+0x330>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d031      	beq.n	800336e <HAL_GPIO_Init+0x23a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a56      	ldr	r2, [pc, #344]	; (8003468 <HAL_GPIO_Init+0x334>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <HAL_GPIO_Init+0x236>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a55      	ldr	r2, [pc, #340]	; (800346c <HAL_GPIO_Init+0x338>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d025      	beq.n	8003366 <HAL_GPIO_Init+0x232>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a54      	ldr	r2, [pc, #336]	; (8003470 <HAL_GPIO_Init+0x33c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <HAL_GPIO_Init+0x22e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a53      	ldr	r2, [pc, #332]	; (8003474 <HAL_GPIO_Init+0x340>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d019      	beq.n	800335e <HAL_GPIO_Init+0x22a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <HAL_GPIO_Init+0x344>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x226>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <HAL_GPIO_Init+0x348>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00d      	beq.n	8003356 <HAL_GPIO_Init+0x222>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a50      	ldr	r2, [pc, #320]	; (8003480 <HAL_GPIO_Init+0x34c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <HAL_GPIO_Init+0x21e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4f      	ldr	r2, [pc, #316]	; (8003484 <HAL_GPIO_Init+0x350>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_GPIO_Init+0x21a>
 800334a:	2309      	movs	r3, #9
 800334c:	e012      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800334e:	230a      	movs	r3, #10
 8003350:	e010      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003352:	2308      	movs	r3, #8
 8003354:	e00e      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003356:	2307      	movs	r3, #7
 8003358:	e00c      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800335a:	2306      	movs	r3, #6
 800335c:	e00a      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800335e:	2305      	movs	r3, #5
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003362:	2304      	movs	r3, #4
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x240>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x240>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	; (800345c <HAL_GPIO_Init+0x328>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_GPIO_Init+0x354>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <HAL_GPIO_Init+0x354>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_GPIO_Init+0x354>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f ae86 	bls.w	8003154 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40021400 	.word	0x40021400
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40022000 	.word	0x40022000
 8003484:	40022400 	.word	0x40022400
 8003488:	40013c00 	.word	0x40013c00

0800348c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e001      	b.n	80034ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034d8:	e003      	b.n	80034e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	041a      	lsls	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003506:	4a05      	ldr	r2, [pc, #20]	; (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	4618      	mov	r0, r3
 8003510:	f007 fd82 	bl	800b018 <HAL_GPIO_EXTI_Callback>
  }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40013c00 	.word	0x40013c00

08003520 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354e:	f7fe f9ff 	bl	8001950 <HAL_GetTick>
 8003552:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003554:	e009      	b.n	800356a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003556:	f7fe f9fb 	bl	8001950 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003564:	d901      	bls.n	800356a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e022      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d1ee      	bne.n	8003556 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003582:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003584:	f7fe f9e4 	bl	8001950 <HAL_GetTick>
 8003588:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358a:	e009      	b.n	80035a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800358c:	f7fe f9e0 	bl	8001950 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359a:	d901      	bls.n	80035a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e007      	b.n	80035b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ac:	d1ee      	bne.n	800358c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e29b      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d00c      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d112      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
 80035fc:	4b90      	ldr	r3, [pc, #576]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x130>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e275      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x7a>
 800362c:	4b84      	ldr	r3, [pc, #528]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a83      	ldr	r2, [pc, #524]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x9c>
 8003642:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7b      	ldr	r2, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xc0>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b73      	ldr	r3, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a72      	ldr	r2, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd8>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6b      	ldr	r2, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f956 	bl	8001950 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe f952 	bl	8001950 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e229      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe8>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe f942 	bl	8001950 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe f93e 	bl	8001950 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e215      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b57      	ldr	r3, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x110>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d069      	beq.n	80037d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1e9      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	493d      	ldr	r1, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e040      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe f8f4 	bl	8001950 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fe f8f0 	bl	8001950 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1c7      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4929      	ldr	r1, [pc, #164]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	e018      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f8d0 	bl	8001950 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe f8cc 	bl	8001950 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1a3      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d038      	beq.n	8003850 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d019      	beq.n	800381a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe f8ad 	bl	8001950 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe f8a9 	bl	8001950 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e180      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x23a>
 8003818:	e01a      	b.n	8003850 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_RCC_OscConfig+0x280>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fe f893 	bl	8001950 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382e:	f7fe f88f 	bl	8001950 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d903      	bls.n	8003844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e166      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
 8003840:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b92      	ldr	r3, [pc, #584]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a4 	beq.w	80039a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a88      	ldr	r2, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b83      	ldr	r3, [pc, #524]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe f857 	bl	8001950 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe f853 	bl	8001950 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e12a      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x4d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x31a>
 80038cc:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a6f      	ldr	r2, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	e02d      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x33c>
 80038e2:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a6a      	ldr	r2, [pc, #424]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	e01c      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x35e>
 8003904:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x376>
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fe f807 	bl	8001950 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe f803 	bl	8001950 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0d8      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ee      	beq.n	8003946 <HAL_RCC_OscConfig+0x386>
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd fff1 	bl	8001950 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd ffed 	bl	8001950 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0c2      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ae 	beq.w	8003b0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d06d      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d14b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd ffbe 	bl	8001950 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd ffba 	bl	8001950 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e091      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd ff8c 	bl	8001950 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd ff88 	bl	8001950 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e05f      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x47c>
 8003a5a:	e057      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd ff72 	bl	8001950 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd ff6e 	bl	8001950 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e045      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4b0>
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <HAL_RCC_OscConfig+0x558>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d119      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d10f      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0d0      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4965      	ldr	r1, [pc, #404]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b63      	ldr	r3, [pc, #396]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a58      	ldr	r2, [pc, #352]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494d      	ldr	r1, [pc, #308]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07f      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e073      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4936      	ldr	r1, [pc, #216]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fe9e 	bl	8001950 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd fe9a 	bl	8001950 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e053      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d210      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4922      	ldr	r1, [pc, #136]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e032      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4916      	ldr	r1, [pc, #88]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490e      	ldr	r1, [pc, #56]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f821 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <HAL_RCC_ClockConfig+0x1d0>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1d4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd fdfa 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	0800b3c0 	.word	0x0800b3c0
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	20000004 	.word	0x20000004

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b090      	sub	sp, #64	; 0x40
 8003cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003d00:	2300      	movs	r3, #0
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d04:	2300      	movs	r3, #0
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0c:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d00d      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x40>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	f200 80a1 	bhi.w	8003e60 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x34>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d26:	e09b      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b53      	ldr	r3, [pc, #332]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d2c:	e09b      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d2e:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d32:	e098      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d3e:	4b4d      	ldr	r3, [pc, #308]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d028      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	627a      	str	r2, [r7, #36]	; 0x24
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d60:	fb03 f201 	mul.w	r2, r3, r1
 8003d64:	2300      	movs	r3, #0
 8003d66:	fb00 f303 	mul.w	r3, r0, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4a43      	ldr	r2, [pc, #268]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d74:	460a      	mov	r2, r1
 8003d76:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7a:	4413      	add	r3, r2
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	2200      	movs	r2, #0
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	61fa      	str	r2, [r7, #28]
 8003d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d8e:	f7fc fa53 	bl	8000238 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4613      	mov	r3, r2
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9a:	e053      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9c:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	2200      	movs	r2, #0
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	617a      	str	r2, [r7, #20]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dae:	f04f 0b00 	mov.w	fp, #0
 8003db2:	4652      	mov	r2, sl
 8003db4:	465b      	mov	r3, fp
 8003db6:	f04f 0000 	mov.w	r0, #0
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	0159      	lsls	r1, r3, #5
 8003dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc4:	0150      	lsls	r0, r2, #5
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	ebb2 080a 	subs.w	r8, r2, sl
 8003dce:	eb63 090b 	sbc.w	r9, r3, fp
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003de2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003de6:	ebb2 0408 	subs.w	r4, r2, r8
 8003dea:	eb63 0509 	sbc.w	r5, r3, r9
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	00eb      	lsls	r3, r5, #3
 8003df8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfc:	00e2      	lsls	r2, r4, #3
 8003dfe:	4614      	mov	r4, r2
 8003e00:	461d      	mov	r5, r3
 8003e02:	eb14 030a 	adds.w	r3, r4, sl
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	eb45 030b 	adc.w	r3, r5, fp
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	028b      	lsls	r3, r1, #10
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e24:	4621      	mov	r1, r4
 8003e26:	028a      	lsls	r2, r1, #10
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	60fa      	str	r2, [r7, #12]
 8003e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e38:	f7fc f9fe 	bl	8000238 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4613      	mov	r3, r2
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003e54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3740      	adds	r7, #64	; 0x40
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	017d7840 	.word	0x017d7840

08003e80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000000 	.word	0x20000000

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800b3d0 	.word	0x0800b3d0

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffdc 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	0800b3d0 	.word	0x0800b3d0

08003ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f10:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a68      	ldr	r2, [pc, #416]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f1a:	6093      	str	r3, [r2, #8]
 8003f1c:	4b66      	ldr	r3, [pc, #408]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	4964      	ldr	r1, [pc, #400]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d017      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f42:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	4959      	ldr	r1, [pc, #356]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f60:	d101      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f7e:	4b4e      	ldr	r3, [pc, #312]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	494a      	ldr	r1, [pc, #296]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 808b 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a39      	ldr	r2, [pc, #228]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd8:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a34      	ldr	r2, [pc, #208]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff0:	f7fd fcae 	bl	8001950 <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fd fcaa 	bl	8001950 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e38f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d035      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d02e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004056:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d114      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd fc72 	bl	8001950 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd fc6e 	bl	8001950 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e351      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409e:	d111      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ae:	400b      	ands	r3, r1
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40007000 	.word	0x40007000
 80040c0:	0ffffcff 	.word	0x0ffffcff
 80040c4:	4bac      	ldr	r3, [pc, #688]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4aab      	ldr	r2, [pc, #684]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ce:	6093      	str	r3, [r2, #8]
 80040d0:	4ba9      	ldr	r3, [pc, #676]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	49a6      	ldr	r1, [pc, #664]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ee:	4ba2      	ldr	r3, [pc, #648]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	4aa0      	ldr	r2, [pc, #640]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040fe:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	499b      	ldr	r1, [pc, #620]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411c:	4b96      	ldr	r3, [pc, #600]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	4993      	ldr	r1, [pc, #588]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413e:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414c:	498a      	ldr	r1, [pc, #552]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004160:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	4982      	ldr	r1, [pc, #520]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4979      	ldr	r1, [pc, #484]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a4:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	4971      	ldr	r1, [pc, #452]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c6:	4b6c      	ldr	r3, [pc, #432]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f023 020c 	bic.w	r2, r3, #12
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	4968      	ldr	r1, [pc, #416]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e8:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	4960      	ldr	r1, [pc, #384]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	4957      	ldr	r1, [pc, #348]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800422c:	4b52      	ldr	r3, [pc, #328]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	494f      	ldr	r1, [pc, #316]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800424e:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4946      	ldr	r1, [pc, #280]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004270:	4b41      	ldr	r3, [pc, #260]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	493e      	ldr	r1, [pc, #248]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	4935      	ldr	r1, [pc, #212]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b4:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	492d      	ldr	r1, [pc, #180]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042d6:	4b28      	ldr	r3, [pc, #160]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e4:	4924      	ldr	r1, [pc, #144]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	4914      	ldr	r1, [pc, #80]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	490b      	ldr	r1, [pc, #44]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	4902      	ldr	r1, [pc, #8]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004388:	4b8a      	ldr	r3, [pc, #552]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	4986      	ldr	r1, [pc, #536]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043ac:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043bc:	497d      	ldr	r1, [pc, #500]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d006      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80d6 	beq.w	8004584 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fd fab4 	bl	8001950 <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ec:	f7fd fab0 	bl	8001950 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e195      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fe:	4b6d      	ldr	r3, [pc, #436]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d021      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800442c:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004432:	0e1b      	lsrs	r3, r3, #24
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	071b      	lsls	r3, r3, #28
 8004452:	4958      	ldr	r1, [pc, #352]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d129      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004486:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004494:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449a:	0f1b      	lsrs	r3, r3, #28
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	019a      	lsls	r2, r3, #6
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	493e      	ldr	r1, [pc, #248]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c8:	f023 021f 	bic.w	r2, r3, #31
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	3b01      	subs	r3, #1
 80044d2:	4938      	ldr	r1, [pc, #224]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01d      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	0e1b      	lsrs	r3, r3, #24
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044f4:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	0f1b      	lsrs	r3, r3, #28
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	019a      	lsls	r2, r3, #6
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	431a      	orrs	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	071b      	lsls	r3, r3, #28
 800451a:	4926      	ldr	r1, [pc, #152]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	019a      	lsls	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	491a      	ldr	r1, [pc, #104]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004558:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fd f9f7 	bl	8001950 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004566:	f7fd f9f3 	bl	8001950 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	; 0x64
 8004572:	d901      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0d8      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	f040 80ce 	bne.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fd f9da 	bl	8001950 <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800459e:	e00b      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a0:	f7fd f9d6 	bl	8001950 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d904      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0bb      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d0ec      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d12a      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ee:	4b51      	ldr	r3, [pc, #324]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045fc:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	0f1b      	lsrs	r3, r3, #28
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	019a      	lsls	r2, r3, #6
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	4944      	ldr	r1, [pc, #272]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	493d      	ldr	r1, [pc, #244]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004658:	d11d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	0e1b      	lsrs	r3, r3, #24
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	019a      	lsls	r2, r3, #6
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	071b      	lsls	r3, r3, #28
 800468e:	4929      	ldr	r1, [pc, #164]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d028      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	0e1b      	lsrs	r3, r3, #24
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	019a      	lsls	r2, r3, #6
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	4917      	ldr	r1, [pc, #92]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4911      	ldr	r1, [pc, #68]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fd f926 	bl	8001950 <HAL_GetTick>
 8004704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004708:	f7fd f922 	bl	8001950 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e007      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004726:	d1ef      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004756:	f040 80a3 	bne.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800475a:	4ba8      	ldr	r3, [pc, #672]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004760:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004768:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004770:	f000 808a 	beq.w	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800477a:	f200 8093 	bhi.w	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004784:	d07d      	beq.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800478c:	f200 808a 	bhi.w	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479c:	d039      	beq.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800479e:	e081      	b.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047a0:	4b96      	ldr	r3, [pc, #600]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047ac:	4b93      	ldr	r3, [pc, #588]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b4:	4a92      	ldr	r2, [pc, #584]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e007      	b.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047be:	4b8f      	ldr	r3, [pc, #572]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c6:	4a8f      	ldr	r2, [pc, #572]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	0e1b      	lsrs	r3, r3, #24
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047dc:	4b87      	ldr	r3, [pc, #540]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	fb03 f202 	mul.w	r2, r3, r2
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047f6:	4b81      	ldr	r3, [pc, #516]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	617b      	str	r3, [r7, #20]
        break;
 8004810:	e049      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004812:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d108      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800481e:	4b77      	ldr	r3, [pc, #476]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004826:	4a76      	ldr	r2, [pc, #472]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e007      	b.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004830:	4b72      	ldr	r3, [pc, #456]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	4a72      	ldr	r2, [pc, #456]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004840:	4b6e      	ldr	r3, [pc, #440]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004846:	0e1b      	lsrs	r3, r3, #24
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800484e:	4b6b      	ldr	r3, [pc, #428]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	fb03 f202 	mul.w	r2, r3, r2
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004868:	4b64      	ldr	r3, [pc, #400]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800486a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	617b      	str	r3, [r7, #20]
        break;
 8004880:	e011      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004882:	4b61      	ldr	r3, [pc, #388]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004884:	617b      	str	r3, [r7, #20]
        break;
 8004886:	e00e      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004888:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004894:	4b5a      	ldr	r3, [pc, #360]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004896:	617b      	str	r3, [r7, #20]
        break;
 8004898:	e005      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800489a:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800489c:	617b      	str	r3, [r7, #20]
        break;
 800489e:	e002      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80048a0:	bf00      	nop
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80048a4:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ac:	f040 80a3 	bne.w	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80048b0:	4b52      	ldr	r3, [pc, #328]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b6:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048be:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048c6:	f000 808a 	beq.w	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048d0:	f200 809c 	bhi.w	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048da:	d07d      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048e2:	f200 8093 	bhi.w	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f2:	d039      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80048f4:	e08a      	b.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048f6:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d108      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004902:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e007      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	4a39      	ldr	r2, [pc, #228]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004924:	4b35      	ldr	r3, [pc, #212]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	0e1b      	lsrs	r3, r3, #24
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004932:	4b32      	ldr	r3, [pc, #200]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	fb03 f202 	mul.w	r2, r3, r2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
        break;
 8004966:	e052      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004968:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004974:	4b21      	ldr	r3, [pc, #132]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800497c:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e007      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498e:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	fb03 f202 	mul.w	r2, r3, r2
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	3301      	adds	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	617b      	str	r3, [r7, #20]
        break;
 80049d6:	e01a      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80049da:	617b      	str	r3, [r7, #20]
        break;
 80049dc:	e017      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80049ec:	617b      	str	r3, [r7, #20]
        break;
 80049ee:	e00e      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049f2:	617b      	str	r3, [r7, #20]
        break;
 80049f4:	e00b      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 80049f6:	bf00      	nop
 80049f8:	e009      	b.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	017d7840 	.word	0x017d7840
 8004a08:	00bb8000 	.word	0x00bb8000
        break;
 8004a0c:	bf00      	nop

  return frequency;
 8004a0e:	697b      	ldr	r3, [r7, #20]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e071      	b.n	8004b16 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7f5b      	ldrb	r3, [r3, #29]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc fb4e 	bl	80010e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d053      	beq.n	8004b04 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	22ca      	movs	r2, #202	; 0xca
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2253      	movs	r2, #83	; 0x53
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f99f 	bl	8004db0 <RTC_EnterInitMode>
 8004a72:	4603      	mov	r3, r0
 8004a74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d12a      	bne.n	8004ad2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <HAL_RTC_Init+0x104>)
 8004a88:	400b      	ands	r3, r1
 8004a8a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6899      	ldr	r1, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6919      	ldr	r1, [r3, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	041a      	lsls	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f9a8 	bl	8004e1e <RTC_ExitInitMode>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d110      	bne.n	8004afa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0208 	bic.w	r2, r2, #8
 8004ae6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
 8004b02:	e001      	b.n	8004b08 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	ff8fffbf 	.word	0xff8fffbf

08004b24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	7f1b      	ldrb	r3, [r3, #28]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_RTC_SetTime+0x1c>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e085      	b.n	8004c4c <HAL_RTC_SetTime+0x128>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d126      	bne.n	8004ba0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f97c 	bl	8004e68 <RTC_ByteToBcd2>
 8004b70:	4603      	mov	r3, r0
 8004b72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f975 	bl	8004e68 <RTC_ByteToBcd2>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	789b      	ldrb	r3, [r3, #2]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f96d 	bl	8004e68 <RTC_ByteToBcd2>
 8004b8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	78db      	ldrb	r3, [r3, #3]
 8004b98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e018      	b.n	8004bd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bc0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004bc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	78db      	ldrb	r3, [r3, #3]
 8004bcc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	22ca      	movs	r2, #202	; 0xca
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2253      	movs	r2, #83	; 0x53
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f8e4 	bl	8004db0 <RTC_EnterInitMode>
 8004be8:	4603      	mov	r3, r0
 8004bea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11e      	bne.n	8004c30 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	6979      	ldr	r1, [r7, #20]
 8004bf8:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <HAL_RTC_SetTime+0x130>)
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6899      	ldr	r1, [r3, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f8f9 	bl	8004e1e <RTC_ExitInitMode>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	22ff      	movs	r2, #255	; 0xff
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	771a      	strb	r2, [r3, #28]

  return status;
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}
 8004c54:	007f7f7f 	.word	0x007f7f7f

08004c58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	7f1b      	ldrb	r3, [r3, #28]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_RTC_SetDate+0x1c>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e06f      	b.n	8004d54 <HAL_RTC_SetDate+0xfc>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10e      	bne.n	8004ca4 <HAL_RTC_SetDate+0x4c>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	f023 0310 	bic.w	r3, r3, #16
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	330a      	adds	r3, #10
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d11c      	bne.n	8004ce4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	78db      	ldrb	r3, [r3, #3]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f8da 	bl	8004e68 <RTC_ByteToBcd2>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f8d3 	bl	8004e68 <RTC_ByteToBcd2>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cc6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	789b      	ldrb	r3, [r3, #2]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f8cb 	bl	8004e68 <RTC_ByteToBcd2>
 8004cd2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cd4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e00e      	b.n	8004d02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cf0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cf6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	22ca      	movs	r2, #202	; 0xca
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2253      	movs	r2, #83	; 0x53
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f84c 	bl	8004db0 <RTC_EnterInitMode>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_RTC_SetDate+0x104>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f875 	bl	8004e1e <RTC_ExitInitMode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	22ff      	movs	r2, #255	; 0xff
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	771a      	strb	r2, [r3, #28]

  return status;
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}
 8004d5c:	00ffff3f 	.word	0x00ffff3f

08004d60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7fc fde8 	bl	8001950 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d82:	e009      	b.n	8004d98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d84:	f7fc fde4 	bl	8001950 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d92:	d901      	bls.n	8004d98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e007      	b.n	8004da8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d122      	bne.n	8004e14 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ddc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dde:	f7fc fdb7 	bl	8001950 <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004de4:	e00c      	b.n	8004e00 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004de6:	f7fc fdb3 	bl	8001950 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df4:	d904      	bls.n	8004e00 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <RTC_EnterInitMode+0x64>
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d1e8      	bne.n	8004de6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e38:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff89 	bl	8004d60 <HAL_RTC_WaitForSynchro>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d004      	beq.n	8004e5e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e76:	e005      	b.n	8004e84 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	3b0a      	subs	r3, #10
 8004e82:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d8f6      	bhi.n	8004e78 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b2db      	uxtb	r3, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e156      	b.n	8005170 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc f990 	bl	80011fc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f95b 	bl	80051a0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d00c      	beq.n	8004f0c <HAL_SAI_Init+0x68>
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d80d      	bhi.n	8004f12 <HAL_SAI_Init+0x6e>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SAI_Init+0x5c>
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d003      	beq.n	8004f06 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004efe:	e008      	b.n	8004f12 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
      break;
 8004f04:	e006      	b.n	8004f14 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004f06:	2310      	movs	r3, #16
 8004f08:	61fb      	str	r3, [r7, #28]
      break;
 8004f0a:	e003      	b.n	8004f14 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	61fb      	str	r3, [r7, #28]
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_SAI_Init+0x70>
      break;
 8004f12:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d81e      	bhi.n	8004f5a <HAL_SAI_Init+0xb6>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_SAI_Init+0x80>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f3b 	.word	0x08004f3b
 8004f2c:	08004f43 	.word	0x08004f43
 8004f30:	08004f4b 	.word	0x08004f4b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f38:	e010      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f40:	e00c      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f46:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f48:	e008      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f4e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004f58:	e000      	b.n	8004f5c <HAL_SAI_Init+0xb8>
    default:
      break;
 8004f5a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a85      	ldr	r2, [pc, #532]	; (8005178 <HAL_SAI_Init+0x2d4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_SAI_Init+0xcc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a84      	ldr	r2, [pc, #528]	; (800517c <HAL_SAI_Init+0x2d8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004f70:	4a83      	ldr	r2, [pc, #524]	; (8005180 <HAL_SAI_Init+0x2dc>)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e002      	b.n	8004f7e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004f78:	4a82      	ldr	r2, [pc, #520]	; (8005184 <HAL_SAI_Init+0x2e0>)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04c      	beq.n	8005020 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a7a      	ldr	r2, [pc, #488]	; (8005178 <HAL_SAI_Init+0x2d4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_SAI_Init+0xfa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a78      	ldr	r2, [pc, #480]	; (800517c <HAL_SAI_Init+0x2d8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d104      	bne.n	8004fa8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fa2:	f7ff fbc9 	bl	8004738 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fa6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a76      	ldr	r2, [pc, #472]	; (8005188 <HAL_SAI_Init+0x2e4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_SAI_Init+0x118>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a75      	ldr	r2, [pc, #468]	; (800518c <HAL_SAI_Init+0x2e8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d104      	bne.n	8004fc6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004fbc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004fc0:	f7ff fbba 	bl	8004738 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fc4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	025b      	lsls	r3, r3, #9
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4a6b      	ldr	r2, [pc, #428]	; (8005190 <HAL_SAI_Init+0x2ec>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	08da      	lsrs	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004fec:	68f9      	ldr	r1, [r7, #12]
 8004fee:	4b68      	ldr	r3, [pc, #416]	; (8005190 <HAL_SAI_Init+0x2ec>)
 8004ff0:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff4:	08da      	lsrs	r2, r3, #3
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	1aca      	subs	r2, r1, r3
 8005000:	2a08      	cmp	r2, #8
 8005002:	d904      	bls.n	800500e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	2b04      	cmp	r3, #4
 8005014:	d104      	bne.n	8005020 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	085a      	lsrs	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_SAI_Init+0x18c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d109      	bne.n	8005044 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_SAI_Init+0x198>
 8005038:	2300      	movs	r3, #0
 800503a:	e001      	b.n	8005040 <HAL_SAI_Init+0x19c>
 800503c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e008      	b.n	8005056 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d102      	bne.n	8005052 <HAL_SAI_Init+0x1ae>
 800504c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005050:	e000      	b.n	8005054 <HAL_SAI_Init+0x1b0>
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <HAL_SAI_Init+0x2f0>)
 8005062:	400b      	ands	r3, r1
 8005064:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800507a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	431a      	orrs	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800508e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800509a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	051b      	lsls	r3, r3, #20
 80050a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_SAI_Init+0x2f4>)
 80050b8:	400b      	ands	r3, r1
 80050ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b2d      	ldr	r3, [pc, #180]	; (800519c <HAL_SAI_Init+0x2f8>)
 80050e6:	400b      	ands	r3, r1
 80050e8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80050fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005100:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005106:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	3b01      	subs	r3, #1
 800510e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005110:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68d9      	ldr	r1, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005128:	400b      	ands	r3, r1
 800512a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68d9      	ldr	r1, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005148:	3b01      	subs	r3, #1
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40015804 	.word	0x40015804
 800517c:	40015824 	.word	0x40015824
 8005180:	40015800 	.word	0x40015800
 8005184:	40015c00 	.word	0x40015c00
 8005188:	40015c04 	.word	0x40015c04
 800518c:	40015c24 	.word	0x40015c24
 8005190:	cccccccd 	.word	0xcccccccd
 8005194:	ff05c010 	.word	0xff05c010
 8005198:	ffff1ff0 	.word	0xffff1ff0
 800519c:	fff88000 	.word	0xfff88000

080051a0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <SAI_Disable+0x68>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <SAI_Disable+0x6c>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0b1b      	lsrs	r3, r3, #12
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1e5a      	subs	r2, r3, #1
 80051d0:	60fa      	str	r2, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	72fb      	strb	r3, [r7, #11]
      break;
 80051ea:	e006      	b.n	80051fa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e8      	bne.n	80051cc <SAI_Disable+0x2c>

  return status;
 80051fa:	7afb      	ldrb	r3, [r7, #11]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000000 	.word	0x20000000
 800520c:	95cbec1b 	.word	0x95cbec1b

08005210 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e022      	b.n	8005268 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fc f8ad 	bl	8001394 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2203      	movs	r2, #3
 800523e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f814 	bl	8005270 <HAL_SD_InitCard>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e00a      	b.n	8005268 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b08e      	sub	sp, #56	; 0x38
 8005274:	af04      	add	r7, sp, #16
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005278:	2300      	movs	r3, #0
 800527a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800528c:	2376      	movs	r3, #118	; 0x76
 800528e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681d      	ldr	r5, [r3, #0]
 8005294:	466c      	mov	r4, sp
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800529e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a8:	4628      	mov	r0, r5
 80052aa:	f001 ff45 	bl	8007138 <SDMMC_Init>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80052b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e059      	b.n	8005374 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ce:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 ff79 	bl	80071cc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80052ea:	2002      	movs	r0, #2
 80052ec:	f7fc fb3c 	bl	8001968 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fff3 	bl	80062dc <SD_PowerON>
 80052f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e02e      	b.n	8005374 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 ff12 	bl	8006140 <SD_InitCard>
 800531c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e01b      	b.n	8005374 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005344:	4618      	mov	r0, r3
 8005346:	f001 ffd3 	bl	80072f0 <SDMMC_CmdBlockLength>
 800534a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00f      	beq.n	8005372 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_SD_InitCard+0x10c>)
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3728      	adds	r7, #40	; 0x28
 8005378:	46bd      	mov	sp, r7
 800537a:	bdb0      	pop	{r4, r5, r7, pc}
 800537c:	004005ff 	.word	0x004005ff

08005380 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0c3      	b.n	8005530 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 80bc 	bne.w	800552e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d907      	bls.n	80053da <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0aa      	b.n	8005530 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	4a4e      	ldr	r2, [pc, #312]	; (8005538 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	4a4d      	ldr	r2, [pc, #308]	; (800553c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005408:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	2200      	movs	r2, #0
 8005410:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3380      	adds	r3, #128	; 0x80
 8005440:	4619      	mov	r1, r3
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	025b      	lsls	r3, r3, #9
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	f7fd fb7b 	bl	8002b44 <HAL_DMA_Start_IT>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a35      	ldr	r2, [pc, #212]	; (8005540 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800546a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e055      	b.n	8005530 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	2b01      	cmp	r3, #1
 800549a:	d002      	beq.n	80054a2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	025b      	lsls	r3, r3, #9
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	025b      	lsls	r3, r3, #9
 80054ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80054ae:	2390      	movs	r3, #144	; 0x90
 80054b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80054b2:	2302      	movs	r3, #2
 80054b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f107 0210 	add.w	r2, r7, #16
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 fee5 	bl	8007298 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d90a      	bls.n	80054ea <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2282      	movs	r2, #130	; 0x82
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 ff49 	bl	8007378 <SDMMC_CmdReadMultiBlock>
 80054e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054e8:	e009      	b.n	80054fe <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2281      	movs	r2, #129	; 0x81
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 ff1c 	bl	8007334 <SDMMC_CmdReadSingleBlock>
 80054fc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	431a      	orrs	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e002      	b.n	8005530 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	e000      	b.n	8005530 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3730      	adds	r7, #48	; 0x30
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	08005f4f 	.word	0x08005f4f
 800553c:	08005fc1 	.word	0x08005fc1
 8005540:	004005ff 	.word	0x004005ff

08005544 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	; 0x30
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0c6      	b.n	80056fa <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 80bf 	bne.w	80056f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	441a      	add	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	429a      	cmp	r2, r3
 800558c:	d907      	bls.n	800559e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0ad      	b.n	80056fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2203      	movs	r2, #3
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 021a 	orr.w	r2, r2, #26
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	4a50      	ldr	r2, [pc, #320]	; (8005704 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80055c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	4a4f      	ldr	r2, [pc, #316]	; (8005708 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80055cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2200      	movs	r2, #0
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	025b      	lsls	r3, r3, #9
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d90a      	bls.n	8005600 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	22a0      	movs	r2, #160	; 0xa0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 ff02 	bl	8007400 <SDMMC_CmdWriteMultiBlock>
 80055fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80055fe:	e009      	b.n	8005614 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2290      	movs	r2, #144	; 0x90
 8005604:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fed5 	bl	80073bc <SDMMC_CmdWriteSingleBlock>
 8005612:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3b      	ldr	r2, [pc, #236]	; (800570c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e05c      	b.n	80056fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0208 	orr.w	r2, r2, #8
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	2240      	movs	r2, #64	; 0x40
 8005656:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3380      	adds	r3, #128	; 0x80
 8005680:	461a      	mov	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	025b      	lsls	r3, r3, #9
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	f7fd fa5c 	bl	8002b44 <HAL_DMA_Start_IT>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01a      	beq.n	80056c8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 021a 	bic.w	r2, r2, #26
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a19      	ldr	r2, [pc, #100]	; (800570c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e018      	b.n	80056fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	025b      	lsls	r3, r3, #9
 80056d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80056d4:	2390      	movs	r3, #144	; 0x90
 80056d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80056dc:	2300      	movs	r3, #0
 80056de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f107 0210 	add.w	r2, r7, #16
 80056ec:	4611      	mov	r1, r2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 fdd2 	bl	8007298 <SDMMC_ConfigData>

      return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3730      	adds	r7, #48	; 0x30
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	08005f25 	.word	0x08005f25
 8005708:	08005fc1 	.word	0x08005fc1
 800570c:	004005ff 	.word	0x004005ff

08005710 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_SD_IRQHandler+0x2e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 ffef 	bl	800671a <SD_Read_IT>
 800573c:	e15a      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 808d 	beq.w	8005868 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005756:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b9a      	ldr	r3, [pc, #616]	; (80059cc <HAL_SD_IRQHandler+0x2bc>)
 8005764:	400b      	ands	r3, r1
 8005766:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d039      	beq.n	80057f6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_SD_IRQHandler+0x86>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fe52 	bl	8007444 <SDMMC_CmdStopTransfer>
 80057a0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f921 	bl	80059fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f240 523a 	movw	r2, #1338	; 0x53a
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_SD_IRQHandler+0xd6>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f002 fac2 	bl	8007d70 <HAL_SD_RxCpltCallback>
 80057ec:	e102      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f002 fab4 	bl	8007d5c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80057f4:	e0fe      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80f9 	beq.w	80059f4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d011      	beq.n	8005830 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fe17 	bl	8007444 <SDMMC_CmdStopTransfer>
 8005816:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8e6 	bl	80059fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 80dc 	bne.w	80059f4 <HAL_SD_IRQHandler+0x2e4>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 80d6 	bne.w	80059f4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0208 	bic.w	r2, r2, #8
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f002 fa7b 	bl	8007d5c <HAL_SD_TxCpltCallback>
}
 8005866:	e0c5      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_SD_IRQHandler+0x178>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 ff9b 	bl	80067bc <SD_Write_IT>
 8005886:	e0b5      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80ae 	beq.w	80059f4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f043 0208 	orr.w	r2, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	f043 0210 	orr.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f240 523a 	movw	r2, #1338	; 0x53a
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fd90 	bl	8007444 <SDMMC_CmdStopTransfer>
 8005924:	4602      	mov	r2, r0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f857 	bl	80059fc <HAL_SD_ErrorCallback>
}
 800594e:	e051      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b00      	cmp	r3, #0
 8005958:	d04c      	beq.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <HAL_SD_IRQHandler+0x25e>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d011      	beq.n	8005992 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_SD_IRQHandler+0x2c0>)
 8005974:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	4618      	mov	r0, r3
 800597c:	f7fd f942 	bl	8002c04 <HAL_DMA_Abort_IT>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d036      	beq.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fb6a 	bl	8006064 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005990:	e030      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_SD_IRQHandler+0x296>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <HAL_SD_IRQHandler+0x2c4>)
 80059ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fd f926 	bl	8002c04 <HAL_DMA_Abort_IT>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01a      	beq.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fb85 	bl	80060d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059c8:	e014      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
 80059ca:	bf00      	nop
 80059cc:	ffff3ec5 	.word	0xffff3ec5
 80059d0:	08006065 	.word	0x08006065
 80059d4:	080060d3 	.word	0x080060d3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f002 f9ab 	bl	8007d48 <HAL_SD_AbortCallback>
}
 80059f2:	e7ff      	b.n	80059f4 <HAL_SD_IRQHandler+0x2e4>
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1e:	0f9b      	lsrs	r3, r3, #30
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2a:	0e9b      	lsrs	r3, r3, #26
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3c:	0e1b      	lsrs	r3, r3, #24
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a70:	0d1b      	lsrs	r3, r3, #20
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8e:	0bdb      	lsrs	r3, r3, #15
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa0:	0b9b      	lsrs	r3, r3, #14
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab2:	0b5b      	lsrs	r3, r3, #13
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac4:	0b1b      	lsrs	r3, r3, #12
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d163      	bne.n	8005ba8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae4:	009a      	lsls	r2, r3, #2
 8005ae6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005aea:	4013      	ands	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005af0:	0f92      	lsrs	r2, r2, #30
 8005af2:	431a      	orrs	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005afc:	0edb      	lsrs	r3, r3, #27
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b0e:	0e1b      	lsrs	r3, r3, #24
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b20:	0d5b      	lsrs	r3, r3, #21
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b32:	0c9b      	lsrs	r3, r3, #18
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b44:	0bdb      	lsrs	r3, r3, #15
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	7e1b      	ldrb	r3, [r3, #24]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	3302      	adds	r3, #2
 8005b68:	2201      	movs	r2, #1
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b72:	fb03 f202 	mul.w	r2, r3, r2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	7a1b      	ldrb	r3, [r3, #8]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2201      	movs	r2, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b94:	0a52      	lsrs	r2, r2, #9
 8005b96:	fb03 f202 	mul.w	r2, r3, r2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba4:	661a      	str	r2, [r3, #96]	; 0x60
 8005ba6:	e031      	b.n	8005c0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d11d      	bne.n	8005bec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	029a      	lsls	r2, r3, #10
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	661a      	str	r2, [r3, #96]	; 0x60
 8005bea:	e00f      	b.n	8005c0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a58      	ldr	r2, [pc, #352]	; (8005d54 <HAL_SD_GetCardCSD+0x344>)
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e09d      	b.n	8005d48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c10:	0b9b      	lsrs	r3, r3, #14
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c22:	09db      	lsrs	r3, r3, #7
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	0fdb      	lsrs	r3, r3, #31
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	0f5b      	lsrs	r3, r3, #29
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	0e9b      	lsrs	r3, r3, #26
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	0d9b      	lsrs	r3, r3, #22
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	0d5b      	lsrs	r3, r3, #21
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	0bdb      	lsrs	r3, r3, #15
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	0b9b      	lsrs	r3, r3, #14
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	0b5b      	lsrs	r3, r3, #13
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	0b1b      	lsrs	r3, r3, #12
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	0a9b      	lsrs	r3, r3, #10
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	004005ff 	.word	0x004005ff

08005d58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005db0:	b5b0      	push	{r4, r5, r7, lr}
 8005db2:	b08e      	sub	sp, #56	; 0x38
 8005db4:	af04      	add	r7, sp, #16
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d02e      	beq.n	8005e2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd6:	d106      	bne.n	8005de6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
 8005de4:	e029      	b.n	8005e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dec:	d10a      	bne.n	8005e04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fb2a 	bl	8006448 <SD_WideBus_Enable>
 8005df4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
 8005e02:	e01a      	b.n	8005e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fb67 	bl	80064de <SD_WideBus_Disable>
 8005e10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e1e:	e00c      	b.n	8005e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e2c:	e005      	b.n	8005e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e58:	e01f      	b.n	8005e9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681d      	ldr	r5, [r3, #0]
 8005e80:	466c      	mov	r4, sp
 8005e82:	f107 0314 	add.w	r3, r7, #20
 8005e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e8e:	f107 0308 	add.w	r3, r7, #8
 8005e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e94:	4628      	mov	r0, r5
 8005e96:	f001 f94f 	bl	8007138 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 fa24 	bl	80072f0 <SDMMC_CmdBlockLength>
 8005ea8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	004005ff 	.word	0x004005ff

08005ee4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa7e 	bl	80063f8 <SD_SendStatus>
 8005efc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	0a5b      	lsrs	r3, r3, #9
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f1a:	693b      	ldr	r3, [r7, #16]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b82      	cmp	r3, #130	; 0x82
 8005f62:	d111      	bne.n	8005f88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 fa6b 	bl	8007444 <SDMMC_CmdStopTransfer>
 8005f6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d008      	beq.n	8005f88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fd3a 	bl	80059fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0208 	bic.w	r2, r2, #8
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f001 fedd 	bl	8007d70 <HAL_SD_RxCpltCallback>
#endif
}
 8005fb6:	bf00      	nop
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc ffc4 	bl	8002f5c <HAL_DMA_GetError>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d03e      	beq.n	8006058 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d002      	beq.n	8005ff6 <SD_DMAError+0x36>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d12d      	bne.n	8006052 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a19      	ldr	r2, [pc, #100]	; (8006060 <SD_DMAError+0xa0>)
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800600c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	f7ff ff62 	bl	8005ee4 <HAL_SD_GetCardState>
 8006020:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b06      	cmp	r3, #6
 8006026:	d002      	beq.n	800602e <SD_DMAError+0x6e>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d10a      	bne.n	8006044 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f001 fa06 	bl	8007444 <SDMMC_CmdStopTransfer>
 8006038:	4602      	mov	r2, r0
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	431a      	orrs	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2200      	movs	r2, #0
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006052:	6978      	ldr	r0, [r7, #20]
 8006054:	f7ff fcd2 	bl	80059fc <HAL_SD_ErrorCallback>
#endif
  }
}
 8006058:	bf00      	nop
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	004005ff 	.word	0x004005ff

08006064 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f240 523a 	movw	r2, #1338	; 0x53a
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff ff31 	bl	8005ee4 <HAL_SD_GetCardState>
 8006082:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b06      	cmp	r3, #6
 8006096:	d002      	beq.n	800609e <SD_DMATxAbort+0x3a>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b05      	cmp	r3, #5
 800609c:	d10a      	bne.n	80060b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f9ce 	bl	8007444 <SDMMC_CmdStopTransfer>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	431a      	orrs	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 fe43 	bl	8007d48 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060c2:	e002      	b.n	80060ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff fc99 	bl	80059fc <HAL_SD_ErrorCallback>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fefa 	bl	8005ee4 <HAL_SD_GetCardState>
 80060f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b06      	cmp	r3, #6
 8006104:	d002      	beq.n	800610c <SD_DMARxAbort+0x3a>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b05      	cmp	r3, #5
 800610a:	d10a      	bne.n	8006122 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f001 f997 	bl	8007444 <SDMMC_CmdStopTransfer>
 8006116:	4602      	mov	r2, r0
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 fe0c 	bl	8007d48 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006130:	e002      	b.n	8006138 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fc62 	bl	80059fc <HAL_SD_ErrorCallback>
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006140:	b5b0      	push	{r4, r5, r7, lr}
 8006142:	b094      	sub	sp, #80	; 0x50
 8006144:	af04      	add	r7, sp, #16
 8006146:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006148:	2301      	movs	r3, #1
 800614a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f849 	bl	80071e8 <SDMMC_GetPowerState>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800615c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006160:	e0b8      	b.n	80062d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	2b03      	cmp	r3, #3
 8006168:	d02f      	beq.n	80061ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fa73 	bl	800765a <SDMMC_CmdSendCID>
 8006174:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <SD_InitCard+0x40>
    {
      return errorstate;
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	e0a9      	b.n	80062d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f873 	bl	8007272 <SDMMC_GetResponse>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2104      	movs	r1, #4
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f86a 	bl	8007272 <SDMMC_GetResponse>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2108      	movs	r1, #8
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 f861 	bl	8007272 <SDMMC_GetResponse>
 80061b0:	4602      	mov	r2, r0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	210c      	movs	r1, #12
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f858 	bl	8007272 <SDMMC_GetResponse>
 80061c2:	4602      	mov	r2, r0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d00d      	beq.n	80061ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f107 020e 	add.w	r2, r7, #14
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fa79 	bl	80076d4 <SDMMC_CmdSetRelAdd>
 80061e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <SD_InitCard+0xae>
    {
      return errorstate;
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	e072      	b.n	80062d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d036      	beq.n	8006264 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f001 fa43 	bl	8007696 <SDMMC_CmdSendCSD>
 8006210:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621a:	e05b      	b.n	80062d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f825 	bl	8007272 <SDMMC_GetResponse>
 8006228:	4602      	mov	r2, r0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2104      	movs	r1, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f001 f81c 	bl	8007272 <SDMMC_GetResponse>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2108      	movs	r1, #8
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f813 	bl	8007272 <SDMMC_GetResponse>
 800624c:	4602      	mov	r2, r0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	210c      	movs	r1, #12
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f80a 	bl	8007272 <SDMMC_GetResponse>
 800625e:	4602      	mov	r2, r0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2104      	movs	r1, #4
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f801 	bl	8007272 <SDMMC_GetResponse>
 8006270:	4603      	mov	r3, r0
 8006272:	0d1a      	lsrs	r2, r3, #20
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fbc6 	bl	8005a10 <HAL_SD_GetCardCSD>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800628a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800628e:	e021      	b.n	80062d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	2200      	movs	r2, #0
 800629c:	461c      	mov	r4, r3
 800629e:	4615      	mov	r5, r2
 80062a0:	4622      	mov	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	4608      	mov	r0, r1
 80062a6:	f001 f8ef 	bl	8007488 <SDMMC_CmdSelDesel>
 80062aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b4:	e00e      	b.n	80062d4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	466c      	mov	r4, sp
 80062be:	f103 0210 	add.w	r2, r3, #16
 80062c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80062c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062c8:	3304      	adds	r3, #4
 80062ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 ff33 	bl	8007138 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3740      	adds	r7, #64	; 0x40
 80062d8:	46bd      	mov	sp, r7
 80062da:	bdb0      	pop	{r4, r5, r7, pc}

080062dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f8ea 	bl	80074ce <SDMMC_CmdGoIdleState>
 80062fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	e072      	b.n	80063ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f001 f8fd 	bl	800750a <SDMMC_CmdOperCond>
 8006310:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00d      	beq.n	8006334 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f001 f8d3 	bl	80074ce <SDMMC_CmdGoIdleState>
 8006328:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	e05b      	b.n	80063ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633e:	2b01      	cmp	r3, #1
 8006340:	d137      	bne.n	80063b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f001 f8fd 	bl	8007548 <SDMMC_CmdAppCommand>
 800634e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02d      	beq.n	80063b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800635a:	e047      	b.n	80063ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f001 f8f0 	bl	8007548 <SDMMC_CmdAppCommand>
 8006368:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <SD_PowerON+0x98>
    {
      return errorstate;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e03b      	b.n	80063ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	491e      	ldr	r1, [pc, #120]	; (80063f4 <SD_PowerON+0x118>)
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f906 	bl	800758c <SDMMC_CmdAppOperCommand>
 8006380:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800638c:	e02e      	b.n	80063ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff6c 	bl	8007272 <SDMMC_GetResponse>
 800639a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	0fdb      	lsrs	r3, r3, #31
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <SD_PowerON+0xcc>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <SD_PowerON+0xce>
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]

    count++;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d802      	bhi.n	80063c2 <SD_PowerON+0xe6>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0cc      	beq.n	800635c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d902      	bls.n	80063d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80063cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063d0:	e00c      	b.n	80063ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44
 80063e2:	e002      	b.n	80063ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	c1100000 	.word	0xc1100000

080063f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006408:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800640c:	e018      	b.n	8006440 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f001 f97b 	bl	8007716 <SDMMC_CmdSendStatus>
 8006420:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	e009      	b.n	8006440 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f000 ff1d 	bl	8007272 <SDMMC_GetResponse>
 8006438:	4602      	mov	r2, r0
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f000 ff07 	bl	8007272 <SDMMC_GetResponse>
 8006464:	4603      	mov	r3, r0
 8006466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800646e:	d102      	bne.n	8006476 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006474:	e02f      	b.n	80064d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f879 	bl	8006574 <SD_FindSCR>
 8006482:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	e023      	b.n	80064d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01c      	beq.n	80064d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f001 f84f 	bl	8007548 <SDMMC_CmdAppCommand>
 80064aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	e00f      	b.n	80064d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2102      	movs	r1, #2
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 f889 	bl	80075d4 <SDMMC_CmdBusWidth>
 80064c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	e003      	b.n	80064d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e001      	b.n	80064d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b086      	sub	sp, #24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 febc 	bl	8007272 <SDMMC_GetResponse>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006504:	d102      	bne.n	800650c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800650a:	e02f      	b.n	800656c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f82e 	bl	8006574 <SD_FindSCR>
 8006518:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	e023      	b.n	800656c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01c      	beq.n	8006568 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	041b      	lsls	r3, r3, #16
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f001 f804 	bl	8007548 <SDMMC_CmdAppCommand>
 8006540:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	e00f      	b.n	800656c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f83e 	bl	80075d4 <SDMMC_CmdBusWidth>
 8006558:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	e003      	b.n	800656c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006564:	2300      	movs	r3, #0
 8006566:	e001      	b.n	800656c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006568:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006574:	b590      	push	{r4, r7, lr}
 8006576:	b08f      	sub	sp, #60	; 0x3c
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800657e:	f7fb f9e7 	bl	8001950 <HAL_GetTick>
 8006582:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006588:	2300      	movs	r3, #0
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2108      	movs	r1, #8
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fea8 	bl	80072f0 <SDMMC_CmdBlockLength>
 80065a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	e0b2      	b.n	8006712 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 ffc5 	bl	8007548 <SDMMC_CmdAppCommand>
 80065be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	e0a3      	b.n	8006712 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80065d0:	2308      	movs	r3, #8
 80065d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065d8:	2302      	movs	r3, #2
 80065da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f107 0210 	add.w	r2, r7, #16
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fe52 	bl	8007298 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f80d 	bl	8007618 <SDMMC_CmdSendSCR>
 80065fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	d02a      	beq.n	800665c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	e083      	b.n	8006712 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	18d4      	adds	r4, r2, r3
 8006626:	4608      	mov	r0, r1
 8006628:	f000 fdb2 	bl	8007190 <SDMMC_ReadFIFO>
 800662c:	4603      	mov	r3, r0
 800662e:	6023      	str	r3, [r4, #0]
      index++;
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	3301      	adds	r3, #1
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	e006      	b.n	8006646 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d012      	beq.n	800666c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006646:	f7fb f983 	bl	8001950 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006654:	d102      	bne.n	800665c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006656:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800665a:	e05a      	b.n	8006712 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0cf      	beq.n	800660a <SD_FindSCR+0x96>
 800666a:	e000      	b.n	800666e <SD_FindSCR+0xfa>
      break;
 800666c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2208      	movs	r2, #8
 8006682:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006684:	2308      	movs	r3, #8
 8006686:	e044      	b.n	8006712 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2202      	movs	r2, #2
 800669c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800669e:	2302      	movs	r3, #2
 80066a0:	e037      	b.n	8006712 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2220      	movs	r2, #32
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066b8:	2320      	movs	r3, #32
 80066ba:	e02a      	b.n	8006712 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	061a      	lsls	r2, r3, #24
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	0e1b      	lsrs	r3, r3, #24
 80066e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	601a      	str	r2, [r3, #0]
    scr++;
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	3304      	adds	r3, #4
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	061a      	lsls	r2, r3, #24
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006704:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	0e1b      	lsrs	r3, r3, #24
 800670a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	373c      	adds	r7, #60	; 0x3c
 8006716:	46bd      	mov	sp, r7
 8006718:	bd90      	pop	{r4, r7, pc}

0800671a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b086      	sub	sp, #24
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d03f      	beq.n	80067b4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e033      	b.n	80067a2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fd26 	bl	8007190 <SDMMC_ReadFIFO>
 8006744:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	3b01      	subs	r3, #1
 8006758:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	b2da      	uxtb	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3b01      	subs	r3, #1
 800676e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	b2da      	uxtb	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	701a      	strb	r2, [r3, #0]
      tmp++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3b01      	subs	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	0e1b      	lsrs	r3, r3, #24
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3b01      	subs	r3, #1
 800679a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3301      	adds	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b07      	cmp	r3, #7
 80067a6:	d9c8      	bls.n	800673a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80067b4:	bf00      	nop
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d043      	beq.n	800685e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	e037      	b.n	800684c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3b01      	subs	r3, #1
 8006804:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	041a      	lsls	r2, r3, #16
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
 8006810:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3301      	adds	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	3b01      	subs	r3, #1
 800681c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	061a      	lsls	r2, r3, #24
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4313      	orrs	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
      tmp++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3b01      	subs	r3, #1
 8006834:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f107 0208 	add.w	r2, r7, #8
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fcb2 	bl	80071aa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	3301      	adds	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b07      	cmp	r3, #7
 8006850:	d9c4      	bls.n	80067dc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e040      	b.n	80068fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d106      	bne.n	800688e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fa ff65 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2224      	movs	r2, #36	; 0x24
 8006892:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f82d 	bl	8006904 <UART_SetConfig>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e022      	b.n	80068fa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa85 	bl	8006dcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb0c 	bl	8006f10 <UART_CheckIdleState>
 80068f8:	4603      	mov	r3, r0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4ba6      	ldr	r3, [pc, #664]	; (8006bc8 <UART_SetConfig+0x2c4>)
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	6979      	ldr	r1, [r7, #20]
 8006938:	430b      	orrs	r3, r1
 800693a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	430a      	orrs	r2, r1
 8006974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a94      	ldr	r2, [pc, #592]	; (8006bcc <UART_SetConfig+0x2c8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d120      	bne.n	80069c2 <UART_SetConfig+0xbe>
 8006980:	4b93      	ldr	r3, [pc, #588]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b03      	cmp	r3, #3
 800698c:	d816      	bhi.n	80069bc <UART_SetConfig+0xb8>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x90>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069ab 	.word	0x080069ab
 80069a0:	080069b7 	.word	0x080069b7
 80069a4:	2301      	movs	r3, #1
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e150      	b.n	8006c4c <UART_SetConfig+0x348>
 80069aa:	2302      	movs	r3, #2
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e14d      	b.n	8006c4c <UART_SetConfig+0x348>
 80069b0:	2304      	movs	r3, #4
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e14a      	b.n	8006c4c <UART_SetConfig+0x348>
 80069b6:	2308      	movs	r3, #8
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e147      	b.n	8006c4c <UART_SetConfig+0x348>
 80069bc:	2310      	movs	r3, #16
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e144      	b.n	8006c4c <UART_SetConfig+0x348>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a83      	ldr	r2, [pc, #524]	; (8006bd4 <UART_SetConfig+0x2d0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d132      	bne.n	8006a32 <UART_SetConfig+0x12e>
 80069cc:	4b80      	ldr	r3, [pc, #512]	; (8006bd0 <UART_SetConfig+0x2cc>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	f003 030c 	and.w	r3, r3, #12
 80069d6:	2b0c      	cmp	r3, #12
 80069d8:	d828      	bhi.n	8006a2c <UART_SetConfig+0x128>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <UART_SetConfig+0xdc>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a15 	.word	0x08006a15
 80069e4:	08006a2d 	.word	0x08006a2d
 80069e8:	08006a2d 	.word	0x08006a2d
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a21 	.word	0x08006a21
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a1b 	.word	0x08006a1b
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006a27 	.word	0x08006a27
 8006a14:	2300      	movs	r3, #0
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e118      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e115      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a20:	2304      	movs	r3, #4
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e112      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a26:	2308      	movs	r3, #8
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e10f      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e10c      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a68      	ldr	r2, [pc, #416]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d120      	bne.n	8006a7e <UART_SetConfig+0x17a>
 8006a3c:	4b64      	ldr	r3, [pc, #400]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a46:	2b30      	cmp	r3, #48	; 0x30
 8006a48:	d013      	beq.n	8006a72 <UART_SetConfig+0x16e>
 8006a4a:	2b30      	cmp	r3, #48	; 0x30
 8006a4c:	d814      	bhi.n	8006a78 <UART_SetConfig+0x174>
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d009      	beq.n	8006a66 <UART_SetConfig+0x162>
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d810      	bhi.n	8006a78 <UART_SetConfig+0x174>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <UART_SetConfig+0x15c>
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d006      	beq.n	8006a6c <UART_SetConfig+0x168>
 8006a5e:	e00b      	b.n	8006a78 <UART_SetConfig+0x174>
 8006a60:	2300      	movs	r3, #0
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e0f2      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a66:	2302      	movs	r3, #2
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e0ef      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e0ec      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a72:	2308      	movs	r3, #8
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e0e9      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e0e6      	b.n	8006c4c <UART_SetConfig+0x348>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a56      	ldr	r2, [pc, #344]	; (8006bdc <UART_SetConfig+0x2d8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d120      	bne.n	8006aca <UART_SetConfig+0x1c6>
 8006a88:	4b51      	ldr	r3, [pc, #324]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a92:	2bc0      	cmp	r3, #192	; 0xc0
 8006a94:	d013      	beq.n	8006abe <UART_SetConfig+0x1ba>
 8006a96:	2bc0      	cmp	r3, #192	; 0xc0
 8006a98:	d814      	bhi.n	8006ac4 <UART_SetConfig+0x1c0>
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d009      	beq.n	8006ab2 <UART_SetConfig+0x1ae>
 8006a9e:	2b80      	cmp	r3, #128	; 0x80
 8006aa0:	d810      	bhi.n	8006ac4 <UART_SetConfig+0x1c0>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <UART_SetConfig+0x1a8>
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d006      	beq.n	8006ab8 <UART_SetConfig+0x1b4>
 8006aaa:	e00b      	b.n	8006ac4 <UART_SetConfig+0x1c0>
 8006aac:	2300      	movs	r3, #0
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e0cc      	b.n	8006c4c <UART_SetConfig+0x348>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e0c9      	b.n	8006c4c <UART_SetConfig+0x348>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e0c6      	b.n	8006c4c <UART_SetConfig+0x348>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e0c3      	b.n	8006c4c <UART_SetConfig+0x348>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e0c0      	b.n	8006c4c <UART_SetConfig+0x348>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a44      	ldr	r2, [pc, #272]	; (8006be0 <UART_SetConfig+0x2dc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d125      	bne.n	8006b20 <UART_SetConfig+0x21c>
 8006ad4:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ae2:	d017      	beq.n	8006b14 <UART_SetConfig+0x210>
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ae8:	d817      	bhi.n	8006b1a <UART_SetConfig+0x216>
 8006aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aee:	d00b      	beq.n	8006b08 <UART_SetConfig+0x204>
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d811      	bhi.n	8006b1a <UART_SetConfig+0x216>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <UART_SetConfig+0x1fe>
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afe:	d006      	beq.n	8006b0e <UART_SetConfig+0x20a>
 8006b00:	e00b      	b.n	8006b1a <UART_SetConfig+0x216>
 8006b02:	2300      	movs	r3, #0
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e0a1      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e09e      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b0e:	2304      	movs	r3, #4
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e09b      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b14:	2308      	movs	r3, #8
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e098      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b1a:	2310      	movs	r3, #16
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e095      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2f      	ldr	r2, [pc, #188]	; (8006be4 <UART_SetConfig+0x2e0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d125      	bne.n	8006b76 <UART_SetConfig+0x272>
 8006b2a:	4b29      	ldr	r3, [pc, #164]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b38:	d017      	beq.n	8006b6a <UART_SetConfig+0x266>
 8006b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b3e:	d817      	bhi.n	8006b70 <UART_SetConfig+0x26c>
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b44:	d00b      	beq.n	8006b5e <UART_SetConfig+0x25a>
 8006b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4a:	d811      	bhi.n	8006b70 <UART_SetConfig+0x26c>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <UART_SetConfig+0x254>
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b54:	d006      	beq.n	8006b64 <UART_SetConfig+0x260>
 8006b56:	e00b      	b.n	8006b70 <UART_SetConfig+0x26c>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e076      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e073      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b64:	2304      	movs	r3, #4
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e070      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b6a:	2308      	movs	r3, #8
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e06d      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b70:	2310      	movs	r3, #16
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e06a      	b.n	8006c4c <UART_SetConfig+0x348>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <UART_SetConfig+0x2e4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d138      	bne.n	8006bf2 <UART_SetConfig+0x2ee>
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b8e:	d017      	beq.n	8006bc0 <UART_SetConfig+0x2bc>
 8006b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b94:	d82a      	bhi.n	8006bec <UART_SetConfig+0x2e8>
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9a:	d00b      	beq.n	8006bb4 <UART_SetConfig+0x2b0>
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba0:	d824      	bhi.n	8006bec <UART_SetConfig+0x2e8>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <UART_SetConfig+0x2aa>
 8006ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006baa:	d006      	beq.n	8006bba <UART_SetConfig+0x2b6>
 8006bac:	e01e      	b.n	8006bec <UART_SetConfig+0x2e8>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e04b      	b.n	8006c4c <UART_SetConfig+0x348>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e048      	b.n	8006c4c <UART_SetConfig+0x348>
 8006bba:	2304      	movs	r3, #4
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e045      	b.n	8006c4c <UART_SetConfig+0x348>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e042      	b.n	8006c4c <UART_SetConfig+0x348>
 8006bc6:	bf00      	nop
 8006bc8:	efff69f3 	.word	0xefff69f3
 8006bcc:	40011000 	.word	0x40011000
 8006bd0:	40023800 	.word	0x40023800
 8006bd4:	40004400 	.word	0x40004400
 8006bd8:	40004800 	.word	0x40004800
 8006bdc:	40004c00 	.word	0x40004c00
 8006be0:	40005000 	.word	0x40005000
 8006be4:	40011400 	.word	0x40011400
 8006be8:	40007800 	.word	0x40007800
 8006bec:	2310      	movs	r3, #16
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e02c      	b.n	8006c4c <UART_SetConfig+0x348>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a72      	ldr	r2, [pc, #456]	; (8006dc0 <UART_SetConfig+0x4bc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d125      	bne.n	8006c48 <UART_SetConfig+0x344>
 8006bfc:	4b71      	ldr	r3, [pc, #452]	; (8006dc4 <UART_SetConfig+0x4c0>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c0a:	d017      	beq.n	8006c3c <UART_SetConfig+0x338>
 8006c0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c10:	d817      	bhi.n	8006c42 <UART_SetConfig+0x33e>
 8006c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c16:	d00b      	beq.n	8006c30 <UART_SetConfig+0x32c>
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1c:	d811      	bhi.n	8006c42 <UART_SetConfig+0x33e>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <UART_SetConfig+0x326>
 8006c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c26:	d006      	beq.n	8006c36 <UART_SetConfig+0x332>
 8006c28:	e00b      	b.n	8006c42 <UART_SetConfig+0x33e>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e00d      	b.n	8006c4c <UART_SetConfig+0x348>
 8006c30:	2302      	movs	r3, #2
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e00a      	b.n	8006c4c <UART_SetConfig+0x348>
 8006c36:	2304      	movs	r3, #4
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e007      	b.n	8006c4c <UART_SetConfig+0x348>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e004      	b.n	8006c4c <UART_SetConfig+0x348>
 8006c42:	2310      	movs	r3, #16
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e001      	b.n	8006c4c <UART_SetConfig+0x348>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c54:	d15b      	bne.n	8006d0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c56:	7ffb      	ldrb	r3, [r7, #31]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d828      	bhi.n	8006cae <UART_SetConfig+0x3aa>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UART_SetConfig+0x360>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	08006caf 	.word	0x08006caf
 8006c74:	08006c9f 	.word	0x08006c9f
 8006c78:	08006caf 	.word	0x08006caf
 8006c7c:	08006caf 	.word	0x08006caf
 8006c80:	08006caf 	.word	0x08006caf
 8006c84:	08006ca7 	.word	0x08006ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c88:	f7fd f906 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8006c8c:	61b8      	str	r0, [r7, #24]
        break;
 8006c8e:	e013      	b.n	8006cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c90:	f7fd f916 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8006c94:	61b8      	str	r0, [r7, #24]
        break;
 8006c96:	e00f      	b.n	8006cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c98:	4b4b      	ldr	r3, [pc, #300]	; (8006dc8 <UART_SetConfig+0x4c4>)
 8006c9a:	61bb      	str	r3, [r7, #24]
        break;
 8006c9c:	e00c      	b.n	8006cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9e:	f7fd f829 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8006ca2:	61b8      	str	r0, [r7, #24]
        break;
 8006ca4:	e008      	b.n	8006cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006caa:	61bb      	str	r3, [r7, #24]
        break;
 8006cac:	e004      	b.n	8006cb8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8006cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d074      	beq.n	8006da8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	005a      	lsls	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b0f      	cmp	r3, #15
 8006cd8:	d916      	bls.n	8006d08 <UART_SetConfig+0x404>
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d212      	bcs.n	8006d08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f023 030f 	bic.w	r3, r3, #15
 8006cea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	89fa      	ldrh	r2, [r7, #14]
 8006d04:	60da      	str	r2, [r3, #12]
 8006d06:	e04f      	b.n	8006da8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	77bb      	strb	r3, [r7, #30]
 8006d0c:	e04c      	b.n	8006da8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d0e:	7ffb      	ldrb	r3, [r7, #31]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d828      	bhi.n	8006d66 <UART_SetConfig+0x462>
 8006d14:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <UART_SetConfig+0x418>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	08006d67 	.word	0x08006d67
 8006d2c:	08006d57 	.word	0x08006d57
 8006d30:	08006d67 	.word	0x08006d67
 8006d34:	08006d67 	.word	0x08006d67
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d5f 	.word	0x08006d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d40:	f7fd f8aa 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8006d44:	61b8      	str	r0, [r7, #24]
        break;
 8006d46:	e013      	b.n	8006d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fd f8ba 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8006d4c:	61b8      	str	r0, [r7, #24]
        break;
 8006d4e:	e00f      	b.n	8006d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d50:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <UART_SetConfig+0x4c4>)
 8006d52:	61bb      	str	r3, [r7, #24]
        break;
 8006d54:	e00c      	b.n	8006d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fc ffcd 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8006d5a:	61b8      	str	r0, [r7, #24]
        break;
 8006d5c:	e008      	b.n	8006d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d62:	61bb      	str	r3, [r7, #24]
        break;
 8006d64:	e004      	b.n	8006d70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d6e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d018      	beq.n	8006da8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	085a      	lsrs	r2, r3, #1
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	441a      	add	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d909      	bls.n	8006da4 <UART_SetConfig+0x4a0>
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d96:	d205      	bcs.n	8006da4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60da      	str	r2, [r3, #12]
 8006da2:	e001      	b.n	8006da8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006db4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40007c00 	.word	0x40007c00
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	00f42400 	.word	0x00f42400

08006dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01a      	beq.n	8006ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eca:	d10a      	bne.n	8006ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	605a      	str	r2, [r3, #4]
  }
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f20:	f7fa fd16 	bl	8001950 <HAL_GetTick>
 8006f24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d10e      	bne.n	8006f52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f831 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e027      	b.n	8006fa2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d10e      	bne.n	8006f7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f81b 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e011      	b.n	8006fa2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b09c      	sub	sp, #112	; 0x70
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fba:	e0a7      	b.n	800710c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc2:	f000 80a3 	beq.w	800710c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fa fcc3 	bl	8001950 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x32>
 8006fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d13f      	bne.n	800705c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ffc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	663b      	str	r3, [r7, #96]	; 0x60
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800702e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800703c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e068      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d050      	beq.n	800710c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007078:	d148      	bne.n	800710c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007082:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
 80070a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070d6:	623a      	str	r2, [r7, #32]
 80070d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	69f9      	ldr	r1, [r7, #28]
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e010      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69da      	ldr	r2, [r3, #28]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	bf0c      	ite	eq
 800711c:	2301      	moveq	r3, #1
 800711e:	2300      	movne	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	429a      	cmp	r2, r3
 8007128:	f43f af48 	beq.w	8006fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3770      	adds	r7, #112	; 0x70
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007138:	b084      	sub	sp, #16
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	f107 001c 	add.w	r0, r7, #28
 8007146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800714e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007150:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007152:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007156:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800715a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800715e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007162:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <SDMMC_Init+0x54>)
 8007170:	4013      	ands	r3, r2
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	b004      	add	sp, #16
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	ffff8100 	.word	0xffff8100

08007190 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2203      	movs	r2, #3
 80071d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0303 	and.w	r3, r3, #3
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007222:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007228:	431a      	orrs	r2, r3
                       Command->CPSM);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800722e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <SDMMC_SendCommand+0x50>)
 800723c:	4013      	ands	r3, r2
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	fffff000 	.word	0xfffff000

08007258 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	b2db      	uxtb	r3, r3
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3314      	adds	r3, #20
 8007280:	461a      	mov	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
}  
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80072c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80072ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0

}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072fe:	2310      	movs	r3, #16
 8007300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800730a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007310:	f107 0308 	add.w	r3, r7, #8
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ff74 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800731c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007320:	2110      	movs	r1, #16
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa1a 	bl	800775c <SDMMC_GetCmdResp1>
 8007328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800732a:	69fb      	ldr	r3, [r7, #28]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007342:	2311      	movs	r3, #17
 8007344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800734e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007354:	f107 0308 	add.w	r3, r7, #8
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ff52 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007360:	f241 3288 	movw	r2, #5000	; 0x1388
 8007364:	2111      	movs	r1, #17
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9f8 	bl	800775c <SDMMC_GetCmdResp1>
 800736c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800736e:	69fb      	ldr	r3, [r7, #28]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007386:	2312      	movs	r3, #18
 8007388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ff30 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	2112      	movs	r1, #18
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9d6 	bl	800775c <SDMMC_GetCmdResp1>
 80073b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b2:	69fb      	ldr	r3, [r7, #28]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80073ca:	2318      	movs	r3, #24
 80073cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ce:	2340      	movs	r3, #64	; 0x40
 80073d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff ff0e 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80073e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ec:	2118      	movs	r1, #24
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9b4 	bl	800775c <SDMMC_GetCmdResp1>
 80073f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800740e:	2319      	movs	r3, #25
 8007410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800741a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007420:	f107 0308 	add.w	r3, r7, #8
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff feec 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	2119      	movs	r1, #25
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f992 	bl	800775c <SDMMC_GetCmdResp1>
 8007438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800743a:	69fb      	ldr	r3, [r7, #28]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007450:	230c      	movs	r3, #12
 8007452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007454:	2340      	movs	r3, #64	; 0x40
 8007456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800745c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007462:	f107 0308 	add.w	r3, r7, #8
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fecb 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800746e:	4a05      	ldr	r2, [pc, #20]	; (8007484 <SDMMC_CmdStopTransfer+0x40>)
 8007470:	210c      	movs	r1, #12
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f972 	bl	800775c <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	05f5e100 	.word	0x05f5e100

08007488 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	; 0x28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007498:	2307      	movs	r3, #7
 800749a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074aa:	f107 0310 	add.w	r3, r7, #16
 80074ae:	4619      	mov	r1, r3
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fea7 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	2107      	movs	r1, #7
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f94d 	bl	800775c <SDMMC_GetCmdResp1>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3728      	adds	r7, #40	; 0x28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80074de:	2300      	movs	r3, #0
 80074e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fe86 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb67 	bl	8007bcc <SDMMC_GetCmdError>
 80074fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007500:	69fb      	ldr	r3, [r7, #28]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b088      	sub	sp, #32
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007512:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007518:	2308      	movs	r3, #8
 800751a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fe67 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fafa 	bl	8007b30 <SDMMC_GetCmdResp7>
 800753c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007556:	2337      	movs	r3, #55	; 0x37
 8007558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800755a:	2340      	movs	r3, #64	; 0x40
 800755c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007568:	f107 0308 	add.w	r3, r7, #8
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fe48 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007574:	f241 3288 	movw	r2, #5000	; 0x1388
 8007578:	2137      	movs	r1, #55	; 0x37
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f8ee 	bl	800775c <SDMMC_GetCmdResp1>
 8007580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007582:	69fb      	ldr	r3, [r7, #28]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <SDMMC_CmdAppOperCommand+0x44>)
 800759a:	4313      	orrs	r3, r2
 800759c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800759e:	2329      	movs	r3, #41	; 0x29
 80075a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075a2:	2340      	movs	r3, #64	; 0x40
 80075a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075b0:	f107 0308 	add.w	r3, r7, #8
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff fe24 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fa03 	bl	80079c8 <SDMMC_GetCmdResp3>
 80075c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c4:	69fb      	ldr	r3, [r7, #28]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	80100000 	.word	0x80100000

080075d4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80075e2:	2306      	movs	r3, #6
 80075e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075e6:	2340      	movs	r3, #64	; 0x40
 80075e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075f4:	f107 0308 	add.w	r3, r7, #8
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff fe02 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007600:	f241 3288 	movw	r2, #5000	; 0x1388
 8007604:	2106      	movs	r1, #6
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f8a8 	bl	800775c <SDMMC_GetCmdResp1>
 800760c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800760e:	69fb      	ldr	r3, [r7, #28]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007624:	2333      	movs	r3, #51	; 0x33
 8007626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007628:	2340      	movs	r3, #64	; 0x40
 800762a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fde1 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007642:	f241 3288 	movw	r2, #5000	; 0x1388
 8007646:	2133      	movs	r1, #51	; 0x33
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f887 	bl	800775c <SDMMC_GetCmdResp1>
 800764e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007650:	69fb      	ldr	r3, [r7, #28]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007666:	2302      	movs	r3, #2
 8007668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800766a:	23c0      	movs	r3, #192	; 0xc0
 800766c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007678:	f107 0308 	add.w	r3, r7, #8
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fdc0 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f957 	bl	8007938 <SDMMC_GetCmdResp2>
 800768a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800768c:	69fb      	ldr	r3, [r7, #28]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b088      	sub	sp, #32
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80076a4:	2309      	movs	r3, #9
 80076a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80076a8:	23c0      	movs	r3, #192	; 0xc0
 80076aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fda1 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f938 	bl	8007938 <SDMMC_GetCmdResp2>
 80076c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ca:	69fb      	ldr	r3, [r7, #28]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80076e2:	2303      	movs	r3, #3
 80076e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076f4:	f107 0308 	add.w	r3, r7, #8
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fd82 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	2103      	movs	r1, #3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f99d 	bl	8007a44 <SDMMC_GetCmdResp6>
 800770a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800770c:	69fb      	ldr	r3, [r7, #28]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b088      	sub	sp, #32
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007724:	230d      	movs	r3, #13
 8007726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007728:	2340      	movs	r3, #64	; 0x40
 800772a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007734:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007736:	f107 0308 	add.w	r3, r7, #8
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fd61 	bl	8007204 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007742:	f241 3288 	movw	r2, #5000	; 0x1388
 8007746:	210d      	movs	r1, #13
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f807 	bl	800775c <SDMMC_GetCmdResp1>
 800774e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007750:	69fb      	ldr	r3, [r7, #28]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	460b      	mov	r3, r1
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800776a:	4b70      	ldr	r3, [pc, #448]	; (800792c <SDMMC_GetCmdResp1+0x1d0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a70      	ldr	r2, [pc, #448]	; (8007930 <SDMMC_GetCmdResp1+0x1d4>)
 8007770:	fba2 2303 	umull	r2, r3, r2, r3
 8007774:	0a5a      	lsrs	r2, r3, #9
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	1e5a      	subs	r2, r3, #1
 8007782:	61fa      	str	r2, [r7, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800778c:	e0c9      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007792:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0ef      	beq.n	800777e <SDMMC_GetCmdResp1+0x22>
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1ea      	bne.n	800777e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2204      	movs	r2, #4
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077ba:	2304      	movs	r3, #4
 80077bc:	e0b1      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0a6      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	22c5      	movs	r2, #197	; 0xc5
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff fd3c 	bl	8007258 <SDMMC_GetCommandResponse>
 80077e0:	4603      	mov	r3, r0
 80077e2:	461a      	mov	r2, r3
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d001      	beq.n	80077ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e099      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80077ee:	2100      	movs	r1, #0
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7ff fd3e 	bl	8007272 <SDMMC_GetResponse>
 80077f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4b4e      	ldr	r3, [pc, #312]	; (8007934 <SDMMC_GetCmdResp1+0x1d8>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007802:	2300      	movs	r3, #0
 8007804:	e08d      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	da02      	bge.n	8007812 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800780c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007810:	e087      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	e080      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	e079      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800783c:	e071      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800784c:	e069      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800785c:	e061      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800786c:	e059      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800787c:	e051      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800788c:	e049      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800789c:	e041      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80078a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ac:	e039      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80078b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078bc:	e031      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80078c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078cc:	e029      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80078d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078dc:	e021      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80078e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078ec:	e019      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80078f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078fc:	e011      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800790c:	e009      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007918:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800791c:	e001      	b.n	8007922 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800791e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000000 	.word	0x20000000
 8007930:	10624dd3 	.word	0x10624dd3
 8007934:	fdffe008 	.word	0xfdffe008

08007938 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007940:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <SDMMC_GetCmdResp2+0x88>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <SDMMC_GetCmdResp2+0x8c>)
 8007946:	fba2 2303 	umull	r2, r3, r2, r3
 800794a:	0a5b      	lsrs	r3, r3, #9
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	fb02 f303 	mul.w	r3, r2, r3
 8007954:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	1e5a      	subs	r2, r3, #1
 800795a:	60fa      	str	r2, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007964:	e026      	b.n	80079b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0ef      	beq.n	8007956 <SDMMC_GetCmdResp2+0x1e>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1ea      	bne.n	8007956 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2204      	movs	r2, #4
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007992:	2304      	movs	r3, #4
 8007994:	e00e      	b.n	80079b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e003      	b.n	80079b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	22c5      	movs	r2, #197	; 0xc5
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20000000 	.word	0x20000000
 80079c4:	10624dd3 	.word	0x10624dd3

080079c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079d0:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <SDMMC_GetCmdResp3+0x74>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <SDMMC_GetCmdResp3+0x78>)
 80079d6:	fba2 2303 	umull	r2, r3, r2, r3
 80079da:	0a5b      	lsrs	r3, r3, #9
 80079dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e0:	fb02 f303 	mul.w	r3, r2, r3
 80079e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	60fa      	str	r2, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079f4:	e01b      	b.n	8007a2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0ef      	beq.n	80079e6 <SDMMC_GetCmdResp3+0x1e>
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1ea      	bne.n	80079e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a22:	2304      	movs	r3, #4
 8007a24:	e003      	b.n	8007a2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	22c5      	movs	r2, #197	; 0xc5
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000000 	.word	0x20000000
 8007a40:	10624dd3 	.word	0x10624dd3

08007a44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a52:	4b35      	ldr	r3, [pc, #212]	; (8007b28 <SDMMC_GetCmdResp6+0xe4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a35      	ldr	r2, [pc, #212]	; (8007b2c <SDMMC_GetCmdResp6+0xe8>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	0a5b      	lsrs	r3, r3, #9
 8007a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	1e5a      	subs	r2, r3, #1
 8007a6c:	61fa      	str	r2, [r7, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a76:	e052      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0ef      	beq.n	8007a68 <SDMMC_GetCmdResp6+0x24>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1ea      	bne.n	8007a68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	e03a      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e02f      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fbca 	bl	8007258 <SDMMC_GetCommandResponse>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d001      	beq.n	8007ad2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e025      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	22c5      	movs	r2, #197	; 0xc5
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff fbc9 	bl	8007272 <SDMMC_GetResponse>
 8007ae0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e011      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b08:	e009      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b18:	e001      	b.n	8007b1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000000 	.word	0x20000000
 8007b2c:	10624dd3 	.word	0x10624dd3

08007b30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b38:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <SDMMC_GetCmdResp7+0x94>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <SDMMC_GetCmdResp7+0x98>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	0a5b      	lsrs	r3, r3, #9
 8007b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b48:	fb02 f303 	mul.w	r3, r2, r3
 8007b4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1e5a      	subs	r2, r3, #1
 8007b52:	60fa      	str	r2, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b5c:	e02c      	b.n	8007bb8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0ef      	beq.n	8007b4e <SDMMC_GetCmdResp7+0x1e>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ea      	bne.n	8007b4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2204      	movs	r2, #4
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	e014      	b.n	8007bb8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e009      	b.n	8007bb8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2240      	movs	r2, #64	; 0x40
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007bb6:	2300      	movs	r3, #0
  
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000000 	.word	0x20000000
 8007bc8:	10624dd3 	.word	0x10624dd3

08007bcc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <SDMMC_GetCmdError+0x50>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a11      	ldr	r2, [pc, #68]	; (8007c20 <SDMMC_GetCmdError+0x54>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	0a5b      	lsrs	r3, r3, #9
 8007be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be4:	fb02 f303 	mul.w	r3, r2, r3
 8007be8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1e5a      	subs	r2, r3, #1
 8007bee:	60fa      	str	r2, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bf8:	e009      	b.n	8007c0e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f1      	beq.n	8007bea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	22c5      	movs	r2, #197	; 0xc5
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20000000 	.word	0x20000000
 8007c20:	10624dd3 	.word	0x10624dd3

08007c24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c28:	4904      	ldr	r1, [pc, #16]	; (8007c3c <MX_FATFS_Init+0x18>)
 8007c2a:	4805      	ldr	r0, [pc, #20]	; (8007c40 <MX_FATFS_Init+0x1c>)
 8007c2c:	f003 f834 	bl	800ac98 <FATFS_LinkDriver>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <MX_FATFS_Init+0x20>)
 8007c36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20006588 	.word	0x20006588
 8007c40:	0800b3e0 	.word	0x0800b3e0
 8007c44:	20006584 	.word	0x20006584

08007c48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007c62:	f000 f896 	bl	8007d92 <BSP_SD_IsDetected>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d001      	beq.n	8007c70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e012      	b.n	8007c96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007c70:	480b      	ldr	r0, [pc, #44]	; (8007ca0 <BSP_SD_Init+0x48>)
 8007c72:	f7fd facd 	bl	8005210 <HAL_SD_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c84:	4806      	ldr	r0, [pc, #24]	; (8007ca0 <BSP_SD_Init+0x48>)
 8007c86:	f7fe f893 	bl	8005db0 <HAL_SD_ConfigWideBusOperation>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007c94:	79fb      	ldrb	r3, [r7, #7]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20006390 	.word	0x20006390

08007ca4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	4806      	ldr	r0, [pc, #24]	; (8007cd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007cbc:	f7fd fb60 	bl	8005380 <HAL_SD_ReadBlocks_DMA>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20006390 	.word	0x20006390

08007cd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	68f9      	ldr	r1, [r7, #12]
 8007cee:	4806      	ldr	r0, [pc, #24]	; (8007d08 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007cf0:	f7fd fc28 	bl	8005544 <HAL_SD_WriteBlocks_DMA>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20006390 	.word	0x20006390

08007d0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d10:	4805      	ldr	r0, [pc, #20]	; (8007d28 <BSP_SD_GetCardState+0x1c>)
 8007d12:	f7fe f8e7 	bl	8005ee4 <HAL_SD_GetCardState>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	bf14      	ite	ne
 8007d1c:	2301      	movne	r3, #1
 8007d1e:	2300      	moveq	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20006390 	.word	0x20006390

08007d2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4803      	ldr	r0, [pc, #12]	; (8007d44 <BSP_SD_GetCardInfo+0x18>)
 8007d38:	f7fe f80e 	bl	8005d58 <HAL_SD_GetCardInfo>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20006390 	.word	0x20006390

08007d48 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007d50:	f000 f818 	bl	8007d84 <BSP_SD_AbortCallback>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007d64:	f000 f9a8 	bl	80080b8 <BSP_SD_WriteCpltCallback>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007d78:	f000 f9aa 	bl	80080d0 <BSP_SD_ReadCpltCallback>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0

}
 8007d88:	bf00      	nop
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007d9c:	f000 f80c 	bl	8007db8 <BSP_PlatformIsDetected>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007da6:	2300      	movs	r3, #0
 8007da8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	b2db      	uxtb	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dc6:	4806      	ldr	r0, [pc, #24]	; (8007de0 <BSP_PlatformIsDetected+0x28>)
 8007dc8:	f7fb fb60 	bl	800348c <HAL_GPIO_ReadPin>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40020400 	.word	0x40020400

08007de4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007dec:	f7f9 fdb0 	bl	8001950 <HAL_GetTick>
 8007df0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007df2:	e006      	b.n	8007e02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007df4:	f7ff ff8a 	bl	8007d0c <BSP_SD_GetCardState>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e009      	b.n	8007e16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e02:	f7f9 fda5 	bl	8001950 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d8f0      	bhi.n	8007df4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <SD_CheckStatus+0x38>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e30:	f7ff ff6c 	bl	8007d0c <BSP_SD_GetCardState>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d107      	bne.n	8007e4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <SD_CheckStatus+0x38>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <SD_CheckStatus+0x38>)
 8007e48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007e4a:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <SD_CheckStatus+0x38>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b2db      	uxtb	r3, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000009 	.word	0x20000009

08007e5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007e66:	f7ff fef7 	bl	8007c58 <BSP_SD_Init>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff ffd4 	bl	8007e20 <SD_CheckStatus>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <SD_initialize+0x34>)
 8007e7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <SD_initialize+0x34>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b2db      	uxtb	r3, r3
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000009 	.word	0x20000009

08007e94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff ffbd 	bl	8007e20 <SD_CheckStatus>
 8007ea6:	4603      	mov	r3, r0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007ec4:	f247 5030 	movw	r0, #30000	; 0x7530
 8007ec8:	f7ff ff8c 	bl	8007de4 <SD_CheckStatusWithTimeout>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da01      	bge.n	8007ed6 <SD_read+0x26>
  {
    return res;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	e03b      	b.n	8007f4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	68b8      	ldr	r0, [r7, #8]
 8007edc:	f7ff fee2 	bl	8007ca4 <BSP_SD_ReadBlocks_DMA>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d132      	bne.n	8007f4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007ee6:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <SD_read+0xa8>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007eec:	f7f9 fd30 	bl	8001950 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007ef2:	bf00      	nop
 8007ef4:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <SD_read+0xa8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d108      	bne.n	8007f0e <SD_read+0x5e>
 8007efc:	f7f9 fd28 	bl	8001950 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d9f2      	bls.n	8007ef4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <SD_read+0xa8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
 8007f1a:	e017      	b.n	8007f4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <SD_read+0xa8>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007f22:	f7f9 fd15 	bl	8001950 <HAL_GetTick>
 8007f26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f28:	e007      	b.n	8007f3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f2a:	f7ff feef 	bl	8007d0c <BSP_SD_GetCardState>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <SD_read+0x8a>
          {
            res = RES_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007f38:	e008      	b.n	8007f4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f3a:	f7f9 fd09 	bl	8001950 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d9ee      	bls.n	8007f2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200069f0 	.word	0x200069f0

08007f5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007f70:	4b24      	ldr	r3, [pc, #144]	; (8008004 <SD_write+0xa8>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f76:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f7a:	f7ff ff33 	bl	8007de4 <SD_CheckStatusWithTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da01      	bge.n	8007f88 <SD_write+0x2c>
  {
    return res;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	e038      	b.n	8007ffa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	68b8      	ldr	r0, [r7, #8]
 8007f8e:	f7ff fea3 	bl	8007cd8 <BSP_SD_WriteBlocks_DMA>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d12f      	bne.n	8007ff8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007f98:	f7f9 fcda 	bl	8001950 <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f9e:	bf00      	nop
 8007fa0:	4b18      	ldr	r3, [pc, #96]	; (8008004 <SD_write+0xa8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d108      	bne.n	8007fba <SD_write+0x5e>
 8007fa8:	f7f9 fcd2 	bl	8001950 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d9f2      	bls.n	8007fa0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007fba:	4b12      	ldr	r3, [pc, #72]	; (8008004 <SD_write+0xa8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
 8007fc6:	e017      	b.n	8007ff8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007fc8:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <SD_write+0xa8>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007fce:	f7f9 fcbf 	bl	8001950 <HAL_GetTick>
 8007fd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fd4:	e007      	b.n	8007fe6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007fd6:	f7ff fe99 	bl	8007d0c <BSP_SD_GetCardState>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <SD_write+0x8a>
          {
            res = RES_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	75fb      	strb	r3, [r7, #23]
            break;
 8007fe4:	e008      	b.n	8007ff8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fe6:	f7f9 fcb3 	bl	8001950 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d9ee      	bls.n	8007fd6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200069ec 	.word	0x200069ec

08008008 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08c      	sub	sp, #48	; 0x30
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	603a      	str	r2, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	460b      	mov	r3, r1
 8008016:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800801e:	4b25      	ldr	r3, [pc, #148]	; (80080b4 <SD_ioctl+0xac>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <SD_ioctl+0x28>
 800802c:	2303      	movs	r3, #3
 800802e:	e03c      	b.n	80080aa <SD_ioctl+0xa2>

  switch (cmd)
 8008030:	79bb      	ldrb	r3, [r7, #6]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d834      	bhi.n	80080a0 <SD_ioctl+0x98>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <SD_ioctl+0x34>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	0800804d 	.word	0x0800804d
 8008040:	08008055 	.word	0x08008055
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008087 	.word	0x08008087
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008052:	e028      	b.n	80080a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008054:	f107 030c 	add.w	r3, r7, #12
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fe67 	bl	8007d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800805e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800806a:	e01c      	b.n	80080a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800806c:	f107 030c 	add.w	r3, r7, #12
 8008070:	4618      	mov	r0, r3
 8008072:	f7ff fe5b 	bl	8007d2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	b29a      	uxth	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008084:	e00f      	b.n	80080a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008086:	f107 030c 	add.w	r3, r7, #12
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fe4e 	bl	8007d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	0a5a      	lsrs	r2, r3, #9
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800809e:	e002      	b.n	80080a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80080a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3730      	adds	r7, #48	; 0x30
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000009 	.word	0x20000009

080080b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <BSP_SD_WriteCpltCallback+0x14>)
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	bf00      	nop
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	200069ec 	.word	0x200069ec

080080d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80080d4:	4b03      	ldr	r3, [pc, #12]	; (80080e4 <BSP_SD_ReadCpltCallback+0x14>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
}
 80080da:	bf00      	nop
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	200069f0 	.word	0x200069f0

080080e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	4a08      	ldr	r2, [pc, #32]	; (8008118 <disk_status+0x30>)
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	79fa      	ldrb	r2, [r7, #7]
 8008100:	4905      	ldr	r1, [pc, #20]	; (8008118 <disk_status+0x30>)
 8008102:	440a      	add	r2, r1
 8008104:	7a12      	ldrb	r2, [r2, #8]
 8008106:	4610      	mov	r0, r2
 8008108:	4798      	blx	r3
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20006a1c 	.word	0x20006a1c

0800811c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	4a0d      	ldr	r2, [pc, #52]	; (8008164 <disk_initialize+0x48>)
 800812e:	5cd3      	ldrb	r3, [r2, r3]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d111      	bne.n	8008158 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	4a0b      	ldr	r2, [pc, #44]	; (8008164 <disk_initialize+0x48>)
 8008138:	2101      	movs	r1, #1
 800813a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	4a09      	ldr	r2, [pc, #36]	; (8008164 <disk_initialize+0x48>)
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	79fa      	ldrb	r2, [r7, #7]
 800814a:	4906      	ldr	r1, [pc, #24]	; (8008164 <disk_initialize+0x48>)
 800814c:	440a      	add	r2, r1
 800814e:	7a12      	ldrb	r2, [r2, #8]
 8008150:	4610      	mov	r0, r2
 8008152:	4798      	blx	r3
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20006a1c 	.word	0x20006a1c

08008168 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4a0a      	ldr	r2, [pc, #40]	; (80081a4 <disk_read+0x3c>)
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	689c      	ldr	r4, [r3, #8]
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4a07      	ldr	r2, [pc, #28]	; (80081a4 <disk_read+0x3c>)
 8008188:	4413      	add	r3, r2
 800818a:	7a18      	ldrb	r0, [r3, #8]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	47a0      	blx	r4
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
  return res;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd90      	pop	{r4, r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20006a1c 	.word	0x20006a1c

080081a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <disk_write+0x3c>)
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68dc      	ldr	r4, [r3, #12]
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4a07      	ldr	r2, [pc, #28]	; (80081e4 <disk_write+0x3c>)
 80081c8:	4413      	add	r3, r2
 80081ca:	7a18      	ldrb	r0, [r3, #8]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	47a0      	blx	r4
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd90      	pop	{r4, r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20006a1c 	.word	0x20006a1c

080081e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	603a      	str	r2, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	460b      	mov	r3, r1
 80081f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	4a09      	ldr	r2, [pc, #36]	; (8008220 <disk_ioctl+0x38>)
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	79fa      	ldrb	r2, [r7, #7]
 8008206:	4906      	ldr	r1, [pc, #24]	; (8008220 <disk_ioctl+0x38>)
 8008208:	440a      	add	r2, r1
 800820a:	7a10      	ldrb	r0, [r2, #8]
 800820c:	79b9      	ldrb	r1, [r7, #6]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4798      	blx	r3
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
  return res;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20006a1c 	.word	0x20006a1c

08008224 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3301      	adds	r3, #1
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	b21a      	sxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b21b      	sxth	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	b21b      	sxth	r3, r3
 8008244:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008246:	89fb      	ldrh	r3, [r7, #14]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3303      	adds	r3, #3
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	3202      	adds	r2, #2
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	3201      	adds	r2, #1
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7812      	ldrb	r2, [r2, #0]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
	return rv;
 800828c:	68fb      	ldr	r3, [r7, #12]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	887a      	ldrh	r2, [r7, #2]
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	887b      	ldrh	r3, [r7, #2]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	887a      	ldrh	r2, [r7, #2]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	0a1b      	lsrs	r3, r3, #8
 80082ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	0a1b      	lsrs	r3, r3, #8
 80082fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	701a      	strb	r2, [r3, #0]
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00d      	beq.n	800835e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	1c53      	adds	r3, r2, #1
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	1c59      	adds	r1, r3, #1
 800834c:	6179      	str	r1, [r7, #20]
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3b01      	subs	r3, #1
 8008356:	607b      	str	r3, [r7, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f1      	bne.n	8008342 <mem_cpy+0x1a>
	}
}
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800836a:	b480      	push	{r7}
 800836c:	b087      	sub	sp, #28
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	617a      	str	r2, [r7, #20]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3b01      	subs	r3, #1
 800838a:	607b      	str	r3, [r7, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f3      	bne.n	800837a <mem_set+0x10>
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80083a0:	b480      	push	{r7}
 80083a2:	b089      	sub	sp, #36	; 0x24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	61fb      	str	r3, [r7, #28]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	61fa      	str	r2, [r7, #28]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	4619      	mov	r1, r3
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	61ba      	str	r2, [r7, #24]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	1acb      	subs	r3, r1, r3
 80083cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <mem_cmp+0x40>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0eb      	beq.n	80083b8 <mem_cmp+0x18>

	return r;
 80083e0:	697b      	ldr	r3, [r7, #20]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3724      	adds	r7, #36	; 0x24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80083f8:	e002      	b.n	8008400 <chk_chr+0x12>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3301      	adds	r3, #1
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <chk_chr+0x26>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	4293      	cmp	r3, r2
 8008412:	d1f2      	bne.n	80083fa <chk_chr+0xc>
	return *str;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	781b      	ldrb	r3, [r3, #0]
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	e029      	b.n	800848c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008438:	4a27      	ldr	r2, [pc, #156]	; (80084d8 <chk_lock+0xb4>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	4413      	add	r3, r2
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01d      	beq.n	8008482 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008446:	4a24      	ldr	r2, [pc, #144]	; (80084d8 <chk_lock+0xb4>)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	4413      	add	r3, r2
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d116      	bne.n	8008486 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008458:	4a1f      	ldr	r2, [pc, #124]	; (80084d8 <chk_lock+0xb4>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	4413      	add	r3, r2
 8008460:	3304      	adds	r3, #4
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008468:	429a      	cmp	r2, r3
 800846a:	d10c      	bne.n	8008486 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800846c:	4a1a      	ldr	r2, [pc, #104]	; (80084d8 <chk_lock+0xb4>)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	4413      	add	r3, r2
 8008474:	3308      	adds	r3, #8
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800847c:	429a      	cmp	r2, r3
 800847e:	d102      	bne.n	8008486 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008480:	e007      	b.n	8008492 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008482:	2301      	movs	r3, #1
 8008484:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3301      	adds	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d9d2      	bls.n	8008438 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d109      	bne.n	80084ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d102      	bne.n	80084a4 <chk_lock+0x80>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d101      	bne.n	80084a8 <chk_lock+0x84>
 80084a4:	2300      	movs	r3, #0
 80084a6:	e010      	b.n	80084ca <chk_lock+0xa6>
 80084a8:	2312      	movs	r3, #18
 80084aa:	e00e      	b.n	80084ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d108      	bne.n	80084c4 <chk_lock+0xa0>
 80084b2:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <chk_lock+0xb4>)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	4413      	add	r3, r2
 80084ba:	330c      	adds	r3, #12
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c2:	d101      	bne.n	80084c8 <chk_lock+0xa4>
 80084c4:	2310      	movs	r3, #16
 80084c6:	e000      	b.n	80084ca <chk_lock+0xa6>
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	200069fc 	.word	0x200069fc

080084dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084e2:	2300      	movs	r3, #0
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	e002      	b.n	80084ee <enq_lock+0x12>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3301      	adds	r3, #1
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d806      	bhi.n	8008502 <enq_lock+0x26>
 80084f4:	4a09      	ldr	r2, [pc, #36]	; (800851c <enq_lock+0x40>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	4413      	add	r3, r2
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f2      	bne.n	80084e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b02      	cmp	r3, #2
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	200069fc 	.word	0x200069fc

08008520 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	e01f      	b.n	8008570 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008530:	4a41      	ldr	r2, [pc, #260]	; (8008638 <inc_lock+0x118>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	4413      	add	r3, r2
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	d113      	bne.n	800856a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008542:	4a3d      	ldr	r2, [pc, #244]	; (8008638 <inc_lock+0x118>)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	4413      	add	r3, r2
 800854a:	3304      	adds	r3, #4
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008552:	429a      	cmp	r2, r3
 8008554:	d109      	bne.n	800856a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008556:	4a38      	ldr	r2, [pc, #224]	; (8008638 <inc_lock+0x118>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	4413      	add	r3, r2
 800855e:	3308      	adds	r3, #8
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008566:	429a      	cmp	r2, r3
 8008568:	d006      	beq.n	8008578 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3301      	adds	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d9dc      	bls.n	8008530 <inc_lock+0x10>
 8008576:	e000      	b.n	800857a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008578:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d132      	bne.n	80085e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	e002      	b.n	800858c <inc_lock+0x6c>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3301      	adds	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d806      	bhi.n	80085a0 <inc_lock+0x80>
 8008592:	4a29      	ldr	r2, [pc, #164]	; (8008638 <inc_lock+0x118>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	4413      	add	r3, r2
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1f2      	bne.n	8008586 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d101      	bne.n	80085aa <inc_lock+0x8a>
 80085a6:	2300      	movs	r3, #0
 80085a8:	e040      	b.n	800862c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4922      	ldr	r1, [pc, #136]	; (8008638 <inc_lock+0x118>)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	440b      	add	r3, r1
 80085b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	491e      	ldr	r1, [pc, #120]	; (8008638 <inc_lock+0x118>)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	440b      	add	r3, r1
 80085c4:	3304      	adds	r3, #4
 80085c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695a      	ldr	r2, [r3, #20]
 80085cc:	491a      	ldr	r1, [pc, #104]	; (8008638 <inc_lock+0x118>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	440b      	add	r3, r1
 80085d4:	3308      	adds	r3, #8
 80085d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80085d8:	4a17      	ldr	r2, [pc, #92]	; (8008638 <inc_lock+0x118>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	011b      	lsls	r3, r3, #4
 80085de:	4413      	add	r3, r2
 80085e0:	330c      	adds	r3, #12
 80085e2:	2200      	movs	r2, #0
 80085e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d009      	beq.n	8008600 <inc_lock+0xe0>
 80085ec:	4a12      	ldr	r2, [pc, #72]	; (8008638 <inc_lock+0x118>)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	4413      	add	r3, r2
 80085f4:	330c      	adds	r3, #12
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <inc_lock+0xe0>
 80085fc:	2300      	movs	r3, #0
 80085fe:	e015      	b.n	800862c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d108      	bne.n	8008618 <inc_lock+0xf8>
 8008606:	4a0c      	ldr	r2, [pc, #48]	; (8008638 <inc_lock+0x118>)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	4413      	add	r3, r2
 800860e:	330c      	adds	r3, #12
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	e001      	b.n	800861c <inc_lock+0xfc>
 8008618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800861c:	4906      	ldr	r1, [pc, #24]	; (8008638 <inc_lock+0x118>)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	440b      	add	r3, r1
 8008624:	330c      	adds	r3, #12
 8008626:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	200069fc 	.word	0x200069fc

0800863c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3b01      	subs	r3, #1
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d825      	bhi.n	800869c <dec_lock+0x60>
		n = Files[i].ctr;
 8008650:	4a17      	ldr	r2, [pc, #92]	; (80086b0 <dec_lock+0x74>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	4413      	add	r3, r2
 8008658:	330c      	adds	r3, #12
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800865e:	89fb      	ldrh	r3, [r7, #14]
 8008660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008664:	d101      	bne.n	800866a <dec_lock+0x2e>
 8008666:	2300      	movs	r3, #0
 8008668:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800866a:	89fb      	ldrh	r3, [r7, #14]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <dec_lock+0x3a>
 8008670:	89fb      	ldrh	r3, [r7, #14]
 8008672:	3b01      	subs	r3, #1
 8008674:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008676:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <dec_lock+0x74>)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	4413      	add	r3, r2
 800867e:	330c      	adds	r3, #12
 8008680:	89fa      	ldrh	r2, [r7, #14]
 8008682:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <dec_lock+0x5a>
 800868a:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <dec_lock+0x74>)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	4413      	add	r3, r2
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	737b      	strb	r3, [r7, #13]
 800869a:	e001      	b.n	80086a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800869c:	2302      	movs	r3, #2
 800869e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80086a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	200069fc 	.word	0x200069fc

080086b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e010      	b.n	80086e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80086c2:	4a0d      	ldr	r2, [pc, #52]	; (80086f8 <clear_lock+0x44>)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	4413      	add	r3, r2
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d105      	bne.n	80086de <clear_lock+0x2a>
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <clear_lock+0x44>)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	4413      	add	r3, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d9eb      	bls.n	80086c2 <clear_lock+0xe>
	}
}
 80086ea:	bf00      	nop
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	200069fc 	.word	0x200069fc

080086fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	78db      	ldrb	r3, [r3, #3]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d034      	beq.n	800877a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7858      	ldrb	r0, [r3, #1]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008720:	2301      	movs	r3, #1
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	f7ff fd40 	bl	80081a8 <disk_write>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <sync_window+0x38>
			res = FR_DISK_ERR;
 800872e:	2301      	movs	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
 8008732:	e022      	b.n	800877a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	429a      	cmp	r2, r3
 8008748:	d217      	bcs.n	800877a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	789b      	ldrb	r3, [r3, #2]
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	e010      	b.n	8008774 <sync_window+0x78>
					wsect += fs->fsize;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4413      	add	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7858      	ldrb	r0, [r3, #1]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008766:	2301      	movs	r3, #1
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	f7ff fd1d 	bl	80081a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	3b01      	subs	r3, #1
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d8eb      	bhi.n	8008752 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d01b      	beq.n	80087d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff ffad 	bl	80086fc <sync_window>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d113      	bne.n	80087d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7858      	ldrb	r0, [r3, #1]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087b6:	2301      	movs	r3, #1
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	f7ff fcd5 	bl	8008168 <disk_read>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80087c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff ff87 	bl	80086fc <sync_window>
 80087ee:	4603      	mov	r3, r0
 80087f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d158      	bne.n	80088aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d148      	bne.n	8008892 <sync_fs+0xb2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	791b      	ldrb	r3, [r3, #4]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d144      	bne.n	8008892 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3330      	adds	r3, #48	; 0x30
 800880c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fda9 	bl	800836a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3330      	adds	r3, #48	; 0x30
 800881c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008820:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fd38 	bl	800829a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3330      	adds	r3, #48	; 0x30
 800882e:	4921      	ldr	r1, [pc, #132]	; (80088b4 <sync_fs+0xd4>)
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff fd4d 	bl	80082d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3330      	adds	r3, #48	; 0x30
 800883a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800883e:	491e      	ldr	r1, [pc, #120]	; (80088b8 <sync_fs+0xd8>)
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fd45 	bl	80082d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3330      	adds	r3, #48	; 0x30
 800884a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f7ff fd3b 	bl	80082d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3330      	adds	r3, #48	; 0x30
 800885e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	4619      	mov	r1, r3
 8008868:	4610      	mov	r0, r2
 800886a:	f7ff fd31 	bl	80082d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7858      	ldrb	r0, [r3, #1]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008886:	2301      	movs	r3, #1
 8008888:	f7ff fc8e 	bl	80081a8 <disk_write>
			fs->fsi_flag = 0;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fca4 	bl	80081e8 <disk_ioctl>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <sync_fs+0xca>
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	41615252 	.word	0x41615252
 80088b8:	61417272 	.word	0x61417272

080088bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	3b02      	subs	r3, #2
 80088ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	3b02      	subs	r3, #2
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d301      	bcc.n	80088dc <clust2sect+0x20>
 80088d8:	2300      	movs	r3, #0
 80088da:	e008      	b.n	80088ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	895b      	ldrh	r3, [r3, #10]
 80088e0:	461a      	mov	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	fb03 f202 	mul.w	r2, r3, r2
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	4413      	add	r3, r2
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d904      	bls.n	800891a <get_fat+0x20>
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d302      	bcc.n	8008920 <get_fat+0x26>
		val = 1;	/* Internal error */
 800891a:	2301      	movs	r3, #1
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	e08f      	b.n	8008a40 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008924:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b03      	cmp	r3, #3
 800892c:	d062      	beq.n	80089f4 <get_fat+0xfa>
 800892e:	2b03      	cmp	r3, #3
 8008930:	dc7c      	bgt.n	8008a2c <get_fat+0x132>
 8008932:	2b01      	cmp	r3, #1
 8008934:	d002      	beq.n	800893c <get_fat+0x42>
 8008936:	2b02      	cmp	r3, #2
 8008938:	d042      	beq.n	80089c0 <get_fat+0xc6>
 800893a:	e077      	b.n	8008a2c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6a1a      	ldr	r2, [r3, #32]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	0a5b      	lsrs	r3, r3, #9
 8008952:	4413      	add	r3, r2
 8008954:	4619      	mov	r1, r3
 8008956:	6938      	ldr	r0, [r7, #16]
 8008958:	f7ff ff14 	bl	8008784 <move_window>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d167      	bne.n	8008a32 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	60fa      	str	r2, [r7, #12]
 8008968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4413      	add	r3, r2
 8008970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008974:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6a1a      	ldr	r2, [r3, #32]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	0a5b      	lsrs	r3, r3, #9
 800897e:	4413      	add	r3, r2
 8008980:	4619      	mov	r1, r3
 8008982:	6938      	ldr	r0, [r7, #16]
 8008984:	f7ff fefe 	bl	8008784 <move_window>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d153      	bne.n	8008a36 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4413      	add	r3, r2
 8008998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	461a      	mov	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <get_fat+0xbc>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	091b      	lsrs	r3, r3, #4
 80089b4:	e002      	b.n	80089bc <get_fat+0xc2>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089bc:	617b      	str	r3, [r7, #20]
			break;
 80089be:	e03f      	b.n	8008a40 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6a1a      	ldr	r2, [r3, #32]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	4413      	add	r3, r2
 80089ca:	4619      	mov	r1, r3
 80089cc:	6938      	ldr	r0, [r7, #16]
 80089ce:	f7ff fed9 	bl	8008784 <move_window>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d130      	bne.n	8008a3a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80089e6:	4413      	add	r3, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fc1b 	bl	8008224 <ld_word>
 80089ee:	4603      	mov	r3, r0
 80089f0:	617b      	str	r3, [r7, #20]
			break;
 80089f2:	e025      	b.n	8008a40 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	09db      	lsrs	r3, r3, #7
 80089fc:	4413      	add	r3, r2
 80089fe:	4619      	mov	r1, r3
 8008a00:	6938      	ldr	r0, [r7, #16]
 8008a02:	f7ff febf 	bl	8008784 <move_window>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d118      	bne.n	8008a3e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a1a:	4413      	add	r3, r2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fc19 	bl	8008254 <ld_dword>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a28:	617b      	str	r3, [r7, #20]
			break;
 8008a2a:	e009      	b.n	8008a40 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e006      	b.n	8008a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a32:	bf00      	nop
 8008a34:	e004      	b.n	8008a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a3e:	bf00      	nop
		}
	}

	return val;
 8008a40:	697b      	ldr	r3, [r7, #20]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008a4a:	b590      	push	{r4, r7, lr}
 8008a4c:	b089      	sub	sp, #36	; 0x24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a56:	2302      	movs	r3, #2
 8008a58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	f240 80d2 	bls.w	8008c06 <put_fat+0x1bc>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	f080 80cc 	bcs.w	8008c06 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	f000 8096 	beq.w	8008ba4 <put_fat+0x15a>
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	f300 80cd 	bgt.w	8008c18 <put_fat+0x1ce>
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d002      	beq.n	8008a88 <put_fat+0x3e>
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d06e      	beq.n	8008b64 <put_fat+0x11a>
 8008a86:	e0c7      	b.n	8008c18 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4413      	add	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	0a5b      	lsrs	r3, r3, #9
 8008a9e:	4413      	add	r3, r2
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff fe6e 	bl	8008784 <move_window>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008aac:	7ffb      	ldrb	r3, [r7, #31]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f040 80ab 	bne.w	8008c0a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	61b9      	str	r1, [r7, #24]
 8008ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac4:	4413      	add	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <put_fat+0xa4>
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	b25a      	sxtb	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	b25b      	sxtb	r3, r3
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	e001      	b.n	8008af2 <put_fat+0xa8>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a1a      	ldr	r2, [r3, #32]
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	0a5b      	lsrs	r3, r3, #9
 8008b04:	4413      	add	r3, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff fe3b 	bl	8008784 <move_window>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b12:	7ffb      	ldrb	r3, [r7, #31]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d17a      	bne.n	8008c0e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b24:	4413      	add	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <put_fat+0xf0>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	e00e      	b.n	8008b58 <put_fat+0x10e>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	f023 030f 	bic.w	r3, r3, #15
 8008b44:	b25a      	sxtb	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0a1b      	lsrs	r3, r3, #8
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	f003 030f 	and.w	r3, r3, #15
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	4313      	orrs	r3, r2
 8008b54:	b25b      	sxtb	r3, r3
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	70da      	strb	r2, [r3, #3]
			break;
 8008b62:	e059      	b.n	8008c18 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a1a      	ldr	r2, [r3, #32]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4619      	mov	r1, r3
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7ff fe07 	bl	8008784 <move_window>
 8008b76:	4603      	mov	r3, r0
 8008b78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d148      	bne.n	8008c12 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008b8e:	4413      	add	r3, r2
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	b292      	uxth	r2, r2
 8008b94:	4611      	mov	r1, r2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff fb7f 	bl	800829a <st_word>
			fs->wflag = 1;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	70da      	strb	r2, [r3, #3]
			break;
 8008ba2:	e039      	b.n	8008c18 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	09db      	lsrs	r3, r3, #7
 8008bac:	4413      	add	r3, r2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff fde7 	bl	8008784 <move_window>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bba:	7ffb      	ldrb	r3, [r7, #31]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d12a      	bne.n	8008c16 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fb3c 	bl	8008254 <ld_dword>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008be2:	4323      	orrs	r3, r4
 8008be4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008bf4:	4413      	add	r3, r2
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff fb69 	bl	80082d0 <st_dword>
			fs->wflag = 1;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	70da      	strb	r2, [r3, #3]
			break;
 8008c04:	e008      	b.n	8008c18 <put_fat+0x1ce>
		}
	}
 8008c06:	bf00      	nop
 8008c08:	e006      	b.n	8008c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c0a:	bf00      	nop
 8008c0c:	e004      	b.n	8008c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c0e:	bf00      	nop
 8008c10:	e002      	b.n	8008c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c12:	bf00      	nop
 8008c14:	e000      	b.n	8008c18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c16:	bf00      	nop
	return res;
 8008c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3724      	adds	r7, #36	; 0x24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}

08008c22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b088      	sub	sp, #32
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d904      	bls.n	8008c48 <remove_chain+0x26>
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d301      	bcc.n	8008c4c <remove_chain+0x2a>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e04b      	b.n	8008ce4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00c      	beq.n	8008c6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	69b8      	ldr	r0, [r7, #24]
 8008c5a:	f7ff fef6 	bl	8008a4a <put_fat>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c62:	7ffb      	ldrb	r3, [r7, #31]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <remove_chain+0x4a>
 8008c68:	7ffb      	ldrb	r3, [r7, #31]
 8008c6a:	e03b      	b.n	8008ce4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff fe43 	bl	80088fa <get_fat>
 8008c74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d031      	beq.n	8008ce0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d101      	bne.n	8008c86 <remove_chain+0x64>
 8008c82:	2302      	movs	r3, #2
 8008c84:	e02e      	b.n	8008ce4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8c:	d101      	bne.n	8008c92 <remove_chain+0x70>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e028      	b.n	8008ce4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c92:	2200      	movs	r2, #0
 8008c94:	68b9      	ldr	r1, [r7, #8]
 8008c96:	69b8      	ldr	r0, [r7, #24]
 8008c98:	f7ff fed7 	bl	8008a4a <put_fat>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ca0:	7ffb      	ldrb	r3, [r7, #31]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <remove_chain+0x88>
 8008ca6:	7ffb      	ldrb	r3, [r7, #31]
 8008ca8:	e01c      	b.n	8008ce4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	691a      	ldr	r2, [r3, #16]
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	3b02      	subs	r3, #2
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d20b      	bcs.n	8008cd0 <remove_chain+0xae>
			fs->free_clst++;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	791b      	ldrb	r3, [r3, #4]
 8008cc6:	f043 0301 	orr.w	r3, r3, #1
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d3c6      	bcc.n	8008c6c <remove_chain+0x4a>
 8008cde:	e000      	b.n	8008ce2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ce0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3720      	adds	r7, #32
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10d      	bne.n	8008d1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <create_chain+0x2c>
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d31b      	bcc.n	8008d50 <create_chain+0x64>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	e018      	b.n	8008d50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fdea 	bl	80088fa <get_fat>
 8008d26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d801      	bhi.n	8008d32 <create_chain+0x46>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e070      	b.n	8008e14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d38:	d101      	bne.n	8008d3e <create_chain+0x52>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	e06a      	b.n	8008e14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d201      	bcs.n	8008d4c <create_chain+0x60>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	e063      	b.n	8008e14 <create_chain+0x128>
		scl = clst;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d307      	bcc.n	8008d74 <create_chain+0x88>
				ncl = 2;
 8008d64:	2302      	movs	r3, #2
 8008d66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d901      	bls.n	8008d74 <create_chain+0x88>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e04f      	b.n	8008e14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d74:	69f9      	ldr	r1, [r7, #28]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fdbf 	bl	80088fa <get_fat>
 8008d7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00e      	beq.n	8008da2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d003      	beq.n	8008d92 <create_chain+0xa6>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d90:	d101      	bne.n	8008d96 <create_chain+0xaa>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	e03e      	b.n	8008e14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d1da      	bne.n	8008d54 <create_chain+0x68>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e038      	b.n	8008e14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008da2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008da8:	69f9      	ldr	r1, [r7, #28]
 8008daa:	6938      	ldr	r0, [r7, #16]
 8008dac:	f7ff fe4d 	bl	8008a4a <put_fat>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <create_chain+0xe2>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6938      	ldr	r0, [r7, #16]
 8008dc6:	f7ff fe40 	bl	8008a4a <put_fat>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d116      	bne.n	8008e02 <create_chain+0x116>
		fs->last_clst = ncl;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	691a      	ldr	r2, [r3, #16]
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	3b02      	subs	r3, #2
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d804      	bhi.n	8008df2 <create_chain+0x106>
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	1e5a      	subs	r2, r3, #1
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	f043 0301 	orr.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	711a      	strb	r2, [r3, #4]
 8008e00:	e007      	b.n	8008e12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d102      	bne.n	8008e0e <create_chain+0x122>
 8008e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e0c:	e000      	b.n	8008e10 <create_chain+0x124>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e12:	69fb      	ldr	r3, [r7, #28]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3720      	adds	r7, #32
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	3304      	adds	r3, #4
 8008e32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	0a5b      	lsrs	r3, r3, #9
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	8952      	ldrh	r2, [r2, #10]
 8008e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	1d1a      	adds	r2, r3, #4
 8008e46:	613a      	str	r2, [r7, #16]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <clmt_clust+0x3a>
 8008e52:	2300      	movs	r3, #0
 8008e54:	e010      	b.n	8008e78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d307      	bcc.n	8008e6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	617b      	str	r3, [r7, #20]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e6c:	e7e9      	b.n	8008e42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e9a:	d204      	bcs.n	8008ea6 <dir_sdi+0x22>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	f003 031f 	and.w	r3, r3, #31
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e063      	b.n	8008f72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d106      	bne.n	8008eca <dir_sdi+0x46>
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d902      	bls.n	8008eca <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10c      	bne.n	8008eea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	8912      	ldrh	r2, [r2, #8]
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d301      	bcc.n	8008ee0 <dir_sdi+0x5c>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e048      	b.n	8008f72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	61da      	str	r2, [r3, #28]
 8008ee8:	e029      	b.n	8008f3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	895b      	ldrh	r3, [r3, #10]
 8008eee:	025b      	lsls	r3, r3, #9
 8008ef0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ef2:	e019      	b.n	8008f28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6979      	ldr	r1, [r7, #20]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fcfe 	bl	80088fa <get_fat>
 8008efe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f06:	d101      	bne.n	8008f0c <dir_sdi+0x88>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e032      	b.n	8008f72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d904      	bls.n	8008f1c <dir_sdi+0x98>
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d301      	bcc.n	8008f20 <dir_sdi+0x9c>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e028      	b.n	8008f72 <dir_sdi+0xee>
			ofs -= csz;
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d2e1      	bcs.n	8008ef4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008f30:	6979      	ldr	r1, [r7, #20]
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f7ff fcc2 	bl	80088bc <clust2sect>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <dir_sdi+0xcc>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e010      	b.n	8008f72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	0a5b      	lsrs	r3, r3, #9
 8008f58:	441a      	add	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b086      	sub	sp, #24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	3320      	adds	r3, #32
 8008f90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <dir_next+0x28>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fa0:	d301      	bcc.n	8008fa6 <dir_next+0x2c>
 8008fa2:	2304      	movs	r3, #4
 8008fa4:	e0aa      	b.n	80090fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8098 	bne.w	80090e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	8912      	ldrh	r2, [r2, #8]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	f0c0 8088 	bcc.w	80090e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	61da      	str	r2, [r3, #28]
 8008fd8:	2304      	movs	r3, #4
 8008fda:	e08f      	b.n	80090fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	0a5b      	lsrs	r3, r3, #9
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	8952      	ldrh	r2, [r2, #10]
 8008fe4:	3a01      	subs	r2, #1
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d17a      	bne.n	80090e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	f7ff fc80 	bl	80088fa <get_fat>
 8008ffa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d801      	bhi.n	8009006 <dir_next+0x8c>
 8009002:	2302      	movs	r3, #2
 8009004:	e07a      	b.n	80090fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900c:	d101      	bne.n	8009012 <dir_next+0x98>
 800900e:	2301      	movs	r3, #1
 8009010:	e074      	b.n	80090fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	429a      	cmp	r2, r3
 800901a:	d358      	bcc.n	80090ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	61da      	str	r2, [r3, #28]
 8009028:	2304      	movs	r3, #4
 800902a:	e067      	b.n	80090fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	4619      	mov	r1, r3
 8009034:	4610      	mov	r0, r2
 8009036:	f7ff fe59 	bl	8008cec <create_chain>
 800903a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <dir_next+0xcc>
 8009042:	2307      	movs	r3, #7
 8009044:	e05a      	b.n	80090fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <dir_next+0xd6>
 800904c:	2302      	movs	r3, #2
 800904e:	e055      	b.n	80090fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009056:	d101      	bne.n	800905c <dir_next+0xe2>
 8009058:	2301      	movs	r3, #1
 800905a:	e04f      	b.n	80090fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fb4d 	bl	80086fc <sync_window>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <dir_next+0xf2>
 8009068:	2301      	movs	r3, #1
 800906a:	e047      	b.n	80090fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3330      	adds	r3, #48	; 0x30
 8009070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009074:	2100      	movs	r1, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff f977 	bl	800836a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	6979      	ldr	r1, [r7, #20]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff fc1a 	bl	80088bc <clust2sect>
 8009088:	4602      	mov	r2, r0
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	62da      	str	r2, [r3, #44]	; 0x2c
 800908e:	e012      	b.n	80090b6 <dir_next+0x13c>
						fs->wflag = 1;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff fb30 	bl	80086fc <sync_window>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <dir_next+0x12c>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e02a      	b.n	80090fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	895b      	ldrh	r3, [r3, #10]
 80090ba:	461a      	mov	r2, r3
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	4293      	cmp	r3, r2
 80090c0:	d3e6      	bcc.n	8009090 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff fbf0 	bl	80088bc <clust2sect>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009114:	2100      	movs	r1, #0
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff feb4 	bl	8008e84 <dir_sdi>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d12b      	bne.n	800917e <dir_alloc+0x7a>
		n = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	4619      	mov	r1, r3
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7ff fb27 	bl	8008784 <move_window>
 8009136:	4603      	mov	r3, r0
 8009138:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d11d      	bne.n	800917c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2be5      	cmp	r3, #229	; 0xe5
 8009148:	d004      	beq.n	8009154 <dir_alloc+0x50>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d107      	bne.n	8009164 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3301      	adds	r3, #1
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d102      	bne.n	8009168 <dir_alloc+0x64>
 8009162:	e00c      	b.n	800917e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff ff05 	bl	8008f7a <dir_next>
 8009170:	4603      	mov	r3, r0
 8009172:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0d7      	beq.n	800912a <dir_alloc+0x26>
 800917a:	e000      	b.n	800917e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800917c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b04      	cmp	r3, #4
 8009182:	d101      	bne.n	8009188 <dir_alloc+0x84>
 8009184:	2307      	movs	r3, #7
 8009186:	75fb      	strb	r3, [r7, #23]
	return res;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	331a      	adds	r3, #26
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff f83f 	bl	8008224 <ld_word>
 80091a6:	4603      	mov	r3, r0
 80091a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d109      	bne.n	80091c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	3314      	adds	r3, #20
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff f834 	bl	8008224 <ld_word>
 80091bc:	4603      	mov	r3, r0
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80091c6:	68fb      	ldr	r3, [r7, #12]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	331a      	adds	r3, #26
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	b292      	uxth	r2, r2
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff f857 	bl	800829a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d109      	bne.n	8009208 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f103 0214 	add.w	r2, r3, #20
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	0c1b      	lsrs	r3, r3, #16
 80091fe:	b29b      	uxth	r3, r3
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7ff f849 	bl	800829a <st_word>
	}
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800921e:	2100      	movs	r1, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff fe2f 	bl	8008e84 <dir_sdi>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <dir_find+0x24>
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	e03e      	b.n	80092b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	4619      	mov	r1, r3
 800923a:	6938      	ldr	r0, [r7, #16]
 800923c:	f7ff faa2 	bl	8008784 <move_window>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d12f      	bne.n	80092aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <dir_find+0x4e>
 8009258:	2304      	movs	r3, #4
 800925a:	75fb      	strb	r3, [r7, #23]
 800925c:	e028      	b.n	80092b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	330b      	adds	r3, #11
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	330b      	adds	r3, #11
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <dir_find+0x86>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a18      	ldr	r0, [r3, #32]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	220b      	movs	r2, #11
 800928a:	4619      	mov	r1, r3
 800928c:	f7ff f888 	bl	80083a0 <mem_cmp>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009296:	2100      	movs	r1, #0
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff fe6e 	bl	8008f7a <dir_next>
 800929e:	4603      	mov	r3, r0
 80092a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d0c5      	beq.n	8009234 <dir_find+0x24>
 80092a8:	e002      	b.n	80092b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80092aa:	bf00      	nop
 80092ac:	e000      	b.n	80092b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092ae:	bf00      	nop

	return res;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80092c8:	2101      	movs	r1, #1
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff ff1a 	bl	8009104 <dir_alloc>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d11c      	bne.n	8009314 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	4619      	mov	r1, r3
 80092e0:	68b8      	ldr	r0, [r7, #8]
 80092e2:	f7ff fa4f 	bl	8008784 <move_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d111      	bne.n	8009314 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	2220      	movs	r2, #32
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff f836 	bl	800836a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a18      	ldr	r0, [r3, #32]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3324      	adds	r3, #36	; 0x24
 8009306:	220b      	movs	r2, #11
 8009308:	4619      	mov	r1, r3
 800930a:	f7ff f80d 	bl	8008328 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2201      	movs	r2, #1
 8009312:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3324      	adds	r3, #36	; 0x24
 8009334:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009336:	220b      	movs	r2, #11
 8009338:	2120      	movs	r1, #32
 800933a:	68b8      	ldr	r0, [r7, #8]
 800933c:	f7ff f815 	bl	800836a <mem_set>
	si = i = 0; ni = 8;
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	2308      	movs	r3, #8
 800934a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	61fa      	str	r2, [r7, #28]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4413      	add	r3, r2
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800935a:	7efb      	ldrb	r3, [r7, #27]
 800935c:	2b20      	cmp	r3, #32
 800935e:	d94e      	bls.n	80093fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009360:	7efb      	ldrb	r3, [r7, #27]
 8009362:	2b2f      	cmp	r3, #47	; 0x2f
 8009364:	d006      	beq.n	8009374 <create_name+0x54>
 8009366:	7efb      	ldrb	r3, [r7, #27]
 8009368:	2b5c      	cmp	r3, #92	; 0x5c
 800936a:	d110      	bne.n	800938e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800936c:	e002      	b.n	8009374 <create_name+0x54>
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	3301      	adds	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b2f      	cmp	r3, #47	; 0x2f
 800937e:	d0f6      	beq.n	800936e <create_name+0x4e>
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	4413      	add	r3, r2
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b5c      	cmp	r3, #92	; 0x5c
 800938a:	d0f0      	beq.n	800936e <create_name+0x4e>
			break;
 800938c:	e038      	b.n	8009400 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800938e:	7efb      	ldrb	r3, [r7, #27]
 8009390:	2b2e      	cmp	r3, #46	; 0x2e
 8009392:	d003      	beq.n	800939c <create_name+0x7c>
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	429a      	cmp	r2, r3
 800939a:	d30c      	bcc.n	80093b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2b0b      	cmp	r3, #11
 80093a0:	d002      	beq.n	80093a8 <create_name+0x88>
 80093a2:	7efb      	ldrb	r3, [r7, #27]
 80093a4:	2b2e      	cmp	r3, #46	; 0x2e
 80093a6:	d001      	beq.n	80093ac <create_name+0x8c>
 80093a8:	2306      	movs	r3, #6
 80093aa:	e044      	b.n	8009436 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80093ac:	2308      	movs	r3, #8
 80093ae:	613b      	str	r3, [r7, #16]
 80093b0:	230b      	movs	r3, #11
 80093b2:	617b      	str	r3, [r7, #20]
			continue;
 80093b4:	e022      	b.n	80093fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80093b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da04      	bge.n	80093c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80093be:	7efb      	ldrb	r3, [r7, #27]
 80093c0:	3b80      	subs	r3, #128	; 0x80
 80093c2:	4a1f      	ldr	r2, [pc, #124]	; (8009440 <create_name+0x120>)
 80093c4:	5cd3      	ldrb	r3, [r2, r3]
 80093c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80093c8:	7efb      	ldrb	r3, [r7, #27]
 80093ca:	4619      	mov	r1, r3
 80093cc:	481d      	ldr	r0, [pc, #116]	; (8009444 <create_name+0x124>)
 80093ce:	f7ff f80e 	bl	80083ee <chk_chr>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <create_name+0xbc>
 80093d8:	2306      	movs	r3, #6
 80093da:	e02c      	b.n	8009436 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80093dc:	7efb      	ldrb	r3, [r7, #27]
 80093de:	2b60      	cmp	r3, #96	; 0x60
 80093e0:	d905      	bls.n	80093ee <create_name+0xce>
 80093e2:	7efb      	ldrb	r3, [r7, #27]
 80093e4:	2b7a      	cmp	r3, #122	; 0x7a
 80093e6:	d802      	bhi.n	80093ee <create_name+0xce>
 80093e8:	7efb      	ldrb	r3, [r7, #27]
 80093ea:	3b20      	subs	r3, #32
 80093ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	613a      	str	r2, [r7, #16]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	4413      	add	r3, r2
 80093f8:	7efa      	ldrb	r2, [r7, #27]
 80093fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80093fc:	e7a6      	b.n	800934c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	441a      	add	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <create_name+0xf4>
 8009410:	2306      	movs	r3, #6
 8009412:	e010      	b.n	8009436 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2be5      	cmp	r3, #229	; 0xe5
 800941a:	d102      	bne.n	8009422 <create_name+0x102>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2205      	movs	r2, #5
 8009420:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009422:	7efb      	ldrb	r3, [r7, #27]
 8009424:	2b20      	cmp	r3, #32
 8009426:	d801      	bhi.n	800942c <create_name+0x10c>
 8009428:	2204      	movs	r2, #4
 800942a:	e000      	b.n	800942e <create_name+0x10e>
 800942c:	2200      	movs	r2, #0
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	330b      	adds	r3, #11
 8009432:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009434:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	0800b3f4 	.word	0x0800b3f4
 8009444:	0800b37c 	.word	0x0800b37c

08009448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800945c:	e002      	b.n	8009464 <follow_path+0x1c>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b2f      	cmp	r3, #47	; 0x2f
 800946a:	d0f8      	beq.n	800945e <follow_path+0x16>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b5c      	cmp	r3, #92	; 0x5c
 8009472:	d0f4      	beq.n	800945e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2200      	movs	r2, #0
 8009478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b1f      	cmp	r3, #31
 8009480:	d80a      	bhi.n	8009498 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2280      	movs	r2, #128	; 0x80
 8009486:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800948a:	2100      	movs	r1, #0
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff fcf9 	bl	8008e84 <dir_sdi>
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]
 8009496:	e043      	b.n	8009520 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009498:	463b      	mov	r3, r7
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ff3f 	bl	8009320 <create_name>
 80094a2:	4603      	mov	r3, r0
 80094a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d134      	bne.n	8009516 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff feaf 	bl	8009210 <dir_find>
 80094b2:	4603      	mov	r3, r0
 80094b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d127      	bne.n	800951a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d122      	bne.n	800951a <follow_path+0xd2>
 80094d4:	2305      	movs	r3, #5
 80094d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80094d8:	e01f      	b.n	800951a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094da:	7afb      	ldrb	r3, [r7, #11]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d11c      	bne.n	800951e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	799b      	ldrb	r3, [r3, #6]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80094f0:	2305      	movs	r3, #5
 80094f2:	75fb      	strb	r3, [r7, #23]
 80094f4:	e014      	b.n	8009520 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009504:	4413      	add	r3, r2
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff fe42 	bl	8009192 <ld_clust>
 800950e:	4602      	mov	r2, r0
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009514:	e7c0      	b.n	8009498 <follow_path+0x50>
			if (res != FR_OK) break;
 8009516:	bf00      	nop
 8009518:	e002      	b.n	8009520 <follow_path+0xd8>
				break;
 800951a:	bf00      	nop
 800951c:	e000      	b.n	8009520 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800951e:	bf00      	nop
			}
		}
	}

	return res;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800952a:	b480      	push	{r7}
 800952c:	b087      	sub	sp, #28
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009536:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d031      	beq.n	80095a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	e002      	b.n	800954e <get_ldnumber+0x24>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	3301      	adds	r3, #1
 800954c:	617b      	str	r3, [r7, #20]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b20      	cmp	r3, #32
 8009554:	d903      	bls.n	800955e <get_ldnumber+0x34>
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b3a      	cmp	r3, #58	; 0x3a
 800955c:	d1f4      	bne.n	8009548 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b3a      	cmp	r3, #58	; 0x3a
 8009564:	d11c      	bne.n	80095a0 <get_ldnumber+0x76>
			tp = *path;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	60fa      	str	r2, [r7, #12]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	3b30      	subs	r3, #48	; 0x30
 8009576:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b09      	cmp	r3, #9
 800957c:	d80e      	bhi.n	800959c <get_ldnumber+0x72>
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	429a      	cmp	r2, r3
 8009584:	d10a      	bne.n	800959c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d107      	bne.n	800959c <get_ldnumber+0x72>
					vol = (int)i;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3301      	adds	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	e002      	b.n	80095a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80095a0:	2300      	movs	r3, #0
 80095a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80095a4:	693b      	ldr	r3, [r7, #16]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	70da      	strb	r2, [r3, #3]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff f8d8 	bl	8008784 <move_window>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <check_fs+0x2a>
 80095da:	2304      	movs	r3, #4
 80095dc:	e038      	b.n	8009650 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3330      	adds	r3, #48	; 0x30
 80095e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fe1c 	bl	8008224 <ld_word>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d001      	beq.n	80095fc <check_fs+0x48>
 80095f8:	2303      	movs	r3, #3
 80095fa:	e029      	b.n	8009650 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009602:	2be9      	cmp	r3, #233	; 0xe9
 8009604:	d009      	beq.n	800961a <check_fs+0x66>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800960c:	2beb      	cmp	r3, #235	; 0xeb
 800960e:	d11e      	bne.n	800964e <check_fs+0x9a>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009616:	2b90      	cmp	r3, #144	; 0x90
 8009618:	d119      	bne.n	800964e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3330      	adds	r3, #48	; 0x30
 800961e:	3336      	adds	r3, #54	; 0x36
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fe17 	bl	8008254 <ld_dword>
 8009626:	4603      	mov	r3, r0
 8009628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800962c:	4a0a      	ldr	r2, [pc, #40]	; (8009658 <check_fs+0xa4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d101      	bne.n	8009636 <check_fs+0x82>
 8009632:	2300      	movs	r3, #0
 8009634:	e00c      	b.n	8009650 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3330      	adds	r3, #48	; 0x30
 800963a:	3352      	adds	r3, #82	; 0x52
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fe09 	bl	8008254 <ld_dword>
 8009642:	4603      	mov	r3, r0
 8009644:	4a05      	ldr	r2, [pc, #20]	; (800965c <check_fs+0xa8>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d101      	bne.n	800964e <check_fs+0x9a>
 800964a:	2300      	movs	r3, #0
 800964c:	e000      	b.n	8009650 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800964e:	2302      	movs	r3, #2
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	00544146 	.word	0x00544146
 800965c:	33544146 	.word	0x33544146

08009660 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b096      	sub	sp, #88	; 0x58
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff ff58 	bl	800952a <get_ldnumber>
 800967a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967e:	2b00      	cmp	r3, #0
 8009680:	da01      	bge.n	8009686 <find_volume+0x26>
 8009682:	230b      	movs	r3, #11
 8009684:	e22d      	b.n	8009ae2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009686:	4aa1      	ldr	r2, [pc, #644]	; (800990c <find_volume+0x2ac>)
 8009688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800968e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <find_volume+0x3a>
 8009696:	230c      	movs	r3, #12
 8009698:	e223      	b.n	8009ae2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800969e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	f023 0301 	bic.w	r3, r3, #1
 80096a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01a      	beq.n	80096e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fd17 	bl	80080e8 <disk_status>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80096c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10c      	bne.n	80096e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <find_volume+0x82>
 80096d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80096de:	230a      	movs	r3, #10
 80096e0:	e1ff      	b.n	8009ae2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80096e2:	2300      	movs	r3, #0
 80096e4:	e1fd      	b.n	8009ae2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	2200      	movs	r2, #0
 80096ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80096ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	785b      	ldrb	r3, [r3, #1]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe fd0f 	bl	800811c <disk_initialize>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009710:	2303      	movs	r3, #3
 8009712:	e1e6      	b.n	8009ae2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d007      	beq.n	800972a <find_volume+0xca>
 800971a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009726:	230a      	movs	r3, #10
 8009728:	e1db      	b.n	8009ae2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800972e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009732:	f7ff ff3f 	bl	80095b4 <check_fs>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800973c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009740:	2b02      	cmp	r3, #2
 8009742:	d149      	bne.n	80097d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009744:	2300      	movs	r3, #0
 8009746:	643b      	str	r3, [r7, #64]	; 0x40
 8009748:	e01e      	b.n	8009788 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009758:	4413      	add	r3, r2
 800975a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	3304      	adds	r3, #4
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d006      	beq.n	8009774 <find_volume+0x114>
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	3308      	adds	r3, #8
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fd72 	bl	8008254 <ld_dword>
 8009770:	4602      	mov	r2, r0
 8009772:	e000      	b.n	8009776 <find_volume+0x116>
 8009774:	2200      	movs	r2, #0
 8009776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	3358      	adds	r3, #88	; 0x58
 800977c:	443b      	add	r3, r7
 800977e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009784:	3301      	adds	r3, #1
 8009786:	643b      	str	r3, [r7, #64]	; 0x40
 8009788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800978a:	2b03      	cmp	r3, #3
 800978c:	d9dd      	bls.n	800974a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800978e:	2300      	movs	r3, #0
 8009790:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <find_volume+0x13e>
 8009798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979a:	3b01      	subs	r3, #1
 800979c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800979e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	3358      	adds	r3, #88	; 0x58
 80097a4:	443b      	add	r3, r7
 80097a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80097aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80097ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <find_volume+0x15e>
 80097b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097b6:	f7ff fefd 	bl	80095b4 <check_fs>
 80097ba:	4603      	mov	r3, r0
 80097bc:	e000      	b.n	80097c0 <find_volume+0x160>
 80097be:	2303      	movs	r3, #3
 80097c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80097c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d905      	bls.n	80097d8 <find_volume+0x178>
 80097cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ce:	3301      	adds	r3, #1
 80097d0:	643b      	str	r3, [r7, #64]	; 0x40
 80097d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d9e2      	bls.n	800979e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80097d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d101      	bne.n	80097e4 <find_volume+0x184>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e17e      	b.n	8009ae2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80097e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d901      	bls.n	80097f0 <find_volume+0x190>
 80097ec:	230d      	movs	r3, #13
 80097ee:	e178      	b.n	8009ae2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	3330      	adds	r3, #48	; 0x30
 80097f4:	330b      	adds	r3, #11
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fd14 	bl	8008224 <ld_word>
 80097fc:	4603      	mov	r3, r0
 80097fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009802:	d001      	beq.n	8009808 <find_volume+0x1a8>
 8009804:	230d      	movs	r3, #13
 8009806:	e16c      	b.n	8009ae2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	3330      	adds	r3, #48	; 0x30
 800980c:	3316      	adds	r3, #22
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fd08 	bl	8008224 <ld_word>
 8009814:	4603      	mov	r3, r0
 8009816:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <find_volume+0x1cc>
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	3330      	adds	r3, #48	; 0x30
 8009822:	3324      	adds	r3, #36	; 0x24
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fd15 	bl	8008254 <ld_dword>
 800982a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009830:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	789b      	ldrb	r3, [r3, #2]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d005      	beq.n	8009850 <find_volume+0x1f0>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	789b      	ldrb	r3, [r3, #2]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d001      	beq.n	8009850 <find_volume+0x1f0>
 800984c:	230d      	movs	r3, #13
 800984e:	e148      	b.n	8009ae2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	789b      	ldrb	r3, [r3, #2]
 8009854:	461a      	mov	r2, r3
 8009856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009858:	fb02 f303 	mul.w	r3, r2, r3
 800985c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009864:	b29a      	uxth	r2, r3
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	895b      	ldrh	r3, [r3, #10]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d008      	beq.n	8009884 <find_volume+0x224>
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	895b      	ldrh	r3, [r3, #10]
 8009876:	461a      	mov	r2, r3
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	895b      	ldrh	r3, [r3, #10]
 800987c:	3b01      	subs	r3, #1
 800987e:	4013      	ands	r3, r2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <find_volume+0x228>
 8009884:	230d      	movs	r3, #13
 8009886:	e12c      	b.n	8009ae2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	3330      	adds	r3, #48	; 0x30
 800988c:	3311      	adds	r3, #17
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fcc8 	bl	8008224 <ld_word>
 8009894:	4603      	mov	r3, r0
 8009896:	461a      	mov	r2, r3
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	891b      	ldrh	r3, [r3, #8]
 80098a0:	f003 030f 	and.w	r3, r3, #15
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <find_volume+0x24e>
 80098aa:	230d      	movs	r3, #13
 80098ac:	e119      	b.n	8009ae2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	3330      	adds	r3, #48	; 0x30
 80098b2:	3313      	adds	r3, #19
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fcb5 	bl	8008224 <ld_word>
 80098ba:	4603      	mov	r3, r0
 80098bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80098be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <find_volume+0x272>
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	3330      	adds	r3, #48	; 0x30
 80098c8:	3320      	adds	r3, #32
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fcc2 	bl	8008254 <ld_dword>
 80098d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	3330      	adds	r3, #48	; 0x30
 80098d6:	330e      	adds	r3, #14
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe fca3 	bl	8008224 <ld_word>
 80098de:	4603      	mov	r3, r0
 80098e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80098e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <find_volume+0x28c>
 80098e8:	230d      	movs	r3, #13
 80098ea:	e0fa      	b.n	8009ae2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80098ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f0:	4413      	add	r3, r2
 80098f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098f4:	8912      	ldrh	r2, [r2, #8]
 80098f6:	0912      	lsrs	r2, r2, #4
 80098f8:	b292      	uxth	r2, r2
 80098fa:	4413      	add	r3, r2
 80098fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009902:	429a      	cmp	r2, r3
 8009904:	d204      	bcs.n	8009910 <find_volume+0x2b0>
 8009906:	230d      	movs	r3, #13
 8009908:	e0eb      	b.n	8009ae2 <find_volume+0x482>
 800990a:	bf00      	nop
 800990c:	200069f4 	.word	0x200069f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009918:	8952      	ldrh	r2, [r2, #10]
 800991a:	fbb3 f3f2 	udiv	r3, r3, r2
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <find_volume+0x2ca>
 8009926:	230d      	movs	r3, #13
 8009928:	e0db      	b.n	8009ae2 <find_volume+0x482>
		fmt = FS_FAT32;
 800992a:	2303      	movs	r3, #3
 800992c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009936:	4293      	cmp	r3, r2
 8009938:	d802      	bhi.n	8009940 <find_volume+0x2e0>
 800993a:	2302      	movs	r3, #2
 800993c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009946:	4293      	cmp	r3, r2
 8009948:	d802      	bhi.n	8009950 <find_volume+0x2f0>
 800994a:	2301      	movs	r3, #1
 800994c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	1c9a      	adds	r2, r3, #2
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800995c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800995e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009962:	441a      	add	r2, r3
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	441a      	add	r2, r3
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009976:	2b03      	cmp	r3, #3
 8009978:	d11e      	bne.n	80099b8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	3330      	adds	r3, #48	; 0x30
 800997e:	332a      	adds	r3, #42	; 0x2a
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fc4f 	bl	8008224 <ld_word>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <find_volume+0x330>
 800998c:	230d      	movs	r3, #13
 800998e:	e0a8      	b.n	8009ae2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	891b      	ldrh	r3, [r3, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <find_volume+0x33c>
 8009998:	230d      	movs	r3, #13
 800999a:	e0a2      	b.n	8009ae2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	3330      	adds	r3, #48	; 0x30
 80099a0:	332c      	adds	r3, #44	; 0x2c
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fc56 	bl	8008254 <ld_dword>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	647b      	str	r3, [r7, #68]	; 0x44
 80099b6:	e01f      	b.n	80099f8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	891b      	ldrh	r3, [r3, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <find_volume+0x364>
 80099c0:	230d      	movs	r3, #13
 80099c2:	e08e      	b.n	8009ae2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	6a1a      	ldr	r2, [r3, #32]
 80099c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ca:	441a      	add	r2, r3
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80099d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d103      	bne.n	80099e0 <find_volume+0x380>
 80099d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	e00a      	b.n	80099f6 <find_volume+0x396>
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	695a      	ldr	r2, [r3, #20]
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	085a      	lsrs	r2, r3, #1
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	699a      	ldr	r2, [r3, #24]
 80099fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a02:	0a5b      	lsrs	r3, r3, #9
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d201      	bcs.n	8009a0c <find_volume+0x3ac>
 8009a08:	230d      	movs	r3, #13
 8009a0a:	e06a      	b.n	8009ae2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a12:	611a      	str	r2, [r3, #16]
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	691a      	ldr	r2, [r3, #16]
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	2280      	movs	r2, #128	; 0x80
 8009a20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d149      	bne.n	8009abe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	3330      	adds	r3, #48	; 0x30
 8009a2e:	3330      	adds	r3, #48	; 0x30
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe fbf7 	bl	8008224 <ld_word>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d140      	bne.n	8009abe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a3e:	3301      	adds	r3, #1
 8009a40:	4619      	mov	r1, r3
 8009a42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a44:	f7fe fe9e 	bl	8008784 <move_window>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d137      	bne.n	8009abe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	2200      	movs	r2, #0
 8009a52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	3330      	adds	r3, #48	; 0x30
 8009a58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe fbe1 	bl	8008224 <ld_word>
 8009a62:	4603      	mov	r3, r0
 8009a64:	461a      	mov	r2, r3
 8009a66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d127      	bne.n	8009abe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	3330      	adds	r3, #48	; 0x30
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fbee 	bl	8008254 <ld_dword>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	4a1c      	ldr	r2, [pc, #112]	; (8009aec <find_volume+0x48c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d11e      	bne.n	8009abe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	3330      	adds	r3, #48	; 0x30
 8009a84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe fbe3 	bl	8008254 <ld_dword>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4a17      	ldr	r2, [pc, #92]	; (8009af0 <find_volume+0x490>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d113      	bne.n	8009abe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a98:	3330      	adds	r3, #48	; 0x30
 8009a9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fbd8 	bl	8008254 <ld_dword>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	3330      	adds	r3, #48	; 0x30
 8009aae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fbce 	bl	8008254 <ld_dword>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009ac4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ac6:	4b0b      	ldr	r3, [pc, #44]	; (8009af4 <find_volume+0x494>)
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	3301      	adds	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <find_volume+0x494>)
 8009ad0:	801a      	strh	r2, [r3, #0]
 8009ad2:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <find_volume+0x494>)
 8009ad4:	881a      	ldrh	r2, [r3, #0]
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ada:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009adc:	f7fe fdea 	bl	80086b4 <clear_lock>
#endif
	return FR_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3758      	adds	r7, #88	; 0x58
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	41615252 	.word	0x41615252
 8009af0:	61417272 	.word	0x61417272
 8009af4:	200069f8 	.word	0x200069f8

08009af8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b02:	2309      	movs	r3, #9
 8009b04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01c      	beq.n	8009b46 <validate+0x4e>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d018      	beq.n	8009b46 <validate+0x4e>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d013      	beq.n	8009b46 <validate+0x4e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	889a      	ldrh	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	88db      	ldrh	r3, [r3, #6]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d10c      	bne.n	8009b46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fad8 	bl	80080e8 <disk_status>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <validate+0x4e>
			res = FR_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <validate+0x5a>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	e000      	b.n	8009b54 <validate+0x5c>
 8009b52:	2300      	movs	r3, #0
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	6013      	str	r3, [r2, #0]
	return res;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b76:	f107 0310 	add.w	r3, r7, #16
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fcd5 	bl	800952a <get_ldnumber>
 8009b80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da01      	bge.n	8009b8c <f_mount+0x28>
 8009b88:	230b      	movs	r3, #11
 8009b8a:	e02b      	b.n	8009be4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b8c:	4a17      	ldr	r2, [pc, #92]	; (8009bec <f_mount+0x88>)
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b9c:	69b8      	ldr	r0, [r7, #24]
 8009b9e:	f7fe fd89 	bl	80086b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	490d      	ldr	r1, [pc, #52]	; (8009bec <f_mount+0x88>)
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <f_mount+0x66>
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d001      	beq.n	8009bce <f_mount+0x6a>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e00a      	b.n	8009be4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009bce:	f107 010c 	add.w	r1, r7, #12
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff fd41 	bl	8009660 <find_volume>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3720      	adds	r7, #32
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	200069f4 	.word	0x200069f4

08009bf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b098      	sub	sp, #96	; 0x60
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <f_open+0x18>
 8009c04:	2309      	movs	r3, #9
 8009c06:	e1ad      	b.n	8009f64 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009c10:	79fa      	ldrb	r2, [r7, #7]
 8009c12:	f107 0110 	add.w	r1, r7, #16
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fd20 	bl	8009660 <find_volume>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f040 8191 	bne.w	8009f52 <f_open+0x362>
		dj.obj.fs = fs;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	f107 0314 	add.w	r3, r7, #20
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff fc03 	bl	8009448 <follow_path>
 8009c42:	4603      	mov	r3, r0
 8009c44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d11a      	bne.n	8009c86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c54:	b25b      	sxtb	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da03      	bge.n	8009c62 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c5a:	2306      	movs	r3, #6
 8009c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c60:	e011      	b.n	8009c86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	f023 0301 	bic.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf14      	ite	ne
 8009c6c:	2301      	movne	r3, #1
 8009c6e:	2300      	moveq	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fbd2 	bl	8008424 <chk_lock>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	f003 031c 	and.w	r3, r3, #28
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d07f      	beq.n	8009d90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d017      	beq.n	8009cc8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d10e      	bne.n	8009cbe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ca0:	f7fe fc1c 	bl	80084dc <enq_lock>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d006      	beq.n	8009cb8 <f_open+0xc8>
 8009caa:	f107 0314 	add.w	r3, r7, #20
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fb03 	bl	80092ba <dir_register>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	e000      	b.n	8009cba <f_open+0xca>
 8009cb8:	2312      	movs	r3, #18
 8009cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	f043 0308 	orr.w	r3, r3, #8
 8009cc4:	71fb      	strb	r3, [r7, #7]
 8009cc6:	e010      	b.n	8009cea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009cc8:	7ebb      	ldrb	r3, [r7, #26]
 8009cca:	f003 0311 	and.w	r3, r3, #17
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <f_open+0xea>
					res = FR_DENIED;
 8009cd2:	2307      	movs	r3, #7
 8009cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cd8:	e007      	b.n	8009cea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <f_open+0xfa>
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d168      	bne.n	8009dc4 <f_open+0x1d4>
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	f003 0308 	and.w	r3, r3, #8
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d063      	beq.n	8009dc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009cfc:	f7fd ffa4 	bl	8007c48 <get_fattime>
 8009d00:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d04:	330e      	adds	r3, #14
 8009d06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fae1 	bl	80082d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d10:	3316      	adds	r3, #22
 8009d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe fadb 	bl	80082d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1c:	330b      	adds	r3, #11
 8009d1e:	2220      	movs	r2, #32
 8009d20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff fa32 	bl	8009192 <ld_clust>
 8009d2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d34:	2200      	movs	r2, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff fa4a 	bl	80091d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3e:	331c      	adds	r3, #28
 8009d40:	2100      	movs	r1, #0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fac4 	bl	80082d0 <st_dword>
					fs->wflag = 1;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d037      	beq.n	8009dc4 <f_open+0x1d4>
						dw = fs->winsect;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009d5a:	f107 0314 	add.w	r3, r7, #20
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe ff5d 	bl	8008c22 <remove_chain>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d126      	bne.n	8009dc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fd02 	bl	8008784 <move_window>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d8a:	3a01      	subs	r2, #1
 8009d8c:	60da      	str	r2, [r3, #12]
 8009d8e:	e019      	b.n	8009dc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d115      	bne.n	8009dc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d98:	7ebb      	ldrb	r3, [r7, #26]
 8009d9a:	f003 0310 	and.w	r3, r3, #16
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <f_open+0x1ba>
					res = FR_NO_FILE;
 8009da2:	2304      	movs	r3, #4
 8009da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009da8:	e00c      	b.n	8009dc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d007      	beq.n	8009dc4 <f_open+0x1d4>
 8009db4:	7ebb      	ldrb	r3, [r7, #26]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <f_open+0x1d4>
						res = FR_DENIED;
 8009dbe:	2307      	movs	r3, #7
 8009dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d128      	bne.n	8009e1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	f003 0308 	and.w	r3, r3, #8
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ddc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	f023 0301 	bic.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bf14      	ite	ne
 8009df6:	2301      	movne	r3, #1
 8009df8:	2300      	moveq	r3, #0
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	f107 0314 	add.w	r3, r7, #20
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fb8b 	bl	8008520 <inc_lock>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <f_open+0x22e>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 8095 	bne.w	8009f52 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff f9af 	bl	8009192 <ld_clust>
 8009e34:	4602      	mov	r2, r0
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3c:	331c      	adds	r3, #28
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fa08 	bl	8008254 <ld_dword>
 8009e44:	4602      	mov	r2, r0
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	88da      	ldrh	r2, [r3, #6]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	79fa      	ldrb	r2, [r7, #7]
 8009e62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3330      	adds	r3, #48	; 0x30
 8009e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e7e:	2100      	movs	r1, #0
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe fa72 	bl	800836a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	f003 0320 	and.w	r3, r3, #32
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d060      	beq.n	8009f52 <f_open+0x362>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d05c      	beq.n	8009f52 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	895b      	ldrh	r3, [r3, #10]
 8009ea4:	025b      	lsls	r3, r3, #9
 8009ea6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8009eb4:	e016      	b.n	8009ee4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fd1d 	bl	80088fa <get_fat>
 8009ec0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d802      	bhi.n	8009ece <f_open+0x2de>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed4:	d102      	bne.n	8009edc <f_open+0x2ec>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <f_open+0x304>
 8009eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d8e0      	bhi.n	8009eb6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ef8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d127      	bne.n	8009f52 <f_open+0x362>
 8009f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d022      	beq.n	8009f52 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fcd3 	bl	80088bc <clust2sect>
 8009f16:	6478      	str	r0, [r7, #68]	; 0x44
 8009f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <f_open+0x336>
						res = FR_INT_ERR;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f24:	e015      	b.n	8009f52 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f28:	0a5a      	lsrs	r2, r3, #9
 8009f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	7858      	ldrb	r0, [r3, #1]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a1a      	ldr	r2, [r3, #32]
 8009f40:	2301      	movs	r3, #1
 8009f42:	f7fe f911 	bl	8008168 <disk_read>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <f_open+0x362>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <f_open+0x370>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3760      	adds	r7, #96	; 0x60
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08c      	sub	sp, #48	; 0x30
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f107 0210 	add.w	r2, r7, #16
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fdb3 	bl	8009af8 <validate>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d107      	bne.n	8009fb0 <f_write+0x44>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	7d5b      	ldrb	r3, [r3, #21]
 8009fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <f_write+0x4a>
 8009fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fb4:	e14b      	b.n	800a24e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	7d1b      	ldrb	r3, [r3, #20]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <f_write+0x5a>
 8009fc2:	2307      	movs	r3, #7
 8009fc4:	e143      	b.n	800a24e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	441a      	add	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	f080 812d 	bcs.w	800a232 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	43db      	mvns	r3, r3
 8009fde:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009fe0:	e127      	b.n	800a232 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f040 80e3 	bne.w	800a1b6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	0a5b      	lsrs	r3, r3, #9
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	8952      	ldrh	r2, [r2, #10]
 8009ffa:	3a01      	subs	r2, #1
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d143      	bne.n	800a08e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10c      	bne.n	800a028 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	2b00      	cmp	r3, #0
 800a018:	d11a      	bne.n	800a050 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2100      	movs	r1, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fe64 	bl	8008cec <create_chain>
 800a024:	62b8      	str	r0, [r7, #40]	; 0x28
 800a026:	e013      	b.n	800a050 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d007      	beq.n	800a040 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	4619      	mov	r1, r3
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7fe fef0 	bl	8008e1c <clmt_clust>
 800a03c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a03e:	e007      	b.n	800a050 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	4619      	mov	r1, r3
 800a048:	4610      	mov	r0, r2
 800a04a:	f7fe fe4f 	bl	8008cec <create_chain>
 800a04e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 80f2 	beq.w	800a23c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d104      	bne.n	800a068 <f_write+0xfc>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2202      	movs	r2, #2
 800a062:	755a      	strb	r2, [r3, #21]
 800a064:	2302      	movs	r3, #2
 800a066:	e0f2      	b.n	800a24e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a06e:	d104      	bne.n	800a07a <f_write+0x10e>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2201      	movs	r2, #1
 800a074:	755a      	strb	r2, [r3, #21]
 800a076:	2301      	movs	r3, #1
 800a078:	e0e9      	b.n	800a24e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a07e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <f_write+0x122>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7d1b      	ldrb	r3, [r3, #20]
 800a092:	b25b      	sxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	da18      	bge.n	800a0ca <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	7858      	ldrb	r0, [r3, #1]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f7fe f87e 	bl	80081a8 <disk_write>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d004      	beq.n	800a0bc <f_write+0x150>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	755a      	strb	r2, [r3, #21]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0c8      	b.n	800a24e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	7d1b      	ldrb	r3, [r3, #20]
 800a0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7fe fbf2 	bl	80088bc <clust2sect>
 800a0d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d104      	bne.n	800a0ea <f_write+0x17e>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	755a      	strb	r2, [r3, #21]
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e0b1      	b.n	800a24e <f_write+0x2e2>
			sect += csect;
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d03c      	beq.n	800a178 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	4413      	add	r3, r2
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	8952      	ldrh	r2, [r2, #10]
 800a108:	4293      	cmp	r3, r2
 800a10a:	d905      	bls.n	800a118 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	895b      	ldrh	r3, [r3, #10]
 800a110:	461a      	mov	r2, r3
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	7858      	ldrb	r0, [r3, #1]
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	69f9      	ldr	r1, [r7, #28]
 800a122:	f7fe f841 	bl	80081a8 <disk_write>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <f_write+0x1ca>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2201      	movs	r2, #1
 800a130:	755a      	strb	r2, [r3, #21]
 800a132:	2301      	movs	r3, #1
 800a134:	e08b      	b.n	800a24e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a1a      	ldr	r2, [r3, #32]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	6a3a      	ldr	r2, [r7, #32]
 800a140:	429a      	cmp	r2, r3
 800a142:	d915      	bls.n	800a170 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6a1a      	ldr	r2, [r3, #32]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	025b      	lsls	r3, r3, #9
 800a154:	69fa      	ldr	r2, [r7, #28]
 800a156:	4413      	add	r3, r2
 800a158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15c:	4619      	mov	r1, r3
 800a15e:	f7fe f8e3 	bl	8008328 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	7d1b      	ldrb	r3, [r3, #20]
 800a166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	025b      	lsls	r3, r3, #9
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a176:	e03f      	b.n	800a1f8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d016      	beq.n	800a1b0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d210      	bcs.n	800a1b0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	7858      	ldrb	r0, [r3, #1]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a198:	2301      	movs	r3, #1
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	f7fd ffe4 	bl	8008168 <disk_read>
 800a1a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	755a      	strb	r2, [r3, #21]
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e04e      	b.n	800a24e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d901      	bls.n	800a1d0 <f_write+0x264>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1de:	4413      	add	r3, r2
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e2:	69f9      	ldr	r1, [r7, #28]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe f89f 	bl	8008328 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	7d1b      	ldrb	r3, [r3, #20]
 800a1ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a1f8:	69fa      	ldr	r2, [r7, #28]
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	4413      	add	r3, r2
 800a1fe:	61fb      	str	r3, [r7, #28]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	699a      	ldr	r2, [r3, #24]
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	441a      	add	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	619a      	str	r2, [r3, #24]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	68da      	ldr	r2, [r3, #12]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	429a      	cmp	r2, r3
 800a216:	bf38      	it	cc
 800a218:	461a      	movcc	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	60da      	str	r2, [r3, #12]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	441a      	add	r2, r3
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f aed4 	bne.w	8009fe2 <f_write+0x76>
 800a23a:	e000      	b.n	800a23e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a23c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	7d1b      	ldrb	r3, [r3, #20]
 800a242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a246:	b2da      	uxtb	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3730      	adds	r7, #48	; 0x30
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b086      	sub	sp, #24
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f107 0208 	add.w	r2, r7, #8
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff fc46 	bl	8009af8 <validate>
 800a26c:	4603      	mov	r3, r0
 800a26e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d168      	bne.n	800a348 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7d1b      	ldrb	r3, [r3, #20]
 800a27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d062      	beq.n	800a348 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7d1b      	ldrb	r3, [r3, #20]
 800a286:	b25b      	sxtb	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	da15      	bge.n	800a2b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	7858      	ldrb	r0, [r3, #1]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1a      	ldr	r2, [r3, #32]
 800a29a:	2301      	movs	r3, #1
 800a29c:	f7fd ff84 	bl	80081a8 <disk_write>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <f_sync+0x54>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e04f      	b.n	800a34a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7d1b      	ldrb	r3, [r3, #20]
 800a2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a2b8:	f7fd fcc6 	bl	8007c48 <get_fattime>
 800a2bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe fa5c 	bl	8008784 <move_window>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d138      	bne.n	800a348 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	330b      	adds	r3, #11
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	330b      	adds	r3, #11
 800a2e6:	f042 0220 	orr.w	r2, r2, #32
 800a2ea:	b2d2      	uxtb	r2, r2
 800a2ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	68f9      	ldr	r1, [r7, #12]
 800a2fa:	f7fe ff69 	bl	80091d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f103 021c 	add.w	r2, r3, #28
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	4619      	mov	r1, r3
 800a30a:	4610      	mov	r0, r2
 800a30c:	f7fd ffe0 	bl	80082d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3316      	adds	r3, #22
 800a314:	6939      	ldr	r1, [r7, #16]
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd ffda 	bl	80082d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3312      	adds	r3, #18
 800a320:	2100      	movs	r1, #0
 800a322:	4618      	mov	r0, r3
 800a324:	f7fd ffb9 	bl	800829a <st_word>
					fs->wflag = 1;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2201      	movs	r2, #1
 800a32c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fa55 	bl	80087e0 <sync_fs>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	7d1b      	ldrb	r3, [r3, #20]
 800a33e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a342:	b2da      	uxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a348:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff ff7b 	bl	800a256 <f_sync>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d118      	bne.n	800a39c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f107 0208 	add.w	r2, r7, #8
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fbc0 	bl	8009af8 <validate>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10c      	bne.n	800a39c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe f958 	bl	800863c <dec_lock>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b09d      	sub	sp, #116	; 0x74
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a3bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3c0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a3c2:	f107 030c 	add.w	r3, r7, #12
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff f8af 	bl	800952a <get_ldnumber>
 800a3cc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	da02      	bge.n	800a3da <f_mkfs+0x32>
 800a3d4:	230b      	movs	r3, #11
 800a3d6:	f000 bc0d 	b.w	800abf4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a3da:	4a94      	ldr	r2, [pc, #592]	; (800a62c <f_mkfs+0x284>)
 800a3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <f_mkfs+0x4a>
 800a3e6:	4a91      	ldr	r2, [pc, #580]	; (800a62c <f_mkfs+0x284>)
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a3fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a402:	4618      	mov	r0, r3
 800a404:	f7fd fe8a 	bl	800811c <disk_initialize>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a40e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <f_mkfs+0x76>
 800a41a:	2303      	movs	r3, #3
 800a41c:	e3ea      	b.n	800abf4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a41e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <f_mkfs+0x86>
 800a42a:	230a      	movs	r3, #10
 800a42c:	e3e2      	b.n	800abf4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a42e:	f107 0214 	add.w	r2, r7, #20
 800a432:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a436:	2103      	movs	r1, #3
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fd fed5 	bl	80081e8 <disk_ioctl>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10c      	bne.n	800a45e <f_mkfs+0xb6>
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d009      	beq.n	800a45e <f_mkfs+0xb6>
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a450:	d805      	bhi.n	800a45e <f_mkfs+0xb6>
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	4013      	ands	r3, r2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <f_mkfs+0xba>
 800a45e:	2301      	movs	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a462:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a466:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <f_mkfs+0xce>
 800a46e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	429a      	cmp	r2, r3
 800a474:	d309      	bcc.n	800a48a <f_mkfs+0xe2>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a47c:	d805      	bhi.n	800a48a <f_mkfs+0xe2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	1e5a      	subs	r2, r3, #1
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4013      	ands	r3, r2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <f_mkfs+0xe6>
 800a48a:	2313      	movs	r3, #19
 800a48c:	e3b2      	b.n	800abf4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a48e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	fbb2 f3f3 	udiv	r3, r2, r3
 800a496:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a49c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a49e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a4a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	fb02 f303 	mul.w	r3, r2, r3
 800a4b0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <f_mkfs+0x114>
 800a4b8:	230e      	movs	r3, #14
 800a4ba:	e39b      	b.n	800abf4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a4bc:	f107 0210 	add.w	r2, r7, #16
 800a4c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fd fe8e 	bl	80081e8 <disk_ioctl>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <f_mkfs+0x12e>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e38e      	b.n	800abf4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a4d6:	7afb      	ldrb	r3, [r7, #11]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <f_mkfs+0x13c>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e000      	b.n	800a4e6 <f_mkfs+0x13e>
 800a4e4:	233f      	movs	r3, #63	; 0x3f
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d901      	bls.n	800a4f4 <f_mkfs+0x14c>
 800a4f0:	230e      	movs	r3, #14
 800a4f2:	e37f      	b.n	800abf4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2b7f      	cmp	r3, #127	; 0x7f
 800a500:	d801      	bhi.n	800a506 <f_mkfs+0x15e>
 800a502:	230e      	movs	r3, #14
 800a504:	e376      	b.n	800abf4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b80      	cmp	r3, #128	; 0x80
 800a50a:	d901      	bls.n	800a510 <f_mkfs+0x168>
 800a50c:	2313      	movs	r3, #19
 800a50e:	e371      	b.n	800abf4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a510:	7afb      	ldrb	r3, [r7, #11]
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00d      	beq.n	800a536 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a51a:	7afb      	ldrb	r3, [r7, #11]
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	2b02      	cmp	r3, #2
 800a522:	d004      	beq.n	800a52e <f_mkfs+0x186>
 800a524:	7afb      	ldrb	r3, [r7, #11]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a52e:	2303      	movs	r3, #3
 800a530:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a534:	e009      	b.n	800a54a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <f_mkfs+0x19c>
 800a540:	2313      	movs	r3, #19
 800a542:	e357      	b.n	800abf4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a544:	2302      	movs	r3, #2
 800a546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a54e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a552:	2b03      	cmp	r3, #3
 800a554:	d13c      	bne.n	800a5d0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d11b      	bne.n	800a594 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	0c5b      	lsrs	r3, r3, #17
 800a560:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a562:	2300      	movs	r3, #0
 800a564:	64bb      	str	r3, [r7, #72]	; 0x48
 800a566:	2301      	movs	r3, #1
 800a568:	653b      	str	r3, [r7, #80]	; 0x50
 800a56a:	e005      	b.n	800a578 <f_mkfs+0x1d0>
 800a56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a56e:	3301      	adds	r3, #1
 800a570:	64bb      	str	r3, [r7, #72]	; 0x48
 800a572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	653b      	str	r3, [r7, #80]	; 0x50
 800a578:	4a2d      	ldr	r2, [pc, #180]	; (800a630 <f_mkfs+0x288>)
 800a57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d007      	beq.n	800a594 <f_mkfs+0x1ec>
 800a584:	4a2a      	ldr	r2, [pc, #168]	; (800a630 <f_mkfs+0x288>)
 800a586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a58c:	461a      	mov	r2, r3
 800a58e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a590:	4293      	cmp	r3, r2
 800a592:	d2eb      	bcs.n	800a56c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a598:	fbb2 f3f3 	udiv	r3, r2, r3
 800a59c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	009a      	lsls	r2, r3, #2
 800a5a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5a6:	4413      	add	r3, r2
 800a5a8:	1e5a      	subs	r2, r3, #1
 800a5aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a5b2:	2320      	movs	r3, #32
 800a5b4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d903      	bls.n	800a5cc <f_mkfs+0x224>
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	4a1b      	ldr	r2, [pc, #108]	; (800a634 <f_mkfs+0x28c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d952      	bls.n	800a672 <f_mkfs+0x2ca>
 800a5cc:	230e      	movs	r3, #14
 800a5ce:	e311      	b.n	800abf4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d11b      	bne.n	800a60e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	0b1b      	lsrs	r3, r3, #12
 800a5da:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a5dc:	2300      	movs	r3, #0
 800a5de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	653b      	str	r3, [r7, #80]	; 0x50
 800a5e4:	e005      	b.n	800a5f2 <f_mkfs+0x24a>
 800a5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ee:	005b      	lsls	r3, r3, #1
 800a5f0:	653b      	str	r3, [r7, #80]	; 0x50
 800a5f2:	4a11      	ldr	r2, [pc, #68]	; (800a638 <f_mkfs+0x290>)
 800a5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d007      	beq.n	800a60e <f_mkfs+0x266>
 800a5fe:	4a0e      	ldr	r2, [pc, #56]	; (800a638 <f_mkfs+0x290>)
 800a600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a606:	461a      	mov	r2, r3
 800a608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d2eb      	bcs.n	800a5e6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a612:	fbb2 f3f3 	udiv	r3, r2, r3
 800a616:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a61e:	4293      	cmp	r3, r2
 800a620:	d90c      	bls.n	800a63c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	3302      	adds	r3, #2
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a62a:	e012      	b.n	800a652 <f_mkfs+0x2aa>
 800a62c:	200069f4 	.word	0x200069f4
 800a630:	0800b474 	.word	0x0800b474
 800a634:	0ffffff5 	.word	0x0ffffff5
 800a638:	0800b484 	.word	0x0800b484
				} else {
					fmt = FS_FAT12;
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a642:	6a3a      	ldr	r2, [r7, #32]
 800a644:	4613      	mov	r3, r2
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	4413      	add	r3, r2
 800a64a:	3301      	adds	r3, #1
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	3303      	adds	r3, #3
 800a650:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a652:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a656:	4413      	add	r3, r2
 800a658:	1e5a      	subs	r2, r3, #1
 800a65a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a660:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a662:	2301      	movs	r3, #1
 800a664:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a670:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a676:	4413      	add	r3, r2
 800a678:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a67a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a67c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a67e:	fb03 f202 	mul.w	r2, r3, r2
 800a682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a684:	4413      	add	r3, r2
 800a686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a688:	4413      	add	r3, r2
 800a68a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	1e5a      	subs	r2, r3, #1
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	425b      	negs	r3, r3
 800a698:	401a      	ands	r2, r3
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a6a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d108      	bne.n	800a6ba <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a6a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6ac:	4413      	add	r3, r2
 800a6ae:	657b      	str	r3, [r7, #84]	; 0x54
 800a6b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6b4:	4413      	add	r3, r2
 800a6b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6b8:	e006      	b.n	800a6c8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a6ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6c4:	4413      	add	r3, r2
 800a6c6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ca:	011a      	lsls	r2, r3, #4
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	441a      	add	r2, r3
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	1ad2      	subs	r2, r2, r3
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d901      	bls.n	800a6de <f_mkfs+0x336>
 800a6da:	230e      	movs	r3, #14
 800a6dc:	e28a      	b.n	800abf4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6e8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ec:	1ad2      	subs	r2, r2, r3
 800a6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f0:	1ad2      	subs	r2, r2, r3
 800a6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a6fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d10f      	bne.n	800a722 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a708:	4293      	cmp	r3, r2
 800a70a:	d80a      	bhi.n	800a722 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d105      	bne.n	800a71e <f_mkfs+0x376>
 800a712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a714:	085b      	lsrs	r3, r3, #1
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d144      	bne.n	800a7a8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a71e:	230e      	movs	r3, #14
 800a720:	e268      	b.n	800abf4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a722:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a726:	2b02      	cmp	r3, #2
 800a728:	d133      	bne.n	800a792 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a730:	4293      	cmp	r3, r2
 800a732:	d91e      	bls.n	800a772 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d107      	bne.n	800a74a <f_mkfs+0x3a2>
 800a73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73c:	005b      	lsls	r3, r3, #1
 800a73e:	2b40      	cmp	r3, #64	; 0x40
 800a740:	d803      	bhi.n	800a74a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	e033      	b.n	800a7b2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a754:	2303      	movs	r3, #3
 800a756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a75a:	e02a      	b.n	800a7b2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <f_mkfs+0x3c6>
 800a762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	607b      	str	r3, [r7, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b80      	cmp	r3, #128	; 0x80
 800a76c:	d91e      	bls.n	800a7ac <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a76e:	230e      	movs	r3, #14
 800a770:	e240      	b.n	800abf4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a778:	4293      	cmp	r3, r2
 800a77a:	d80a      	bhi.n	800a792 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d105      	bne.n	800a78e <f_mkfs+0x3e6>
 800a782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b80      	cmp	r3, #128	; 0x80
 800a78c:	d910      	bls.n	800a7b0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a78e:	230e      	movs	r3, #14
 800a790:	e230      	b.n	800abf4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a792:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a796:	2b01      	cmp	r3, #1
 800a798:	d10c      	bne.n	800a7b4 <f_mkfs+0x40c>
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d907      	bls.n	800a7b4 <f_mkfs+0x40c>
 800a7a4:	230e      	movs	r3, #14
 800a7a6:	e225      	b.n	800abf4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a7a8:	bf00      	nop
 800a7aa:	e6ce      	b.n	800a54a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7ac:	bf00      	nop
 800a7ae:	e6cc      	b.n	800a54a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7b0:	bf00      	nop
			pau = au;
 800a7b2:	e6ca      	b.n	800a54a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a7b4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a7b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7be:	f7fd fdd4 	bl	800836a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a7c2:	220b      	movs	r2, #11
 800a7c4:	49b2      	ldr	r1, [pc, #712]	; (800aa90 <f_mkfs+0x6e8>)
 800a7c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c8:	f7fd fdae 	bl	8008328 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	330b      	adds	r3, #11
 800a7d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fd fd60 	bl	800829a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	330d      	adds	r3, #13
 800a7de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	330e      	adds	r3, #14
 800a7e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fd fd53 	bl	800829a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	3310      	adds	r3, #16
 800a7f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7fa:	b2d2      	uxtb	r2, r2
 800a7fc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	f103 0211 	add.w	r2, r3, #17
 800a804:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a808:	2b03      	cmp	r3, #3
 800a80a:	d002      	beq.n	800a812 <f_mkfs+0x46a>
 800a80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80e:	b29b      	uxth	r3, r3
 800a810:	e000      	b.n	800a814 <f_mkfs+0x46c>
 800a812:	2300      	movs	r3, #0
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f7fd fd3f 	bl	800829a <st_word>
		if (sz_vol < 0x10000) {
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a822:	d208      	bcs.n	800a836 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	3313      	adds	r3, #19
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	b292      	uxth	r2, r2
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd fd33 	bl	800829a <st_word>
 800a834:	e006      	b.n	800a844 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	3320      	adds	r3, #32
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd fd46 	bl	80082d0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	3315      	adds	r3, #21
 800a848:	22f8      	movs	r2, #248	; 0xf8
 800a84a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	3318      	adds	r3, #24
 800a850:	213f      	movs	r1, #63	; 0x3f
 800a852:	4618      	mov	r0, r3
 800a854:	f7fd fd21 	bl	800829a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	331a      	adds	r3, #26
 800a85c:	21ff      	movs	r1, #255	; 0xff
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fd fd1b 	bl	800829a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	331c      	adds	r3, #28
 800a868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fd fd30 	bl	80082d0 <st_dword>
		if (fmt == FS_FAT32) {
 800a870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a874:	2b03      	cmp	r3, #3
 800a876:	d131      	bne.n	800a8dc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800a87e:	f7fd f9e3 	bl	8007c48 <get_fattime>
 800a882:	4603      	mov	r3, r0
 800a884:	4619      	mov	r1, r3
 800a886:	4620      	mov	r0, r4
 800a888:	f7fd fd22 	bl	80082d0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a892:	4618      	mov	r0, r3
 800a894:	f7fd fd1c 	bl	80082d0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	332c      	adds	r3, #44	; 0x2c
 800a89c:	2102      	movs	r1, #2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fd16 	bl	80082d0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	3330      	adds	r3, #48	; 0x30
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fd fcf5 	bl	800829a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	3332      	adds	r3, #50	; 0x32
 800a8b4:	2106      	movs	r1, #6
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd fcef 	bl	800829a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	3340      	adds	r3, #64	; 0x40
 800a8c0:	2280      	movs	r2, #128	; 0x80
 800a8c2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	3342      	adds	r3, #66	; 0x42
 800a8c8:	2229      	movs	r2, #41	; 0x29
 800a8ca:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	3347      	adds	r3, #71	; 0x47
 800a8d0:	2213      	movs	r2, #19
 800a8d2:	4970      	ldr	r1, [pc, #448]	; (800aa94 <f_mkfs+0x6ec>)
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fd fd27 	bl	8008328 <mem_cpy>
 800a8da:	e020      	b.n	800a91e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a8e2:	f7fd f9b1 	bl	8007c48 <get_fattime>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7fd fcf0 	bl	80082d0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	3316      	adds	r3, #22
 800a8f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8f6:	b292      	uxth	r2, r2
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fd fccd 	bl	800829a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	3324      	adds	r3, #36	; 0x24
 800a904:	2280      	movs	r2, #128	; 0x80
 800a906:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	3326      	adds	r3, #38	; 0x26
 800a90c:	2229      	movs	r2, #41	; 0x29
 800a90e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	332b      	adds	r3, #43	; 0x2b
 800a914:	2213      	movs	r2, #19
 800a916:	4960      	ldr	r1, [pc, #384]	; (800aa98 <f_mkfs+0x6f0>)
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fd fd05 	bl	8008328 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a924:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fd fcb6 	bl	800829a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a92e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a932:	2301      	movs	r3, #1
 800a934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a938:	f7fd fc36 	bl	80081a8 <disk_write>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <f_mkfs+0x59e>
 800a942:	2301      	movs	r3, #1
 800a944:	e156      	b.n	800abf4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a946:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d140      	bne.n	800a9d0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	1d9a      	adds	r2, r3, #6
 800a952:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a956:	2301      	movs	r3, #1
 800a958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a95a:	f7fd fc25 	bl	80081a8 <disk_write>
			mem_set(buf, 0, ss);
 800a95e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a960:	461a      	mov	r2, r3
 800a962:	2100      	movs	r1, #0
 800a964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a966:	f7fd fd00 	bl	800836a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a96a:	494c      	ldr	r1, [pc, #304]	; (800aa9c <f_mkfs+0x6f4>)
 800a96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a96e:	f7fd fcaf 	bl	80082d0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a978:	4949      	ldr	r1, [pc, #292]	; (800aaa0 <f_mkfs+0x6f8>)
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fd fca8 	bl	80082d0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	3b01      	subs	r3, #1
 800a98a:	4619      	mov	r1, r3
 800a98c:	4610      	mov	r0, r2
 800a98e:	f7fd fc9f 	bl	80082d0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a998:	2102      	movs	r1, #2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fd fc98 	bl	80082d0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fd fc75 	bl	800829a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	1dda      	adds	r2, r3, #7
 800a9b4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9bc:	f7fd fbf4 	bl	80081a8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9cc:	f7fd fbec 	bl	80081a8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d6:	f7fd fcc8 	bl	800836a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a9da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9dc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a9de:	2300      	movs	r3, #0
 800a9e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9e2:	e04b      	b.n	800aa7c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a9e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d113      	bne.n	800aa14 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a9ec:	f06f 0107 	mvn.w	r1, #7
 800a9f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f2:	f7fd fc6d 	bl	80082d0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd fc66 	bl	80082d0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	3308      	adds	r3, #8
 800aa08:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fd fc5f 	bl	80082d0 <st_dword>
 800aa12:	e00b      	b.n	800aa2c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800aa14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d101      	bne.n	800aa20 <f_mkfs+0x678>
 800aa1c:	4b21      	ldr	r3, [pc, #132]	; (800aaa4 <f_mkfs+0x6fc>)
 800aa1e:	e001      	b.n	800aa24 <f_mkfs+0x67c>
 800aa20:	f06f 0307 	mvn.w	r3, #7
 800aa24:	4619      	mov	r1, r3
 800aa26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa28:	f7fd fc52 	bl	80082d0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800aa2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa2e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800aa30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bf28      	it	cs
 800aa38:	4613      	movcs	r3, r2
 800aa3a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800aa3c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aa40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa46:	f7fd fbaf 	bl	80081a8 <disk_write>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <f_mkfs+0x6ac>
 800aa50:	2301      	movs	r3, #1
 800aa52:	e0cf      	b.n	800abf4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800aa54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa56:	461a      	mov	r2, r3
 800aa58:	2100      	movs	r1, #0
 800aa5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa5c:	f7fd fc85 	bl	800836a <mem_set>
				sect += n; nsect -= n;
 800aa60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa64:	4413      	add	r3, r2
 800aa66:	667b      	str	r3, [r7, #100]	; 0x64
 800aa68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800aa70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1dc      	bne.n	800aa30 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800aa76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa78:	3301      	adds	r3, #1
 800aa7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d3af      	bcc.n	800a9e4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800aa84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d10d      	bne.n	800aaa8 <f_mkfs+0x700>
 800aa8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa8e:	e00c      	b.n	800aaaa <f_mkfs+0x702>
 800aa90:	0800b38c 	.word	0x0800b38c
 800aa94:	0800b398 	.word	0x0800b398
 800aa98:	0800b3ac 	.word	0x0800b3ac
 800aa9c:	41615252 	.word	0x41615252
 800aaa0:	61417272 	.word	0x61417272
 800aaa4:	00fffff8 	.word	0x00fffff8
 800aaa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaaa:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800aaac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	4293      	cmp	r3, r2
 800aab2:	bf28      	it	cs
 800aab4:	4613      	movcs	r3, r2
 800aab6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800aab8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aabc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aabe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aac2:	f7fd fb71 	bl	80081a8 <disk_write>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <f_mkfs+0x728>
 800aacc:	2301      	movs	r3, #1
 800aace:	e091      	b.n	800abf4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800aad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aad4:	4413      	add	r3, r2
 800aad6:	667b      	str	r3, [r7, #100]	; 0x64
 800aad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800aae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e2      	bne.n	800aaac <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800aae6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d103      	bne.n	800aaf6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800aaee:	230c      	movs	r3, #12
 800aaf0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800aaf4:	e010      	b.n	800ab18 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aafc:	d303      	bcc.n	800ab06 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800aafe:	2306      	movs	r3, #6
 800ab00:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ab04:	e008      	b.n	800ab18 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ab06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d101      	bne.n	800ab12 <f_mkfs+0x76a>
 800ab0e:	2304      	movs	r3, #4
 800ab10:	e000      	b.n	800ab14 <f_mkfs+0x76c>
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	f003 0308 	and.w	r3, r3, #8
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d15b      	bne.n	800abda <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ab22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab24:	461a      	mov	r2, r3
 800ab26:	2100      	movs	r1, #0
 800ab28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2a:	f7fd fc1e 	bl	800836a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fd fbae 	bl	800829a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab44:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	2201      	movs	r2, #1
 800ab52:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	3302      	adds	r3, #2
 800ab58:	2201      	movs	r2, #1
 800ab5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	3303      	adds	r3, #3
 800ab60:	2200      	movs	r2, #0
 800ab62:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	3304      	adds	r3, #4
 800ab68:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ab6c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	441a      	add	r2, r3
 800ab74:	4b21      	ldr	r3, [pc, #132]	; (800abfc <f_mkfs+0x854>)
 800ab76:	fba3 1302 	umull	r1, r3, r3, r2
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	0852      	lsrs	r2, r2, #1
 800ab7e:	4413      	add	r3, r2
 800ab80:	0b5b      	lsrs	r3, r3, #13
 800ab82:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	3305      	adds	r3, #5
 800ab88:	22fe      	movs	r2, #254	; 0xfe
 800ab8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ab8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab8e:	089b      	lsrs	r3, r3, #2
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	3306      	adds	r3, #6
 800ab96:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ab9a:	b2d2      	uxtb	r2, r2
 800ab9c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	3307      	adds	r3, #7
 800aba2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	3308      	adds	r3, #8
 800abac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fd fb8e 	bl	80082d0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	330c      	adds	r3, #12
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	4611      	mov	r1, r2
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fd fb87 	bl	80082d0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800abc2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800abc6:	2301      	movs	r3, #1
 800abc8:	2200      	movs	r2, #0
 800abca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abcc:	f7fd faec 	bl	80081a8 <disk_write>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <f_mkfs+0x832>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e00c      	b.n	800abf4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800abda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abde:	2200      	movs	r2, #0
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fd fb00 	bl	80081e8 <disk_ioctl>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <f_mkfs+0x84a>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <f_mkfs+0x84c>

	return FR_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3774      	adds	r7, #116	; 0x74
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd90      	pop	{r4, r7, pc}
 800abfc:	0515565b 	.word	0x0515565b

0800ac00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac16:	4b1f      	ldr	r3, [pc, #124]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac18:	7a5b      	ldrb	r3, [r3, #9]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d131      	bne.n	800ac84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac20:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac22:	7a5b      	ldrb	r3, [r3, #9]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac2e:	4b19      	ldr	r3, [pc, #100]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	4a17      	ldr	r2, [pc, #92]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac3e:	4b15      	ldr	r3, [pc, #84]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac40:	7a5b      	ldrb	r3, [r3, #9]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac48:	4413      	add	r3, r2
 800ac4a:	79fa      	ldrb	r2, [r7, #7]
 800ac4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac50:	7a5b      	ldrb	r3, [r3, #9]
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	b2d1      	uxtb	r1, r2
 800ac58:	4a0e      	ldr	r2, [pc, #56]	; (800ac94 <FATFS_LinkDriverEx+0x94>)
 800ac5a:	7251      	strb	r1, [r2, #9]
 800ac5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac5e:	7dbb      	ldrb	r3, [r7, #22]
 800ac60:	3330      	adds	r3, #48	; 0x30
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	223a      	movs	r2, #58	; 0x3a
 800ac6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	3302      	adds	r3, #2
 800ac74:	222f      	movs	r2, #47	; 0x2f
 800ac76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3303      	adds	r3, #3
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20006a1c 	.word	0x20006a1c

0800ac98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aca2:	2200      	movs	r2, #0
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff ffaa 	bl	800ac00 <FATFS_LinkDriverEx>
 800acac:	4603      	mov	r3, r0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a08      	ldr	r2, [pc, #32]	; (800ace4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d103      	bne.n	800acd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800acc8:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800acca:	2201      	movs	r2, #1
 800accc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800acce:	e002      	b.n	800acd6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800acd0:	4b06      	ldr	r3, [pc, #24]	; (800acec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	601a      	str	r2, [r3, #0]
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	20000094 	.word	0x20000094
 800ace8:	20006278 	.word	0x20006278
 800acec:	20006280 	.word	0x20006280

0800acf0 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a08      	ldr	r2, [pc, #32]	; (800ad1c <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d103      	bne.n	800ad08 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800ad02:	2201      	movs	r2, #1
 800ad04:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800ad06:	e002      	b.n	800ad0e <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]
}
 800ad0e:	bf00      	nop
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20000094 	.word	0x20000094
 800ad20:	2000627c 	.word	0x2000627c
 800ad24:	20006284 	.word	0x20006284

0800ad28 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800ad2e:	4b82      	ldr	r3, [pc, #520]	; (800af38 <checkMicrophone+0x210>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d17a      	bne.n	800ae2c <checkMicrophone+0x104>
 800ad36:	4b81      	ldr	r3, [pc, #516]	; (800af3c <checkMicrophone+0x214>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d176      	bne.n	800ae2c <checkMicrophone+0x104>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800ad3e:	2300      	movs	r3, #0
 800ad40:	607b      	str	r3, [r7, #4]
 800ad42:	e069      	b.n	800ae18 <checkMicrophone+0xf0>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800ad44:	4a7e      	ldr	r2, [pc, #504]	; (800af40 <checkMicrophone+0x218>)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad4c:	121b      	asrs	r3, r3, #8
 800ad4e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ad52:	db0b      	blt.n	800ad6c <checkMicrophone+0x44>
 800ad54:	4a7a      	ldr	r2, [pc, #488]	; (800af40 <checkMicrophone+0x218>)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad5c:	121b      	asrs	r3, r3, #8
 800ad5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ad62:	4293      	cmp	r3, r2
 800ad64:	bfa8      	it	ge
 800ad66:	4613      	movge	r3, r2
 800ad68:	b21a      	sxth	r2, r3
 800ad6a:	e000      	b.n	800ad6e <checkMicrophone+0x46>
 800ad6c:	4a75      	ldr	r2, [pc, #468]	; (800af44 <checkMicrophone+0x21c>)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4975      	ldr	r1, [pc, #468]	; (800af48 <checkMicrophone+0x220>)
 800ad74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 800ad78:	4a74      	ldr	r2, [pc, #464]	; (800af4c <checkMicrophone+0x224>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad80:	121b      	asrs	r3, r3, #8
 800ad82:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ad86:	db0b      	blt.n	800ada0 <checkMicrophone+0x78>
 800ad88:	4a70      	ldr	r2, [pc, #448]	; (800af4c <checkMicrophone+0x224>)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad90:	121b      	asrs	r3, r3, #8
 800ad92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ad96:	4293      	cmp	r3, r2
 800ad98:	bfa8      	it	ge
 800ad9a:	4613      	movge	r3, r2
 800ad9c:	b21a      	sxth	r2, r3
 800ad9e:	e000      	b.n	800ada2 <checkMicrophone+0x7a>
 800ada0:	4a68      	ldr	r2, [pc, #416]	; (800af44 <checkMicrophone+0x21c>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	3301      	adds	r3, #1
 800ada8:	4967      	ldr	r1, [pc, #412]	; (800af48 <checkMicrophone+0x220>)
 800adaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800adae:	4b68      	ldr	r3, [pc, #416]	; (800af50 <checkMicrophone+0x228>)
 800adb0:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800adb4:	791b      	ldrb	r3, [r3, #4]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d025      	beq.n	800ae06 <checkMicrophone+0xde>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800adba:	4a61      	ldr	r2, [pc, #388]	; (800af40 <checkMicrophone+0x218>)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc2:	121b      	asrs	r3, r3, #8
 800adc4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800adc8:	db0b      	blt.n	800ade2 <checkMicrophone+0xba>
 800adca:	4a5d      	ldr	r2, [pc, #372]	; (800af40 <checkMicrophone+0x218>)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800add2:	121b      	asrs	r3, r3, #8
 800add4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800add8:	4293      	cmp	r3, r2
 800adda:	bfa8      	it	ge
 800addc:	4613      	movge	r3, r2
 800adde:	b29a      	uxth	r2, r3
 800ade0:	e001      	b.n	800ade6 <checkMicrophone+0xbe>
 800ade2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ade6:	4b5a      	ldr	r3, [pc, #360]	; (800af50 <checkMicrophone+0x228>)
 800ade8:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	4958      	ldr	r1, [pc, #352]	; (800af50 <checkMicrophone+0x228>)
 800adf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800adf4:	4b56      	ldr	r3, [pc, #344]	; (800af50 <checkMicrophone+0x228>)
 800adf6:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	3301      	adds	r3, #1
 800adfe:	4a54      	ldr	r2, [pc, #336]	; (800af50 <checkMicrophone+0x228>)
 800ae00:	f502 3234 	add.w	r2, r2, #184320	; 0x2d000
 800ae04:	60d3      	str	r3, [r2, #12]
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800ae06:	4b52      	ldr	r3, [pc, #328]	; (800af50 <checkMicrophone+0x228>)
 800ae08:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f5b3 3fb4 	cmp.w	r3, #92160	; 0x16800
		for(int i = 0; i < 1024; i++)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3301      	adds	r3, #1
 800ae16:	607b      	str	r3, [r7, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae1e:	db91      	blt.n	800ad44 <checkMicrophone+0x1c>
				Error_Handler();
			}
			PlaybackStarted = 1;*/
		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800ae20:	4b45      	ldr	r3, [pc, #276]	; (800af38 <checkMicrophone+0x210>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800ae26:	4b45      	ldr	r3, [pc, #276]	; (800af3c <checkMicrophone+0x214>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800ae2c:	4b49      	ldr	r3, [pc, #292]	; (800af54 <checkMicrophone+0x22c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d17b      	bne.n	800af2c <checkMicrophone+0x204>
 800ae34:	4b48      	ldr	r3, [pc, #288]	; (800af58 <checkMicrophone+0x230>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d177      	bne.n	800af2c <checkMicrophone+0x204>
	{
		for(int i = 1024; i < 2048; i++)
 800ae3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	e069      	b.n	800af18 <checkMicrophone+0x1f0>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800ae44:	4a3e      	ldr	r2, [pc, #248]	; (800af40 <checkMicrophone+0x218>)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4c:	121b      	asrs	r3, r3, #8
 800ae4e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ae52:	db0b      	blt.n	800ae6c <checkMicrophone+0x144>
 800ae54:	4a3a      	ldr	r2, [pc, #232]	; (800af40 <checkMicrophone+0x218>)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae5c:	121b      	asrs	r3, r3, #8
 800ae5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae62:	4293      	cmp	r3, r2
 800ae64:	bfa8      	it	ge
 800ae66:	4613      	movge	r3, r2
 800ae68:	b21a      	sxth	r2, r3
 800ae6a:	e000      	b.n	800ae6e <checkMicrophone+0x146>
 800ae6c:	4a35      	ldr	r2, [pc, #212]	; (800af44 <checkMicrophone+0x21c>)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	005b      	lsls	r3, r3, #1
 800ae72:	4935      	ldr	r1, [pc, #212]	; (800af48 <checkMicrophone+0x220>)
 800ae74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 800ae78:	4a34      	ldr	r2, [pc, #208]	; (800af4c <checkMicrophone+0x224>)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae80:	121b      	asrs	r3, r3, #8
 800ae82:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ae86:	db0b      	blt.n	800aea0 <checkMicrophone+0x178>
 800ae88:	4a30      	ldr	r2, [pc, #192]	; (800af4c <checkMicrophone+0x224>)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae90:	121b      	asrs	r3, r3, #8
 800ae92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae96:	4293      	cmp	r3, r2
 800ae98:	bfa8      	it	ge
 800ae9a:	4613      	movge	r3, r2
 800ae9c:	b21a      	sxth	r2, r3
 800ae9e:	e000      	b.n	800aea2 <checkMicrophone+0x17a>
 800aea0:	4a28      	ldr	r2, [pc, #160]	; (800af44 <checkMicrophone+0x21c>)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	3301      	adds	r3, #1
 800aea8:	4927      	ldr	r1, [pc, #156]	; (800af48 <checkMicrophone+0x220>)
 800aeaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800aeae:	4b28      	ldr	r3, [pc, #160]	; (800af50 <checkMicrophone+0x228>)
 800aeb0:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800aeb4:	791b      	ldrb	r3, [r3, #4]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d025      	beq.n	800af06 <checkMicrophone+0x1de>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800aeba:	4a21      	ldr	r2, [pc, #132]	; (800af40 <checkMicrophone+0x218>)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec2:	121b      	asrs	r3, r3, #8
 800aec4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800aec8:	db0b      	blt.n	800aee2 <checkMicrophone+0x1ba>
 800aeca:	4a1d      	ldr	r2, [pc, #116]	; (800af40 <checkMicrophone+0x218>)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed2:	121b      	asrs	r3, r3, #8
 800aed4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aed8:	4293      	cmp	r3, r2
 800aeda:	bfa8      	it	ge
 800aedc:	4613      	movge	r3, r2
 800aede:	b29a      	uxth	r2, r3
 800aee0:	e001      	b.n	800aee6 <checkMicrophone+0x1be>
 800aee2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800aee6:	4b1a      	ldr	r3, [pc, #104]	; (800af50 <checkMicrophone+0x228>)
 800aee8:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	4918      	ldr	r1, [pc, #96]	; (800af50 <checkMicrophone+0x228>)
 800aef0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800aef4:	4b16      	ldr	r3, [pc, #88]	; (800af50 <checkMicrophone+0x228>)
 800aef6:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	3301      	adds	r3, #1
 800aefe:	4a14      	ldr	r2, [pc, #80]	; (800af50 <checkMicrophone+0x228>)
 800af00:	f502 3234 	add.w	r2, r2, #184320	; 0x2d000
 800af04:	60d3      	str	r3, [r2, #12]
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800af06:	4b12      	ldr	r3, [pc, #72]	; (800af50 <checkMicrophone+0x228>)
 800af08:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f5b3 3fb4 	cmp.w	r3, #92160	; 0x16800
		for(int i = 1024; i < 2048; i++)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af1e:	db91      	blt.n	800ae44 <checkMicrophone+0x11c>
			{
				BufferCtl.wr_state!= BUFFER_FULL;
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800af20:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <checkMicrophone+0x22c>)
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <checkMicrophone+0x230>)
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
	}
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20006278 	.word	0x20006278
 800af3c:	20006280 	.word	0x20006280
 800af40:	20000278 	.word	0x20000278
 800af44:	ffff8000 	.word	0xffff8000
 800af48:	20004278 	.word	0x20004278
 800af4c:	20002278 	.word	0x20002278
 800af50:	20006c54 	.word	0x20006c54
 800af54:	2000627c 	.word	0x2000627c
 800af58:	20006284 	.word	0x20006284

0800af5c <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800af62:	2200      	movs	r2, #0
 800af64:	490f      	ldr	r1, [pc, #60]	; (800afa4 <SDInit+0x48>)
 800af66:	4810      	ldr	r0, [pc, #64]	; (800afa8 <SDInit+0x4c>)
 800af68:	f7fe fdfc 	bl	8009b64 <f_mount>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d002      	beq.n	800af78 <SDInit+0x1c>
	      {
	          Error_Handler();
 800af72:	f7f6 f857 	bl	8001024 <Error_Handler>
 800af76:	e010      	b.n	800af9a <SDInit+0x3e>
	      }
	      else
	      {
	    	  //creates an FAT/exFAT volume on the logical drive
	    	  int val = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 800af78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	4b0b      	ldr	r3, [pc, #44]	; (800afac <SDInit+0x50>)
 800af80:	2200      	movs	r2, #0
 800af82:	2107      	movs	r1, #7
 800af84:	4807      	ldr	r0, [pc, #28]	; (800afa4 <SDInit+0x48>)
 800af86:	f7ff fa0f 	bl	800a3a8 <f_mkfs>
 800af8a:	4603      	mov	r3, r0
 800af8c:	607b      	str	r3, [r7, #4]
	          if(val != FR_OK)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <SDInit+0x3e>
	          {
	        	  return -1;
 800af94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af98:	e000      	b.n	800af9c <SDInit+0x40>
	          }
	      }
	return 0;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20006588 	.word	0x20006588
 800afa8:	2000658c 	.word	0x2000658c
 800afac:	20006a28 	.word	0x20006a28

0800afb0 <createFile>:

int createFile(char* file_name)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  if(f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800afb8:	220a      	movs	r2, #10
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4806      	ldr	r0, [pc, #24]	; (800afd8 <createFile+0x28>)
 800afbe:	f7fe fe17 	bl	8009bf0 <f_open>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <createFile+0x1e>
	  {
		  return -1;
 800afc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afcc:	e000      	b.n	800afd0 <createFile+0x20>
	  }
	  return 0;
 800afce:	2300      	movs	r3, #0

}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	200067bc 	.word	0x200067bc

0800afdc <writeToFile>:
int writeToFile(char* text, int size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	f107 030c 	add.w	r3, r7, #12
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4804      	ldr	r0, [pc, #16]	; (800b000 <writeToFile+0x24>)
 800aff0:	f7fe ffbc 	bl	8009f6c <f_write>
	return byteswritten;
 800aff4:	68fb      	ldr	r3, [r7, #12]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	200067bc 	.word	0x200067bc

0800b004 <SDclose>:
int SDclose()
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800b008:	4802      	ldr	r0, [pc, #8]	; (800b014 <SDclose+0x10>)
 800b00a:	f7ff f9a2 	bl	800a352 <f_close>
	return 0;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	bd80      	pop	{r7, pc}
 800b014:	200067bc 	.word	0x200067bc

0800b018 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800b022:	88fb      	ldrh	r3, [r7, #6]
 800b024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b028:	d117      	bne.n	800b05a <HAL_GPIO_EXTI_Callback+0x42>
	  recording = !recording;
 800b02a:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bf0c      	ite	eq
 800b032:	2301      	moveq	r3, #1
 800b034:	2300      	movne	r3, #0
 800b036:	b2db      	uxtb	r3, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b03c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !recording);
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	bf0c      	ite	eq
 800b046:	2301      	moveq	r3, #1
 800b048:	2300      	movne	r3, #0
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b052:	4805      	ldr	r0, [pc, #20]	; (800b068 <HAL_GPIO_EXTI_Callback+0x50>)
 800b054:	f7f8 fa32 	bl	80034bc <HAL_GPIO_WritePin>
  } else {
      __NOP();
  }
}
 800b058:	e000      	b.n	800b05c <HAL_GPIO_EXTI_Callback+0x44>
      __NOP();
 800b05a:	bf00      	nop
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20000274 	.word	0x20000274
 800b068:	40022000 	.word	0x40022000

0800b06c <WavProcess_EncInit>:
AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800b076:	4a1b      	ldr	r2, [pc, #108]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800b07c:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b07e:	2201      	movs	r2, #1
 800b080:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800b082:	4b18      	ldr	r3, [pc, #96]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b084:	2210      	movs	r2, #16
 800b086:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800b088:	4b16      	ldr	r3, [pc, #88]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b08a:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <WavProcess_EncInit+0x7c>)
 800b08c:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800b08e:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b090:	222c      	movs	r2, #44	; 0x2c
 800b092:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b094:	4b13      	ldr	r3, [pc, #76]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b096:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800b098:	4a12      	ldr	r2, [pc, #72]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b09a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800b09c:	08d2      	lsrs	r2, r2, #3
 800b09e:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b0a0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800b0a4:	4a0f      	ldr	r2, [pc, #60]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b0a6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b0ac:	4a0d      	ldr	r2, [pc, #52]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b0ae:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b0b0:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b0b2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800b0b4:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b0b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b0b8:	08db      	lsrs	r3, r3, #3
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	fb12 f303 	smulbb	r3, r2, r3
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b0c4:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800b0c6:	4a09      	ldr	r2, [pc, #36]	; (800b0ec <WavProcess_EncInit+0x80>)
 800b0c8:	4906      	ldr	r1, [pc, #24]	; (800b0e4 <WavProcess_EncInit+0x78>)
 800b0ca:	6838      	ldr	r0, [r7, #0]
 800b0cc:	f000 f810 	bl	800b0f0 <WavProcess_HeaderInit>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <WavProcess_EncInit+0x6e>
  {
    return 1;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e000      	b.n	800b0dc <WavProcess_EncInit+0x70>
  }
  return 0;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20006c28 	.word	0x20006c28
 800b0e8:	001d4c00 	.word	0x001d4c00
 800b0ec:	20006c54 	.word	0x20006c54

0800b0f0 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2252      	movs	r2, #82	; 0x52
 800b100:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3301      	adds	r3, #1
 800b106:	2249      	movs	r2, #73	; 0x49
 800b108:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3302      	adds	r3, #2
 800b10e:	2246      	movs	r2, #70	; 0x46
 800b110:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3303      	adds	r3, #3
 800b116:	2246      	movs	r2, #70	; 0x46
 800b118:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->fptr);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3304      	adds	r3, #4
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->fptr >> 8);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	0a1a      	lsrs	r2, r3, #8
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3305      	adds	r3, #5
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->fptr >> 16);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	0c1a      	lsrs	r2, r3, #16
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3306      	adds	r3, #6
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->fptr >> 24);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	0e1a      	lsrs	r2, r3, #24
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3307      	adds	r3, #7
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3308      	adds	r3, #8
 800b164:	2257      	movs	r2, #87	; 0x57
 800b166:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3309      	adds	r3, #9
 800b16c:	2241      	movs	r2, #65	; 0x41
 800b16e:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	330a      	adds	r3, #10
 800b174:	2256      	movs	r2, #86	; 0x56
 800b176:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	330b      	adds	r3, #11
 800b17c:	2245      	movs	r2, #69	; 0x45
 800b17e:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	330c      	adds	r3, #12
 800b184:	2266      	movs	r2, #102	; 0x66
 800b186:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	330d      	adds	r3, #13
 800b18c:	226d      	movs	r2, #109	; 0x6d
 800b18e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	330e      	adds	r3, #14
 800b194:	2274      	movs	r2, #116	; 0x74
 800b196:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	330f      	adds	r3, #15
 800b19c:	2220      	movs	r2, #32
 800b19e:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3310      	adds	r3, #16
 800b1a4:	2210      	movs	r2, #16
 800b1a6:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3311      	adds	r3, #17
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3312      	adds	r3, #18
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3313      	adds	r3, #19
 800b1bc:	2200      	movs	r2, #0
 800b1be:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3314      	adds	r3, #20
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3315      	adds	r3, #21
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	8ada      	ldrh	r2, [r3, #22]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	3316      	adds	r3, #22
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3317      	adds	r3, #23
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	699a      	ldr	r2, [r3, #24]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3318      	adds	r3, #24
 800b1ec:	b2d2      	uxtb	r2, r2
 800b1ee:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	0a1a      	lsrs	r2, r3, #8
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3319      	adds	r3, #25
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	0c1a      	lsrs	r2, r3, #16
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	331a      	adds	r3, #26
 800b208:	b2d2      	uxtb	r2, r2
 800b20a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	0e1a      	lsrs	r2, r3, #24
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	331b      	adds	r3, #27
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	69da      	ldr	r2, [r3, #28]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	331c      	adds	r3, #28
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	0a1a      	lsrs	r2, r3, #8
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	331d      	adds	r3, #29
 800b230:	b2d2      	uxtb	r2, r2
 800b232:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	0c1a      	lsrs	r2, r3, #16
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	331e      	adds	r3, #30
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	69db      	ldr	r3, [r3, #28]
 800b246:	0e1a      	lsrs	r2, r3, #24
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	331f      	adds	r3, #31
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	8c1a      	ldrh	r2, [r3, #32]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3320      	adds	r3, #32
 800b258:	b2d2      	uxtb	r2, r2
 800b25a:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	3321      	adds	r3, #33	; 0x21
 800b260:	2200      	movs	r2, #0
 800b262:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3322      	adds	r3, #34	; 0x22
 800b26c:	b2d2      	uxtb	r2, r2
 800b26e:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3323      	adds	r3, #35	; 0x23
 800b274:	2200      	movs	r2, #0
 800b276:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3324      	adds	r3, #36	; 0x24
 800b27c:	2264      	movs	r2, #100	; 0x64
 800b27e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3325      	adds	r3, #37	; 0x25
 800b284:	2261      	movs	r2, #97	; 0x61
 800b286:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	3326      	adds	r3, #38	; 0x26
 800b28c:	2274      	movs	r2, #116	; 0x74
 800b28e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3327      	adds	r3, #39	; 0x27
 800b294:	2261      	movs	r2, #97	; 0x61
 800b296:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->fptr -=44;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	3b2c      	subs	r3, #44	; 0x2c
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	f502 3234 	add.w	r2, r2, #184320	; 0x2d000
 800b2a8:	60d3      	str	r3, [r2, #12]
  pHeader[40] = (uint8_t)(BufferCtl->fptr);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3328      	adds	r3, #40	; 0x28
 800b2b6:	b2d2      	uxtb	r2, r2
 800b2b8:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->fptr >> 8);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	0a1a      	lsrs	r2, r3, #8
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3329      	adds	r3, #41	; 0x29
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->fptr >> 16);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	0c1a      	lsrs	r2, r3, #16
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	332a      	adds	r3, #42	; 0x2a
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->fptr >> 24);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	0e1a      	lsrs	r2, r3, #24
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	332b      	adds	r3, #43	; 0x2b
 800b2ec:	b2d2      	uxtb	r2, r2
 800b2ee:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <__libc_init_array>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	4d0d      	ldr	r5, [pc, #52]	; (800b338 <__libc_init_array+0x38>)
 800b304:	4c0d      	ldr	r4, [pc, #52]	; (800b33c <__libc_init_array+0x3c>)
 800b306:	1b64      	subs	r4, r4, r5
 800b308:	10a4      	asrs	r4, r4, #2
 800b30a:	2600      	movs	r6, #0
 800b30c:	42a6      	cmp	r6, r4
 800b30e:	d109      	bne.n	800b324 <__libc_init_array+0x24>
 800b310:	4d0b      	ldr	r5, [pc, #44]	; (800b340 <__libc_init_array+0x40>)
 800b312:	4c0c      	ldr	r4, [pc, #48]	; (800b344 <__libc_init_array+0x44>)
 800b314:	f000 f820 	bl	800b358 <_init>
 800b318:	1b64      	subs	r4, r4, r5
 800b31a:	10a4      	asrs	r4, r4, #2
 800b31c:	2600      	movs	r6, #0
 800b31e:	42a6      	cmp	r6, r4
 800b320:	d105      	bne.n	800b32e <__libc_init_array+0x2e>
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	f855 3b04 	ldr.w	r3, [r5], #4
 800b328:	4798      	blx	r3
 800b32a:	3601      	adds	r6, #1
 800b32c:	e7ee      	b.n	800b30c <__libc_init_array+0xc>
 800b32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b332:	4798      	blx	r3
 800b334:	3601      	adds	r6, #1
 800b336:	e7f2      	b.n	800b31e <__libc_init_array+0x1e>
 800b338:	0800b49c 	.word	0x0800b49c
 800b33c:	0800b49c 	.word	0x0800b49c
 800b340:	0800b49c 	.word	0x0800b49c
 800b344:	0800b4a0 	.word	0x0800b4a0

0800b348 <memset>:
 800b348:	4402      	add	r2, r0
 800b34a:	4603      	mov	r3, r0
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d100      	bne.n	800b352 <memset+0xa>
 800b350:	4770      	bx	lr
 800b352:	f803 1b01 	strb.w	r1, [r3], #1
 800b356:	e7f9      	b.n	800b34c <memset+0x4>

0800b358 <_init>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr

0800b364 <_fini>:
 800b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b366:	bf00      	nop
 800b368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b36a:	bc08      	pop	{r3}
 800b36c:	469e      	mov	lr, r3
 800b36e:	4770      	bx	lr
