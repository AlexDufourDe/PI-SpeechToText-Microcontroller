
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8dc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0015eb30  0800eae0  0800eae0  0001eae0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0816d610  0816d610  0018141c  2**0
                  CONTENTS
  4 .ARM          00000008  0816d610  0816d610  0017d610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0816d618  0816d618  0018141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0816d618  0816d618  0017d618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0816d61c  0816d61c  0017d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  0816d620  00180000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000893c  2000141c  0816ea3c  0018141c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20009d58  0816ea3c  00189d58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0018141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021624  00000000  00000000  0018144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f1  00000000  00000000  001a2a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  001a7d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  001a9678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000362c4  00000000  00000000  001aad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025745  00000000  00000000  001e0fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00134c1b  00000000  00000000  00206721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0033b33c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006520  00000000  00000000  0033b38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000141c 	.word	0x2000141c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800eabc 	.word	0x0800eabc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20001420 	.word	0x20001420
 8000234:	0800eabc 	.word	0x0800eabc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <MX_ADC1_Init+0x9c>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_ADC1_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ADC1_Init+0x98>)
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <MX_ADC1_Init+0xa0>)
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_ADC1_Init+0x98>)
 800058a:	2201      	movs	r2, #1
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x98>)
 800059e:	f001 fa63 	bl	8001a68 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a8:	f000 fd86 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_ADC1_Init+0xa4>)
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_ADC1_Init+0x98>)
 80005be:	f001 fa97 	bl	8001af0 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c8:	f000 fd76 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20001438 	.word	0x20001438
 80005d8:	40012000 	.word	0x40012000
 80005dc:	0f000001 	.word	0x0f000001
 80005e0:	10000012 	.word	0x10000012

080005e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_ADC_MspInit+0x38>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10b      	bne.n	800060e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40012000 	.word	0x40012000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f001 fdb1 	bl	80021b4 <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f000 fd2e 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20001480 	.word	0x20001480
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80006ac:	4b63      	ldr	r3, [pc, #396]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ae:	4a64      	ldr	r2, [pc, #400]	; (8000840 <MX_DFSDM1_Init+0x198>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006b2:	4b62      	ldr	r3, [pc, #392]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80006b8:	4b60      	ldr	r3, [pc, #384]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80006be:	4b5f      	ldr	r3, [pc, #380]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 80006ca:	4b5c      	ldr	r3, [pc, #368]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80006d6:	4b59      	ldr	r3, [pc, #356]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80006dc:	4b57      	ldr	r3, [pc, #348]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 80006ec:	4b53      	ldr	r3, [pc, #332]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ee:	22b0      	movs	r2, #176	; 0xb0
 80006f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80006f2:	4b52      	ldr	r3, [pc, #328]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006fa:	f001 ff05 	bl	8002508 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <MX_DFSDM1_Init+0x1a0>)
 8000702:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000704:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800070a:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800070c:	2201      	movs	r2, #1
 800070e:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000710:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000712:	2201      	movs	r2, #1
 8000714:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000716:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 800071c:	4b49      	ldr	r3, [pc, #292]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800071e:	2201      	movs	r2, #1
 8000720:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 8000722:	4b48      	ldr	r3, [pc, #288]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000724:	2200      	movs	r2, #0
 8000726:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000728:	4b46      	ldr	r3, [pc, #280]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800072e:	4b45      	ldr	r3, [pc, #276]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000734:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000736:	4b43      	ldr	r3, [pc, #268]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000738:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800073c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000740:	22b0      	movs	r2, #176	; 0xb0
 8000742:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000746:	2201      	movs	r2, #1
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800074a:	483e      	ldr	r0, [pc, #248]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800074c:	f001 fedc 	bl	8002508 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_DFSDM1_Init+0x1a8>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000762:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000766:	2204      	movs	r2, #4
 8000768:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000786:	2204      	movs	r2, #4
 8000788:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80007a2:	482a      	ldr	r0, [pc, #168]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 80007a4:	f001 fdf0 	bl	8002388 <HAL_DFSDM_ChannelInit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 80007ae:	f000 fc83 	bl	80010b8 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_DFSDM1_Init+0x1b0>)
 80007b6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f2:	220a      	movs	r2, #10
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007fe:	2202      	movs	r2, #2
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 8000804:	f001 fdc0 	bl	8002388 <HAL_DFSDM_ChannelInit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 800080e:	f000 fc53 	bl	80010b8 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000812:	2201      	movs	r2, #1
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000818:	f001 ff50 	bl	80026bc <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 800081c:	490f      	ldr	r1, [pc, #60]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000820:	f001 ff92 	bl	8002748 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000824:	2201      	movs	r2, #1
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800082a:	f001 ff47 	bl	80026bc <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 800082e:	2101      	movs	r1, #1
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000832:	f001 ff89 	bl	8002748 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200014a4 	.word	0x200014a4
 8000840:	40017500 	.word	0x40017500
 8000844:	200014f8 	.word	0x200014f8
 8000848:	40017580 	.word	0x40017580
 800084c:	2000154c 	.word	0x2000154c
 8000850:	40017400 	.word	0x40017400
 8000854:	20001584 	.word	0x20001584
 8000858:	40017420 	.word	0x40017420
 800085c:	00010002 	.word	0x00010002

08000860 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000878:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d145      	bne.n	800090c <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000880:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10b      	bne.n	80008aa <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a5e      	ldr	r2, [pc, #376]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a58      	ldr	r2, [pc, #352]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80008d2:	230a      	movs	r3, #10
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	484d      	ldr	r0, [pc, #308]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008de:	f002 fb73 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e2:	2308      	movs	r3, #8
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4845      	ldr	r0, [pc, #276]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008fe:	f002 fb63 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800090a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d137      	bne.n	8000986 <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000918:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <HAL_DFSDM_FilterMspInit+0x1c0>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000922:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000936:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800093a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000956:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800095e:	482f      	ldr	r0, [pc, #188]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000960:	f001 ff8c 	bl	800287c <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 800096a:	f000 fba5 	bl	80010b8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
 8000980:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_DFSDM_FilterMspInit+0x1c4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d137      	bne.n	8000a00 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009da:	f001 ff4f 	bl	800287c <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 80009e4:	f000 fb68 	bl	80010b8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20001680 	.word	0x20001680
 8000a0c:	2000167c 	.word	0x2000167c
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40017500 	.word	0x40017500
 8000a1c:	200015bc 	.word	0x200015bc
 8000a20:	40026410 	.word	0x40026410
 8000a24:	40017580 	.word	0x40017580
 8000a28:	2000161c 	.word	0x2000161c
 8000a2c:	40026488 	.word	0x40026488

08000a30 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d145      	bne.n	8000adc <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10b      	bne.n	8000a7a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000aae:	f002 fa8b 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ace:	f002 fa7b 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ada:	6013      	str	r3, [r2, #0]
  }
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20001680 	.word	0x20001680
 8000ae8:	2000167c 	.word	0x2000167c
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_DMA_Init+0x78>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <MX_DMA_Init+0x78>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_DMA_Init+0x78>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2038      	movs	r0, #56	; 0x38
 8000b18:	f001 fb15 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1c:	2038      	movs	r0, #56	; 0x38
 8000b1e:	f001 fb2e 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2039      	movs	r0, #57	; 0x39
 8000b28:	f001 fb0d 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b2c:	2039      	movs	r0, #57	; 0x39
 8000b2e:	f001 fb26 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	203b      	movs	r0, #59	; 0x3b
 8000b38:	f001 fb05 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b3c:	203b      	movs	r0, #59	; 0x3b
 8000b3e:	f001 fb1e 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2044      	movs	r0, #68	; 0x44
 8000b48:	f001 fafd 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000b4c:	2044      	movs	r0, #68	; 0x44
 8000b4e:	f001 fb16 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2045      	movs	r0, #69	; 0x45
 8000b58:	f001 faf5 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b5c:	2045      	movs	r0, #69	; 0x45
 8000b5e:	f001 fb0e 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a5c      	ldr	r2, [pc, #368]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b5a      	ldr	r3, [pc, #360]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a56      	ldr	r2, [pc, #344]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a4a      	ldr	r2, [pc, #296]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a44      	ldr	r2, [pc, #272]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c16:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a38      	ldr	r2, [pc, #224]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a2c      	ldr	r2, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_GPIO_Init+0x18c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c64:	4826      	ldr	r0, [pc, #152]	; (8000d00 <MX_GPIO_Init+0x190>)
 8000c66:	f002 fb73 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210b      	movs	r1, #11
 8000c6e:	4825      	ldr	r0, [pc, #148]	; (8000d04 <MX_GPIO_Init+0x194>)
 8000c70:	f002 fb6e 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <MX_GPIO_Init+0x198>)
 8000c8c:	f002 f99c 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_GPIO_Init+0x190>)
 8000caa:	f002 f98d 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480f      	ldr	r0, [pc, #60]	; (8000d04 <MX_GPIO_Init+0x194>)
 8000cc6:	f002 f97f 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <MX_GPIO_Init+0x19c>)
 8000ce0:	f002 f972 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2028      	movs	r0, #40	; 0x28
 8000cea:	f001 fa2c 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cee:	2028      	movs	r0, #40	; 0x28
 8000cf0:	f001 fa45 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40022000 	.word	0x40022000
 8000d04:	40022400 	.word	0x40022400
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
}
 8000d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d1a:	f3bf 8f6f 	isb	sy
}
 8000d1e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <SCB_EnableICache+0x48>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d28:	f3bf 8f4f 	dsb	sy
}
 8000d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d2e:	f3bf 8f6f 	isb	sy
}
 8000d32:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <SCB_EnableICache+0x48>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <SCB_EnableICache+0x48>)
 8000d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
}
 8000d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d46:	f3bf 8f6f 	isb	sy
}
 8000d4a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6a:	f3bf 8f4f 	dsb	sy
}
 8000d6e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	0b5b      	lsrs	r3, r3, #13
 8000d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d80:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d8a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	015a      	lsls	r2, r3, #5
 8000d90:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d94:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d9a:	4911      	ldr	r1, [pc, #68]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1ef      	bne.n	8000d8c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	60fa      	str	r2, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e5      	bne.n	8000d82 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
}
 8000dba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <SCB_EnableDCache+0x84>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
}
 8000dcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dce:	f3bf 8f6f 	isb	sy
}
 8000dd2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char file_path[FILE_LIST_SIZE] [35]={"down_c.txt","down_e.txt","go_e.txt","left_c.txt",
 8000dee:	f248 0328 	movw	r3, #32808	; 0x8028
 8000df2:	443b      	add	r3, r7
 8000df4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000df8:	4a58      	ldr	r2, [pc, #352]	; (8000f5c <main+0x178>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	f240 230d 	movw	r3, #525	; 0x20d
 8000e02:	461a      	mov	r2, r3
 8000e04:	f00d fda8 	bl	800e958 <memcpy>
	float32_t input_buffer [BUFFER_FLOAT_SIZE];

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e08:	f7ff ff82 	bl	8000d10 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e0c:	f7ff ffa6 	bl	8000d5c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 fda9 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f8ae 	bl	8000f74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e18:	f000 f91e 	bl	8001058 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f7ff fea8 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e20:	f7ff fe68 	bl	8000af4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000e24:	f7ff fc40 	bl	80006a8 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000e28:	f000 f9e6 	bl	80011f8 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000e2c:	f7ff fb86 	bl	800053c <MX_ADC1_Init>
  MX_UART4_Init();
 8000e30:	f000 fcbe 	bl	80017b0 <MX_UART4_Init>
  MX_CRC_Init();
 8000e34:	f7ff fbf6 	bl	8000624 <MX_CRC_Init>
  MX_RTC_Init();
 8000e38:	f000 f944 	bl	80010c4 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000e3c:	f000 fae6 	bl	800140c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000e40:	f006 fe6c 	bl	8007b1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */


	SDInit();
 8000e44:	f009 ff2e 	bl	800aca4 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4e:	4844      	ldr	r0, [pc, #272]	; (8000f60 <main+0x17c>)
 8000e50:	f002 fa7e 	bl	8003350 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2101      	movs	r1, #1
 8000e58:	4842      	ldr	r0, [pc, #264]	; (8000f64 <main+0x180>)
 8000e5a:	f002 fa79 	bl	8003350 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2102      	movs	r1, #2
 8000e62:	4840      	ldr	r0, [pc, #256]	; (8000f64 <main+0x180>)
 8000e64:	f002 fa74 	bl	8003350 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2108      	movs	r1, #8
 8000e6c:	483d      	ldr	r0, [pc, #244]	; (8000f64 <main+0x180>)
 8000e6e:	f002 fa6f 	bl	8003350 <HAL_GPIO_WritePin>

	int file_count = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f248 0224 	movw	r2, #32804	; 0x8024
 8000e78:	443a      	add	r2, r7
 8000e7a:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	openFile(file_path[file_count]);
 8000e7c:	f647 6114 	movw	r1, #32276	; 0x7e14
 8000e80:	4439      	add	r1, r7
 8000e82:	f248 0324 	movw	r3, #32804	; 0x8024
 8000e86:	443b      	add	r3, r7
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	00da      	lsls	r2, r3, #3
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	188b      	adds	r3, r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 ff18 	bl	800accc <openFile>
		readFile((char*)input_buffer, BUFFER_BYTE_SIZE);
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <main+0x184>)
 8000e9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000ea2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8000eac:	4618      	mov	r0, r3
 8000eae:	f009 ff25 	bl	800acfc <readFile>
		SDclose();
 8000eb2:	f009 ff37 	bl	800ad24 <SDclose>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	4828      	ldr	r0, [pc, #160]	; (8000f60 <main+0x17c>)
 8000ebe:	f002 fa47 	bl	8003350 <HAL_GPIO_WritePin>
		if (modelSetup()!= AI_OK)
 8000ec2:	f009 fe0b 	bl	800aadc <modelSetup>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <main+0xec>
		{
			Error_Handler();
 8000ecc:	f000 f8f4 	bl	80010b8 <Error_Handler>
		}
		outputs[file_count] = modelRun(input_buffer);
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <main+0x184>)
 8000ed2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000ed6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000eda:	443b      	add	r3, r7
 8000edc:	4618      	mov	r0, r3
 8000ede:	f009 fe6f 	bl	800abc0 <modelRun>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f248 0328 	movw	r3, #32808	; 0x8028
 8000eea:	443b      	add	r3, r7
 8000eec:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000ef0:	f248 0324 	movw	r3, #32804	; 0x8024
 8000ef4:	443b      	add	r3, r7
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4413      	add	r3, r2
 8000efa:	460a      	mov	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
		ledsShowValue(outputs[file_count]);
 8000efe:	f248 0328 	movw	r3, #32808	; 0x8028
 8000f02:	443b      	add	r3, r7
 8000f04:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000f08:	f248 0324 	movw	r3, #32804	; 0x8024
 8000f0c:	443b      	add	r3, r7
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f009 ff25 	bl	800ad64 <ledsShowValue>

		file_count = (file_count+1)%FILE_LIST_SIZE;
 8000f1a:	f248 0324 	movw	r3, #32804	; 0x8024
 8000f1e:	443b      	add	r3, r7
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <main+0x188>)
 8000f26:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	10d9      	asrs	r1, r3, #3
 8000f2e:	17d3      	asrs	r3, r2, #31
 8000f30:	1ac9      	subs	r1, r1, r3
 8000f32:	460b      	mov	r3, r1
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	1a5b      	subs	r3, r3, r1
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	f248 0224 	movw	r2, #32804	; 0x8024
 8000f3e:	443a      	add	r2, r7
 8000f40:	6013      	str	r3, [r2, #0]
		while(!click);
 8000f42:	bf00      	nop
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <main+0x18c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0fb      	beq.n	8000f44 <main+0x160>
		HAL_Delay(250);
 8000f4c:	20fa      	movs	r0, #250	; 0xfa
 8000f4e:	f000 fd67 	bl	8001a20 <HAL_Delay>
		click = 0;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <main+0x18c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
  {
 8000f58:	e790      	b.n	8000e7c <main+0x98>
 8000f5a:	bf00      	nop
 8000f5c:	0800eae0 	.word	0x0800eae0
 8000f60:	40022000 	.word	0x40022000
 8000f64:	40022400 	.word	0x40022400
 8000f68:	ffff7fdc 	.word	0xffff7fdc
 8000f6c:	88888889 	.word	0x88888889
 8000f70:	20001684 	.word	0x20001684

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2234      	movs	r2, #52	; 0x34
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00d fcf6 	bl	800e974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <SystemClock_Config+0xdc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <SystemClock_Config+0xdc>)
 8000f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <SystemClock_Config+0xdc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <SystemClock_Config+0xe0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <SystemClock_Config+0xe0>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <SystemClock_Config+0xe0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fe0:	2319      	movs	r3, #25
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000fe4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fa2a 	bl	8003454 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001006:	f000 f857 	bl	80010b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800100a:	f002 f9d3 	bl	80033b4 <HAL_PWREx_EnableOverDrive>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001014:	f000 f850 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001024:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001028:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	2107      	movs	r1, #7
 8001036:	4618      	mov	r0, r3
 8001038:	f002 fcba 	bl	80039b0 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001042:	f000 f839 	bl	80010b8 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	; 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0a4      	sub	sp, #144	; 0x90
 800105c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2290      	movs	r2, #144	; 0x90
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00d fc85 	bl	800e974 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <PeriphCommonClock_Config+0x5c>)
 800106c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 800106e:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001072:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001078:	2306      	movs	r3, #6
 800107a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001080:	2306      	movs	r3, #6
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001088:	2300      	movs	r3, #0
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 800108c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fe6d 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80010a8:	f000 f806 	bl	80010b8 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3790      	adds	r7, #144	; 0x90
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	18300000 	.word	0x18300000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_RTC_Init+0xd0>)
 80010de:	4a2e      	ldr	r2, [pc, #184]	; (8001198 <MX_RTC_Init+0xd4>)
 80010e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <MX_RTC_Init+0xd0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_RTC_Init+0xd0>)
 80010ea:	227f      	movs	r2, #127	; 0x7f
 80010ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <MX_RTC_Init+0xd0>)
 80010f0:	22ff      	movs	r2, #255	; 0xff
 80010f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <MX_RTC_Init+0xd0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_RTC_Init+0xd0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_RTC_Init+0xd0>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001106:	4823      	ldr	r0, [pc, #140]	; (8001194 <MX_RTC_Init+0xd0>)
 8001108:	f003 fbd2 	bl	80048b0 <HAL_RTC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001112:	f7ff ffd1 	bl	80010b8 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 8001116:	2100      	movs	r1, #0
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <MX_RTC_Init+0xd0>)
 800111a:	f003 fe27 	bl	8004d6c <HAL_RTCEx_BKUPRead>
 800111e:	4603      	mov	r3, r0
 8001120:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001124:	4293      	cmp	r3, r2
 8001126:	d02e      	beq.n	8001186 <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001128:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800112c:	2100      	movs	r1, #0
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <MX_RTC_Init+0xd0>)
 8001130:	f003 fe02 	bl	8004d38 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 8001134:	2314      	movs	r3, #20
 8001136:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 8001138:	2329      	movs	r3, #41	; 0x29
 800113a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 800113c:	2300      	movs	r3, #0
 800113e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2201      	movs	r2, #1
 800114c:	4619      	mov	r1, r3
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_RTC_Init+0xd0>)
 8001150:	f003 fc32 	bl	80049b8 <HAL_RTC_SetTime>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800115a:	f7ff ffad 	bl	80010b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800115e:	2301      	movs	r3, #1
 8001160:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8001162:	2301      	movs	r3, #1
 8001164:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 8001166:	2323      	movs	r3, #35	; 0x23
 8001168:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 800116a:	2323      	movs	r3, #35	; 0x23
 800116c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_RTC_Init+0xd0>)
 8001176:	f003 fcb9 	bl	8004aec <HAL_RTC_SetDate>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001180:	f7ff ff9a 	bl	80010b8 <Error_Handler>
  }
  return;
 8001184:	e001      	b.n	800118a <MX_RTC_Init+0xc6>
			return;
 8001186:	bf00      	nop
 8001188:	e000      	b.n	800118c <MX_RTC_Init+0xc8>
  return;
 800118a:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20001688 	.word	0x20001688
 8001198:	40002800 	.word	0x40002800

0800119c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0a6      	sub	sp, #152	; 0x98
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	2290      	movs	r2, #144	; 0x90
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00d fbe1 	bl	800e974 <memset>
  if(rtcHandle->Instance==RTC)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_RTC_MspInit+0x54>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d114      	bne.n	80011e6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011bc:	2320      	movs	r3, #32
 80011be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fdd6 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011d6:	f7ff ff6f 	bl	80010b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_RTC_MspInit+0x58>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_RTC_MspInit+0x58>)
 80011e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	3798      	adds	r7, #152	; 0x98
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40002800 	.word	0x40002800
 80011f4:	40023800 	.word	0x40023800

080011f8 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MX_SAI2_Init+0xb0>)
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <MX_SAI2_Init+0xb4>)
 8001200:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001204:	2200      	movs	r2, #0
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001236:	2201      	movs	r2, #1
 8001238:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_SAI2_Init+0xb8>)
 800123e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800125a:	2220      	movs	r2, #32
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001260:	2210      	movs	r2, #16
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800126e:	2200      	movs	r2, #0
 8001270:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001274:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001278:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800127c:	2200      	movs	r2, #0
 800127e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001282:	2200      	movs	r2, #0
 8001284:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001288:	2202      	movs	r2, #2
 800128a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_SAI2_Init+0xb0>)
 800128e:	2203      	movs	r2, #3
 8001290:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_SAI2_Init+0xb0>)
 8001294:	f003 fd82 	bl	8004d9c <HAL_SAI_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800129e:	f7ff ff0b 	bl	80010b8 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200016a8 	.word	0x200016a8
 80012ac:	40015c24 	.word	0x40015c24
 80012b0:	0002ee00 	.word	0x0002ee00

080012b4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_SAI_MspInit+0x138>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f040 808e 	bne.w	80013e4 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80012c8:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <HAL_SAI_MspInit+0x13c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10b      	bne.n	80012e8 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80012d0:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <HAL_SAI_MspInit+0x140>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <HAL_SAI_MspInit+0x140>)
 80012d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012da:	6453      	str	r3, [r2, #68]	; 0x44
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <HAL_SAI_MspInit+0x140>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80012e8:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_SAI_MspInit+0x13c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <HAL_SAI_MspInit+0x13c>)
 80012f0:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001302:	230a      	movs	r3, #10
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4619      	mov	r1, r3
 800130c:	483a      	ldr	r0, [pc, #232]	; (80013f8 <HAL_SAI_MspInit+0x144>)
 800130e:	f001 fe5b 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001324:	230a      	movs	r3, #10
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4833      	ldr	r0, [pc, #204]	; (80013fc <HAL_SAI_MspInit+0x148>)
 8001330:	f001 fe4a 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001334:	2301      	movs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001344:	230a      	movs	r3, #10
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	482c      	ldr	r0, [pc, #176]	; (8001400 <HAL_SAI_MspInit+0x14c>)
 8001350:	f001 fe3a 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001364:	2308      	movs	r3, #8
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	4824      	ldr	r0, [pc, #144]	; (8001400 <HAL_SAI_MspInit+0x14c>)
 8001370:	f001 fe2a 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_SAI_MspInit+0x150>)
 8001376:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_SAI_MspInit+0x154>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_SAI_MspInit+0x150>)
 800137c:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 8001380:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_SAI_MspInit+0x150>)
 8001384:	2240      	movs	r2, #64	; 0x40
 8001386:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_SAI_MspInit+0x150>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_SAI_MspInit+0x150>)
 8001390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001394:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_SAI_MspInit+0x150>)
 8001398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139c:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a4:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ac:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b4:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013be:	f001 fa5d 	bl	800287c <HAL_DMA_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80013c8:	f7ff fe76 	bl	80010b8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013d0:	671a      	str	r2, [r3, #112]	; 0x70
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_SAI_MspInit+0x150>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40015c24 	.word	0x40015c24
 80013f0:	2000178c 	.word	0x2000178c
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40021800 	.word	0x40021800
 8001400:	40020000 	.word	0x40020000
 8001404:	2000172c 	.word	0x2000172c
 8001408:	40026428 	.word	0x40026428

0800140c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 8001412:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <MX_SDMMC1_SD_Init+0x3c>)
 8001414:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <MX_SDMMC1_SD_Init+0x38>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20001790 	.word	0x20001790
 8001448:	40012c00 	.word	0x40012c00

0800144c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0ae      	sub	sp, #184	; 0xb8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2290      	movs	r2, #144	; 0x90
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00d fa81 	bl	800e974 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a74      	ldr	r2, [pc, #464]	; (8001648 <HAL_SD_MspInit+0x1fc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	f040 80e0 	bne.w	800163e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800147e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001482:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fc71 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80014a0:	f7ff fe0a 	bl	80010b8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014a4:	4b69      	ldr	r3, [pc, #420]	; (800164c <HAL_SD_MspInit+0x200>)
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	4a68      	ldr	r2, [pc, #416]	; (800164c <HAL_SD_MspInit+0x200>)
 80014aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ae:	6453      	str	r3, [r2, #68]	; 0x44
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_SD_MspInit+0x200>)
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_SD_MspInit+0x200>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a62      	ldr	r2, [pc, #392]	; (800164c <HAL_SD_MspInit+0x200>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b60      	ldr	r3, [pc, #384]	; (800164c <HAL_SD_MspInit+0x200>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b5d      	ldr	r3, [pc, #372]	; (800164c <HAL_SD_MspInit+0x200>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a5c      	ldr	r2, [pc, #368]	; (800164c <HAL_SD_MspInit+0x200>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b5a      	ldr	r3, [pc, #360]	; (800164c <HAL_SD_MspInit+0x200>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80014ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001506:	230c      	movs	r3, #12
 8001508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001510:	4619      	mov	r1, r3
 8001512:	484f      	ldr	r0, [pc, #316]	; (8001650 <HAL_SD_MspInit+0x204>)
 8001514:	f001 fd58 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001518:	2304      	movs	r3, #4
 800151a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001530:	230c      	movs	r3, #12
 8001532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800153a:	4619      	mov	r1, r3
 800153c:	4845      	ldr	r0, [pc, #276]	; (8001654 <HAL_SD_MspInit+0x208>)
 800153e:	f001 fd43 	bl	8002fc8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001544:	4a45      	ldr	r2, [pc, #276]	; (800165c <HAL_SD_MspInit+0x210>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_SD_MspInit+0x20c>)
 800154a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001550:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <HAL_SD_MspInit+0x20c>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800156a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_SD_MspInit+0x20c>)
 800156e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001572:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001574:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001576:	2220      	movs	r2, #32
 8001578:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_SD_MspInit+0x20c>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001582:	2204      	movs	r2, #4
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001588:	2203      	movs	r2, #3
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <HAL_SD_MspInit+0x20c>)
 800158e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_SD_MspInit+0x20c>)
 8001596:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800159c:	482e      	ldr	r0, [pc, #184]	; (8001658 <HAL_SD_MspInit+0x20c>)
 800159e:	f001 f96d 	bl	800287c <HAL_DMA_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80015a8:	f7ff fd86 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <HAL_SD_MspInit+0x20c>)
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <HAL_SD_MspInit+0x20c>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015ba:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_SD_MspInit+0x218>)
 80015bc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015ec:	2220      	movs	r2, #32
 80015ee:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015f8:	2204      	movs	r2, #4
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_SD_MspInit+0x214>)
 80015fe:	2203      	movs	r2, #3
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_SD_MspInit+0x214>)
 8001604:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_SD_MspInit+0x214>)
 800160c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <HAL_SD_MspInit+0x214>)
 8001614:	f001 f932 	bl	800287c <HAL_DMA_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800161e:	f7ff fd4b 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_SD_MspInit+0x214>)
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_SD_MspInit+0x214>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2031      	movs	r0, #49	; 0x31
 8001634:	f000 fd87 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001638:	2031      	movs	r0, #49	; 0x31
 800163a:	f000 fda0 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	37b8      	adds	r7, #184	; 0xb8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40023800 	.word	0x40023800
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	20001814 	.word	0x20001814
 800165c:	400264a0 	.word	0x400264a0
 8001660:	20001874 	.word	0x20001874
 8001664:	40026458 	.word	0x40026458

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_MspInit+0x44>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_MspInit+0x44>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_MspInit+0x44>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x44>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x44>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x44>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 f970 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 8001708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800170c:	f001 fe3a 	bl	8003384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <SDMMC1_IRQHandler+0x10>)
 800171a:	f003 ff75 	bl	8005608 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20001790 	.word	0x20001790

08001728 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA2_Stream0_IRQHandler+0x10>)
 800172e:	f001 f9d5 	bl	8002adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200015bc 	.word	0x200015bc

0800173c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA2_Stream1_IRQHandler+0x10>)
 8001742:	f001 f9cb 	bl	8002adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000172c 	.word	0x2000172c

08001750 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA2_Stream3_IRQHandler+0x10>)
 8001756:	f001 f9c1 	bl	8002adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20001874 	.word	0x20001874

08001764 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA2_Stream5_IRQHandler+0x10>)
 800176a:	f001 f9b7 	bl	8002adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000161c 	.word	0x2000161c

08001778 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA2_Stream6_IRQHandler+0x10>)
 800177e:	f001 f9ad 	bl	8002adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20001814 	.word	0x20001814

0800178c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_UART4_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_UART4_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_UART4_Init+0x58>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_UART4_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_UART4_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_UART4_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_UART4_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_UART4_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_UART4_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_UART4_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_UART4_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_UART4_Init+0x58>)
 80017f4:	f004 ffb3 	bl	800675e <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80017fe:	f7ff fc5b 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200018d4 	.word	0x200018d4
 800180c:	40004c00 	.word	0x40004c00

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0ae      	sub	sp, #184	; 0xb8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2290      	movs	r2, #144	; 0x90
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f00d f89f 	bl	800e974 <memset>
  if(uartHandle->Instance==UART4)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_UART_MspInit+0xf4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d15d      	bne.n	80018fc <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001844:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001846:	2300      	movs	r3, #0
 8001848:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fa94 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800185a:	f7ff fc2d 	bl	80010b8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_UART_MspInit+0xf8>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <HAL_UART_MspInit+0xf8>)
 8001864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_UART_MspInit+0xf8>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_UART_MspInit+0xf8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <HAL_UART_MspInit+0xf8>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_UART_MspInit+0xf8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_UART_MspInit+0xf8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_UART_MspInit+0xf8>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_UART_MspInit+0xf8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018be:	2308      	movs	r3, #8
 80018c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <HAL_UART_MspInit+0xfc>)
 80018cc:	f001 fb7c 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80018ea:	2306      	movs	r3, #6
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <HAL_UART_MspInit+0x100>)
 80018f8:	f001 fb66 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80018fc:	bf00      	nop
 80018fe:	37b8      	adds	r7, #184	; 0xb8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40004c00 	.word	0x40004c00
 8001908:	40023800 	.word	0x40023800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40020000 	.word	0x40020000

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193e:	f7ff ff25 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f00c ffe5 	bl	800e910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fa4d 	bl	8000de4 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	2000141c 	.word	0x2000141c
  ldr r2, =_sidata
 8001958:	0816d620 	.word	0x0816d620
  ldr r2, =_sbss
 800195c:	2000141c 	.word	0x2000141c
  ldr r4, =_ebss
 8001960:	20009d58 	.word	0x20009d58

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>

08001966 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 fbe0 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001970:	200f      	movs	r0, #15
 8001972:	f000 f805 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001976:	f7ff fe77 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fbfb 	bl	800219a <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019bc:	f000 fbc3 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	2000195c 	.word	0x2000195c

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000195c 	.word	0x2000195c

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e031      	b.n	8001ae2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7fe fdac 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_ADC_Init+0x84>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	f043 0202 	orr.w	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f970 	bl	8001d9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad2:	e001      	b.n	8001ad8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	ffffeefd 	.word	0xffffeefd

08001af0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1c>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e136      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x28a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	d93a      	bls.n	8001b92 <HAL_ADC_ConfigChannel+0xa2>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b24:	d035      	beq.n	8001b92 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68d9      	ldr	r1, [r3, #12]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a8d      	ldr	r2, [pc, #564]	; (8001d88 <HAL_ADC_ConfigChannel+0x298>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6a:	e035      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4403      	add	r3, r0
 8001b84:	3b1e      	subs	r3, #30
 8001b86:	409a      	lsls	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b90:	e022      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6919      	ldr	r1, [r3, #16]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4603      	mov	r3, r0
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4403      	add	r3, r0
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d824      	bhi.n	8001c2a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b05      	subs	r3, #5
 8001bf2:	221f      	movs	r2, #31
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	400a      	ands	r2, r1
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b05      	subs	r3, #5
 8001c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
 8001c28:	e04c      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d824      	bhi.n	8001c7c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3b23      	subs	r3, #35	; 0x23
 8001c44:	221f      	movs	r2, #31
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	400a      	ands	r2, r1
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b23      	subs	r3, #35	; 0x23
 8001c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7a:	e023      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b41      	subs	r3, #65	; 0x41
 8001c8e:	221f      	movs	r2, #31
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43da      	mvns	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b41      	subs	r3, #65	; 0x41
 8001cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_ADC_ConfigChannel+0x29c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ce2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <HAL_ADC_ConfigChannel+0x29c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10f      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x21e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d10b      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_ADC_ConfigChannel+0x29c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d12b      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x280>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_ADC_ConfigChannel+0x298>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d003      	beq.n	8001d2a <HAL_ADC_ConfigChannel+0x23a>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d122      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_ADC_ConfigChannel+0x298>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_ADC_ConfigChannel+0x2a4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a8>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0c9a      	lsrs	r2, r3, #18
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d62:	e002      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f9      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	10000012 	.word	0x10000012
 8001d8c:	40012000 	.word	0x40012000
 8001d90:	40012300 	.word	0x40012300
 8001d94:	20000000 	.word	0x20000000
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001da4:	4b78      	ldr	r3, [pc, #480]	; (8001f88 <ADC_Init+0x1ec>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <ADC_Init+0x1ec>)
 8001daa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001dae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001db0:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <ADC_Init+0x1ec>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4973      	ldr	r1, [pc, #460]	; (8001f88 <ADC_Init+0x1ec>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	021a      	lsls	r2, r3, #8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <ADC_Init+0x1f0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6899      	ldr	r1, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e00f      	b.n	8001e96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0202 	bic.w	r2, r2, #2
 8001ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	005a      	lsls	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	035a      	lsls	r2, r3, #13
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	e007      	b.n	8001f0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	051a      	lsls	r2, r3, #20
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4e:	025a      	lsls	r2, r3, #9
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	029a      	lsls	r2, r3, #10
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40012300 	.word	0x40012300
 8001f8c:	0f000001 	.word	0x0f000001

08001f90 <__NVIC_SetPriorityGrouping>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00
 8001fd4:	05fa0000 	.word	0x05fa0000

08001fd8 <__NVIC_GetPriorityGrouping>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e054      	b.n	8002270 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7f5b      	ldrb	r3, [r3, #29]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fa46 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	791b      	ldrb	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a22      	ldr	r2, [pc, #136]	; (8002278 <HAL_CRC_Init+0xc4>)
 80021f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0218 	bic.w	r2, r2, #24
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	e00c      	b.n	800221e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	461a      	mov	r2, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f834 	bl	800227c <HAL_CRCEx_Polynomial_Set>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e028      	b.n	8002270 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	795b      	ldrb	r3, [r3, #5]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	e004      	b.n	800223c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6912      	ldr	r2, [r2, #16]
 800223a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	04c11db7 	.word	0x04c11db7

0800227c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800228c:	231f      	movs	r3, #31
 800228e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002290:	bf00      	nop
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	613a      	str	r2, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b18      	cmp	r3, #24
 80022b4:	d846      	bhi.n	8002344 <HAL_CRCEx_Polynomial_Set+0xc8>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	0800234b 	.word	0x0800234b
 80022c0:	08002345 	.word	0x08002345
 80022c4:	08002345 	.word	0x08002345
 80022c8:	08002345 	.word	0x08002345
 80022cc:	08002345 	.word	0x08002345
 80022d0:	08002345 	.word	0x08002345
 80022d4:	08002345 	.word	0x08002345
 80022d8:	08002345 	.word	0x08002345
 80022dc:	08002339 	.word	0x08002339
 80022e0:	08002345 	.word	0x08002345
 80022e4:	08002345 	.word	0x08002345
 80022e8:	08002345 	.word	0x08002345
 80022ec:	08002345 	.word	0x08002345
 80022f0:	08002345 	.word	0x08002345
 80022f4:	08002345 	.word	0x08002345
 80022f8:	08002345 	.word	0x08002345
 80022fc:	0800232d 	.word	0x0800232d
 8002300:	08002345 	.word	0x08002345
 8002304:	08002345 	.word	0x08002345
 8002308:	08002345 	.word	0x08002345
 800230c:	08002345 	.word	0x08002345
 8002310:	08002345 	.word	0x08002345
 8002314:	08002345 	.word	0x08002345
 8002318:	08002345 	.word	0x08002345
 800231c:	08002321 	.word	0x08002321
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d913      	bls.n	800234e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800232a:	e010      	b.n	800234e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b07      	cmp	r3, #7
 8002330:	d90f      	bls.n	8002352 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002336:	e00c      	b.n	8002352 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	d90b      	bls.n	8002356 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002342:	e008      	b.n	8002356 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	75fb      	strb	r3, [r7, #23]
      break;
 8002348:	e006      	b.n	8002358 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800234a:	bf00      	nop
 800234c:	e004      	b.n	8002358 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800234e:	bf00      	nop
 8002350:	e002      	b.n	8002358 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002352:	bf00      	nop
 8002354:	e000      	b.n	8002358 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002356:	bf00      	nop
  }
  if (status == HAL_OK)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 0118 	bic.w	r1, r3, #24
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0ac      	b.n	80024f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fa20 	bl	80027e4 <DFSDM_GetChannelFromInstance>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_DFSDM_ChannelInit+0x174>)
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e09f      	b.n	80024f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7fe fb3b 	bl	8000a30 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80023ba:	4b51      	ldr	r3, [pc, #324]	; (8002500 <HAL_DFSDM_ChannelInit+0x178>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	4a4f      	ldr	r2, [pc, #316]	; (8002500 <HAL_DFSDM_ChannelInit+0x178>)
 80023c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80023c4:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_DFSDM_ChannelInit+0x178>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d125      	bne.n	8002418 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80023d8:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4948      	ldr	r1, [pc, #288]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80023f0:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	791b      	ldrb	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80023fa:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	3b01      	subs	r3, #1
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	493f      	ldr	r1, [pc, #252]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HAL_DFSDM_ChannelInit+0x17c>)
 8002412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002416:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002426:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002436:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800243c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 020f 	bic.w	r2, r2, #15
 8002454:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800247c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f002 0207 	and.w	r2, r2, #7
 80024a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f97e 	bl	80027e4 <DFSDM_GetChannelFromInstance>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4904      	ldr	r1, [pc, #16]	; (80024fc <HAL_DFSDM_ChannelInit+0x174>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20001964 	.word	0x20001964
 8002500:	20001960 	.word	0x20001960
 8002504:	40017400 	.word	0x40017400

08002508 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0c6      	b.n	80026a8 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a64      	ldr	r2, [pc, #400]	; (80026b0 <HAL_DFSDM_FilterInit+0x1a8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d109      	bne.n	8002538 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002528:	2b01      	cmp	r3, #1
 800252a:	d003      	beq.n	8002534 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b7      	b.n	80026a8 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7fe f985 	bl	8000860 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002564:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7a1b      	ldrb	r3, [r3, #8]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e007      	b.n	8002590 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800258e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7a5b      	ldrb	r3, [r3, #9]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d108      	bne.n	80025aa <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e007      	b.n	80025ba <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_DFSDM_FilterInit+0x1ac>)
 80025c6:	400b      	ands	r3, r1
 80025c8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d108      	bne.n	80025e4 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7c1b      	ldrb	r3, [r3, #16]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d108      	bne.n	80025fe <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e007      	b.n	800260e <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0210 	bic.w	r2, r2, #16
 800260c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7c5b      	ldrb	r3, [r3, #17]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0220 	bic.w	r2, r2, #32
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6959      	ldr	r1, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_DFSDM_FilterInit+0x1b0>)
 8002644:	400b      	ands	r3, r1
 8002646:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6959      	ldr	r1, [r3, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	3b01      	subs	r3, #1
 8002658:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800265a:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002662:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7c1a      	ldrb	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40017500 	.word	0x40017500
 80026b4:	ffff80f7 	.word	0xffff80f7
 80026b8:	1c00ff00 	.word	0x1c00ff00

080026bc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d02c      	beq.n	8002730 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80026dc:	2bff      	cmp	r3, #255	; 0xff
 80026de:	d027      	beq.n	8002730 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10d      	bne.n	8002712 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e00a      	b.n	8002728 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e001      	b.n	8002734 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
}
 8002736:	4618      	mov	r0, r3
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	f8fbffff 	.word	0xf8fbffff

08002748 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002766:	2bff      	cmp	r3, #255	; 0xff
 8002768:	d016      	beq.n	8002798 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	b292      	uxth	r2, r2
 8002772:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8002774:	6838      	ldr	r0, [r7, #0]
 8002776:	f000 f816 	bl	80027a6 <DFSDM_GetInjChannelsNbr>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	e000      	b.n	8002792 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8002790:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6493      	str	r3, [r2, #72]	; 0x48
 8002796:	e001      	b.n	800279c <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80027b8:	e00a      	b.n	80027d0 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3301      	adds	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f1      	bne.n	80027ba <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <DFSDM_GetChannelFromInstance+0x7c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e02b      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <DFSDM_GetChannelFromInstance+0x80>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d102      	bne.n	8002808 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e024      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <DFSDM_GetChannelFromInstance+0x84>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d102      	bne.n	8002816 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002810:	2302      	movs	r3, #2
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e01d      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <DFSDM_GetChannelFromInstance+0x88>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d102      	bne.n	8002824 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800281e:	2303      	movs	r3, #3
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	e016      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <DFSDM_GetChannelFromInstance+0x8c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d102      	bne.n	8002832 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800282c:	2304      	movs	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e00f      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <DFSDM_GetChannelFromInstance+0x90>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d102      	bne.n	8002840 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800283a:	2305      	movs	r3, #5
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e008      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <DFSDM_GetChannelFromInstance+0x94>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d102      	bne.n	800284e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002848:	2306      	movs	r3, #6
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e001      	b.n	8002852 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800284e:	2307      	movs	r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40017400 	.word	0x40017400
 8002864:	40017420 	.word	0x40017420
 8002868:	40017440 	.word	0x40017440
 800286c:	40017460 	.word	0x40017460
 8002870:	40017480 	.word	0x40017480
 8002874:	400174a0 	.word	0x400174a0
 8002878:	400174c0 	.word	0x400174c0

0800287c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff f8be 	bl	8001a08 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e099      	b.n	80029cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b8:	e00f      	b.n	80028da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ba:	f7ff f8a5 	bl	8001a08 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d908      	bls.n	80028da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e078      	b.n	80029cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e8      	bne.n	80028ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_DMA_Init+0x158>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	2b04      	cmp	r3, #4
 8002932:	d107      	bne.n	8002944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4313      	orrs	r3, r2
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b04      	cmp	r3, #4
 800296c:	d117      	bne.n	800299e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 faa5 	bl	8002ed0 <DMA_CheckFifoParam>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800299a:	2301      	movs	r3, #1
 800299c:	e016      	b.n	80029cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa5c 	bl	8002e64 <DMA_CalcBaseAndBitshift>
 80029ac:	4603      	mov	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	223f      	movs	r2, #63	; 0x3f
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	e010803f 	.word	0xe010803f

080029d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Start_IT+0x26>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e048      	b.n	8002a90 <HAL_DMA_Start_IT+0xb8>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d137      	bne.n	8002a82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f9ee 	bl	8002e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	409a      	lsls	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0216 	orr.w	r2, r2, #22
 8002a46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e005      	b.n	8002a8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00c      	b.n	8002ad0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ae8:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <HAL_DMA_IRQHandler+0x248>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a8e      	ldr	r2, [pc, #568]	; (8002d28 <HAL_DMA_IRQHandler+0x24c>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a9b      	lsrs	r3, r3, #10
 8002af4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2208      	movs	r2, #8
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01a      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	2208      	movs	r2, #8
 8002b36:	409a      	lsls	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d012      	beq.n	8002b7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	2204      	movs	r2, #4
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d012      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	2210      	movs	r2, #16
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d043      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d03c      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d018      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d024      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
 8002c0a:	e01f      	b.n	8002c4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
 8002c1c:	e016      	b.n	8002c4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0208 	bic.w	r2, r2, #8
 8002c3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	2220      	movs	r2, #32
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 808f 	beq.w	8002d7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8087 	beq.w	8002d7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2220      	movs	r2, #32
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d136      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0216 	bic.w	r2, r2, #22
 8002c94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0x1da>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0208 	bic.w	r2, r2, #8
 8002cc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	223f      	movs	r2, #63	; 0x3f
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d07e      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
        }
        return;
 8002cf2:	e079      	b.n	8002de8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01d      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d031      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e02c      	b.n	8002d7c <HAL_DMA_IRQHandler+0x2a0>
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000
 8002d28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e01e      	b.n	8002d7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10f      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0210 	bic.w	r2, r2, #16
 8002d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d032      	beq.n	8002dea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d022      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2205      	movs	r2, #5
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d307      	bcc.n	8002dc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f2      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x2cc>
 8002dc2:	e000      	b.n	8002dc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	e000      	b.n	8002dea <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de8:	bf00      	nop
    }
  }
}
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d108      	bne.n	8002e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e46:	e007      	b.n	8002e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	60da      	str	r2, [r3, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3b10      	subs	r3, #16
 8002e74:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x60>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d908      	bls.n	8002ea4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <DMA_CalcBaseAndBitshift+0x68>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	1d1a      	adds	r2, r3, #4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea2:	e006      	b.n	8002eb2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <DMA_CalcBaseAndBitshift+0x68>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	aaaaaaab 	.word	0xaaaaaaab
 8002ec8:	0800ed7c 	.word	0x0800ed7c
 8002ecc:	fffffc00 	.word	0xfffffc00

08002ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11f      	bne.n	8002f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d856      	bhi.n	8002f9e <DMA_CheckFifoParam+0xce>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <DMA_CheckFifoParam+0x28>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f1b 	.word	0x08002f1b
 8002f00:	08002f09 	.word	0x08002f09
 8002f04:	08002f9f 	.word	0x08002f9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d046      	beq.n	8002fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e043      	b.n	8002fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f22:	d140      	bne.n	8002fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f28:	e03d      	b.n	8002fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f32:	d121      	bne.n	8002f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d837      	bhi.n	8002faa <DMA_CheckFifoParam+0xda>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <DMA_CheckFifoParam+0x70>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f57 	.word	0x08002f57
 8002f48:	08002f51 	.word	0x08002f51
 8002f4c:	08002f69 	.word	0x08002f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      break;
 8002f54:	e030      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d025      	beq.n	8002fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f66:	e022      	b.n	8002fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f70:	d11f      	bne.n	8002fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f76:	e01c      	b.n	8002fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d903      	bls.n	8002f86 <DMA_CheckFifoParam+0xb6>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d003      	beq.n	8002f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f84:	e018      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8a:	e015      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e00b      	b.n	8002fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e00a      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e008      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e006      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e004      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	e175      	b.n	80032d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	f040 8164 	bne.w	80032ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d005      	beq.n	800301e <HAL_GPIO_Init+0x56>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d130      	bne.n	8003080 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 0201 	and.w	r2, r3, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b03      	cmp	r3, #3
 800308a:	d017      	beq.n	80030bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d123      	bne.n	8003110 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	08da      	lsrs	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3208      	adds	r2, #8
 800310a:	69b9      	ldr	r1, [r7, #24]
 800310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0203 	and.w	r2, r3, #3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80be 	beq.w	80032ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003152:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_GPIO_Init+0x324>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a65      	ldr	r2, [pc, #404]	; (80032ec <HAL_GPIO_Init+0x324>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_GPIO_Init+0x324>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800316a:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <HAL_GPIO_Init+0x328>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_GPIO_Init+0x32c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d037      	beq.n	8003206 <HAL_GPIO_Init+0x23e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_GPIO_Init+0x330>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d031      	beq.n	8003202 <HAL_GPIO_Init+0x23a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_GPIO_Init+0x334>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02b      	beq.n	80031fe <HAL_GPIO_Init+0x236>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a55      	ldr	r2, [pc, #340]	; (8003300 <HAL_GPIO_Init+0x338>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d025      	beq.n	80031fa <HAL_GPIO_Init+0x232>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a54      	ldr	r2, [pc, #336]	; (8003304 <HAL_GPIO_Init+0x33c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01f      	beq.n	80031f6 <HAL_GPIO_Init+0x22e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a53      	ldr	r2, [pc, #332]	; (8003308 <HAL_GPIO_Init+0x340>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d019      	beq.n	80031f2 <HAL_GPIO_Init+0x22a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_GPIO_Init+0x344>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_GPIO_Init+0x226>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a51      	ldr	r2, [pc, #324]	; (8003310 <HAL_GPIO_Init+0x348>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00d      	beq.n	80031ea <HAL_GPIO_Init+0x222>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a50      	ldr	r2, [pc, #320]	; (8003314 <HAL_GPIO_Init+0x34c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x21e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4f      	ldr	r2, [pc, #316]	; (8003318 <HAL_GPIO_Init+0x350>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_GPIO_Init+0x21a>
 80031de:	2309      	movs	r3, #9
 80031e0:	e012      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031e2:	230a      	movs	r3, #10
 80031e4:	e010      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031e6:	2308      	movs	r3, #8
 80031e8:	e00e      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00c      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031ee:	2306      	movs	r3, #6
 80031f0:	e00a      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031f2:	2305      	movs	r3, #5
 80031f4:	e008      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031fa:	2303      	movs	r3, #3
 80031fc:	e004      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031fe:	2302      	movs	r3, #2
 8003200:	e002      	b.n	8003208 <HAL_GPIO_Init+0x240>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_GPIO_Init+0x240>
 8003206:	2300      	movs	r3, #0
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	f002 0203 	and.w	r2, r2, #3
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4093      	lsls	r3, r2
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003218:	4935      	ldr	r1, [pc, #212]	; (80032f0 <HAL_GPIO_Init+0x328>)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_GPIO_Init+0x354>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_GPIO_Init+0x354>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_GPIO_Init+0x354>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <HAL_GPIO_Init+0x354>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_GPIO_Init+0x354>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329e:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_GPIO_Init+0x354>)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_GPIO_Init+0x354>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <HAL_GPIO_Init+0x354>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	f67f ae86 	bls.w	8002fe8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40021000 	.word	0x40021000
 8003308:	40021400 	.word	0x40021400
 800330c:	40021800 	.word	0x40021800
 8003310:	40021c00 	.word	0x40021c00
 8003314:	40022000 	.word	0x40022000
 8003318:	40022400 	.word	0x40022400
 800331c:	40013c00 	.word	0x40013c00

08003320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e001      	b.n	8003342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800336c:	e003      	b.n	8003376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	041a      	lsls	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	619a      	str	r2, [r3, #24]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f007 fcc8 	bl	800ad38 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40013c00 	.word	0x40013c00

080033b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e2:	f7fe fb11 	bl	8001a08 <HAL_GetTick>
 80033e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033e8:	e009      	b.n	80033fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ea:	f7fe fb0d 	bl	8001a08 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f8:	d901      	bls.n	80033fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e022      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340a:	d1ee      	bne.n	80033ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003416:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7fe faf6 	bl	8001a08 <HAL_GetTick>
 800341c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800341e:	e009      	b.n	8003434 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003420:	f7fe faf2 	bl	8001a08 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e007      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003440:	d1ee      	bne.n	8003420 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000

08003454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e29b      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003478:	4b96      	ldr	r3, [pc, #600]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00c      	beq.n	800349e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003484:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
 8003490:	4b90      	ldr	r3, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06c      	beq.n	8003584 <HAL_RCC_OscConfig+0x130>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e275      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x7a>
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e02e      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x9c>
 80034d6:	4b7f      	ldr	r3, [pc, #508]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xc0>
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6b      	ldr	r2, [pc, #428]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fa68 	bl	8001a08 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fa64 	bl	8001a08 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e229      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xe8>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fa54 	bl	8001a08 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fa50 	bl	8001a08 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e215      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x110>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d069      	beq.n	8003666 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1e9      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	493d      	ldr	r1, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e040      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fa06 	bl	8001a08 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe fa02 	bl	8001a08 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4929      	ldr	r1, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe f9e2 	bl	8001a08 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe f9de 	bl	8001a08 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1a3      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d038      	beq.n	80036e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe f9bf 	bl	8001a08 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe f9bb 	bl	8001a08 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e180      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x23a>
 80036ac:	e01a      	b.n	80036e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe f9a5 	bl	8001a08 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe f9a1 	bl	8001a08 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d903      	bls.n	80036d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e166      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
 80036d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b92      	ldr	r3, [pc, #584]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a4 	beq.w	800383a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b8c      	ldr	r3, [pc, #560]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a88      	ldr	r2, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b86      	ldr	r3, [pc, #536]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	4b83      	ldr	r3, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003726:	4b80      	ldr	r3, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7f      	ldr	r2, [pc, #508]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7fe f969 	bl	8001a08 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7fe f965 	bl	8001a08 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e12a      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x31a>
 8003760:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a6f      	ldr	r2, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	e02d      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x33c>
 8003776:	4b6b      	ldr	r3, [pc, #428]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a6a      	ldr	r2, [pc, #424]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
 8003782:	4b68      	ldr	r3, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	e01c      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d10c      	bne.n	80037b2 <HAL_RCC_OscConfig+0x35e>
 8003798:	4b62      	ldr	r3, [pc, #392]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a61      	ldr	r2, [pc, #388]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a5e      	ldr	r2, [pc, #376]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	e00b      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5b      	ldr	r2, [pc, #364]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	f023 0304 	bic.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe f919 	bl	8001a08 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe f915 	bl	8001a08 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0d8      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ee      	beq.n	80037da <HAL_RCC_OscConfig+0x386>
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe f903 	bl	8001a08 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe f8ff 	bl	8001a08 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0c2      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ee      	bne.n	8003806 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80ae 	beq.w	80039a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003844:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d06d      	beq.n	800392c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d14b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a31      	ldr	r2, [pc, #196]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe f8d0 	bl	8001a08 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe f8cc 	bl	8001a08 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e091      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	491b      	ldr	r1, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f89e 	bl	8001a08 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe f89a 	bl	8001a08 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e05f      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x47c>
 80038ee:	e057      	b.n	80039a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe f884 	bl	8001a08 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe f880 	bl	8001a08 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x4b0>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x54c>
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_RCC_OscConfig+0x558>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d030      	beq.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d129      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d122      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003962:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003964:	4293      	cmp	r3, r2
 8003966:	d119      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	3b01      	subs	r3, #1
 8003976:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d10f      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	4965      	ldr	r1, [pc, #404]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d040      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d115      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e073      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06b      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4936      	ldr	r1, [pc, #216]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fd ffb0 	bl	8001a08 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fd ffac 	bl	8001a08 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e053      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d210      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	4922      	ldr	r1, [pc, #136]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x1cc>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1d0>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd ff0c 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800ed64 	.word	0x0800ed64
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b090      	sub	sp, #64	; 0x40
 8003b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
 8003b94:	2300      	movs	r3, #0
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b98:	2300      	movs	r3, #0
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	f200 80a1 	bhi.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bba:	e09b      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bc0:	e09b      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bc6:	e098      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d028      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	2200      	movs	r2, #0
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	627a      	str	r2, [r7, #36]	; 0x24
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf4:	fb03 f201 	mul.w	r2, r3, r1
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	fb00 f303 	mul.w	r3, r0, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a43      	ldr	r2, [pc, #268]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c02:	fba0 1202 	umull	r1, r2, r0, r2
 8003c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c08:	460a      	mov	r2, r1
 8003c0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0e:	4413      	add	r3, r2
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c14:	2200      	movs	r2, #0
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c22:	f7fc fb09 	bl	8000238 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2e:	e053      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	2200      	movs	r2, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	617a      	str	r2, [r7, #20]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c42:	f04f 0b00 	mov.w	fp, #0
 8003c46:	4652      	mov	r2, sl
 8003c48:	465b      	mov	r3, fp
 8003c4a:	f04f 0000 	mov.w	r0, #0
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	0159      	lsls	r1, r3, #5
 8003c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c58:	0150      	lsls	r0, r2, #5
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c62:	eb63 090b 	sbc.w	r9, r3, fp
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	00eb      	lsls	r3, r5, #3
 8003c8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c90:	00e2      	lsls	r2, r4, #3
 8003c92:	4614      	mov	r4, r2
 8003c94:	461d      	mov	r5, r3
 8003c96:	eb14 030a 	adds.w	r3, r4, sl
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	eb45 030b 	adc.w	r3, r5, fp
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	028b      	lsls	r3, r1, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb8:	4621      	mov	r1, r4
 8003cba:	028a      	lsls	r2, r1, #10
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	60fa      	str	r2, [r7, #12]
 8003cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ccc:	f7fc fab4 	bl	8000238 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3740      	adds	r7, #64	; 0x40
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	017d7840 	.word	0x017d7840

08003d14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d30:	f7ff fff0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0800ed74 	.word	0x0800ed74

08003d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d58:	f7ff ffdc 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0b5b      	lsrs	r3, r3, #13
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800ed74 	.word	0x0800ed74

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003da4:	4b69      	ldr	r3, [pc, #420]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dae:	6093      	str	r3, [r2, #8]
 8003db0:	4b66      	ldr	r3, [pc, #408]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	4964      	ldr	r1, [pc, #400]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d017      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	4959      	ldr	r1, [pc, #356]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d017      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e12:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	494a      	ldr	r1, [pc, #296]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e30:	d101      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 808b 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b3a      	ldr	r3, [pc, #232]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fd fdc0 	bl	8001a08 <HAL_GetTick>
 8003e88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fd fdbc 	bl	8001a08 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e38f      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eaa:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d035      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d02e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d114      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fd84 	bl	8001a08 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd fd80 	bl	8001a08 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e351      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d111      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f42:	400b      	ands	r3, r1
 8003f44:	4901      	ldr	r1, [pc, #4]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40007000 	.word	0x40007000
 8003f54:	0ffffcff 	.word	0x0ffffcff
 8003f58:	4bac      	ldr	r3, [pc, #688]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4aab      	ldr	r2, [pc, #684]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f62:	6093      	str	r3, [r2, #8]
 8003f64:	4ba9      	ldr	r3, [pc, #676]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	49a6      	ldr	r1, [pc, #664]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f82:	4ba2      	ldr	r3, [pc, #648]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	4aa0      	ldr	r2, [pc, #640]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f92:	4b9e      	ldr	r3, [pc, #632]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	499b      	ldr	r1, [pc, #620]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb0:	4b96      	ldr	r3, [pc, #600]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbe:	4993      	ldr	r1, [pc, #588]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd2:	4b8e      	ldr	r3, [pc, #568]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe0:	498a      	ldr	r1, [pc, #552]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff4:	4b85      	ldr	r3, [pc, #532]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004002:	4982      	ldr	r1, [pc, #520]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004016:	4b7d      	ldr	r3, [pc, #500]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4979      	ldr	r1, [pc, #484]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004038:	4b74      	ldr	r3, [pc, #464]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	4971      	ldr	r1, [pc, #452]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800405a:	4b6c      	ldr	r3, [pc, #432]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f023 020c 	bic.w	r2, r3, #12
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	4968      	ldr	r1, [pc, #416]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800407c:	4b63      	ldr	r3, [pc, #396]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	4960      	ldr	r1, [pc, #384]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800409e:	4b5b      	ldr	r3, [pc, #364]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	4957      	ldr	r1, [pc, #348]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040c0:	4b52      	ldr	r3, [pc, #328]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	494f      	ldr	r1, [pc, #316]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040e2:	4b4a      	ldr	r3, [pc, #296]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4946      	ldr	r1, [pc, #280]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004104:	4b41      	ldr	r3, [pc, #260]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	493e      	ldr	r1, [pc, #248]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004126:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004134:	4935      	ldr	r1, [pc, #212]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004148:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004156:	492d      	ldr	r1, [pc, #180]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d011      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800416a:	4b28      	ldr	r3, [pc, #160]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004178:	4924      	ldr	r1, [pc, #144]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041aa:	4b18      	ldr	r3, [pc, #96]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	4914      	ldr	r1, [pc, #80]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041dc:	490b      	ldr	r1, [pc, #44]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	4902      	ldr	r1, [pc, #8]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800421c:	4b8a      	ldr	r3, [pc, #552]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004222:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	4986      	ldr	r1, [pc, #536]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004240:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004246:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004250:	497d      	ldr	r1, [pc, #500]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d006      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80d6 	beq.w	8004418 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800426c:	4b76      	ldr	r3, [pc, #472]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a75      	ldr	r2, [pc, #468]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fd fbc6 	bl	8001a08 <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004280:	f7fd fbc2 	bl	8001a08 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e195      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004292:	4b6d      	ldr	r3, [pc, #436]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11d      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042c0:	4b61      	ldr	r3, [pc, #388]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	019a      	lsls	r2, r3, #6
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	4958      	ldr	r1, [pc, #352]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02e      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004318:	d129      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800431a:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004328:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432e:	0f1b      	lsrs	r3, r3, #28
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	493e      	ldr	r1, [pc, #248]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004356:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f023 021f 	bic.w	r2, r3, #31
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	3b01      	subs	r3, #1
 8004366:	4938      	ldr	r1, [pc, #224]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01d      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800437a:	4b33      	ldr	r3, [pc, #204]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004388:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438e:	0f1b      	lsrs	r3, r3, #28
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	019a      	lsls	r2, r3, #6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	071b      	lsls	r3, r3, #28
 80043ae:	4926      	ldr	r1, [pc, #152]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d011      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	019a      	lsls	r2, r3, #6
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	491a      	ldr	r1, [pc, #104]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f2:	f7fd fb09 	bl	8001a08 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043fa:	f7fd fb05 	bl	8001a08 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0d8      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b01      	cmp	r3, #1
 800441c:	f040 80ce 	bne.w	80045bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fd faec 	bl	8001a08 <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004432:	e00b      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004434:	f7fd fae8 	bl	8001a08 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d904      	bls.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0bb      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800444c:	4b5e      	ldr	r3, [pc, #376]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004458:	d0ec      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004476:	2b00      	cmp	r3, #0
 8004478:	d02e      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d12a      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	0f1b      	lsrs	r3, r3, #28
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	019a      	lsls	r2, r3, #6
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	071b      	lsls	r3, r3, #28
 80044b6:	4944      	ldr	r1, [pc, #272]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044be:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	493d      	ldr	r1, [pc, #244]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d022      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ec:	d11d      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044fc:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	0f1b      	lsrs	r3, r3, #28
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	4929      	ldr	r1, [pc, #164]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d028      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	0e1b      	lsrs	r3, r3, #24
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	019a      	lsls	r2, r3, #6
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	071b      	lsls	r3, r3, #28
 800456a:	4917      	ldr	r1, [pc, #92]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4911      	ldr	r1, [pc, #68]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fd fa38 	bl	8001a08 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800459c:	f7fd fa34 	bl	8001a08 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e007      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ba:	d1ef      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800

080045cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045ea:	f040 80a3 	bne.w	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80045ee:	4ba8      	ldr	r3, [pc, #672]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80045fc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004604:	f000 808a 	beq.w	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800460e:	f200 8093 	bhi.w	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004618:	d07d      	beq.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004620:	f200 808a 	bhi.w	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004630:	d039      	beq.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004632:	e081      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004634:	4b96      	ldr	r3, [pc, #600]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d108      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004640:	4b93      	ldr	r3, [pc, #588]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	4a92      	ldr	r2, [pc, #584]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	e007      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004652:	4b8f      	ldr	r3, [pc, #572]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465a:	4a8f      	ldr	r2, [pc, #572]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004662:	4b8b      	ldr	r3, [pc, #556]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	0e1b      	lsrs	r3, r3, #24
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004670:	4b87      	ldr	r3, [pc, #540]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	fb03 f202 	mul.w	r2, r3, r2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800468a:	4b81      	ldr	r3, [pc, #516]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800468c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	617b      	str	r3, [r7, #20]
        break;
 80046a4:	e049      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046a6:	4b7a      	ldr	r3, [pc, #488]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b2:	4b77      	ldr	r3, [pc, #476]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ba:	4a76      	ldr	r2, [pc, #472]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e007      	b.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80046c4:	4b72      	ldr	r3, [pc, #456]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046cc:	4a72      	ldr	r2, [pc, #456]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80046d4:	4b6e      	ldr	r3, [pc, #440]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046da:	0e1b      	lsrs	r3, r3, #24
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80046e2:	4b6b      	ldr	r3, [pc, #428]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	fb03 f202 	mul.w	r2, r3, r2
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80046fc:	4b64      	ldr	r3, [pc, #400]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
        break;
 8004714:	e011      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004716:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004718:	617b      	str	r3, [r7, #20]
        break;
 800471a:	e00e      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800471c:	4b5c      	ldr	r3, [pc, #368]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004728:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800472a:	617b      	str	r3, [r7, #20]
        break;
 800472c:	e005      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800472e:	4b5a      	ldr	r3, [pc, #360]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004730:	617b      	str	r3, [r7, #20]
        break;
 8004732:	e002      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004734:	bf00      	nop
 8004736:	e000      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004738:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004740:	f040 80a3 	bne.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004744:	4b52      	ldr	r3, [pc, #328]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004752:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475a:	f000 808a 	beq.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004764:	f200 809c 	bhi.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476e:	d07d      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004776:	f200 8093 	bhi.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004786:	d039      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004788:	e08a      	b.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004796:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479e:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e007      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047a8:	4b39      	ldr	r3, [pc, #228]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b0:	4a39      	ldr	r2, [pc, #228]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	0e1b      	lsrs	r3, r3, #24
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047c6:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	fb03 f202 	mul.w	r2, r3, r2
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	fbb2 f3f3 	udiv	r3, r2, r3
 80047de:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
        break;
 80047fa:	e052      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d108      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004808:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004810:	4a20      	ldr	r2, [pc, #128]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e007      	b.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800482a:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	fb03 f202 	mul.w	r2, r3, r2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	3301      	adds	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
        break;
 800486a:	e01a      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800486e:	617b      	str	r3, [r7, #20]
        break;
 8004870:	e017      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004880:	617b      	str	r3, [r7, #20]
        break;
 8004882:	e00e      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004886:	617b      	str	r3, [r7, #20]
        break;
 8004888:	e00b      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800488a:	bf00      	nop
 800488c:	e009      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	00f42400 	.word	0x00f42400
 8004898:	017d7840 	.word	0x017d7840
 800489c:	00bb8000 	.word	0x00bb8000
        break;
 80048a0:	bf00      	nop

  return frequency;
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e071      	b.n	80049aa <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	7f5b      	ldrb	r3, [r3, #29]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fc60 	bl	800119c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d053      	beq.n	8004998 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	22ca      	movs	r2, #202	; 0xca
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2253      	movs	r2, #83	; 0x53
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f99f 	bl	8004c44 <RTC_EnterInitMode>
 8004906:	4603      	mov	r3, r0
 8004908:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d12a      	bne.n	8004966 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6899      	ldr	r1, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <HAL_RTC_Init+0x104>)
 800491c:	400b      	ands	r3, r1
 800491e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6899      	ldr	r1, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6919      	ldr	r1, [r3, #16]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	041a      	lsls	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f9a8 	bl	8004cb2 <RTC_ExitInitMode>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d110      	bne.n	800498e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0208 	bic.w	r2, r2, #8
 800497a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	22ff      	movs	r2, #255	; 0xff
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
 8004996:	e001      	b.n	800499c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	ff8fffbf 	.word	0xff8fffbf

080049b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	7f1b      	ldrb	r3, [r3, #28]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_RTC_SetTime+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e085      	b.n	8004ae0 <HAL_RTC_SetTime+0x128>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2202      	movs	r2, #2
 80049de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d126      	bne.n	8004a34 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2200      	movs	r2, #0
 80049f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f97c 	bl	8004cfc <RTC_ByteToBcd2>
 8004a04:	4603      	mov	r3, r0
 8004a06:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f975 	bl	8004cfc <RTC_ByteToBcd2>
 8004a12:	4603      	mov	r3, r0
 8004a14:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a16:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	789b      	ldrb	r3, [r3, #2]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f96d 	bl	8004cfc <RTC_ByteToBcd2>
 8004a22:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a24:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	78db      	ldrb	r3, [r3, #3]
 8004a2c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e018      	b.n	8004a66 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2200      	movs	r2, #0
 8004a46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a54:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a5a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	78db      	ldrb	r3, [r3, #3]
 8004a60:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22ca      	movs	r2, #202	; 0xca
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2253      	movs	r2, #83	; 0x53
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f8e4 	bl	8004c44 <RTC_EnterInitMode>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11e      	bne.n	8004ac4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	6979      	ldr	r1, [r7, #20]
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <HAL_RTC_SetTime+0x130>)
 8004a8e:	400b      	ands	r3, r1
 8004a90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004aa0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8f9 	bl	8004cb2 <RTC_ExitInitMode>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	771a      	strb	r2, [r3, #28]

  return status;
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd90      	pop	{r4, r7, pc}
 8004ae8:	007f7f7f 	.word	0x007f7f7f

08004aec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	7f1b      	ldrb	r3, [r3, #28]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_RTC_SetDate+0x1c>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e06f      	b.n	8004be8 <HAL_RTC_SetDate+0xfc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2202      	movs	r2, #2
 8004b12:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10e      	bne.n	8004b38 <HAL_RTC_SetDate+0x4c>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	330a      	adds	r3, #10
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	78db      	ldrb	r3, [r3, #3]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f8da 	bl	8004cfc <RTC_ByteToBcd2>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f8d3 	bl	8004cfc <RTC_ByteToBcd2>
 8004b56:	4603      	mov	r3, r0
 8004b58:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b5a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	789b      	ldrb	r3, [r3, #2]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f8cb 	bl	8004cfc <RTC_ByteToBcd2>
 8004b66:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b68:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e00e      	b.n	8004b96 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b84:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22ca      	movs	r2, #202	; 0xca
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2253      	movs	r2, #83	; 0x53
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f84c 	bl	8004c44 <RTC_EnterInitMode>
 8004bac:	4603      	mov	r3, r0
 8004bae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_RTC_SetDate+0x104>)
 8004bbe:	400b      	ands	r3, r1
 8004bc0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f875 	bl	8004cb2 <RTC_ExitInitMode>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	22ff      	movs	r2, #255	; 0xff
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	771a      	strb	r2, [r3, #28]

  return status;
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}
 8004bf0:	00ffff3f 	.word	0x00ffff3f

08004bf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c10:	f7fc fefa 	bl	8001a08 <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c16:	e009      	b.n	8004c2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c18:	f7fc fef6 	bl	8001a08 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c26:	d901      	bls.n	8004c2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e007      	b.n	8004c3c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ee      	beq.n	8004c18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d122      	bne.n	8004ca8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c72:	f7fc fec9 	bl	8001a08 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c78:	e00c      	b.n	8004c94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c7a:	f7fc fec5 	bl	8001a08 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c88:	d904      	bls.n	8004c94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <RTC_EnterInitMode+0x64>
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d1e8      	bne.n	8004c7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ccc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff89 	bl	8004bf4 <HAL_RTC_WaitForSynchro>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004d0a:	e005      	b.n	8004d18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	3b0a      	subs	r3, #10
 8004d16:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	2b09      	cmp	r3, #9
 8004d1c:	d8f6      	bhi.n	8004d0c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	b2db      	uxtb	r3, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3350      	adds	r3, #80	; 0x50
 8004d4e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3350      	adds	r3, #80	; 0x50
 8004d80:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e156      	b.n	8005068 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc fa70 	bl	80012b4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f95b 	bl	8005098 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d00c      	beq.n	8004e04 <HAL_SAI_Init+0x68>
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d80d      	bhi.n	8004e0a <HAL_SAI_Init+0x6e>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SAI_Init+0x5c>
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d003      	beq.n	8004dfe <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004df6:	e008      	b.n	8004e0a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
      break;
 8004dfc:	e006      	b.n	8004e0c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004dfe:	2310      	movs	r3, #16
 8004e00:	61fb      	str	r3, [r7, #28]
      break;
 8004e02:	e003      	b.n	8004e0c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004e04:	2320      	movs	r3, #32
 8004e06:	61fb      	str	r3, [r7, #28]
      break;
 8004e08:	e000      	b.n	8004e0c <HAL_SAI_Init+0x70>
      break;
 8004e0a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d81e      	bhi.n	8004e52 <HAL_SAI_Init+0xb6>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_SAI_Init+0x80>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e33 	.word	0x08004e33
 8004e24:	08004e3b 	.word	0x08004e3b
 8004e28:	08004e43 	.word	0x08004e43
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e30:	e010      	b.n	8004e54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e36:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e38:	e00c      	b.n	8004e54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e3e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004e40:	e008      	b.n	8004e54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e46:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004e50:	e000      	b.n	8004e54 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004e52:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a85      	ldr	r2, [pc, #532]	; (8005070 <HAL_SAI_Init+0x2d4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_SAI_Init+0xcc>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a84      	ldr	r2, [pc, #528]	; (8005074 <HAL_SAI_Init+0x2d8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e68:	4a83      	ldr	r2, [pc, #524]	; (8005078 <HAL_SAI_Init+0x2dc>)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e002      	b.n	8004e76 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e70:	4a82      	ldr	r2, [pc, #520]	; (800507c <HAL_SAI_Init+0x2e0>)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04c      	beq.n	8004f18 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7a      	ldr	r2, [pc, #488]	; (8005070 <HAL_SAI_Init+0x2d4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_SAI_Init+0xfa>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a78      	ldr	r2, [pc, #480]	; (8005074 <HAL_SAI_Init+0x2d8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d104      	bne.n	8004ea0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e9a:	f7ff fb97 	bl	80045cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004e9e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a76      	ldr	r2, [pc, #472]	; (8005080 <HAL_SAI_Init+0x2e4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_SAI_Init+0x118>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a75      	ldr	r2, [pc, #468]	; (8005084 <HAL_SAI_Init+0x2e8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d104      	bne.n	8004ebe <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004eb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004eb8:	f7ff fb88 	bl	80045cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ebc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	461a      	mov	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	025b      	lsls	r3, r3, #9
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a6b      	ldr	r2, [pc, #428]	; (8005088 <HAL_SAI_Init+0x2ec>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_SAI_Init+0x2ec>)
 8004ee8:	fba3 2301 	umull	r2, r3, r3, r1
 8004eec:	08da      	lsrs	r2, r3, #3
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	1aca      	subs	r2, r1, r3
 8004ef8:	2a08      	cmp	r2, #8
 8004efa:	d904      	bls.n	8004f06 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d104      	bne.n	8004f18 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	085a      	lsrs	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_SAI_Init+0x18c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d109      	bne.n	8004f3c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_SAI_Init+0x198>
 8004f30:	2300      	movs	r3, #0
 8004f32:	e001      	b.n	8004f38 <HAL_SAI_Init+0x19c>
 8004f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	e008      	b.n	8004f4e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d102      	bne.n	8004f4a <HAL_SAI_Init+0x1ae>
 8004f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f48:	e000      	b.n	8004f4c <HAL_SAI_Init+0x1b0>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b4c      	ldr	r3, [pc, #304]	; (800508c <HAL_SAI_Init+0x2f0>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f72:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004f86:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f92:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	051b      	lsls	r3, r3, #20
 8004f9a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4b38      	ldr	r3, [pc, #224]	; (8005090 <HAL_SAI_Init+0x2f4>)
 8004fb0:	400b      	ands	r3, r1
 8004fb2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_SAI_Init+0x2f8>)
 8004fde:	400b      	ands	r3, r1
 8004fe0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6899      	ldr	r1, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004ff2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004ff8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004ffe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	3b01      	subs	r3, #1
 8005006:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005008:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68d9      	ldr	r1, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005020:	400b      	ands	r3, r1
 8005022:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005040:	3b01      	subs	r3, #1
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40015804 	.word	0x40015804
 8005074:	40015824 	.word	0x40015824
 8005078:	40015800 	.word	0x40015800
 800507c:	40015c00 	.word	0x40015c00
 8005080:	40015c04 	.word	0x40015c04
 8005084:	40015c24 	.word	0x40015c24
 8005088:	cccccccd 	.word	0xcccccccd
 800508c:	ff05c010 	.word	0xff05c010
 8005090:	ffff1ff0 	.word	0xffff1ff0
 8005094:	fff88000 	.word	0xfff88000

08005098 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <SAI_Disable+0x68>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a17      	ldr	r2, [pc, #92]	; (8005104 <SAI_Disable+0x6c>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	0b1b      	lsrs	r3, r3, #12
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	60fa      	str	r2, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	72fb      	strb	r3, [r7, #11]
      break;
 80050e2:	e006      	b.n	80050f2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e8      	bne.n	80050c4 <SAI_Disable+0x2c>

  return status;
 80050f2:	7afb      	ldrb	r3, [r7, #11]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000000 	.word	0x20000000
 8005104:	95cbec1b 	.word	0x95cbec1b

08005108 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e022      	b.n	8005160 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fc f98d 	bl	800144c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2203      	movs	r2, #3
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f814 	bl	8005168 <HAL_SD_InitCard>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00a      	b.n	8005160 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af04      	add	r7, sp, #16
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005170:	2300      	movs	r3, #0
 8005172:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005180:	2300      	movs	r3, #0
 8005182:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005184:	2376      	movs	r3, #118	; 0x76
 8005186:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681d      	ldr	r5, [r3, #0]
 800518c:	466c      	mov	r4, sp
 800518e:	f107 0314 	add.w	r3, r7, #20
 8005192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a0:	4628      	mov	r0, r5
 80051a2:	f001 ff45 	bl	8007030 <SDMMC_Init>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80051ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e059      	b.n	800526c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 ff79 	bl	80070c4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80051e2:	2002      	movs	r0, #2
 80051e4:	f7fc fc1c 	bl	8001a20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fff3 	bl	80061d4 <SD_PowerON>
 80051ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e02e      	b.n	800526c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 ff12 	bl	8006038 <SD_InitCard>
 8005214:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e01b      	b.n	800526c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800523c:	4618      	mov	r0, r3
 800523e:	f001 ffd3 	bl	80071e8 <SDMMC_CmdBlockLength>
 8005242:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <HAL_SD_InitCard+0x10c>)
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	; 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bdb0      	pop	{r4, r5, r7, pc}
 8005274:	004005ff 	.word	0x004005ff

08005278 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0c3      	b.n	8005428 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 80bc 	bne.w	8005426 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	429a      	cmp	r2, r3
 80052c0:	d907      	bls.n	80052d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0aa      	b.n	8005428 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80052f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	4a4e      	ldr	r2, [pc, #312]	; (8005430 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	4a4d      	ldr	r2, [pc, #308]	; (8005434 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005300:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2200      	movs	r2, #0
 8005308:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3380      	adds	r3, #128	; 0x80
 8005338:	4619      	mov	r1, r3
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	025b      	lsls	r3, r3, #9
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	f7fd fb49 	bl	80029d8 <HAL_DMA_Start_IT>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800535a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a35      	ldr	r2, [pc, #212]	; (8005438 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e055      	b.n	8005428 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0208 	orr.w	r2, r2, #8
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	2b01      	cmp	r3, #1
 8005392:	d002      	beq.n	800539a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	025b      	lsls	r3, r3, #9
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	025b      	lsls	r3, r3, #9
 80053a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80053a6:	2390      	movs	r3, #144	; 0x90
 80053a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80053aa:	2302      	movs	r3, #2
 80053ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f107 0210 	add.w	r2, r7, #16
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fee5 	bl	8007190 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d90a      	bls.n	80053e2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2282      	movs	r2, #130	; 0x82
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 ff49 	bl	8007270 <SDMMC_CmdReadMultiBlock>
 80053de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80053e0:	e009      	b.n	80053f6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2281      	movs	r2, #129	; 0x81
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 ff1c 	bl	800722c <SDMMC_CmdReadSingleBlock>
 80053f4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d012      	beq.n	8005422 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0d      	ldr	r2, [pc, #52]	; (8005438 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	431a      	orrs	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e002      	b.n	8005428 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	; 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	08005e47 	.word	0x08005e47
 8005434:	08005eb9 	.word	0x08005eb9
 8005438:	004005ff 	.word	0x004005ff

0800543c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d107      	bne.n	8005464 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0c6      	b.n	80055f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 80bf 	bne.w	80055f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	429a      	cmp	r2, r3
 8005484:	d907      	bls.n	8005496 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0ad      	b.n	80055f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2203      	movs	r2, #3
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 021a 	orr.w	r2, r2, #26
 80054b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	4a50      	ldr	r2, [pc, #320]	; (80055fc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	4a4f      	ldr	r2, [pc, #316]	; (8005600 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80054c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	2200      	movs	r2, #0
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d002      	beq.n	80054dc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	025b      	lsls	r3, r3, #9
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d90a      	bls.n	80054f8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	22a0      	movs	r2, #160	; 0xa0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 ff02 	bl	80072f8 <SDMMC_CmdWriteMultiBlock>
 80054f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054f6:	e009      	b.n	800550c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2290      	movs	r2, #144	; 0x90
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005504:	4618      	mov	r0, r3
 8005506:	f001 fed5 	bl	80072b4 <SDMMC_CmdWriteSingleBlock>
 800550a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d012      	beq.n	8005538 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e05c      	b.n	80055f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3380      	adds	r3, #128	; 0x80
 8005578:	461a      	mov	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	025b      	lsls	r3, r3, #9
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	f7fd fa2a 	bl	80029d8 <HAL_DMA_Start_IT>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01a      	beq.n	80055c0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 021a 	bic.w	r2, r2, #26
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a19      	ldr	r2, [pc, #100]	; (8005604 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e018      	b.n	80055f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	025b      	lsls	r3, r3, #9
 80055ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80055cc:	2390      	movs	r3, #144	; 0x90
 80055ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80055d8:	2301      	movs	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f107 0210 	add.w	r2, r7, #16
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 fdd2 	bl	8007190 <SDMMC_ConfigData>

      return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3730      	adds	r7, #48	; 0x30
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08005e1d 	.word	0x08005e1d
 8005600:	08005eb9 	.word	0x08005eb9
 8005604:	004005ff 	.word	0x004005ff

08005608 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_SD_IRQHandler+0x2e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 ffef 	bl	8006612 <SD_Read_IT>
 8005634:	e15a      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 808d 	beq.w	8005760 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b9a      	ldr	r3, [pc, #616]	; (80058c4 <HAL_SD_IRQHandler+0x2bc>)
 800565c:	400b      	ands	r3, r1
 800565e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d039      	beq.n	80056ee <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <HAL_SD_IRQHandler+0x86>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d011      	beq.n	80056b2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fe52 	bl	800733c <SDMMC_CmdStopTransfer>
 8005698:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f921 	bl	80058f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <HAL_SD_IRQHandler+0xd6>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f002 fac2 	bl	8007c68 <HAL_SD_RxCpltCallback>
 80056e4:	e102      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f002 fab4 	bl	8007c54 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056ec:	e0fe      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80f9 	beq.w	80058ec <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fe17 	bl	800733c <SDMMC_CmdStopTransfer>
 800570e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8e6 	bl	80058f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	f040 80dc 	bne.w	80058ec <HAL_SD_IRQHandler+0x2e4>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 80d6 	bne.w	80058ec <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0208 	bic.w	r2, r2, #8
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f002 fa7b 	bl	8007c54 <HAL_SD_TxCpltCallback>
}
 800575e:	e0c5      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_SD_IRQHandler+0x178>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 ff9b 	bl	80066b4 <SD_Write_IT>
 800577e:	e0b5      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80ae 	beq.w	80058ec <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	f043 0202 	orr.w	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	f043 0208 	orr.w	r2, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	f043 0220 	orr.w	r2, r3, #32
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	f043 0210 	orr.w	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005810:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fd90 	bl	800733c <SDMMC_CmdStopTransfer>
 800581c:	4602      	mov	r2, r0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f857 	bl	80058f4 <HAL_SD_ErrorCallback>
}
 8005846:	e051      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04c      	beq.n	80058ec <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <HAL_SD_IRQHandler+0x25e>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d011      	beq.n	800588a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <HAL_SD_IRQHandler+0x2c0>)
 800586c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd f910 	bl	8002a98 <HAL_DMA_Abort_IT>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d036      	beq.n	80058ec <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb6a 	bl	8005f5c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005888:	e030      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_SD_IRQHandler+0x296>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <HAL_SD_IRQHandler+0x2c4>)
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd f8f4 	bl	8002a98 <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01a      	beq.n	80058ec <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fb85 	bl	8005fca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80058c0:	e014      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
 80058c2:	bf00      	nop
 80058c4:	ffff3ec5 	.word	0xffff3ec5
 80058c8:	08005f5d 	.word	0x08005f5d
 80058cc:	08005fcb 	.word	0x08005fcb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f002 f9ab 	bl	8007c40 <HAL_SD_AbortCallback>
}
 80058ea:	e7ff      	b.n	80058ec <HAL_SD_IRQHandler+0x2e4>
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005916:	0f9b      	lsrs	r3, r3, #30
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005922:	0e9b      	lsrs	r3, r3, #26
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	b2da      	uxtb	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005934:	0e1b      	lsrs	r3, r3, #24
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	b2da      	uxtb	r2, r3
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	b2da      	uxtb	r2, r3
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	b2da      	uxtb	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595e:	b2da      	uxtb	r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005968:	0d1b      	lsrs	r3, r3, #20
 800596a:	b29a      	uxth	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	b2da      	uxtb	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005986:	0bdb      	lsrs	r3, r3, #15
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005998:	0b9b      	lsrs	r3, r3, #14
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059aa:	0b5b      	lsrs	r3, r3, #13
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059bc:	0b1b      	lsrs	r3, r3, #12
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d163      	bne.n	8005aa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059dc:	009a      	lsls	r2, r3, #2
 80059de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059e2:	4013      	ands	r3, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80059e8:	0f92      	lsrs	r2, r2, #30
 80059ea:	431a      	orrs	r2, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f4:	0edb      	lsrs	r3, r3, #27
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a06:	0e1b      	lsrs	r3, r3, #24
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a18:	0d5b      	lsrs	r3, r3, #21
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2a:	0c9b      	lsrs	r3, r3, #18
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3c:	0bdb      	lsrs	r3, r3, #15
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	7e1b      	ldrb	r3, [r3, #24]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	3302      	adds	r3, #2
 8005a60:	2201      	movs	r2, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a6a:	fb03 f202 	mul.w	r2, r3, r2
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	7a1b      	ldrb	r3, [r3, #8]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a8c:	0a52      	lsrs	r2, r2, #9
 8005a8e:	fb03 f202 	mul.w	r2, r3, r2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9c:	661a      	str	r2, [r3, #96]	; 0x60
 8005a9e:	e031      	b.n	8005b04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d11d      	bne.n	8005ae4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab6:	0c1b      	lsrs	r3, r3, #16
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	029a      	lsls	r2, r3, #10
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ae2:	e00f      	b.n	8005b04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <HAL_SD_GetCardCSD+0x344>)
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e09d      	b.n	8005c40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b08:	0b9b      	lsrs	r3, r3, #14
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1a:	09db      	lsrs	r3, r3, #7
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	0fdb      	lsrs	r3, r3, #31
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	0f5b      	lsrs	r3, r3, #29
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	0e9b      	lsrs	r3, r3, #26
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	0d9b      	lsrs	r3, r3, #22
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	0d5b      	lsrs	r3, r3, #21
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	0bdb      	lsrs	r3, r3, #15
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	0b9b      	lsrs	r3, r3, #14
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	0b5b      	lsrs	r3, r3, #13
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	0b1b      	lsrs	r3, r3, #12
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	0a9b      	lsrs	r3, r3, #10
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	004005ff 	.word	0x004005ff

08005c50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005ca8:	b5b0      	push	{r4, r5, r7, lr}
 8005caa:	b08e      	sub	sp, #56	; 0x38
 8005cac:	af04      	add	r7, sp, #16
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2203      	movs	r2, #3
 8005cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d02e      	beq.n	8005d26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	d106      	bne.n	8005cde <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
 8005cdc:	e029      	b.n	8005d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce4:	d10a      	bne.n	8005cfc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb2a 	bl	8006340 <SD_WideBus_Enable>
 8005cec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8005cfa:	e01a      	b.n	8005d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb67 	bl	80063d6 <SD_WideBus_Disable>
 8005d08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
 8005d16:	e00c      	b.n	8005d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38
 8005d24:	e005      	b.n	8005d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a26      	ldr	r2, [pc, #152]	; (8005dd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d50:	e01f      	b.n	8005d92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681d      	ldr	r5, [r3, #0]
 8005d78:	466c      	mov	r4, sp
 8005d7a:	f107 0314 	add.w	r3, r7, #20
 8005d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f001 f94f 	bl	8007030 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fa24 	bl	80071e8 <SDMMC_CmdBlockLength>
 8005da0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00c      	beq.n	8005dc2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3728      	adds	r7, #40	; 0x28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	004005ff 	.word	0x004005ff

08005ddc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa7e 	bl	80062f0 <SD_SendStatus>
 8005df4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	0a5b      	lsrs	r3, r3, #9
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005e12:	693b      	ldr	r3, [r7, #16]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	2b82      	cmp	r3, #130	; 0x82
 8005e5a:	d111      	bne.n	8005e80 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 fa6b 	bl	800733c <SDMMC_CmdStopTransfer>
 8005e66:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff fd3a 	bl	80058f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0208 	bic.w	r2, r2, #8
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f001 fedd 	bl	8007c68 <HAL_SD_RxCpltCallback>
#endif
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fc ff92 	bl	8002df0 <HAL_DMA_GetError>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d03e      	beq.n	8005f50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d002      	beq.n	8005eee <SD_DMAError+0x36>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d12d      	bne.n	8005f4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a19      	ldr	r2, [pc, #100]	; (8005f58 <SD_DMAError+0xa0>)
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005f04:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f7ff ff62 	bl	8005ddc <HAL_SD_GetCardState>
 8005f18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d002      	beq.n	8005f26 <SD_DMAError+0x6e>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d10a      	bne.n	8005f3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fa06 	bl	800733c <SDMMC_CmdStopTransfer>
 8005f30:	4602      	mov	r2, r0
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	431a      	orrs	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff fcd2 	bl	80058f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	004005ff 	.word	0x004005ff

08005f5c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff ff31 	bl	8005ddc <HAL_SD_GetCardState>
 8005f7a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b06      	cmp	r3, #6
 8005f8e:	d002      	beq.n	8005f96 <SD_DMATxAbort+0x3a>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d10a      	bne.n	8005fac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f9ce 	bl	800733c <SDMMC_CmdStopTransfer>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f001 fe43 	bl	8007c40 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005fba:	e002      	b.n	8005fc2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff fc99 	bl	80058f4 <HAL_SD_ErrorCallback>
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7ff fefa 	bl	8005ddc <HAL_SD_GetCardState>
 8005fe8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d002      	beq.n	8006004 <SD_DMARxAbort+0x3a>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b05      	cmp	r3, #5
 8006002:	d10a      	bne.n	800601a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f997 	bl	800733c <SDMMC_CmdStopTransfer>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	431a      	orrs	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fe0c 	bl	8007c40 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006028:	e002      	b.n	8006030 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fc62 	bl	80058f4 <HAL_SD_ErrorCallback>
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006038:	b5b0      	push	{r4, r5, r7, lr}
 800603a:	b094      	sub	sp, #80	; 0x50
 800603c:	af04      	add	r7, sp, #16
 800603e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006040:	2301      	movs	r3, #1
 8006042:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f001 f849 	bl	80070e0 <SDMMC_GetPowerState>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006054:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006058:	e0b8      	b.n	80061cc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	2b03      	cmp	r3, #3
 8006060:	d02f      	beq.n	80060c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f001 fa73 	bl	8007552 <SDMMC_CmdSendCID>
 800606c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <SD_InitCard+0x40>
    {
      return errorstate;
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	e0a9      	b.n	80061cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f873 	bl	800716a <SDMMC_GetResponse>
 8006084:	4602      	mov	r2, r0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2104      	movs	r1, #4
 8006090:	4618      	mov	r0, r3
 8006092:	f001 f86a 	bl	800716a <SDMMC_GetResponse>
 8006096:	4602      	mov	r2, r0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2108      	movs	r1, #8
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f861 	bl	800716a <SDMMC_GetResponse>
 80060a8:	4602      	mov	r2, r0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	210c      	movs	r1, #12
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f858 	bl	800716a <SDMMC_GetResponse>
 80060ba:	4602      	mov	r2, r0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d00d      	beq.n	80060e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f107 020e 	add.w	r2, r7, #14
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 fa79 	bl	80075cc <SDMMC_CmdSetRelAdd>
 80060da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	e072      	b.n	80061cc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d036      	beq.n	800615c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80060ee:	89fb      	ldrh	r3, [r7, #14]
 80060f0:	461a      	mov	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f001 fa43 	bl	800758e <SDMMC_CmdSendCSD>
 8006108:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	e05b      	b.n	80061cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f825 	bl	800716a <SDMMC_GetResponse>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2104      	movs	r1, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f001 f81c 	bl	800716a <SDMMC_GetResponse>
 8006132:	4602      	mov	r2, r0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2108      	movs	r1, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f001 f813 	bl	800716a <SDMMC_GetResponse>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	210c      	movs	r1, #12
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f80a 	bl	800716a <SDMMC_GetResponse>
 8006156:	4602      	mov	r2, r0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2104      	movs	r1, #4
 8006162:	4618      	mov	r0, r3
 8006164:	f001 f801 	bl	800716a <SDMMC_GetResponse>
 8006168:	4603      	mov	r3, r0
 800616a:	0d1a      	lsrs	r2, r3, #20
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006170:	f107 0310 	add.w	r3, r7, #16
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fbc6 	bl	8005908 <HAL_SD_GetCardCSD>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006186:	e021      	b.n	80061cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	2200      	movs	r2, #0
 8006194:	461c      	mov	r4, r3
 8006196:	4615      	mov	r5, r2
 8006198:	4622      	mov	r2, r4
 800619a:	462b      	mov	r3, r5
 800619c:	4608      	mov	r0, r1
 800619e:	f001 f8ef 	bl	8007380 <SDMMC_CmdSelDesel>
 80061a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <SD_InitCard+0x176>
  {
    return errorstate;
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	e00e      	b.n	80061cc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681d      	ldr	r5, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	466c      	mov	r4, sp
 80061b6:	f103 0210 	add.w	r2, r3, #16
 80061ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80061bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061c0:	3304      	adds	r3, #4
 80061c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c4:	4628      	mov	r0, r5
 80061c6:	f000 ff33 	bl	8007030 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3740      	adds	r7, #64	; 0x40
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bdb0      	pop	{r4, r5, r7, pc}

080061d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 f8ea 	bl	80073c6 <SDMMC_CmdGoIdleState>
 80061f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	e072      	b.n	80062e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f001 f8fd 	bl	8007402 <SDMMC_CmdOperCond>
 8006208:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f001 f8d3 	bl	80073c6 <SDMMC_CmdGoIdleState>
 8006220:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	e05b      	b.n	80062e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006236:	2b01      	cmp	r3, #1
 8006238:	d137      	bne.n	80062aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2100      	movs	r1, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f001 f8fd 	bl	8007440 <SDMMC_CmdAppCommand>
 8006246:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02d      	beq.n	80062aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800624e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006252:	e047      	b.n	80062e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f001 f8f0 	bl	8007440 <SDMMC_CmdAppCommand>
 8006260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <SD_PowerON+0x98>
    {
      return errorstate;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	e03b      	b.n	80062e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	491e      	ldr	r1, [pc, #120]	; (80062ec <SD_PowerON+0x118>)
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f906 	bl	8007484 <SDMMC_CmdAppOperCommand>
 8006278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006284:	e02e      	b.n	80062e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2100      	movs	r1, #0
 800628c:	4618      	mov	r0, r3
 800628e:	f000 ff6c 	bl	800716a <SDMMC_GetResponse>
 8006292:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	0fdb      	lsrs	r3, r3, #31
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <SD_PowerON+0xcc>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <SD_PowerON+0xce>
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]

    count++;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d802      	bhi.n	80062ba <SD_PowerON+0xe6>
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0cc      	beq.n	8006254 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d902      	bls.n	80062ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80062c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062c8:	e00c      	b.n	80062e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
 80062da:	e002      	b.n	80062e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	c1100000 	.word	0xc1100000

080062f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006304:	e018      	b.n	8006338 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f001 f97b 	bl	800760e <SDMMC_CmdSendStatus>
 8006318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	e009      	b.n	8006338 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff1d 	bl	800716a <SDMMC_GetResponse>
 8006330:	4602      	mov	r2, r0
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f000 ff07 	bl	800716a <SDMMC_GetResponse>
 800635c:	4603      	mov	r3, r0
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006366:	d102      	bne.n	800636e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800636c:	e02f      	b.n	80063ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800636e:	f107 030c 	add.w	r3, r7, #12
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f879 	bl	800646c <SD_FindSCR>
 800637a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	e023      	b.n	80063ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01c      	beq.n	80063ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f001 f84f 	bl	8007440 <SDMMC_CmdAppCommand>
 80063a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	e00f      	b.n	80063ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2102      	movs	r1, #2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 f889 	bl	80074cc <SDMMC_CmdBusWidth>
 80063ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	e003      	b.n	80063ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e001      	b.n	80063ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 febc 	bl	800716a <SDMMC_GetResponse>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fc:	d102      	bne.n	8006404 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006402:	e02f      	b.n	8006464 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006404:	f107 030c 	add.w	r3, r7, #12
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f82e 	bl	800646c <SD_FindSCR>
 8006410:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	e023      	b.n	8006464 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01c      	beq.n	8006460 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f001 f804 	bl	8007440 <SDMMC_CmdAppCommand>
 8006438:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	e00f      	b.n	8006464 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f001 f83e 	bl	80074cc <SDMMC_CmdBusWidth>
 8006450:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	e003      	b.n	8006464 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800645c:	2300      	movs	r3, #0
 800645e:	e001      	b.n	8006464 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006460:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b08f      	sub	sp, #60	; 0x3c
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006476:	f7fb fac7 	bl	8001a08 <HAL_GetTick>
 800647a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006480:	2300      	movs	r3, #0
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2108      	movs	r1, #8
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fea8 	bl	80071e8 <SDMMC_CmdBlockLength>
 8006498:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	e0b2      	b.n	800660a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	041b      	lsls	r3, r3, #16
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f000 ffc5 	bl	8007440 <SDMMC_CmdAppCommand>
 80064b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	e0a3      	b.n	800660a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80064c8:	2308      	movs	r3, #8
 80064ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80064cc:	2330      	movs	r3, #48	; 0x30
 80064ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80064d0:	2302      	movs	r3, #2
 80064d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80064d8:	2301      	movs	r3, #1
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f107 0210 	add.w	r2, r7, #16
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fe52 	bl	8007190 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 f80d 	bl	8007510 <SDMMC_CmdSendSCR>
 80064f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02a      	beq.n	8006554 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	e083      	b.n	800660a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00f      	beq.n	8006530 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	f107 0208 	add.w	r2, r7, #8
 800651c:	18d4      	adds	r4, r2, r3
 800651e:	4608      	mov	r0, r1
 8006520:	f000 fdb2 	bl	8007088 <SDMMC_ReadFIFO>
 8006524:	4603      	mov	r3, r0
 8006526:	6023      	str	r3, [r4, #0]
      index++;
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	3301      	adds	r3, #1
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
 800652e:	e006      	b.n	800653e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d012      	beq.n	8006564 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800653e:	f7fb fa63 	bl	8001a08 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654c:	d102      	bne.n	8006554 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800654e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006552:	e05a      	b.n	800660a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0cf      	beq.n	8006502 <SD_FindSCR+0x96>
 8006562:	e000      	b.n	8006566 <SD_FindSCR+0xfa>
      break;
 8006564:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2208      	movs	r2, #8
 800657a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800657c:	2308      	movs	r3, #8
 800657e:	e044      	b.n	800660a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2202      	movs	r2, #2
 8006594:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006596:	2302      	movs	r3, #2
 8006598:	e037      	b.n	800660a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2220      	movs	r2, #32
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80065b0:	2320      	movs	r3, #32
 80065b2:	e02a      	b.n	800660a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	061a      	lsls	r2, r3, #24
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	0e1b      	lsrs	r3, r3, #24
 80065da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	601a      	str	r2, [r3, #0]
    scr++;
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	3304      	adds	r3, #4
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	061a      	lsls	r2, r3, #24
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0e1b      	lsrs	r3, r3, #24
 8006602:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	373c      	adds	r7, #60	; 0x3c
 800660e:	46bd      	mov	sp, r7
 8006610:	bd90      	pop	{r4, r7, pc}

08006612 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b086      	sub	sp, #24
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d03f      	beq.n	80066ac <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e033      	b.n	800669a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fd26 	bl	8007088 <SDMMC_ReadFIFO>
 800663c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3b01      	subs	r3, #1
 8006650:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	b2da      	uxtb	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3b01      	subs	r3, #1
 8006666:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	0c1b      	lsrs	r3, r3, #16
 800666c:	b2da      	uxtb	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3301      	adds	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	3b01      	subs	r3, #1
 800667c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	0e1b      	lsrs	r3, r3, #24
 8006682:	b2da      	uxtb	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3b01      	subs	r3, #1
 8006692:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3301      	adds	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b07      	cmp	r3, #7
 800669e:	d9c8      	bls.n	8006632 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d043      	beq.n	8006756 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e037      	b.n	8006744 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3301      	adds	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	041a      	lsls	r2, r3, #16
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]
      tmp++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3b01      	subs	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	061a      	lsls	r2, r3, #24
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4313      	orrs	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3b01      	subs	r3, #1
 800672c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f107 0208 	add.w	r2, r7, #8
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fcb2 	bl	80070a2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	3301      	adds	r3, #1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b07      	cmp	r3, #7
 8006748:	d9c4      	bls.n	80066d4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006756:	bf00      	nop
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e040      	b.n	80067f2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fb f845 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2224      	movs	r2, #36	; 0x24
 800678a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f82d 	bl	80067fc <UART_SetConfig>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e022      	b.n	80067f2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fa85 	bl	8006cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fb0c 	bl	8006e08 <UART_CheckIdleState>
 80067f0:	4603      	mov	r3, r0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4ba6      	ldr	r3, [pc, #664]	; (8006ac0 <UART_SetConfig+0x2c4>)
 8006828:	4013      	ands	r3, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	6979      	ldr	r1, [r7, #20]
 8006830:	430b      	orrs	r3, r1
 8006832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	430a      	orrs	r2, r1
 800686c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a94      	ldr	r2, [pc, #592]	; (8006ac4 <UART_SetConfig+0x2c8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d120      	bne.n	80068ba <UART_SetConfig+0xbe>
 8006878:	4b93      	ldr	r3, [pc, #588]	; (8006ac8 <UART_SetConfig+0x2cc>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b03      	cmp	r3, #3
 8006884:	d816      	bhi.n	80068b4 <UART_SetConfig+0xb8>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0x90>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068a9 	.word	0x080068a9
 8006894:	080068a3 	.word	0x080068a3
 8006898:	080068af 	.word	0x080068af
 800689c:	2301      	movs	r3, #1
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e150      	b.n	8006b44 <UART_SetConfig+0x348>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e14d      	b.n	8006b44 <UART_SetConfig+0x348>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e14a      	b.n	8006b44 <UART_SetConfig+0x348>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e147      	b.n	8006b44 <UART_SetConfig+0x348>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e144      	b.n	8006b44 <UART_SetConfig+0x348>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a83      	ldr	r2, [pc, #524]	; (8006acc <UART_SetConfig+0x2d0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d132      	bne.n	800692a <UART_SetConfig+0x12e>
 80068c4:	4b80      	ldr	r3, [pc, #512]	; (8006ac8 <UART_SetConfig+0x2cc>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b0c      	cmp	r3, #12
 80068d0:	d828      	bhi.n	8006924 <UART_SetConfig+0x128>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0xdc>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	0800690d 	.word	0x0800690d
 80068dc:	08006925 	.word	0x08006925
 80068e0:	08006925 	.word	0x08006925
 80068e4:	08006925 	.word	0x08006925
 80068e8:	08006919 	.word	0x08006919
 80068ec:	08006925 	.word	0x08006925
 80068f0:	08006925 	.word	0x08006925
 80068f4:	08006925 	.word	0x08006925
 80068f8:	08006913 	.word	0x08006913
 80068fc:	08006925 	.word	0x08006925
 8006900:	08006925 	.word	0x08006925
 8006904:	08006925 	.word	0x08006925
 8006908:	0800691f 	.word	0x0800691f
 800690c:	2300      	movs	r3, #0
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e118      	b.n	8006b44 <UART_SetConfig+0x348>
 8006912:	2302      	movs	r3, #2
 8006914:	77fb      	strb	r3, [r7, #31]
 8006916:	e115      	b.n	8006b44 <UART_SetConfig+0x348>
 8006918:	2304      	movs	r3, #4
 800691a:	77fb      	strb	r3, [r7, #31]
 800691c:	e112      	b.n	8006b44 <UART_SetConfig+0x348>
 800691e:	2308      	movs	r3, #8
 8006920:	77fb      	strb	r3, [r7, #31]
 8006922:	e10f      	b.n	8006b44 <UART_SetConfig+0x348>
 8006924:	2310      	movs	r3, #16
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e10c      	b.n	8006b44 <UART_SetConfig+0x348>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a68      	ldr	r2, [pc, #416]	; (8006ad0 <UART_SetConfig+0x2d4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d120      	bne.n	8006976 <UART_SetConfig+0x17a>
 8006934:	4b64      	ldr	r3, [pc, #400]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800693e:	2b30      	cmp	r3, #48	; 0x30
 8006940:	d013      	beq.n	800696a <UART_SetConfig+0x16e>
 8006942:	2b30      	cmp	r3, #48	; 0x30
 8006944:	d814      	bhi.n	8006970 <UART_SetConfig+0x174>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d009      	beq.n	800695e <UART_SetConfig+0x162>
 800694a:	2b20      	cmp	r3, #32
 800694c:	d810      	bhi.n	8006970 <UART_SetConfig+0x174>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <UART_SetConfig+0x15c>
 8006952:	2b10      	cmp	r3, #16
 8006954:	d006      	beq.n	8006964 <UART_SetConfig+0x168>
 8006956:	e00b      	b.n	8006970 <UART_SetConfig+0x174>
 8006958:	2300      	movs	r3, #0
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	e0f2      	b.n	8006b44 <UART_SetConfig+0x348>
 800695e:	2302      	movs	r3, #2
 8006960:	77fb      	strb	r3, [r7, #31]
 8006962:	e0ef      	b.n	8006b44 <UART_SetConfig+0x348>
 8006964:	2304      	movs	r3, #4
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e0ec      	b.n	8006b44 <UART_SetConfig+0x348>
 800696a:	2308      	movs	r3, #8
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e0e9      	b.n	8006b44 <UART_SetConfig+0x348>
 8006970:	2310      	movs	r3, #16
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e0e6      	b.n	8006b44 <UART_SetConfig+0x348>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a56      	ldr	r2, [pc, #344]	; (8006ad4 <UART_SetConfig+0x2d8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d120      	bne.n	80069c2 <UART_SetConfig+0x1c6>
 8006980:	4b51      	ldr	r3, [pc, #324]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800698a:	2bc0      	cmp	r3, #192	; 0xc0
 800698c:	d013      	beq.n	80069b6 <UART_SetConfig+0x1ba>
 800698e:	2bc0      	cmp	r3, #192	; 0xc0
 8006990:	d814      	bhi.n	80069bc <UART_SetConfig+0x1c0>
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d009      	beq.n	80069aa <UART_SetConfig+0x1ae>
 8006996:	2b80      	cmp	r3, #128	; 0x80
 8006998:	d810      	bhi.n	80069bc <UART_SetConfig+0x1c0>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <UART_SetConfig+0x1a8>
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d006      	beq.n	80069b0 <UART_SetConfig+0x1b4>
 80069a2:	e00b      	b.n	80069bc <UART_SetConfig+0x1c0>
 80069a4:	2300      	movs	r3, #0
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e0cc      	b.n	8006b44 <UART_SetConfig+0x348>
 80069aa:	2302      	movs	r3, #2
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e0c9      	b.n	8006b44 <UART_SetConfig+0x348>
 80069b0:	2304      	movs	r3, #4
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e0c6      	b.n	8006b44 <UART_SetConfig+0x348>
 80069b6:	2308      	movs	r3, #8
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e0c3      	b.n	8006b44 <UART_SetConfig+0x348>
 80069bc:	2310      	movs	r3, #16
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e0c0      	b.n	8006b44 <UART_SetConfig+0x348>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a44      	ldr	r2, [pc, #272]	; (8006ad8 <UART_SetConfig+0x2dc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d125      	bne.n	8006a18 <UART_SetConfig+0x21c>
 80069cc:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <UART_SetConfig+0x2cc>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069da:	d017      	beq.n	8006a0c <UART_SetConfig+0x210>
 80069dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069e0:	d817      	bhi.n	8006a12 <UART_SetConfig+0x216>
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d00b      	beq.n	8006a00 <UART_SetConfig+0x204>
 80069e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ec:	d811      	bhi.n	8006a12 <UART_SetConfig+0x216>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <UART_SetConfig+0x1fe>
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f6:	d006      	beq.n	8006a06 <UART_SetConfig+0x20a>
 80069f8:	e00b      	b.n	8006a12 <UART_SetConfig+0x216>
 80069fa:	2300      	movs	r3, #0
 80069fc:	77fb      	strb	r3, [r7, #31]
 80069fe:	e0a1      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a00:	2302      	movs	r3, #2
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e09e      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a06:	2304      	movs	r3, #4
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e09b      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e098      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a12:	2310      	movs	r3, #16
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e095      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a2f      	ldr	r2, [pc, #188]	; (8006adc <UART_SetConfig+0x2e0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d125      	bne.n	8006a6e <UART_SetConfig+0x272>
 8006a22:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a30:	d017      	beq.n	8006a62 <UART_SetConfig+0x266>
 8006a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a36:	d817      	bhi.n	8006a68 <UART_SetConfig+0x26c>
 8006a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3c:	d00b      	beq.n	8006a56 <UART_SetConfig+0x25a>
 8006a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a42:	d811      	bhi.n	8006a68 <UART_SetConfig+0x26c>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <UART_SetConfig+0x254>
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4c:	d006      	beq.n	8006a5c <UART_SetConfig+0x260>
 8006a4e:	e00b      	b.n	8006a68 <UART_SetConfig+0x26c>
 8006a50:	2301      	movs	r3, #1
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e076      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a56:	2302      	movs	r3, #2
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e073      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e070      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a62:	2308      	movs	r3, #8
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	e06d      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	e06a      	b.n	8006b44 <UART_SetConfig+0x348>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <UART_SetConfig+0x2e4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d138      	bne.n	8006aea <UART_SetConfig+0x2ee>
 8006a78:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a86:	d017      	beq.n	8006ab8 <UART_SetConfig+0x2bc>
 8006a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a8c:	d82a      	bhi.n	8006ae4 <UART_SetConfig+0x2e8>
 8006a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a92:	d00b      	beq.n	8006aac <UART_SetConfig+0x2b0>
 8006a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a98:	d824      	bhi.n	8006ae4 <UART_SetConfig+0x2e8>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <UART_SetConfig+0x2aa>
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d006      	beq.n	8006ab2 <UART_SetConfig+0x2b6>
 8006aa4:	e01e      	b.n	8006ae4 <UART_SetConfig+0x2e8>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	77fb      	strb	r3, [r7, #31]
 8006aaa:	e04b      	b.n	8006b44 <UART_SetConfig+0x348>
 8006aac:	2302      	movs	r3, #2
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e048      	b.n	8006b44 <UART_SetConfig+0x348>
 8006ab2:	2304      	movs	r3, #4
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e045      	b.n	8006b44 <UART_SetConfig+0x348>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e042      	b.n	8006b44 <UART_SetConfig+0x348>
 8006abe:	bf00      	nop
 8006ac0:	efff69f3 	.word	0xefff69f3
 8006ac4:	40011000 	.word	0x40011000
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	40004400 	.word	0x40004400
 8006ad0:	40004800 	.word	0x40004800
 8006ad4:	40004c00 	.word	0x40004c00
 8006ad8:	40005000 	.word	0x40005000
 8006adc:	40011400 	.word	0x40011400
 8006ae0:	40007800 	.word	0x40007800
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	e02c      	b.n	8006b44 <UART_SetConfig+0x348>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a72      	ldr	r2, [pc, #456]	; (8006cb8 <UART_SetConfig+0x4bc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d125      	bne.n	8006b40 <UART_SetConfig+0x344>
 8006af4:	4b71      	ldr	r3, [pc, #452]	; (8006cbc <UART_SetConfig+0x4c0>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006afe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b02:	d017      	beq.n	8006b34 <UART_SetConfig+0x338>
 8006b04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b08:	d817      	bhi.n	8006b3a <UART_SetConfig+0x33e>
 8006b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0e:	d00b      	beq.n	8006b28 <UART_SetConfig+0x32c>
 8006b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b14:	d811      	bhi.n	8006b3a <UART_SetConfig+0x33e>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <UART_SetConfig+0x326>
 8006b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b1e:	d006      	beq.n	8006b2e <UART_SetConfig+0x332>
 8006b20:	e00b      	b.n	8006b3a <UART_SetConfig+0x33e>
 8006b22:	2300      	movs	r3, #0
 8006b24:	77fb      	strb	r3, [r7, #31]
 8006b26:	e00d      	b.n	8006b44 <UART_SetConfig+0x348>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	77fb      	strb	r3, [r7, #31]
 8006b2c:	e00a      	b.n	8006b44 <UART_SetConfig+0x348>
 8006b2e:	2304      	movs	r3, #4
 8006b30:	77fb      	strb	r3, [r7, #31]
 8006b32:	e007      	b.n	8006b44 <UART_SetConfig+0x348>
 8006b34:	2308      	movs	r3, #8
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	e004      	b.n	8006b44 <UART_SetConfig+0x348>
 8006b3a:	2310      	movs	r3, #16
 8006b3c:	77fb      	strb	r3, [r7, #31]
 8006b3e:	e001      	b.n	8006b44 <UART_SetConfig+0x348>
 8006b40:	2310      	movs	r3, #16
 8006b42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4c:	d15b      	bne.n	8006c06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b4e:	7ffb      	ldrb	r3, [r7, #31]
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d828      	bhi.n	8006ba6 <UART_SetConfig+0x3aa>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x360>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b89 	.word	0x08006b89
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	08006ba7 	.word	0x08006ba7
 8006b6c:	08006b97 	.word	0x08006b97
 8006b70:	08006ba7 	.word	0x08006ba7
 8006b74:	08006ba7 	.word	0x08006ba7
 8006b78:	08006ba7 	.word	0x08006ba7
 8006b7c:	08006b9f 	.word	0x08006b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b80:	f7fd f8d4 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8006b84:	61b8      	str	r0, [r7, #24]
        break;
 8006b86:	e013      	b.n	8006bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fd f8e4 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8006b8c:	61b8      	str	r0, [r7, #24]
        break;
 8006b8e:	e00f      	b.n	8006bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <UART_SetConfig+0x4c4>)
 8006b92:	61bb      	str	r3, [r7, #24]
        break;
 8006b94:	e00c      	b.n	8006bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b96:	f7fc fff7 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8006b9a:	61b8      	str	r0, [r7, #24]
        break;
 8006b9c:	e008      	b.n	8006bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba2:	61bb      	str	r3, [r7, #24]
        break;
 8006ba4:	e004      	b.n	8006bb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	77bb      	strb	r3, [r7, #30]
        break;
 8006bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d074      	beq.n	8006ca0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	005a      	lsls	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	085b      	lsrs	r3, r3, #1
 8006bc0:	441a      	add	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d916      	bls.n	8006c00 <UART_SetConfig+0x404>
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d212      	bcs.n	8006c00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f023 030f 	bic.w	r3, r3, #15
 8006be2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	89fb      	ldrh	r3, [r7, #14]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	89fa      	ldrh	r2, [r7, #14]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e04f      	b.n	8006ca0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77bb      	strb	r3, [r7, #30]
 8006c04:	e04c      	b.n	8006ca0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c06:	7ffb      	ldrb	r3, [r7, #31]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d828      	bhi.n	8006c5e <UART_SetConfig+0x462>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x418>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c41 	.word	0x08006c41
 8006c1c:	08006c49 	.word	0x08006c49
 8006c20:	08006c5f 	.word	0x08006c5f
 8006c24:	08006c4f 	.word	0x08006c4f
 8006c28:	08006c5f 	.word	0x08006c5f
 8006c2c:	08006c5f 	.word	0x08006c5f
 8006c30:	08006c5f 	.word	0x08006c5f
 8006c34:	08006c57 	.word	0x08006c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c38:	f7fd f878 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8006c3c:	61b8      	str	r0, [r7, #24]
        break;
 8006c3e:	e013      	b.n	8006c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c40:	f7fd f888 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8006c44:	61b8      	str	r0, [r7, #24]
        break;
 8006c46:	e00f      	b.n	8006c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <UART_SetConfig+0x4c4>)
 8006c4a:	61bb      	str	r3, [r7, #24]
        break;
 8006c4c:	e00c      	b.n	8006c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4e:	f7fc ff9b 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8006c52:	61b8      	str	r0, [r7, #24]
        break;
 8006c54:	e008      	b.n	8006c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c5a:	61bb      	str	r3, [r7, #24]
        break;
 8006c5c:	e004      	b.n	8006c68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	77bb      	strb	r3, [r7, #30]
        break;
 8006c66:	bf00      	nop
    }

    if (pclk != 0U)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d018      	beq.n	8006ca0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	085a      	lsrs	r2, r3, #1
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	441a      	add	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b0f      	cmp	r3, #15
 8006c86:	d909      	bls.n	8006c9c <UART_SetConfig+0x4a0>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8e:	d205      	bcs.n	8006c9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e001      	b.n	8006ca0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006cac:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40007c00 	.word	0x40007c00
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	00f42400 	.word	0x00f42400

08006cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01a      	beq.n	8006dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc2:	d10a      	bne.n	8006dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e18:	f7fa fdf6 	bl	8001a08 <HAL_GetTick>
 8006e1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d10e      	bne.n	8006e4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f831 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e027      	b.n	8006e9a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d10e      	bne.n	8006e76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f81b 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e011      	b.n	8006e9a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b09c      	sub	sp, #112	; 0x70
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb2:	e0a7      	b.n	8007004 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eba:	f000 80a3 	beq.w	8007004 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebe:	f7fa fda3 	bl	8001a08 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d302      	bcc.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d13f      	bne.n	8006f54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e068      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d050      	beq.n	8007004 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f70:	d148      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fce:	623a      	str	r2, [r7, #32]
 8006fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e010      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69da      	ldr	r2, [r3, #28]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4013      	ands	r3, r2
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	429a      	cmp	r2, r3
 8007020:	f43f af48 	beq.w	8006eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3770      	adds	r7, #112	; 0x70
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007030:	b084      	sub	sp, #16
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	f107 001c 	add.w	r0, r7, #28
 800703e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007046:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007048:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800704a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800704e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007052:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007056:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800705a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <SDMMC_Init+0x54>)
 8007068:	4013      	ands	r3, r2
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	b004      	add	sp, #16
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	ffff8100 	.word	0xffff8100

08007088 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2203      	movs	r2, #3
 80070d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0303 	and.w	r3, r3, #3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800711a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007120:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007126:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	4b06      	ldr	r3, [pc, #24]	; (800714c <SDMMC_SendCommand+0x50>)
 8007134:	4013      	ands	r3, r2
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	fffff000 	.word	0xfffff000

08007150 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	b2db      	uxtb	r3, r3
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3314      	adds	r3, #20
 8007178:	461a      	mov	r2, r3
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	4413      	add	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
}  
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80071bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80071c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071da:	2300      	movs	r3, #0

}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80071f6:	2310      	movs	r3, #16
 80071f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071fa:	2340      	movs	r3, #64	; 0x40
 80071fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007208:	f107 0308 	add.w	r3, r7, #8
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff ff74 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007214:	f241 3288 	movw	r2, #5000	; 0x1388
 8007218:	2110      	movs	r1, #16
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa1a 	bl	8007654 <SDMMC_GetCmdResp1>
 8007220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007222:	69fb      	ldr	r3, [r7, #28]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800723a:	2311      	movs	r3, #17
 800723c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800724c:	f107 0308 	add.w	r3, r7, #8
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ff52 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007258:	f241 3288 	movw	r2, #5000	; 0x1388
 800725c:	2111      	movs	r1, #17
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f9f8 	bl	8007654 <SDMMC_GetCmdResp1>
 8007264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007266:	69fb      	ldr	r3, [r7, #28]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3720      	adds	r7, #32
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800727e:	2312      	movs	r3, #18
 8007280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800728a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800728e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007290:	f107 0308 	add.w	r3, r7, #8
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ff30 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800729c:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a0:	2112      	movs	r1, #18
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9d6 	bl	8007654 <SDMMC_GetCmdResp1>
 80072a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072aa:	69fb      	ldr	r3, [r7, #28]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80072c2:	2318      	movs	r3, #24
 80072c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072c6:	2340      	movs	r3, #64	; 0x40
 80072c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072d4:	f107 0308 	add.w	r3, r7, #8
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ff0e 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80072e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e4:	2118      	movs	r1, #24
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9b4 	bl	8007654 <SDMMC_GetCmdResp1>
 80072ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072ee:	69fb      	ldr	r3, [r7, #28]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007306:	2319      	movs	r3, #25
 8007308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800730a:	2340      	movs	r3, #64	; 0x40
 800730c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007318:	f107 0308 	add.w	r3, r7, #8
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff feec 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007324:	f241 3288 	movw	r2, #5000	; 0x1388
 8007328:	2119      	movs	r1, #25
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f992 	bl	8007654 <SDMMC_GetCmdResp1>
 8007330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007332:	69fb      	ldr	r3, [r7, #28]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3720      	adds	r7, #32
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007348:	230c      	movs	r3, #12
 800734a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800735a:	f107 0308 	add.w	r3, r7, #8
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fecb 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007366:	4a05      	ldr	r2, [pc, #20]	; (800737c <SDMMC_CmdStopTransfer+0x40>)
 8007368:	210c      	movs	r1, #12
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f972 	bl	8007654 <SDMMC_GetCmdResp1>
 8007370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007372:	69fb      	ldr	r3, [r7, #28]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	05f5e100 	.word	0x05f5e100

08007380 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007390:	2307      	movs	r3, #7
 8007392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800739c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073a2:	f107 0310 	add.w	r3, r7, #16
 80073a6:	4619      	mov	r1, r3
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff fea7 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80073ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b2:	2107      	movs	r1, #7
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f94d 	bl	8007654 <SDMMC_GetCmdResp1>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	; 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b088      	sub	sp, #32
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80073d6:	2300      	movs	r3, #0
 80073d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073e4:	f107 0308 	add.w	r3, r7, #8
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fe86 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb67 	bl	8007ac4 <SDMMC_GetCmdError>
 80073f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f8:	69fb      	ldr	r3, [r7, #28]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b088      	sub	sp, #32
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800740a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800740e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007410:	2308      	movs	r3, #8
 8007412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800741c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007422:	f107 0308 	add.w	r3, r7, #8
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fe67 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fafa 	bl	8007a28 <SDMMC_GetCmdResp7>
 8007434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007436:	69fb      	ldr	r3, [r7, #28]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800744e:	2337      	movs	r3, #55	; 0x37
 8007450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800745a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fe48 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	2137      	movs	r1, #55	; 0x37
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8ee 	bl	8007654 <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <SDMMC_CmdAppOperCommand+0x44>)
 8007492:	4313      	orrs	r3, r2
 8007494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007496:	2329      	movs	r3, #41	; 0x29
 8007498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800749a:	2340      	movs	r3, #64	; 0x40
 800749c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074a8:	f107 0308 	add.w	r3, r7, #8
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fe24 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa03 	bl	80078c0 <SDMMC_GetCmdResp3>
 80074ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074bc:	69fb      	ldr	r3, [r7, #28]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	80100000 	.word	0x80100000

080074cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80074da:	2306      	movs	r3, #6
 80074dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074de:	2340      	movs	r3, #64	; 0x40
 80074e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fe02 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80074f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fc:	2106      	movs	r1, #6
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f8a8 	bl	8007654 <SDMMC_GetCmdResp1>
 8007504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007506:	69fb      	ldr	r3, [r7, #28]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800751c:	2333      	movs	r3, #51	; 0x33
 800751e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007520:	2340      	movs	r3, #64	; 0x40
 8007522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800752c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800752e:	f107 0308 	add.w	r3, r7, #8
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fde1 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800753a:	f241 3288 	movw	r2, #5000	; 0x1388
 800753e:	2133      	movs	r1, #51	; 0x33
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f887 	bl	8007654 <SDMMC_GetCmdResp1>
 8007546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007548:	69fb      	ldr	r3, [r7, #28]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b088      	sub	sp, #32
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800755e:	2302      	movs	r3, #2
 8007560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007562:	23c0      	movs	r3, #192	; 0xc0
 8007564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800756a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800756e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff fdc0 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f957 	bl	8007830 <SDMMC_GetCmdResp2>
 8007582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007584:	69fb      	ldr	r3, [r7, #28]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b088      	sub	sp, #32
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800759c:	2309      	movs	r3, #9
 800759e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075a0:	23c0      	movs	r3, #192	; 0xc0
 80075a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff fda1 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f938 	bl	8007830 <SDMMC_GetCmdResp2>
 80075c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c2:	69fb      	ldr	r3, [r7, #28]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075da:	2303      	movs	r3, #3
 80075dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075de:	2340      	movs	r3, #64	; 0x40
 80075e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fd82 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	2103      	movs	r1, #3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f99d 	bl	800793c <SDMMC_GetCmdResp6>
 8007602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007604:	69fb      	ldr	r3, [r7, #28]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b088      	sub	sp, #32
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800761c:	230d      	movs	r3, #13
 800761e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007620:	2340      	movs	r3, #64	; 0x40
 8007622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff fd61 	bl	80070fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800763a:	f241 3288 	movw	r2, #5000	; 0x1388
 800763e:	210d      	movs	r1, #13
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f807 	bl	8007654 <SDMMC_GetCmdResp1>
 8007646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007648:	69fb      	ldr	r3, [r7, #28]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	460b      	mov	r3, r1
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007662:	4b70      	ldr	r3, [pc, #448]	; (8007824 <SDMMC_GetCmdResp1+0x1d0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a70      	ldr	r2, [pc, #448]	; (8007828 <SDMMC_GetCmdResp1+0x1d4>)
 8007668:	fba2 2303 	umull	r2, r3, r2, r3
 800766c:	0a5a      	lsrs	r2, r3, #9
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	fb02 f303 	mul.w	r3, r2, r3
 8007674:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	1e5a      	subs	r2, r3, #1
 800767a:	61fa      	str	r2, [r7, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d102      	bne.n	8007686 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007684:	e0c9      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0ef      	beq.n	8007676 <SDMMC_GetCmdResp1+0x22>
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1ea      	bne.n	8007676 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2204      	movs	r2, #4
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076b2:	2304      	movs	r3, #4
 80076b4:	e0b1      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0a6      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	22c5      	movs	r2, #197	; 0xc5
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fd3c 	bl	8007150 <SDMMC_GetCommandResponse>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	4293      	cmp	r3, r2
 80076e0:	d001      	beq.n	80076e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e099      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80076e6:	2100      	movs	r1, #0
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff fd3e 	bl	800716a <SDMMC_GetResponse>
 80076ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4b4e      	ldr	r3, [pc, #312]	; (800782c <SDMMC_GetCmdResp1+0x1d8>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e08d      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da02      	bge.n	800770a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007708:	e087      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	e080      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007722:	2380      	movs	r3, #128	; 0x80
 8007724:	e079      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007734:	e071      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007744:	e069      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007754:	e061      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007764:	e059      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007774:	e051      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007784:	e049      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007794:	e041      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80077a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a4:	e039      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80077b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077b4:	e031      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80077c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077c4:	e029      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80077d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077d4:	e021      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80077e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077e4:	e019      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80077f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077f4:	e011      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007804:	e009      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007810:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007814:	e001      	b.n	800781a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800781a:	4618      	mov	r0, r3
 800781c:	3720      	adds	r7, #32
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000000 	.word	0x20000000
 8007828:	10624dd3 	.word	0x10624dd3
 800782c:	fdffe008 	.word	0xfdffe008

08007830 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007838:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <SDMMC_GetCmdResp2+0x88>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1f      	ldr	r2, [pc, #124]	; (80078bc <SDMMC_GetCmdResp2+0x8c>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0a5b      	lsrs	r3, r3, #9
 8007844:	f241 3288 	movw	r2, #5000	; 0x1388
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	1e5a      	subs	r2, r3, #1
 8007852:	60fa      	str	r2, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007858:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800785c:	e026      	b.n	80078ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0ef      	beq.n	800784e <SDMMC_GetCmdResp2+0x1e>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1ea      	bne.n	800784e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d004      	beq.n	800788e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800788a:	2304      	movs	r3, #4
 800788c:	e00e      	b.n	80078ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e003      	b.n	80078ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	22c5      	movs	r2, #197	; 0xc5
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000000 	.word	0x20000000
 80078bc:	10624dd3 	.word	0x10624dd3

080078c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078c8:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <SDMMC_GetCmdResp3+0x74>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <SDMMC_GetCmdResp3+0x78>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	0a5b      	lsrs	r3, r3, #9
 80078d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d8:	fb02 f303 	mul.w	r3, r2, r3
 80078dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1e5a      	subs	r2, r3, #1
 80078e2:	60fa      	str	r2, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078ec:	e01b      	b.n	8007926 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0ef      	beq.n	80078de <SDMMC_GetCmdResp3+0x1e>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1ea      	bne.n	80078de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2204      	movs	r2, #4
 8007918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800791a:	2304      	movs	r3, #4
 800791c:	e003      	b.n	8007926 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	22c5      	movs	r2, #197	; 0xc5
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000000 	.word	0x20000000
 8007938:	10624dd3 	.word	0x10624dd3

0800793c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	460b      	mov	r3, r1
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800794a:	4b35      	ldr	r3, [pc, #212]	; (8007a20 <SDMMC_GetCmdResp6+0xe4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a35      	ldr	r2, [pc, #212]	; (8007a24 <SDMMC_GetCmdResp6+0xe8>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	0a5b      	lsrs	r3, r3, #9
 8007956:	f241 3288 	movw	r2, #5000	; 0x1388
 800795a:	fb02 f303 	mul.w	r3, r2, r3
 800795e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	1e5a      	subs	r2, r3, #1
 8007964:	61fa      	str	r2, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800796a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800796e:	e052      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0ef      	beq.n	8007960 <SDMMC_GetCmdResp6+0x24>
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1ea      	bne.n	8007960 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2204      	movs	r2, #4
 800799a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800799c:	2304      	movs	r3, #4
 800799e:	e03a      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e02f      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fbca 	bl	8007150 <SDMMC_GetCommandResponse>
 80079bc:	4603      	mov	r3, r0
 80079be:	461a      	mov	r2, r3
 80079c0:	7afb      	ldrb	r3, [r7, #11]
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d001      	beq.n	80079ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e025      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	22c5      	movs	r2, #197	; 0xc5
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80079d0:	2100      	movs	r1, #0
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff fbc9 	bl	800716a <SDMMC_GetResponse>
 80079d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	0c1b      	lsrs	r3, r3, #16
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e011      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a00:	e009      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a10:	e001      	b.n	8007a16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000000 	.word	0x20000000
 8007a24:	10624dd3 	.word	0x10624dd3

08007a28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a30:	4b22      	ldr	r3, [pc, #136]	; (8007abc <SDMMC_GetCmdResp7+0x94>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a22      	ldr	r2, [pc, #136]	; (8007ac0 <SDMMC_GetCmdResp7+0x98>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	0a5b      	lsrs	r3, r3, #9
 8007a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1e5a      	subs	r2, r3, #1
 8007a4a:	60fa      	str	r2, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a54:	e02c      	b.n	8007ab0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0ef      	beq.n	8007a46 <SDMMC_GetCmdResp7+0x1e>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1ea      	bne.n	8007a46 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a82:	2304      	movs	r3, #4
 8007a84:	e014      	b.n	8007ab0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e009      	b.n	8007ab0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2240      	movs	r2, #64	; 0x40
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007aae:	2300      	movs	r3, #0
  
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	20000000 	.word	0x20000000
 8007ac0:	10624dd3 	.word	0x10624dd3

08007ac4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <SDMMC_GetCmdError+0x50>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <SDMMC_GetCmdError+0x54>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	0a5b      	lsrs	r3, r3, #9
 8007ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
 8007ae0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	60fa      	str	r2, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007af0:	e009      	b.n	8007b06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f1      	beq.n	8007ae2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	22c5      	movs	r2, #197	; 0xc5
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000000 	.word	0x20000000
 8007b18:	10624dd3 	.word	0x10624dd3

08007b1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007b20:	4904      	ldr	r1, [pc, #16]	; (8007b34 <MX_FATFS_Init+0x18>)
 8007b22:	4805      	ldr	r0, [pc, #20]	; (8007b38 <MX_FATFS_Init+0x1c>)
 8007b24:	f002 fbd2 	bl	800a2cc <FATFS_LinkDriver>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <MX_FATFS_Init+0x20>)
 8007b2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20001988 	.word	0x20001988
 8007b38:	0800ed84 	.word	0x0800ed84
 8007b3c:	20001984 	.word	0x20001984

08007b40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007b5a:	f000 f896 	bl	8007c8a <BSP_SD_IsDetected>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d001      	beq.n	8007b68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007b64:	2302      	movs	r3, #2
 8007b66:	e012      	b.n	8007b8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007b68:	480b      	ldr	r0, [pc, #44]	; (8007b98 <BSP_SD_Init+0x48>)
 8007b6a:	f7fd facd 	bl	8005108 <HAL_SD_Init>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b7c:	4806      	ldr	r0, [pc, #24]	; (8007b98 <BSP_SD_Init+0x48>)
 8007b7e:	f7fe f893 	bl	8005ca8 <HAL_SD_ConfigWideBusOperation>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20001790 	.word	0x20001790

08007b9c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	68f9      	ldr	r1, [r7, #12]
 8007bb2:	4806      	ldr	r0, [pc, #24]	; (8007bcc <BSP_SD_ReadBlocks_DMA+0x30>)
 8007bb4:	f7fd fb60 	bl	8005278 <HAL_SD_ReadBlocks_DMA>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20001790 	.word	0x20001790

08007bd0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	4806      	ldr	r0, [pc, #24]	; (8007c00 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007be8:	f7fd fc28 	bl	800543c <HAL_SD_WriteBlocks_DMA>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20001790 	.word	0x20001790

08007c04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007c08:	4805      	ldr	r0, [pc, #20]	; (8007c20 <BSP_SD_GetCardState+0x1c>)
 8007c0a:	f7fe f8e7 	bl	8005ddc <HAL_SD_GetCardState>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	bf14      	ite	ne
 8007c14:	2301      	movne	r3, #1
 8007c16:	2300      	moveq	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20001790 	.word	0x20001790

08007c24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4803      	ldr	r0, [pc, #12]	; (8007c3c <BSP_SD_GetCardInfo+0x18>)
 8007c30:	f7fe f80e 	bl	8005c50 <HAL_SD_GetCardInfo>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20001790 	.word	0x20001790

08007c40 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007c48:	f000 f818 	bl	8007c7c <BSP_SD_AbortCallback>
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007c5c:	f000 f9a8 	bl	8007fb0 <BSP_SD_WriteCpltCallback>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007c70:	f000 f9aa 	bl	8007fc8 <BSP_SD_ReadCpltCallback>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0

}
 8007c80:	bf00      	nop
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007c90:	2301      	movs	r3, #1
 8007c92:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007c94:	f000 f80c 	bl	8007cb0 <BSP_PlatformIsDetected>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	b2db      	uxtb	r3, r3
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cbe:	4806      	ldr	r0, [pc, #24]	; (8007cd8 <BSP_PlatformIsDetected+0x28>)
 8007cc0:	f7fb fb2e 	bl	8003320 <HAL_GPIO_ReadPin>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007cce:	79fb      	ldrb	r3, [r7, #7]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40020400 	.word	0x40020400

08007cdc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007ce4:	f7f9 fe90 	bl	8001a08 <HAL_GetTick>
 8007ce8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007cea:	e006      	b.n	8007cfa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cec:	f7ff ff8a 	bl	8007c04 <BSP_SD_GetCardState>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e009      	b.n	8007d0e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007cfa:	f7f9 fe85 	bl	8001a08 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d8f0      	bhi.n	8007cec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <SD_CheckStatus+0x38>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007d28:	f7ff ff6c 	bl	8007c04 <BSP_SD_GetCardState>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <SD_CheckStatus+0x38>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <SD_CheckStatus+0x38>)
 8007d40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007d42:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <SD_CheckStatus+0x38>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b2db      	uxtb	r3, r3
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000009 	.word	0x20000009

08007d54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007d5e:	f7ff fef7 	bl	8007b50 <BSP_SD_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d107      	bne.n	8007d78 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff ffd4 	bl	8007d18 <SD_CheckStatus>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <SD_initialize+0x34>)
 8007d76:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007d78:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <SD_initialize+0x34>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b2db      	uxtb	r3, r3
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000009 	.word	0x20000009

08007d8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff ffbd 	bl	8007d18 <SD_CheckStatus>
 8007d9e:	4603      	mov	r3, r0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007dbc:	f247 5030 	movw	r0, #30000	; 0x7530
 8007dc0:	f7ff ff8c 	bl	8007cdc <SD_CheckStatusWithTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da01      	bge.n	8007dce <SD_read+0x26>
  {
    return res;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	e03b      	b.n	8007e46 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	f7ff fee2 	bl	8007b9c <BSP_SD_ReadBlocks_DMA>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d132      	bne.n	8007e44 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007dde:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <SD_read+0xa8>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007de4:	f7f9 fe10 	bl	8001a08 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007dea:	bf00      	nop
 8007dec:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <SD_read+0xa8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d108      	bne.n	8007e06 <SD_read+0x5e>
 8007df4:	f7f9 fe08 	bl	8001a08 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	f247 522f 	movw	r2, #29999	; 0x752f
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d9f2      	bls.n	8007dec <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <SD_read+0xa8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
 8007e12:	e017      	b.n	8007e44 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007e14:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <SD_read+0xa8>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007e1a:	f7f9 fdf5 	bl	8001a08 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007e20:	e007      	b.n	8007e32 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e22:	f7ff feef 	bl	8007c04 <BSP_SD_GetCardState>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <SD_read+0x8a>
          {
            res = RES_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007e30:	e008      	b.n	8007e44 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007e32:	f7f9 fde9 	bl	8001a08 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d9ee      	bls.n	8007e22 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20001df0 	.word	0x20001df0

08007e54 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007e68:	4b24      	ldr	r3, [pc, #144]	; (8007efc <SD_write+0xa8>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007e6e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007e72:	f7ff ff33 	bl	8007cdc <SD_CheckStatusWithTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da01      	bge.n	8007e80 <SD_write+0x2c>
  {
    return res;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	e038      	b.n	8007ef2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	68b8      	ldr	r0, [r7, #8]
 8007e86:	f7ff fea3 	bl	8007bd0 <BSP_SD_WriteBlocks_DMA>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d12f      	bne.n	8007ef0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007e90:	f7f9 fdba 	bl	8001a08 <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007e96:	bf00      	nop
 8007e98:	4b18      	ldr	r3, [pc, #96]	; (8007efc <SD_write+0xa8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d108      	bne.n	8007eb2 <SD_write+0x5e>
 8007ea0:	f7f9 fdb2 	bl	8001a08 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	f247 522f 	movw	r2, #29999	; 0x752f
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d9f2      	bls.n	8007e98 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <SD_write+0xa8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d102      	bne.n	8007ec0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75fb      	strb	r3, [r7, #23]
 8007ebe:	e017      	b.n	8007ef0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007ec0:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <SD_write+0xa8>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007ec6:	f7f9 fd9f 	bl	8001a08 <HAL_GetTick>
 8007eca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ecc:	e007      	b.n	8007ede <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ece:	f7ff fe99 	bl	8007c04 <BSP_SD_GetCardState>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <SD_write+0x8a>
          {
            res = RES_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	75fb      	strb	r3, [r7, #23]
            break;
 8007edc:	e008      	b.n	8007ef0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ede:	f7f9 fd93 	bl	8001a08 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f247 522f 	movw	r2, #29999	; 0x752f
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d9ee      	bls.n	8007ece <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20001dec 	.word	0x20001dec

08007f00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08c      	sub	sp, #48	; 0x30
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	603a      	str	r2, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007f16:	4b25      	ldr	r3, [pc, #148]	; (8007fac <SD_ioctl+0xac>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <SD_ioctl+0x28>
 8007f24:	2303      	movs	r3, #3
 8007f26:	e03c      	b.n	8007fa2 <SD_ioctl+0xa2>

  switch (cmd)
 8007f28:	79bb      	ldrb	r3, [r7, #6]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d834      	bhi.n	8007f98 <SD_ioctl+0x98>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <SD_ioctl+0x34>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f7f 	.word	0x08007f7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f4a:	e028      	b.n	8007f9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f4c:	f107 030c 	add.w	r3, r7, #12
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fe67 	bl	8007c24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f62:	e01c      	b.n	8007f9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f64:	f107 030c 	add.w	r3, r7, #12
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff fe5b 	bl	8007c24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f7c:	e00f      	b.n	8007f9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f7e:	f107 030c 	add.w	r3, r7, #12
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fe4e 	bl	8007c24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	0a5a      	lsrs	r2, r3, #9
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007f96:	e002      	b.n	8007f9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3730      	adds	r7, #48	; 0x30
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000009 	.word	0x20000009

08007fb0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007fb4:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <BSP_SD_WriteCpltCallback+0x14>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20001dec 	.word	0x20001dec

08007fc8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <BSP_SD_ReadCpltCallback+0x14>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20001df0 	.word	0x20001df0

08007fe0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	4a08      	ldr	r2, [pc, #32]	; (8008010 <disk_status+0x30>)
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	79fa      	ldrb	r2, [r7, #7]
 8007ff8:	4905      	ldr	r1, [pc, #20]	; (8008010 <disk_status+0x30>)
 8007ffa:	440a      	add	r2, r1
 8007ffc:	7a12      	ldrb	r2, [r2, #8]
 8007ffe:	4610      	mov	r0, r2
 8008000:	4798      	blx	r3
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20001e1c 	.word	0x20001e1c

08008014 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	4a0d      	ldr	r2, [pc, #52]	; (800805c <disk_initialize+0x48>)
 8008026:	5cd3      	ldrb	r3, [r2, r3]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d111      	bne.n	8008050 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	4a0b      	ldr	r2, [pc, #44]	; (800805c <disk_initialize+0x48>)
 8008030:	2101      	movs	r1, #1
 8008032:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <disk_initialize+0x48>)
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	79fa      	ldrb	r2, [r7, #7]
 8008042:	4906      	ldr	r1, [pc, #24]	; (800805c <disk_initialize+0x48>)
 8008044:	440a      	add	r2, r1
 8008046:	7a12      	ldrb	r2, [r2, #8]
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20001e1c 	.word	0x20001e1c

08008060 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	4a0a      	ldr	r2, [pc, #40]	; (800809c <disk_read+0x3c>)
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	689c      	ldr	r4, [r3, #8]
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4a07      	ldr	r2, [pc, #28]	; (800809c <disk_read+0x3c>)
 8008080:	4413      	add	r3, r2
 8008082:	7a18      	ldrb	r0, [r3, #8]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	47a0      	blx	r4
 800808c:	4603      	mov	r3, r0
 800808e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
}
 8008092:	4618      	mov	r0, r3
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	bd90      	pop	{r4, r7, pc}
 800809a:	bf00      	nop
 800809c:	20001e1c 	.word	0x20001e1c

080080a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <disk_write+0x3c>)
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68dc      	ldr	r4, [r3, #12]
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	4a07      	ldr	r2, [pc, #28]	; (80080dc <disk_write+0x3c>)
 80080c0:	4413      	add	r3, r2
 80080c2:	7a18      	ldrb	r0, [r3, #8]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	47a0      	blx	r4
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd90      	pop	{r4, r7, pc}
 80080da:	bf00      	nop
 80080dc:	20001e1c 	.word	0x20001e1c

080080e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	603a      	str	r2, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
 80080ec:	460b      	mov	r3, r1
 80080ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	4a09      	ldr	r2, [pc, #36]	; (8008118 <disk_ioctl+0x38>)
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	79fa      	ldrb	r2, [r7, #7]
 80080fe:	4906      	ldr	r1, [pc, #24]	; (8008118 <disk_ioctl+0x38>)
 8008100:	440a      	add	r2, r1
 8008102:	7a10      	ldrb	r0, [r2, #8]
 8008104:	79b9      	ldrb	r1, [r7, #6]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4798      	blx	r3
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
  return res;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20001e1c 	.word	0x20001e1c

0800811c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3301      	adds	r3, #1
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	b21a      	sxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	b21b      	sxth	r3, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	b21b      	sxth	r3, r3
 800813c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800813e:	89fb      	ldrh	r3, [r7, #14]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3303      	adds	r3, #3
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	3202      	adds	r2, #2
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	3201      	adds	r2, #1
 8008172:	7812      	ldrb	r2, [r2, #0]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7812      	ldrb	r2, [r2, #0]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
	return rv;
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	887a      	ldrh	r2, [r7, #2]
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	887b      	ldrh	r3, [r7, #2]
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	887a      	ldrh	r2, [r7, #2]
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	0a1b      	lsrs	r3, r3, #8
 80081e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00d      	beq.n	8008256 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	1c53      	adds	r3, r2, #1
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	1c59      	adds	r1, r3, #1
 8008244:	6179      	str	r1, [r7, #20]
 8008246:	7812      	ldrb	r2, [r2, #0]
 8008248:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	607b      	str	r3, [r7, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f1      	bne.n	800823a <mem_cpy+0x1a>
	}
}
 8008256:	bf00      	nop
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008262:	b480      	push	{r7}
 8008264:	b087      	sub	sp, #28
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	617a      	str	r2, [r7, #20]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3b01      	subs	r3, #1
 8008282:	607b      	str	r3, [r7, #4]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f3      	bne.n	8008272 <mem_set+0x10>
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008298:	b480      	push	{r7}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	61fa      	str	r2, [r7, #28]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	4619      	mov	r1, r3
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	61ba      	str	r2, [r7, #24]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	1acb      	subs	r3, r1, r3
 80082c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	607b      	str	r3, [r7, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <mem_cmp+0x40>
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0eb      	beq.n	80082b0 <mem_cmp+0x18>

	return r;
 80082d8:	697b      	ldr	r3, [r7, #20]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3724      	adds	r7, #36	; 0x24
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80082f0:	e002      	b.n	80082f8 <chk_chr+0x12>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3301      	adds	r3, #1
 80082f6:	607b      	str	r3, [r7, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <chk_chr+0x26>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	4293      	cmp	r3, r2
 800830a:	d1f2      	bne.n	80082f2 <chk_chr+0xc>
	return *str;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	781b      	ldrb	r3, [r3, #0]
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	e029      	b.n	8008384 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008330:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <chk_lock+0xb4>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	4413      	add	r3, r2
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01d      	beq.n	800837a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800833e:	4a24      	ldr	r2, [pc, #144]	; (80083d0 <chk_lock+0xb4>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	4413      	add	r3, r2
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d116      	bne.n	800837e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008350:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <chk_lock+0xb4>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008360:	429a      	cmp	r2, r3
 8008362:	d10c      	bne.n	800837e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008364:	4a1a      	ldr	r2, [pc, #104]	; (80083d0 <chk_lock+0xb4>)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	4413      	add	r3, r2
 800836c:	3308      	adds	r3, #8
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008374:	429a      	cmp	r2, r3
 8008376:	d102      	bne.n	800837e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008378:	e007      	b.n	800838a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d9d2      	bls.n	8008330 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d109      	bne.n	80083a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <chk_lock+0x80>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d101      	bne.n	80083a0 <chk_lock+0x84>
 800839c:	2300      	movs	r3, #0
 800839e:	e010      	b.n	80083c2 <chk_lock+0xa6>
 80083a0:	2312      	movs	r3, #18
 80083a2:	e00e      	b.n	80083c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d108      	bne.n	80083bc <chk_lock+0xa0>
 80083aa:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <chk_lock+0xb4>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	4413      	add	r3, r2
 80083b2:	330c      	adds	r3, #12
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	d101      	bne.n	80083c0 <chk_lock+0xa4>
 80083bc:	2310      	movs	r3, #16
 80083be:	e000      	b.n	80083c2 <chk_lock+0xa6>
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20001dfc 	.word	0x20001dfc

080083d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083da:	2300      	movs	r3, #0
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	e002      	b.n	80083e6 <enq_lock+0x12>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3301      	adds	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d806      	bhi.n	80083fa <enq_lock+0x26>
 80083ec:	4a09      	ldr	r2, [pc, #36]	; (8008414 <enq_lock+0x40>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	4413      	add	r3, r2
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f2      	bne.n	80083e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	bf14      	ite	ne
 8008400:	2301      	movne	r3, #1
 8008402:	2300      	moveq	r3, #0
 8008404:	b2db      	uxtb	r3, r3
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20001dfc 	.word	0x20001dfc

08008418 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e01f      	b.n	8008468 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008428:	4a41      	ldr	r2, [pc, #260]	; (8008530 <inc_lock+0x118>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	4413      	add	r3, r2
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d113      	bne.n	8008462 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800843a:	4a3d      	ldr	r2, [pc, #244]	; (8008530 <inc_lock+0x118>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	4413      	add	r3, r2
 8008442:	3304      	adds	r3, #4
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800844a:	429a      	cmp	r2, r3
 800844c:	d109      	bne.n	8008462 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800844e:	4a38      	ldr	r2, [pc, #224]	; (8008530 <inc_lock+0x118>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	4413      	add	r3, r2
 8008456:	3308      	adds	r3, #8
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800845e:	429a      	cmp	r2, r3
 8008460:	d006      	beq.n	8008470 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3301      	adds	r3, #1
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d9dc      	bls.n	8008428 <inc_lock+0x10>
 800846e:	e000      	b.n	8008472 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008470:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d132      	bne.n	80084de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e002      	b.n	8008484 <inc_lock+0x6c>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d806      	bhi.n	8008498 <inc_lock+0x80>
 800848a:	4a29      	ldr	r2, [pc, #164]	; (8008530 <inc_lock+0x118>)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	4413      	add	r3, r2
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f2      	bne.n	800847e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d101      	bne.n	80084a2 <inc_lock+0x8a>
 800849e:	2300      	movs	r3, #0
 80084a0:	e040      	b.n	8008524 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4922      	ldr	r1, [pc, #136]	; (8008530 <inc_lock+0x118>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	440b      	add	r3, r1
 80084ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	491e      	ldr	r1, [pc, #120]	; (8008530 <inc_lock+0x118>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	440b      	add	r3, r1
 80084bc:	3304      	adds	r3, #4
 80084be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695a      	ldr	r2, [r3, #20]
 80084c4:	491a      	ldr	r1, [pc, #104]	; (8008530 <inc_lock+0x118>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	440b      	add	r3, r1
 80084cc:	3308      	adds	r3, #8
 80084ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80084d0:	4a17      	ldr	r2, [pc, #92]	; (8008530 <inc_lock+0x118>)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	4413      	add	r3, r2
 80084d8:	330c      	adds	r3, #12
 80084da:	2200      	movs	r2, #0
 80084dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d009      	beq.n	80084f8 <inc_lock+0xe0>
 80084e4:	4a12      	ldr	r2, [pc, #72]	; (8008530 <inc_lock+0x118>)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	4413      	add	r3, r2
 80084ec:	330c      	adds	r3, #12
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <inc_lock+0xe0>
 80084f4:	2300      	movs	r3, #0
 80084f6:	e015      	b.n	8008524 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d108      	bne.n	8008510 <inc_lock+0xf8>
 80084fe:	4a0c      	ldr	r2, [pc, #48]	; (8008530 <inc_lock+0x118>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	4413      	add	r3, r2
 8008506:	330c      	adds	r3, #12
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	e001      	b.n	8008514 <inc_lock+0xfc>
 8008510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008514:	4906      	ldr	r1, [pc, #24]	; (8008530 <inc_lock+0x118>)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	440b      	add	r3, r1
 800851c:	330c      	adds	r3, #12
 800851e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3301      	adds	r3, #1
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20001dfc 	.word	0x20001dfc

08008534 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3b01      	subs	r3, #1
 8008540:	607b      	str	r3, [r7, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d825      	bhi.n	8008594 <dec_lock+0x60>
		n = Files[i].ctr;
 8008548:	4a17      	ldr	r2, [pc, #92]	; (80085a8 <dec_lock+0x74>)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	4413      	add	r3, r2
 8008550:	330c      	adds	r3, #12
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008556:	89fb      	ldrh	r3, [r7, #14]
 8008558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855c:	d101      	bne.n	8008562 <dec_lock+0x2e>
 800855e:	2300      	movs	r3, #0
 8008560:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008562:	89fb      	ldrh	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <dec_lock+0x3a>
 8008568:	89fb      	ldrh	r3, [r7, #14]
 800856a:	3b01      	subs	r3, #1
 800856c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800856e:	4a0e      	ldr	r2, [pc, #56]	; (80085a8 <dec_lock+0x74>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	4413      	add	r3, r2
 8008576:	330c      	adds	r3, #12
 8008578:	89fa      	ldrh	r2, [r7, #14]
 800857a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <dec_lock+0x5a>
 8008582:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <dec_lock+0x74>)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	4413      	add	r3, r2
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	737b      	strb	r3, [r7, #13]
 8008592:	e001      	b.n	8008598 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008594:	2302      	movs	r3, #2
 8008596:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008598:	7b7b      	ldrb	r3, [r7, #13]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20001dfc 	.word	0x20001dfc

080085ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e010      	b.n	80085dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80085ba:	4a0d      	ldr	r2, [pc, #52]	; (80085f0 <clear_lock+0x44>)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	4413      	add	r3, r2
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d105      	bne.n	80085d6 <clear_lock+0x2a>
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <clear_lock+0x44>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	4413      	add	r3, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d9eb      	bls.n	80085ba <clear_lock+0xe>
	}
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20001dfc 	.word	0x20001dfc

080085f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	78db      	ldrb	r3, [r3, #3]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d034      	beq.n	8008672 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7858      	ldrb	r0, [r3, #1]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008618:	2301      	movs	r3, #1
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	f7ff fd40 	bl	80080a0 <disk_write>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008626:	2301      	movs	r3, #1
 8008628:	73fb      	strb	r3, [r7, #15]
 800862a:	e022      	b.n	8008672 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	429a      	cmp	r2, r3
 8008640:	d217      	bcs.n	8008672 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	789b      	ldrb	r3, [r3, #2]
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	e010      	b.n	800866c <sync_window+0x78>
					wsect += fs->fsize;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7858      	ldrb	r0, [r3, #1]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800865e:	2301      	movs	r3, #1
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	f7ff fd1d 	bl	80080a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3b01      	subs	r3, #1
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d8eb      	bhi.n	800864a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d01b      	beq.n	80086cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff ffad 	bl	80085f4 <sync_window>
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d113      	bne.n	80086cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7858      	ldrb	r0, [r3, #1]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086ae:	2301      	movs	r3, #1
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	f7ff fcd5 	bl	8008060 <disk_read>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ff87 	bl	80085f4 <sync_window>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d158      	bne.n	80087a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d148      	bne.n	800878a <sync_fs+0xb2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	791b      	ldrb	r3, [r3, #4]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d144      	bne.n	800878a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3330      	adds	r3, #48	; 0x30
 8008704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fda9 	bl	8008262 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3330      	adds	r3, #48	; 0x30
 8008714:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008718:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff fd38 	bl	8008192 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3330      	adds	r3, #48	; 0x30
 8008726:	4921      	ldr	r1, [pc, #132]	; (80087ac <sync_fs+0xd4>)
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff fd4d 	bl	80081c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3330      	adds	r3, #48	; 0x30
 8008732:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008736:	491e      	ldr	r1, [pc, #120]	; (80087b0 <sync_fs+0xd8>)
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fd45 	bl	80081c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3330      	adds	r3, #48	; 0x30
 8008742:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f7ff fd3b 	bl	80081c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3330      	adds	r3, #48	; 0x30
 8008756:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7ff fd31 	bl	80081c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7858      	ldrb	r0, [r3, #1]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877e:	2301      	movs	r3, #1
 8008780:	f7ff fc8e 	bl	80080a0 <disk_write>
			fs->fsi_flag = 0;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fca4 	bl	80080e0 <disk_ioctl>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <sync_fs+0xca>
 800879e:	2301      	movs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	41615252 	.word	0x41615252
 80087b0:	61417272 	.word	0x61417272

080087b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	3b02      	subs	r3, #2
 80087c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	3b02      	subs	r3, #2
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d301      	bcc.n	80087d4 <clust2sect+0x20>
 80087d0:	2300      	movs	r3, #0
 80087d2:	e008      	b.n	80087e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	895b      	ldrh	r3, [r3, #10]
 80087d8:	461a      	mov	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	fb03 f202 	mul.w	r2, r3, r2
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	4413      	add	r3, r2
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b086      	sub	sp, #24
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d904      	bls.n	8008812 <get_fat+0x20>
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d302      	bcc.n	8008818 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008812:	2301      	movs	r3, #1
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e08f      	b.n	8008938 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800881c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d062      	beq.n	80088ec <get_fat+0xfa>
 8008826:	2b03      	cmp	r3, #3
 8008828:	dc7c      	bgt.n	8008924 <get_fat+0x132>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d002      	beq.n	8008834 <get_fat+0x42>
 800882e:	2b02      	cmp	r3, #2
 8008830:	d042      	beq.n	80088b8 <get_fat+0xc6>
 8008832:	e077      	b.n	8008924 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	0a5b      	lsrs	r3, r3, #9
 800884a:	4413      	add	r3, r2
 800884c:	4619      	mov	r1, r3
 800884e:	6938      	ldr	r0, [r7, #16]
 8008850:	f7ff ff14 	bl	800867c <move_window>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d167      	bne.n	800892a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	60fa      	str	r2, [r7, #12]
 8008860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800886c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6a1a      	ldr	r2, [r3, #32]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	0a5b      	lsrs	r3, r3, #9
 8008876:	4413      	add	r3, r2
 8008878:	4619      	mov	r1, r3
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f7ff fefe 	bl	800867c <move_window>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d153      	bne.n	800892e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	461a      	mov	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <get_fat+0xbc>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	091b      	lsrs	r3, r3, #4
 80088ac:	e002      	b.n	80088b4 <get_fat+0xc2>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b4:	617b      	str	r3, [r7, #20]
			break;
 80088b6:	e03f      	b.n	8008938 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6a1a      	ldr	r2, [r3, #32]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	4413      	add	r3, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	6938      	ldr	r0, [r7, #16]
 80088c6:	f7ff fed9 	bl	800867c <move_window>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d130      	bne.n	8008932 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80088de:	4413      	add	r3, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff fc1b 	bl	800811c <ld_word>
 80088e6:	4603      	mov	r3, r0
 80088e8:	617b      	str	r3, [r7, #20]
			break;
 80088ea:	e025      	b.n	8008938 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6a1a      	ldr	r2, [r3, #32]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	09db      	lsrs	r3, r3, #7
 80088f4:	4413      	add	r3, r2
 80088f6:	4619      	mov	r1, r3
 80088f8:	6938      	ldr	r0, [r7, #16]
 80088fa:	f7ff febf 	bl	800867c <move_window>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d118      	bne.n	8008936 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008912:	4413      	add	r3, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fc19 	bl	800814c <ld_dword>
 800891a:	4603      	mov	r3, r0
 800891c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008920:	617b      	str	r3, [r7, #20]
			break;
 8008922:	e009      	b.n	8008938 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008924:	2301      	movs	r3, #1
 8008926:	617b      	str	r3, [r7, #20]
 8008928:	e006      	b.n	8008938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800892a:	bf00      	nop
 800892c:	e004      	b.n	8008938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008936:	bf00      	nop
		}
	}

	return val;
 8008938:	697b      	ldr	r3, [r7, #20]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008942:	b590      	push	{r4, r7, lr}
 8008944:	b089      	sub	sp, #36	; 0x24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800894e:	2302      	movs	r3, #2
 8008950:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b01      	cmp	r3, #1
 8008956:	f240 80d2 	bls.w	8008afe <put_fat+0x1bc>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	f080 80cc 	bcs.w	8008afe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b03      	cmp	r3, #3
 800896c:	f000 8096 	beq.w	8008a9c <put_fat+0x15a>
 8008970:	2b03      	cmp	r3, #3
 8008972:	f300 80cd 	bgt.w	8008b10 <put_fat+0x1ce>
 8008976:	2b01      	cmp	r3, #1
 8008978:	d002      	beq.n	8008980 <put_fat+0x3e>
 800897a:	2b02      	cmp	r3, #2
 800897c:	d06e      	beq.n	8008a5c <put_fat+0x11a>
 800897e:	e0c7      	b.n	8008b10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4413      	add	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	0a5b      	lsrs	r3, r3, #9
 8008996:	4413      	add	r3, r2
 8008998:	4619      	mov	r1, r3
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff fe6e 	bl	800867c <move_window>
 80089a0:	4603      	mov	r3, r0
 80089a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089a4:	7ffb      	ldrb	r3, [r7, #31]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 80ab 	bne.w	8008b02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	1c59      	adds	r1, r3, #1
 80089b6:	61b9      	str	r1, [r7, #24]
 80089b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089bc:	4413      	add	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <put_fat+0xa4>
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	f003 030f 	and.w	r3, r3, #15
 80089d4:	b25a      	sxtb	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	b25b      	sxtb	r3, r3
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e001      	b.n	80089ea <put_fat+0xa8>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a1a      	ldr	r2, [r3, #32]
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	0a5b      	lsrs	r3, r3, #9
 80089fc:	4413      	add	r3, r2
 80089fe:	4619      	mov	r1, r3
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f7ff fe3b 	bl	800867c <move_window>
 8008a06:	4603      	mov	r3, r0
 8008a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a0a:	7ffb      	ldrb	r3, [r7, #31]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d17a      	bne.n	8008b06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1c:	4413      	add	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <put_fat+0xf0>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	091b      	lsrs	r3, r3, #4
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	e00e      	b.n	8008a50 <put_fat+0x10e>
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b25b      	sxtb	r3, r3
 8008a38:	f023 030f 	bic.w	r3, r3, #15
 8008a3c:	b25a      	sxtb	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	b25b      	sxtb	r3, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	b25b      	sxtb	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	70da      	strb	r2, [r3, #3]
			break;
 8008a5a:	e059      	b.n	8008b10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	4413      	add	r3, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff fe07 	bl	800867c <move_window>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a72:	7ffb      	ldrb	r3, [r7, #31]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d148      	bne.n	8008b0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a86:	4413      	add	r3, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	b292      	uxth	r2, r2
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fb7f 	bl	8008192 <st_word>
			fs->wflag = 1;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	70da      	strb	r2, [r3, #3]
			break;
 8008a9a:	e039      	b.n	8008b10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1a      	ldr	r2, [r3, #32]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	09db      	lsrs	r3, r3, #7
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff fde7 	bl	800867c <move_window>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ab2:	7ffb      	ldrb	r3, [r7, #31]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d12a      	bne.n	8008b0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008acc:	4413      	add	r3, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fb3c 	bl	800814c <ld_dword>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ada:	4323      	orrs	r3, r4
 8008adc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008aec:	4413      	add	r3, r2
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff fb69 	bl	80081c8 <st_dword>
			fs->wflag = 1;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	70da      	strb	r2, [r3, #3]
			break;
 8008afc:	e008      	b.n	8008b10 <put_fat+0x1ce>
		}
	}
 8008afe:	bf00      	nop
 8008b00:	e006      	b.n	8008b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008b02:	bf00      	nop
 8008b04:	e004      	b.n	8008b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008b06:	bf00      	nop
 8008b08:	e002      	b.n	8008b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008b0a:	bf00      	nop
 8008b0c:	e000      	b.n	8008b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008b0e:	bf00      	nop
	return res;
 8008b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd90      	pop	{r4, r7, pc}

08008b1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b088      	sub	sp, #32
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d904      	bls.n	8008b40 <remove_chain+0x26>
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d301      	bcc.n	8008b44 <remove_chain+0x2a>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e04b      	b.n	8008bdc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	69b8      	ldr	r0, [r7, #24]
 8008b52:	f7ff fef6 	bl	8008942 <put_fat>
 8008b56:	4603      	mov	r3, r0
 8008b58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b5a:	7ffb      	ldrb	r3, [r7, #31]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <remove_chain+0x4a>
 8008b60:	7ffb      	ldrb	r3, [r7, #31]
 8008b62:	e03b      	b.n	8008bdc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff fe43 	bl	80087f2 <get_fat>
 8008b6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d031      	beq.n	8008bd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <remove_chain+0x64>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e02e      	b.n	8008bdc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b84:	d101      	bne.n	8008b8a <remove_chain+0x70>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e028      	b.n	8008bdc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	69b8      	ldr	r0, [r7, #24]
 8008b90:	f7ff fed7 	bl	8008942 <put_fat>
 8008b94:	4603      	mov	r3, r0
 8008b96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b98:	7ffb      	ldrb	r3, [r7, #31]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <remove_chain+0x88>
 8008b9e:	7ffb      	ldrb	r3, [r7, #31]
 8008ba0:	e01c      	b.n	8008bdc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	691a      	ldr	r2, [r3, #16]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	3b02      	subs	r3, #2
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d20b      	bcs.n	8008bc8 <remove_chain+0xae>
			fs->free_clst++;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	791b      	ldrb	r3, [r3, #4]
 8008bbe:	f043 0301 	orr.w	r3, r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3c6      	bcc.n	8008b64 <remove_chain+0x4a>
 8008bd6:	e000      	b.n	8008bda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008bd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3720      	adds	r7, #32
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10d      	bne.n	8008c16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <create_chain+0x2c>
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d31b      	bcc.n	8008c48 <create_chain+0x64>
 8008c10:	2301      	movs	r3, #1
 8008c12:	61bb      	str	r3, [r7, #24]
 8008c14:	e018      	b.n	8008c48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fdea 	bl	80087f2 <get_fat>
 8008c1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d801      	bhi.n	8008c2a <create_chain+0x46>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e070      	b.n	8008d0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c30:	d101      	bne.n	8008c36 <create_chain+0x52>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	e06a      	b.n	8008d0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d201      	bcs.n	8008c44 <create_chain+0x60>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	e063      	b.n	8008d0c <create_chain+0x128>
		scl = clst;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d307      	bcc.n	8008c6c <create_chain+0x88>
				ncl = 2;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d901      	bls.n	8008c6c <create_chain+0x88>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e04f      	b.n	8008d0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c6c:	69f9      	ldr	r1, [r7, #28]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fdbf 	bl	80087f2 <get_fat>
 8008c74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00e      	beq.n	8008c9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d003      	beq.n	8008c8a <create_chain+0xa6>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c88:	d101      	bne.n	8008c8e <create_chain+0xaa>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	e03e      	b.n	8008d0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d1da      	bne.n	8008c4c <create_chain+0x68>
 8008c96:	2300      	movs	r3, #0
 8008c98:	e038      	b.n	8008d0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ca0:	69f9      	ldr	r1, [r7, #28]
 8008ca2:	6938      	ldr	r0, [r7, #16]
 8008ca4:	f7ff fe4d 	bl	8008942 <put_fat>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <create_chain+0xe2>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6938      	ldr	r0, [r7, #16]
 8008cbe:	f7ff fe40 	bl	8008942 <put_fat>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d116      	bne.n	8008cfa <create_chain+0x116>
		fs->last_clst = ncl;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	3b02      	subs	r3, #2
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d804      	bhi.n	8008cea <create_chain+0x106>
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	791b      	ldrb	r3, [r3, #4]
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	711a      	strb	r2, [r3, #4]
 8008cf8:	e007      	b.n	8008d0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d102      	bne.n	8008d06 <create_chain+0x122>
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d04:	e000      	b.n	8008d08 <create_chain+0x124>
 8008d06:	2301      	movs	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008d0a:	69fb      	ldr	r3, [r7, #28]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	3304      	adds	r3, #4
 8008d2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	0a5b      	lsrs	r3, r3, #9
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	8952      	ldrh	r2, [r2, #10]
 8008d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1d1a      	adds	r2, r3, #4
 8008d3e:	613a      	str	r2, [r7, #16]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <clmt_clust+0x3a>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e010      	b.n	8008d70 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d307      	bcc.n	8008d66 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	3304      	adds	r3, #4
 8008d62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d64:	e7e9      	b.n	8008d3a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008d66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	4413      	add	r3, r2
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d92:	d204      	bcs.n	8008d9e <dir_sdi+0x22>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	f003 031f 	and.w	r3, r3, #31
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e063      	b.n	8008e6a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <dir_sdi+0x46>
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d902      	bls.n	8008dc2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10c      	bne.n	8008de2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	8912      	ldrh	r2, [r2, #8]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d301      	bcc.n	8008dd8 <dir_sdi+0x5c>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e048      	b.n	8008e6a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	61da      	str	r2, [r3, #28]
 8008de0:	e029      	b.n	8008e36 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	895b      	ldrh	r3, [r3, #10]
 8008de6:	025b      	lsls	r3, r3, #9
 8008de8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dea:	e019      	b.n	8008e20 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6979      	ldr	r1, [r7, #20]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fcfe 	bl	80087f2 <get_fat>
 8008df6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dfe:	d101      	bne.n	8008e04 <dir_sdi+0x88>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e032      	b.n	8008e6a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d904      	bls.n	8008e14 <dir_sdi+0x98>
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d301      	bcc.n	8008e18 <dir_sdi+0x9c>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e028      	b.n	8008e6a <dir_sdi+0xee>
			ofs -= csz;
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d2e1      	bcs.n	8008dec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008e28:	6979      	ldr	r1, [r7, #20]
 8008e2a:	6938      	ldr	r0, [r7, #16]
 8008e2c:	f7ff fcc2 	bl	80087b4 <clust2sect>
 8008e30:	4602      	mov	r2, r0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <dir_sdi+0xcc>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e010      	b.n	8008e6a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	69da      	ldr	r2, [r3, #28]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	0a5b      	lsrs	r3, r3, #9
 8008e50:	441a      	add	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e62:	441a      	add	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	3320      	adds	r3, #32
 8008e88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <dir_next+0x28>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e98:	d301      	bcc.n	8008e9e <dir_next+0x2c>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e0aa      	b.n	8008ff4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f040 8098 	bne.w	8008fda <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10b      	bne.n	8008ed4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	8912      	ldrh	r2, [r2, #8]
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	f0c0 8088 	bcc.w	8008fda <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	61da      	str	r2, [r3, #28]
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	e08f      	b.n	8008ff4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	0a5b      	lsrs	r3, r3, #9
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	8952      	ldrh	r2, [r2, #10]
 8008edc:	3a01      	subs	r2, #1
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d17a      	bne.n	8008fda <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7ff fc80 	bl	80087f2 <get_fat>
 8008ef2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d801      	bhi.n	8008efe <dir_next+0x8c>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e07a      	b.n	8008ff4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f04:	d101      	bne.n	8008f0a <dir_next+0x98>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e074      	b.n	8008ff4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d358      	bcc.n	8008fc6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d104      	bne.n	8008f24 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	61da      	str	r2, [r3, #28]
 8008f20:	2304      	movs	r3, #4
 8008f22:	e067      	b.n	8008ff4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7ff fe59 	bl	8008be4 <create_chain>
 8008f32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <dir_next+0xcc>
 8008f3a:	2307      	movs	r3, #7
 8008f3c:	e05a      	b.n	8008ff4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <dir_next+0xd6>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e055      	b.n	8008ff4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f4e:	d101      	bne.n	8008f54 <dir_next+0xe2>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e04f      	b.n	8008ff4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fb4d 	bl	80085f4 <sync_window>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <dir_next+0xf2>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e047      	b.n	8008ff4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3330      	adds	r3, #48	; 0x30
 8008f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff f977 	bl	8008262 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f7ff fc1a 	bl	80087b4 <clust2sect>
 8008f80:	4602      	mov	r2, r0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f86:	e012      	b.n	8008fae <dir_next+0x13c>
						fs->wflag = 1;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff fb30 	bl	80085f4 <sync_window>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <dir_next+0x12c>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e02a      	b.n	8008ff4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	895b      	ldrh	r3, [r3, #10]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d3e6      	bcc.n	8008f88 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1ad2      	subs	r2, r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008fcc:	6979      	ldr	r1, [r7, #20]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff fbf0 	bl	80087b4 <clust2sect>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fec:	441a      	add	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff feb4 	bl	8008d7c <dir_sdi>
 8009014:	4603      	mov	r3, r0
 8009016:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d12b      	bne.n	8009076 <dir_alloc+0x7a>
		n = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	4619      	mov	r1, r3
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff fb27 	bl	800867c <move_window>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11d      	bne.n	8009074 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2be5      	cmp	r3, #229	; 0xe5
 8009040:	d004      	beq.n	800904c <dir_alloc+0x50>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d107      	bne.n	800905c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	3301      	adds	r3, #1
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d102      	bne.n	8009060 <dir_alloc+0x64>
 800905a:	e00c      	b.n	8009076 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009060:	2101      	movs	r1, #1
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff ff05 	bl	8008e72 <dir_next>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0d7      	beq.n	8009022 <dir_alloc+0x26>
 8009072:	e000      	b.n	8009076 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009074:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b04      	cmp	r3, #4
 800907a:	d101      	bne.n	8009080 <dir_alloc+0x84>
 800907c:	2307      	movs	r3, #7
 800907e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	331a      	adds	r3, #26
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff f83f 	bl	800811c <ld_word>
 800909e:	4603      	mov	r3, r0
 80090a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d109      	bne.n	80090be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	3314      	adds	r3, #20
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff f834 	bl	800811c <ld_word>
 80090b4:	4603      	mov	r3, r0
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	331a      	adds	r3, #26
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	b292      	uxth	r2, r2
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f857 	bl	8008192 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d109      	bne.n	8009100 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f103 0214 	add.w	r2, r3, #20
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0c1b      	lsrs	r3, r3, #16
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7ff f849 	bl	8008192 <st_word>
	}
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009116:	2100      	movs	r1, #0
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fe2f 	bl	8008d7c <dir_sdi>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <dir_find+0x24>
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	e03e      	b.n	80091aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	4619      	mov	r1, r3
 8009132:	6938      	ldr	r0, [r7, #16]
 8009134:	f7ff faa2 	bl	800867c <move_window>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d12f      	bne.n	80091a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <dir_find+0x4e>
 8009150:	2304      	movs	r3, #4
 8009152:	75fb      	strb	r3, [r7, #23]
 8009154:	e028      	b.n	80091a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	330b      	adds	r3, #11
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009162:	b2da      	uxtb	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	330b      	adds	r3, #11
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <dir_find+0x86>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a18      	ldr	r0, [r3, #32]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	220b      	movs	r2, #11
 8009182:	4619      	mov	r1, r3
 8009184:	f7ff f888 	bl	8008298 <mem_cmp>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800918e:	2100      	movs	r1, #0
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff fe6e 	bl	8008e72 <dir_next>
 8009196:	4603      	mov	r3, r0
 8009198:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0c5      	beq.n	800912c <dir_find+0x24>
 80091a0:	e002      	b.n	80091a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80091a2:	bf00      	nop
 80091a4:	e000      	b.n	80091a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80091a6:	bf00      	nop

	return res;
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80091c0:	2101      	movs	r1, #1
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff ff1a 	bl	8008ffc <dir_alloc>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d11c      	bne.n	800920c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	4619      	mov	r1, r3
 80091d8:	68b8      	ldr	r0, [r7, #8]
 80091da:	f7ff fa4f 	bl	800867c <move_window>
 80091de:	4603      	mov	r3, r0
 80091e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d111      	bne.n	800920c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	2220      	movs	r2, #32
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff f836 	bl	8008262 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a18      	ldr	r0, [r3, #32]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3324      	adds	r3, #36	; 0x24
 80091fe:	220b      	movs	r2, #11
 8009200:	4619      	mov	r1, r3
 8009202:	f7ff f80d 	bl	8008220 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2201      	movs	r2, #1
 800920a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3324      	adds	r3, #36	; 0x24
 800922c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800922e:	220b      	movs	r2, #11
 8009230:	2120      	movs	r1, #32
 8009232:	68b8      	ldr	r0, [r7, #8]
 8009234:	f7ff f815 	bl	8008262 <mem_set>
	si = i = 0; ni = 8;
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	2308      	movs	r3, #8
 8009242:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	61fa      	str	r2, [r7, #28]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009252:	7efb      	ldrb	r3, [r7, #27]
 8009254:	2b20      	cmp	r3, #32
 8009256:	d94e      	bls.n	80092f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009258:	7efb      	ldrb	r3, [r7, #27]
 800925a:	2b2f      	cmp	r3, #47	; 0x2f
 800925c:	d006      	beq.n	800926c <create_name+0x54>
 800925e:	7efb      	ldrb	r3, [r7, #27]
 8009260:	2b5c      	cmp	r3, #92	; 0x5c
 8009262:	d110      	bne.n	8009286 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009264:	e002      	b.n	800926c <create_name+0x54>
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	3301      	adds	r3, #1
 800926a:	61fb      	str	r3, [r7, #28]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	4413      	add	r3, r2
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b2f      	cmp	r3, #47	; 0x2f
 8009276:	d0f6      	beq.n	8009266 <create_name+0x4e>
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b5c      	cmp	r3, #92	; 0x5c
 8009282:	d0f0      	beq.n	8009266 <create_name+0x4e>
			break;
 8009284:	e038      	b.n	80092f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009286:	7efb      	ldrb	r3, [r7, #27]
 8009288:	2b2e      	cmp	r3, #46	; 0x2e
 800928a:	d003      	beq.n	8009294 <create_name+0x7c>
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	429a      	cmp	r2, r3
 8009292:	d30c      	bcc.n	80092ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b0b      	cmp	r3, #11
 8009298:	d002      	beq.n	80092a0 <create_name+0x88>
 800929a:	7efb      	ldrb	r3, [r7, #27]
 800929c:	2b2e      	cmp	r3, #46	; 0x2e
 800929e:	d001      	beq.n	80092a4 <create_name+0x8c>
 80092a0:	2306      	movs	r3, #6
 80092a2:	e044      	b.n	800932e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80092a4:	2308      	movs	r3, #8
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	230b      	movs	r3, #11
 80092aa:	617b      	str	r3, [r7, #20]
			continue;
 80092ac:	e022      	b.n	80092f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80092ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da04      	bge.n	80092c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80092b6:	7efb      	ldrb	r3, [r7, #27]
 80092b8:	3b80      	subs	r3, #128	; 0x80
 80092ba:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <create_name+0x120>)
 80092bc:	5cd3      	ldrb	r3, [r2, r3]
 80092be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80092c0:	7efb      	ldrb	r3, [r7, #27]
 80092c2:	4619      	mov	r1, r3
 80092c4:	481d      	ldr	r0, [pc, #116]	; (800933c <create_name+0x124>)
 80092c6:	f7ff f80e 	bl	80082e6 <chk_chr>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <create_name+0xbc>
 80092d0:	2306      	movs	r3, #6
 80092d2:	e02c      	b.n	800932e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80092d4:	7efb      	ldrb	r3, [r7, #27]
 80092d6:	2b60      	cmp	r3, #96	; 0x60
 80092d8:	d905      	bls.n	80092e6 <create_name+0xce>
 80092da:	7efb      	ldrb	r3, [r7, #27]
 80092dc:	2b7a      	cmp	r3, #122	; 0x7a
 80092de:	d802      	bhi.n	80092e6 <create_name+0xce>
 80092e0:	7efb      	ldrb	r3, [r7, #27]
 80092e2:	3b20      	subs	r3, #32
 80092e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	613a      	str	r2, [r7, #16]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	4413      	add	r3, r2
 80092f0:	7efa      	ldrb	r2, [r7, #27]
 80092f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80092f4:	e7a6      	b.n	8009244 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	441a      	add	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <create_name+0xf4>
 8009308:	2306      	movs	r3, #6
 800930a:	e010      	b.n	800932e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2be5      	cmp	r3, #229	; 0xe5
 8009312:	d102      	bne.n	800931a <create_name+0x102>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2205      	movs	r2, #5
 8009318:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800931a:	7efb      	ldrb	r3, [r7, #27]
 800931c:	2b20      	cmp	r3, #32
 800931e:	d801      	bhi.n	8009324 <create_name+0x10c>
 8009320:	2204      	movs	r2, #4
 8009322:	e000      	b.n	8009326 <create_name+0x10e>
 8009324:	2200      	movs	r2, #0
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	330b      	adds	r3, #11
 800932a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800932c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	0800ed98 	.word	0x0800ed98
 800933c:	0800ecf0 	.word	0x0800ecf0

08009340 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009354:	e002      	b.n	800935c <follow_path+0x1c>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b2f      	cmp	r3, #47	; 0x2f
 8009362:	d0f8      	beq.n	8009356 <follow_path+0x16>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b5c      	cmp	r3, #92	; 0x5c
 800936a:	d0f4      	beq.n	8009356 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2200      	movs	r2, #0
 8009370:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b1f      	cmp	r3, #31
 8009378:	d80a      	bhi.n	8009390 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2280      	movs	r2, #128	; 0x80
 800937e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff fcf9 	bl	8008d7c <dir_sdi>
 800938a:	4603      	mov	r3, r0
 800938c:	75fb      	strb	r3, [r7, #23]
 800938e:	e043      	b.n	8009418 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009390:	463b      	mov	r3, r7
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff ff3f 	bl	8009218 <create_name>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d134      	bne.n	800940e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff feaf 	bl	8009108 <dir_find>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00a      	beq.n	80093d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d127      	bne.n	8009412 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d122      	bne.n	8009412 <follow_path+0xd2>
 80093cc:	2305      	movs	r3, #5
 80093ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093d0:	e01f      	b.n	8009412 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d11c      	bne.n	8009416 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	799b      	ldrb	r3, [r3, #6]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80093e8:	2305      	movs	r3, #5
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	e014      	b.n	8009418 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fc:	4413      	add	r3, r2
 80093fe:	4619      	mov	r1, r3
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fe42 	bl	800908a <ld_clust>
 8009406:	4602      	mov	r2, r0
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800940c:	e7c0      	b.n	8009390 <follow_path+0x50>
			if (res != FR_OK) break;
 800940e:	bf00      	nop
 8009410:	e002      	b.n	8009418 <follow_path+0xd8>
				break;
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009416:	bf00      	nop
			}
		}
	}

	return res;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009422:	b480      	push	{r7}
 8009424:	b087      	sub	sp, #28
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800942a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800942e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d031      	beq.n	800949c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e002      	b.n	8009446 <get_ldnumber+0x24>
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	3301      	adds	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b20      	cmp	r3, #32
 800944c:	d903      	bls.n	8009456 <get_ldnumber+0x34>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b3a      	cmp	r3, #58	; 0x3a
 8009454:	d1f4      	bne.n	8009440 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b3a      	cmp	r3, #58	; 0x3a
 800945c:	d11c      	bne.n	8009498 <get_ldnumber+0x76>
			tp = *path;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	60fa      	str	r2, [r7, #12]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	3b30      	subs	r3, #48	; 0x30
 800946e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b09      	cmp	r3, #9
 8009474:	d80e      	bhi.n	8009494 <get_ldnumber+0x72>
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	429a      	cmp	r2, r3
 800947c:	d10a      	bne.n	8009494 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d107      	bne.n	8009494 <get_ldnumber+0x72>
					vol = (int)i;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	3301      	adds	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	e002      	b.n	800949e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009498:	2300      	movs	r3, #0
 800949a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800949c:	693b      	ldr	r3, [r7, #16]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	70da      	strb	r2, [r3, #3]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff f8d8 	bl	800867c <move_window>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <check_fs+0x2a>
 80094d2:	2304      	movs	r3, #4
 80094d4:	e038      	b.n	8009548 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3330      	adds	r3, #48	; 0x30
 80094da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fe1c 	bl	800811c <ld_word>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d001      	beq.n	80094f4 <check_fs+0x48>
 80094f0:	2303      	movs	r3, #3
 80094f2:	e029      	b.n	8009548 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094fa:	2be9      	cmp	r3, #233	; 0xe9
 80094fc:	d009      	beq.n	8009512 <check_fs+0x66>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009504:	2beb      	cmp	r3, #235	; 0xeb
 8009506:	d11e      	bne.n	8009546 <check_fs+0x9a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800950e:	2b90      	cmp	r3, #144	; 0x90
 8009510:	d119      	bne.n	8009546 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3330      	adds	r3, #48	; 0x30
 8009516:	3336      	adds	r3, #54	; 0x36
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fe17 	bl	800814c <ld_dword>
 800951e:	4603      	mov	r3, r0
 8009520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009524:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <check_fs+0xa4>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d101      	bne.n	800952e <check_fs+0x82>
 800952a:	2300      	movs	r3, #0
 800952c:	e00c      	b.n	8009548 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3330      	adds	r3, #48	; 0x30
 8009532:	3352      	adds	r3, #82	; 0x52
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fe09 	bl	800814c <ld_dword>
 800953a:	4603      	mov	r3, r0
 800953c:	4a05      	ldr	r2, [pc, #20]	; (8009554 <check_fs+0xa8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d101      	bne.n	8009546 <check_fs+0x9a>
 8009542:	2300      	movs	r3, #0
 8009544:	e000      	b.n	8009548 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009546:	2302      	movs	r3, #2
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	00544146 	.word	0x00544146
 8009554:	33544146 	.word	0x33544146

08009558 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b096      	sub	sp, #88	; 0x58
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff ff58 	bl	8009422 <get_ldnumber>
 8009572:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009576:	2b00      	cmp	r3, #0
 8009578:	da01      	bge.n	800957e <find_volume+0x26>
 800957a:	230b      	movs	r3, #11
 800957c:	e22d      	b.n	80099da <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800957e:	4aa1      	ldr	r2, [pc, #644]	; (8009804 <find_volume+0x2ac>)
 8009580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009586:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <find_volume+0x3a>
 800958e:	230c      	movs	r3, #12
 8009590:	e223      	b.n	80099da <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009596:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01a      	beq.n	80095de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe fd17 	bl	8007fe0 <disk_status>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80095b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10c      	bne.n	80095de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <find_volume+0x82>
 80095ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80095d6:	230a      	movs	r3, #10
 80095d8:	e1ff      	b.n	80099da <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80095da:	2300      	movs	r3, #0
 80095dc:	e1fd      	b.n	80099da <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80095e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fd0f 	bl	8008014 <disk_initialize>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80095fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009608:	2303      	movs	r3, #3
 800960a:	e1e6      	b.n	80099da <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d007      	beq.n	8009622 <find_volume+0xca>
 8009612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800961e:	230a      	movs	r3, #10
 8009620:	e1db      	b.n	80099da <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800962a:	f7ff ff3f 	bl	80094ac <check_fs>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009638:	2b02      	cmp	r3, #2
 800963a:	d149      	bne.n	80096d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800963c:	2300      	movs	r3, #0
 800963e:	643b      	str	r3, [r7, #64]	; 0x40
 8009640:	e01e      	b.n	8009680 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009650:	4413      	add	r3, r2
 8009652:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	3304      	adds	r3, #4
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <find_volume+0x114>
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	3308      	adds	r3, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fd72 	bl	800814c <ld_dword>
 8009668:	4602      	mov	r2, r0
 800966a:	e000      	b.n	800966e <find_volume+0x116>
 800966c:	2200      	movs	r2, #0
 800966e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	3358      	adds	r3, #88	; 0x58
 8009674:	443b      	add	r3, r7
 8009676:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800967a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967c:	3301      	adds	r3, #1
 800967e:	643b      	str	r3, [r7, #64]	; 0x40
 8009680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009682:	2b03      	cmp	r3, #3
 8009684:	d9dd      	bls.n	8009642 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009686:	2300      	movs	r3, #0
 8009688:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800968a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <find_volume+0x13e>
 8009690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009692:	3b01      	subs	r3, #1
 8009694:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	3358      	adds	r3, #88	; 0x58
 800969c:	443b      	add	r3, r7
 800969e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80096a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80096a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d005      	beq.n	80096b6 <find_volume+0x15e>
 80096aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096ae:	f7ff fefd 	bl	80094ac <check_fs>
 80096b2:	4603      	mov	r3, r0
 80096b4:	e000      	b.n	80096b8 <find_volume+0x160>
 80096b6:	2303      	movs	r3, #3
 80096b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d905      	bls.n	80096d0 <find_volume+0x178>
 80096c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c6:	3301      	adds	r3, #1
 80096c8:	643b      	str	r3, [r7, #64]	; 0x40
 80096ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d9e2      	bls.n	8009696 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80096d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d101      	bne.n	80096dc <find_volume+0x184>
 80096d8:	2301      	movs	r3, #1
 80096da:	e17e      	b.n	80099da <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d901      	bls.n	80096e8 <find_volume+0x190>
 80096e4:	230d      	movs	r3, #13
 80096e6:	e178      	b.n	80099da <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	3330      	adds	r3, #48	; 0x30
 80096ec:	330b      	adds	r3, #11
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fd14 	bl	800811c <ld_word>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096fa:	d001      	beq.n	8009700 <find_volume+0x1a8>
 80096fc:	230d      	movs	r3, #13
 80096fe:	e16c      	b.n	80099da <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	3330      	adds	r3, #48	; 0x30
 8009704:	3316      	adds	r3, #22
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fd08 	bl	800811c <ld_word>
 800970c:	4603      	mov	r3, r0
 800970e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d106      	bne.n	8009724 <find_volume+0x1cc>
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	3330      	adds	r3, #48	; 0x30
 800971a:	3324      	adds	r3, #36	; 0x24
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fd15 	bl	800814c <ld_dword>
 8009722:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009728:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	789b      	ldrb	r3, [r3, #2]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d005      	beq.n	8009748 <find_volume+0x1f0>
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	789b      	ldrb	r3, [r3, #2]
 8009740:	2b02      	cmp	r3, #2
 8009742:	d001      	beq.n	8009748 <find_volume+0x1f0>
 8009744:	230d      	movs	r3, #13
 8009746:	e148      	b.n	80099da <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	789b      	ldrb	r3, [r3, #2]
 800974c:	461a      	mov	r2, r3
 800974e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009750:	fb02 f303 	mul.w	r3, r2, r3
 8009754:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975c:	b29a      	uxth	r2, r3
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	895b      	ldrh	r3, [r3, #10]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d008      	beq.n	800977c <find_volume+0x224>
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	895b      	ldrh	r3, [r3, #10]
 800976e:	461a      	mov	r2, r3
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	895b      	ldrh	r3, [r3, #10]
 8009774:	3b01      	subs	r3, #1
 8009776:	4013      	ands	r3, r2
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <find_volume+0x228>
 800977c:	230d      	movs	r3, #13
 800977e:	e12c      	b.n	80099da <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	3330      	adds	r3, #48	; 0x30
 8009784:	3311      	adds	r3, #17
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fcc8 	bl	800811c <ld_word>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	891b      	ldrh	r3, [r3, #8]
 8009798:	f003 030f 	and.w	r3, r3, #15
 800979c:	b29b      	uxth	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <find_volume+0x24e>
 80097a2:	230d      	movs	r3, #13
 80097a4:	e119      	b.n	80099da <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	3330      	adds	r3, #48	; 0x30
 80097aa:	3313      	adds	r3, #19
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fcb5 	bl	800811c <ld_word>
 80097b2:	4603      	mov	r3, r0
 80097b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <find_volume+0x272>
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	3330      	adds	r3, #48	; 0x30
 80097c0:	3320      	adds	r3, #32
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe fcc2 	bl	800814c <ld_dword>
 80097c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	3330      	adds	r3, #48	; 0x30
 80097ce:	330e      	adds	r3, #14
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fca3 	bl	800811c <ld_word>
 80097d6:	4603      	mov	r3, r0
 80097d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <find_volume+0x28c>
 80097e0:	230d      	movs	r3, #13
 80097e2:	e0fa      	b.n	80099da <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e8:	4413      	add	r3, r2
 80097ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ec:	8912      	ldrh	r2, [r2, #8]
 80097ee:	0912      	lsrs	r2, r2, #4
 80097f0:	b292      	uxth	r2, r2
 80097f2:	4413      	add	r3, r2
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d204      	bcs.n	8009808 <find_volume+0x2b0>
 80097fe:	230d      	movs	r3, #13
 8009800:	e0eb      	b.n	80099da <find_volume+0x482>
 8009802:	bf00      	nop
 8009804:	20001df4 	.word	0x20001df4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009810:	8952      	ldrh	r2, [r2, #10]
 8009812:	fbb3 f3f2 	udiv	r3, r3, r2
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <find_volume+0x2ca>
 800981e:	230d      	movs	r3, #13
 8009820:	e0db      	b.n	80099da <find_volume+0x482>
		fmt = FS_FAT32;
 8009822:	2303      	movs	r3, #3
 8009824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800982e:	4293      	cmp	r3, r2
 8009830:	d802      	bhi.n	8009838 <find_volume+0x2e0>
 8009832:	2302      	movs	r3, #2
 8009834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800983e:	4293      	cmp	r3, r2
 8009840:	d802      	bhi.n	8009848 <find_volume+0x2f0>
 8009842:	2301      	movs	r3, #1
 8009844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009854:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009856:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800985a:	441a      	add	r2, r3
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009860:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	441a      	add	r2, r3
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800986a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800986e:	2b03      	cmp	r3, #3
 8009870:	d11e      	bne.n	80098b0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	3330      	adds	r3, #48	; 0x30
 8009876:	332a      	adds	r3, #42	; 0x2a
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fc4f 	bl	800811c <ld_word>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <find_volume+0x330>
 8009884:	230d      	movs	r3, #13
 8009886:	e0a8      	b.n	80099da <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	891b      	ldrh	r3, [r3, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <find_volume+0x33c>
 8009890:	230d      	movs	r3, #13
 8009892:	e0a2      	b.n	80099da <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	3330      	adds	r3, #48	; 0x30
 8009898:	332c      	adds	r3, #44	; 0x2c
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe fc56 	bl	800814c <ld_dword>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	647b      	str	r3, [r7, #68]	; 0x44
 80098ae:	e01f      	b.n	80098f0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	891b      	ldrh	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <find_volume+0x364>
 80098b8:	230d      	movs	r3, #13
 80098ba:	e08e      	b.n	80099da <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	6a1a      	ldr	r2, [r3, #32]
 80098c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c2:	441a      	add	r2, r3
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d103      	bne.n	80098d8 <find_volume+0x380>
 80098d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	e00a      	b.n	80098ee <find_volume+0x396>
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	695a      	ldr	r2, [r3, #20]
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	085a      	lsrs	r2, r3, #1
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098ee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80098fa:	0a5b      	lsrs	r3, r3, #9
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d201      	bcs.n	8009904 <find_volume+0x3ac>
 8009900:	230d      	movs	r3, #13
 8009902:	e06a      	b.n	80099da <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800990a:	611a      	str	r2, [r3, #16]
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	691a      	ldr	r2, [r3, #16]
 8009910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009912:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	2280      	movs	r2, #128	; 0x80
 8009918:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800991a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800991e:	2b03      	cmp	r3, #3
 8009920:	d149      	bne.n	80099b6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	3330      	adds	r3, #48	; 0x30
 8009926:	3330      	adds	r3, #48	; 0x30
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fbf7 	bl	800811c <ld_word>
 800992e:	4603      	mov	r3, r0
 8009930:	2b01      	cmp	r3, #1
 8009932:	d140      	bne.n	80099b6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009936:	3301      	adds	r3, #1
 8009938:	4619      	mov	r1, r3
 800993a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800993c:	f7fe fe9e 	bl	800867c <move_window>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d137      	bne.n	80099b6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	2200      	movs	r2, #0
 800994a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	3330      	adds	r3, #48	; 0x30
 8009950:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe fbe1 	bl	800811c <ld_word>
 800995a:	4603      	mov	r3, r0
 800995c:	461a      	mov	r2, r3
 800995e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009962:	429a      	cmp	r2, r3
 8009964:	d127      	bne.n	80099b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	3330      	adds	r3, #48	; 0x30
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fbee 	bl	800814c <ld_dword>
 8009970:	4603      	mov	r3, r0
 8009972:	4a1c      	ldr	r2, [pc, #112]	; (80099e4 <find_volume+0x48c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d11e      	bne.n	80099b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	3330      	adds	r3, #48	; 0x30
 800997c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fbe3 	bl	800814c <ld_dword>
 8009986:	4603      	mov	r3, r0
 8009988:	4a17      	ldr	r2, [pc, #92]	; (80099e8 <find_volume+0x490>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d113      	bne.n	80099b6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	3330      	adds	r3, #48	; 0x30
 8009992:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe fbd8 	bl	800814c <ld_dword>
 800999c:	4602      	mov	r2, r0
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	3330      	adds	r3, #48	; 0x30
 80099a6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fbce 	bl	800814c <ld_dword>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80099bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <find_volume+0x494>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <find_volume+0x494>)
 80099c8:	801a      	strh	r2, [r3, #0]
 80099ca:	4b08      	ldr	r3, [pc, #32]	; (80099ec <find_volume+0x494>)
 80099cc:	881a      	ldrh	r2, [r3, #0]
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099d4:	f7fe fdea 	bl	80085ac <clear_lock>
#endif
	return FR_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3758      	adds	r7, #88	; 0x58
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	41615252 	.word	0x41615252
 80099e8:	61417272 	.word	0x61417272
 80099ec:	20001df8 	.word	0x20001df8

080099f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80099fa:	2309      	movs	r3, #9
 80099fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01c      	beq.n	8009a3e <validate+0x4e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d018      	beq.n	8009a3e <validate+0x4e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <validate+0x4e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	889a      	ldrh	r2, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	88db      	ldrh	r3, [r3, #6]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d10c      	bne.n	8009a3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fad8 	bl	8007fe0 <disk_status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <validate+0x4e>
			res = FR_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <validate+0x5a>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	e000      	b.n	8009a4c <validate+0x5c>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	6013      	str	r3, [r2, #0]
	return res;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a6e:	f107 0310 	add.w	r3, r7, #16
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff fcd5 	bl	8009422 <get_ldnumber>
 8009a78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da01      	bge.n	8009a84 <f_mount+0x28>
 8009a80:	230b      	movs	r3, #11
 8009a82:	e02b      	b.n	8009adc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a84:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <f_mount+0x88>)
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a94:	69b8      	ldr	r0, [r7, #24]
 8009a96:	f7fe fd89 	bl	80085ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	490d      	ldr	r1, [pc, #52]	; (8009ae4 <f_mount+0x88>)
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <f_mount+0x66>
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d001      	beq.n	8009ac6 <f_mount+0x6a>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e00a      	b.n	8009adc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ac6:	f107 010c 	add.w	r1, r7, #12
 8009aca:	f107 0308 	add.w	r3, r7, #8
 8009ace:	2200      	movs	r2, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fd41 	bl	8009558 <find_volume>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3720      	adds	r7, #32
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	20001df4 	.word	0x20001df4

08009ae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b098      	sub	sp, #96	; 0x60
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <f_open+0x18>
 8009afc:	2309      	movs	r3, #9
 8009afe:	e1ad      	b.n	8009e5c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b08:	79fa      	ldrb	r2, [r7, #7]
 8009b0a:	f107 0110 	add.w	r1, r7, #16
 8009b0e:	f107 0308 	add.w	r3, r7, #8
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fd20 	bl	8009558 <find_volume>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f040 8191 	bne.w	8009e4a <f_open+0x362>
		dj.obj.fs = fs;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	f107 0314 	add.w	r3, r7, #20
 8009b32:	4611      	mov	r1, r2
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fc03 	bl	8009340 <follow_path>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11a      	bne.n	8009b7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b4c:	b25b      	sxtb	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	da03      	bge.n	8009b5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009b52:	2306      	movs	r3, #6
 8009b54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b58:	e011      	b.n	8009b7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bf14      	ite	ne
 8009b64:	2301      	movne	r3, #1
 8009b66:	2300      	moveq	r3, #0
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fbd2 	bl	800831c <chk_lock>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	f003 031c 	and.w	r3, r3, #28
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d07f      	beq.n	8009c88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d017      	beq.n	8009bc0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d10e      	bne.n	8009bb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b98:	f7fe fc1c 	bl	80083d4 <enq_lock>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d006      	beq.n	8009bb0 <f_open+0xc8>
 8009ba2:	f107 0314 	add.w	r3, r7, #20
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff fb03 	bl	80091b2 <dir_register>
 8009bac:	4603      	mov	r3, r0
 8009bae:	e000      	b.n	8009bb2 <f_open+0xca>
 8009bb0:	2312      	movs	r3, #18
 8009bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	f043 0308 	orr.w	r3, r3, #8
 8009bbc:	71fb      	strb	r3, [r7, #7]
 8009bbe:	e010      	b.n	8009be2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bc0:	7ebb      	ldrb	r3, [r7, #26]
 8009bc2:	f003 0311 	and.w	r3, r3, #17
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <f_open+0xea>
					res = FR_DENIED;
 8009bca:	2307      	movs	r3, #7
 8009bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009bd0:	e007      	b.n	8009be2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <f_open+0xfa>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009be2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d168      	bne.n	8009cbc <f_open+0x1d4>
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d063      	beq.n	8009cbc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009bf4:	f7fd ffa4 	bl	8007b40 <get_fattime>
 8009bf8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfc:	330e      	adds	r3, #14
 8009bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fae1 	bl	80081c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c08:	3316      	adds	r3, #22
 8009c0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe fadb 	bl	80081c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c14:	330b      	adds	r3, #11
 8009c16:	2220      	movs	r2, #32
 8009c18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff fa32 	bl	800908a <ld_clust>
 8009c26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff fa4a 	bl	80090c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	331c      	adds	r3, #28
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe fac4 	bl	80081c8 <st_dword>
					fs->wflag = 1;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2201      	movs	r2, #1
 8009c44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d037      	beq.n	8009cbc <f_open+0x1d4>
						dw = fs->winsect;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009c52:	f107 0314 	add.w	r3, r7, #20
 8009c56:	2200      	movs	r2, #0
 8009c58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe ff5d 	bl	8008b1a <remove_chain>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d126      	bne.n	8009cbc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fd02 	bl	800867c <move_window>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c82:	3a01      	subs	r2, #1
 8009c84:	60da      	str	r2, [r3, #12]
 8009c86:	e019      	b.n	8009cbc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d115      	bne.n	8009cbc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009c90:	7ebb      	ldrb	r3, [r7, #26]
 8009c92:	f003 0310 	and.w	r3, r3, #16
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009c9a:	2304      	movs	r3, #4
 8009c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ca0:	e00c      	b.n	8009cbc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <f_open+0x1d4>
 8009cac:	7ebb      	ldrb	r3, [r7, #26]
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <f_open+0x1d4>
						res = FR_DENIED;
 8009cb6:	2307      	movs	r3, #7
 8009cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d128      	bne.n	8009d16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	f023 0301 	bic.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bf14      	ite	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	2300      	moveq	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	f107 0314 	add.w	r3, r7, #20
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fe fb8b 	bl	8008418 <inc_lock>
 8009d02:	4602      	mov	r2, r0
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d102      	bne.n	8009d16 <f_open+0x22e>
 8009d10:	2302      	movs	r3, #2
 8009d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f040 8095 	bne.w	8009e4a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff f9af 	bl	800908a <ld_clust>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d34:	331c      	adds	r3, #28
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fa08 	bl	800814c <ld_dword>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	88da      	ldrh	r2, [r3, #6]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	79fa      	ldrb	r2, [r7, #7]
 8009d5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3330      	adds	r3, #48	; 0x30
 8009d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fa72 	bl	8008262 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d060      	beq.n	8009e4a <f_open+0x362>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d05c      	beq.n	8009e4a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	895b      	ldrh	r3, [r3, #10]
 8009d9c:	025b      	lsls	r3, r3, #9
 8009d9e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	657b      	str	r3, [r7, #84]	; 0x54
 8009dac:	e016      	b.n	8009ddc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fd1d 	bl	80087f2 <get_fat>
 8009db8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d802      	bhi.n	8009dc6 <f_open+0x2de>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dcc:	d102      	bne.n	8009dd4 <f_open+0x2ec>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	657b      	str	r3, [r7, #84]	; 0x54
 8009ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d103      	bne.n	8009dec <f_open+0x304>
 8009de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d8e0      	bhi.n	8009dae <f_open+0x2c6>
				}
				fp->clust = clst;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009df0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d127      	bne.n	8009e4a <f_open+0x362>
 8009dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d022      	beq.n	8009e4a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fcd3 	bl	80087b4 <clust2sect>
 8009e0e:	6478      	str	r0, [r7, #68]	; 0x44
 8009e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <f_open+0x336>
						res = FR_INT_ERR;
 8009e16:	2302      	movs	r3, #2
 8009e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e1c:	e015      	b.n	8009e4a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e20:	0a5a      	lsrs	r2, r3, #9
 8009e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	7858      	ldrb	r0, [r3, #1]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1a      	ldr	r2, [r3, #32]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f7fe f911 	bl	8008060 <disk_read>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <f_open+0x362>
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <f_open+0x370>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3760      	adds	r7, #96	; 0x60
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08e      	sub	sp, #56	; 0x38
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f107 0214 	add.w	r2, r7, #20
 8009e82:	4611      	mov	r1, r2
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff fdb3 	bl	80099f0 <validate>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d107      	bne.n	8009ea8 <f_read+0x44>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7d5b      	ldrb	r3, [r3, #21]
 8009e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <f_read+0x4a>
 8009ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eac:	e115      	b.n	800a0da <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	7d1b      	ldrb	r3, [r3, #20]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <f_read+0x5a>
 8009eba:	2307      	movs	r3, #7
 8009ebc:	e10d      	b.n	800a0da <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	f240 80fe 	bls.w	800a0d0 <f_read+0x26c>
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009ed8:	e0fa      	b.n	800a0d0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f040 80c6 	bne.w	800a074 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	0a5b      	lsrs	r3, r3, #9
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	8952      	ldrh	r2, [r2, #10]
 8009ef2:	3a01      	subs	r2, #1
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d12f      	bne.n	8009f5e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d103      	bne.n	8009f0e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f0c:	e013      	b.n	8009f36 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7fe fef9 	bl	8008d14 <clmt_clust>
 8009f22:	6338      	str	r0, [r7, #48]	; 0x30
 8009f24:	e007      	b.n	8009f36 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fe fc5f 	bl	80087f2 <get_fat>
 8009f34:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d804      	bhi.n	8009f46 <f_read+0xe2>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	755a      	strb	r2, [r3, #21]
 8009f42:	2302      	movs	r3, #2
 8009f44:	e0c9      	b.n	800a0da <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f4c:	d104      	bne.n	8009f58 <f_read+0xf4>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	755a      	strb	r2, [r3, #21]
 8009f54:	2301      	movs	r3, #1
 8009f56:	e0c0      	b.n	800a0da <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f5c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f7fe fc24 	bl	80087b4 <clust2sect>
 8009f6c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d104      	bne.n	8009f7e <f_read+0x11a>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2202      	movs	r2, #2
 8009f78:	755a      	strb	r2, [r3, #21]
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e0ad      	b.n	800a0da <f_read+0x276>
			sect += csect;
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	4413      	add	r3, r2
 8009f84:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	0a5b      	lsrs	r3, r3, #9
 8009f8a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d039      	beq.n	800a006 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	4413      	add	r3, r2
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	8952      	ldrh	r2, [r2, #10]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d905      	bls.n	8009fac <f_read+0x148>
					cc = fs->csize - csect;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	895b      	ldrh	r3, [r3, #10]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	7858      	ldrb	r0, [r3, #1]
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fb6:	f7fe f853 	bl	8008060 <disk_read>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <f_read+0x166>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	755a      	strb	r2, [r3, #21]
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e087      	b.n	800a0da <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	7d1b      	ldrb	r3, [r3, #20]
 8009fce:	b25b      	sxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da14      	bge.n	8009ffe <f_read+0x19a>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a1a      	ldr	r2, [r3, #32]
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d90d      	bls.n	8009ffe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6a1a      	ldr	r2, [r3, #32]
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	025b      	lsls	r3, r3, #9
 8009fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fee:	18d0      	adds	r0, r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3330      	adds	r3, #48	; 0x30
 8009ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f7fe f911 	bl	8008220 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	025b      	lsls	r3, r3, #9
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a004:	e050      	b.n	800a0a8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d02e      	beq.n	800a06e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	7d1b      	ldrb	r3, [r3, #20]
 800a014:	b25b      	sxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	da18      	bge.n	800a04c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	7858      	ldrb	r0, [r3, #1]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6a1a      	ldr	r2, [r3, #32]
 800a028:	2301      	movs	r3, #1
 800a02a:	f7fe f839 	bl	80080a0 <disk_write>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d004      	beq.n	800a03e <f_read+0x1da>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2201      	movs	r2, #1
 800a038:	755a      	strb	r2, [r3, #21]
 800a03a:	2301      	movs	r3, #1
 800a03c:	e04d      	b.n	800a0da <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	7d1b      	ldrb	r3, [r3, #20]
 800a042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a046:	b2da      	uxtb	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	7858      	ldrb	r0, [r3, #1]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a056:	2301      	movs	r3, #1
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	f7fe f801 	bl	8008060 <disk_read>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <f_read+0x20a>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2201      	movs	r2, #1
 800a068:	755a      	strb	r2, [r3, #21]
 800a06a:	2301      	movs	r3, #1
 800a06c:	e035      	b.n	800a0da <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d901      	bls.n	800a08e <f_read+0x22a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09c:	4413      	add	r3, r2
 800a09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0a4:	f7fe f8bc 	bl	8008220 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	4413      	add	r3, r2
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	699a      	ldr	r2, [r3, #24]
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	441a      	add	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	619a      	str	r2, [r3, #24]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	441a      	add	r2, r3
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f47f af01 	bne.w	8009eda <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3738      	adds	r7, #56	; 0x38
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f107 0208 	add.w	r2, r7, #8
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fc7c 	bl	80099f0 <validate>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d168      	bne.n	800a1d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	7d1b      	ldrb	r3, [r3, #20]
 800a106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d062      	beq.n	800a1d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7d1b      	ldrb	r3, [r3, #20]
 800a112:	b25b      	sxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	da15      	bge.n	800a144 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	7858      	ldrb	r0, [r3, #1]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	2301      	movs	r3, #1
 800a128:	f7fd ffba 	bl	80080a0 <disk_write>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <f_sync+0x54>
 800a132:	2301      	movs	r3, #1
 800a134:	e04f      	b.n	800a1d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7d1b      	ldrb	r3, [r3, #20]
 800a13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a144:	f7fd fcfc 	bl	8007b40 <get_fattime>
 800a148:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f7fe fa92 	bl	800867c <move_window>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d138      	bne.n	800a1d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	330b      	adds	r3, #11
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	330b      	adds	r3, #11
 800a172:	f042 0220 	orr.w	r2, r2, #32
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	461a      	mov	r2, r3
 800a184:	68f9      	ldr	r1, [r7, #12]
 800a186:	f7fe ff9f 	bl	80090c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f103 021c 	add.w	r2, r3, #28
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f7fe f816 	bl	80081c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3316      	adds	r3, #22
 800a1a0:	6939      	ldr	r1, [r7, #16]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe f810 	bl	80081c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3312      	adds	r3, #18
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fd ffef 	bl	8008192 <st_word>
					fs->wflag = 1;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe fa8b 	bl	80086d8 <sync_fs>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	7d1b      	ldrb	r3, [r3, #20]
 800a1ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff ff7b 	bl	800a0e2 <f_sync>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d118      	bne.n	800a228 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f107 0208 	add.w	r2, r7, #8
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff fbf6 	bl	80099f0 <validate>
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10c      	bne.n	800a228 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe f98e 	bl	8008534 <dec_lock>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	4613      	mov	r3, r2
 800a240:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a242:	2301      	movs	r3, #1
 800a244:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a24a:	4b1f      	ldr	r3, [pc, #124]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a24c:	7a5b      	ldrb	r3, [r3, #9]
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	2b00      	cmp	r3, #0
 800a252:	d131      	bne.n	800a2b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a254:	4b1c      	ldr	r3, [pc, #112]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a256:	7a5b      	ldrb	r3, [r3, #9]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	461a      	mov	r2, r3
 800a25c:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a25e:	2100      	movs	r1, #0
 800a260:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a262:	4b19      	ldr	r3, [pc, #100]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a264:	7a5b      	ldrb	r3, [r3, #9]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	4a17      	ldr	r2, [pc, #92]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a272:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a274:	7a5b      	ldrb	r3, [r3, #9]
 800a276:	b2db      	uxtb	r3, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a27c:	4413      	add	r3, r2
 800a27e:	79fa      	ldrb	r2, [r7, #7]
 800a280:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a282:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a284:	7a5b      	ldrb	r3, [r3, #9]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	b2d1      	uxtb	r1, r2
 800a28c:	4a0e      	ldr	r2, [pc, #56]	; (800a2c8 <FATFS_LinkDriverEx+0x94>)
 800a28e:	7251      	strb	r1, [r2, #9]
 800a290:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a292:	7dbb      	ldrb	r3, [r7, #22]
 800a294:	3330      	adds	r3, #48	; 0x30
 800a296:	b2da      	uxtb	r2, r3
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	223a      	movs	r2, #58	; 0x3a
 800a2a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	3302      	adds	r3, #2
 800a2a8:	222f      	movs	r2, #47	; 0x2f
 800a2aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	3303      	adds	r3, #3
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	20001e1c 	.word	0x20001e1c

0800a2cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff ffaa 	bl	800a234 <FATFS_LinkDriverEx>
 800a2e0:	4603      	mov	r3, r0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <phase_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_phase_1_activations_map, 1, params)) {
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	485e      	ldr	r0, [pc, #376]	; (800a474 <phase_1_configure_activations+0x188>)
 800a2fc:	f000 fe0e 	bl	800af1c <ai_platform_get_activations_map>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 80ac 	beq.w	800a460 <phase_1_configure_activations+0x174>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_3_input0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800a308:	4b5a      	ldr	r3, [pc, #360]	; (800a474 <phase_1_configure_activations+0x188>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4b5a      	ldr	r3, [pc, #360]	; (800a478 <phase_1_configure_activations+0x18c>)
 800a30e:	4413      	add	r3, r2
 800a310:	4a5a      	ldr	r2, [pc, #360]	; (800a47c <phase_1_configure_activations+0x190>)
 800a312:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_3_input0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800a314:	4b57      	ldr	r3, [pc, #348]	; (800a474 <phase_1_configure_activations+0x188>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	4b57      	ldr	r3, [pc, #348]	; (800a478 <phase_1_configure_activations+0x18c>)
 800a31a:	4413      	add	r3, r2
 800a31c:	4a57      	ldr	r2, [pc, #348]	; (800a47c <phase_1_configure_activations+0x190>)
 800a31e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a320:	4b54      	ldr	r3, [pc, #336]	; (800a474 <phase_1_configure_activations+0x188>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a56      	ldr	r2, [pc, #344]	; (800a480 <phase_1_configure_activations+0x194>)
 800a326:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a328:	4b52      	ldr	r3, [pc, #328]	; (800a474 <phase_1_configure_activations+0x188>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a54      	ldr	r2, [pc, #336]	; (800a480 <phase_1_configure_activations+0x194>)
 800a32e:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a330:	4b50      	ldr	r3, [pc, #320]	; (800a474 <phase_1_configure_activations+0x188>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a53      	ldr	r2, [pc, #332]	; (800a484 <phase_1_configure_activations+0x198>)
 800a336:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a338:	4b4e      	ldr	r3, [pc, #312]	; (800a474 <phase_1_configure_activations+0x188>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a51      	ldr	r2, [pc, #324]	; (800a484 <phase_1_configure_activations+0x198>)
 800a33e:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a340:	4b4c      	ldr	r3, [pc, #304]	; (800a474 <phase_1_configure_activations+0x188>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a50      	ldr	r2, [pc, #320]	; (800a488 <phase_1_configure_activations+0x19c>)
 800a346:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a348:	4b4a      	ldr	r3, [pc, #296]	; (800a474 <phase_1_configure_activations+0x188>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a4e      	ldr	r2, [pc, #312]	; (800a488 <phase_1_configure_activations+0x19c>)
 800a34e:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800a350:	4b48      	ldr	r3, [pc, #288]	; (800a474 <phase_1_configure_activations+0x188>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a358:	4a4c      	ldr	r2, [pc, #304]	; (800a48c <phase_1_configure_activations+0x1a0>)
 800a35a:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800a35c:	4b45      	ldr	r3, [pc, #276]	; (800a474 <phase_1_configure_activations+0x188>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a364:	4a49      	ldr	r2, [pc, #292]	; (800a48c <phase_1_configure_activations+0x1a0>)
 800a366:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a368:	4b42      	ldr	r3, [pc, #264]	; (800a474 <phase_1_configure_activations+0x188>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a370:	4a47      	ldr	r2, [pc, #284]	; (800a490 <phase_1_configure_activations+0x1a4>)
 800a372:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a374:	4b3f      	ldr	r3, [pc, #252]	; (800a474 <phase_1_configure_activations+0x188>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a37c:	4a44      	ldr	r2, [pc, #272]	; (800a490 <phase_1_configure_activations+0x1a4>)
 800a37e:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a380:	4b3c      	ldr	r3, [pc, #240]	; (800a474 <phase_1_configure_activations+0x188>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a43      	ldr	r2, [pc, #268]	; (800a494 <phase_1_configure_activations+0x1a8>)
 800a386:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a388:	4b3a      	ldr	r3, [pc, #232]	; (800a474 <phase_1_configure_activations+0x188>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a41      	ldr	r2, [pc, #260]	; (800a494 <phase_1_configure_activations+0x1a8>)
 800a38e:	60d3      	str	r3, [r2, #12]
    
    pool_9_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a390:	4b38      	ldr	r3, [pc, #224]	; (800a474 <phase_1_configure_activations+0x188>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a398:	4a3f      	ldr	r2, [pc, #252]	; (800a498 <phase_1_configure_activations+0x1ac>)
 800a39a:	6093      	str	r3, [r2, #8]
    pool_9_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a39c:	4b35      	ldr	r3, [pc, #212]	; (800a474 <phase_1_configure_activations+0x188>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a3a4:	4a3c      	ldr	r2, [pc, #240]	; (800a498 <phase_1_configure_activations+0x1ac>)
 800a3a6:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a3a8:	4b32      	ldr	r3, [pc, #200]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a3b      	ldr	r2, [pc, #236]	; (800a49c <phase_1_configure_activations+0x1b0>)
 800a3ae:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a3b0:	4b30      	ldr	r3, [pc, #192]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a39      	ldr	r2, [pc, #228]	; (800a49c <phase_1_configure_activations+0x1b0>)
 800a3b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800a3b8:	4b2e      	ldr	r3, [pc, #184]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a3c0:	4a37      	ldr	r2, [pc, #220]	; (800a4a0 <phase_1_configure_activations+0x1b4>)
 800a3c2:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800a3c4:	4b2b      	ldr	r3, [pc, #172]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a3cc:	4a34      	ldr	r2, [pc, #208]	; (800a4a0 <phase_1_configure_activations+0x1b4>)
 800a3ce:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800a3d0:	4b28      	ldr	r3, [pc, #160]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800a3d8:	4a32      	ldr	r2, [pc, #200]	; (800a4a4 <phase_1_configure_activations+0x1b8>)
 800a3da:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800a3dc:	4b25      	ldr	r3, [pc, #148]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800a3e4:	4a2f      	ldr	r2, [pc, #188]	; (800a4a4 <phase_1_configure_activations+0x1b8>)
 800a3e6:	60d3      	str	r3, [r2, #12]
    
    pool_15_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a3e8:	4b22      	ldr	r3, [pc, #136]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a2e      	ldr	r2, [pc, #184]	; (800a4a8 <phase_1_configure_activations+0x1bc>)
 800a3ee:	6093      	str	r3, [r2, #8]
    pool_15_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a3f0:	4b20      	ldr	r3, [pc, #128]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a2c      	ldr	r2, [pc, #176]	; (800a4a8 <phase_1_configure_activations+0x1bc>)
 800a3f6:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800a3f8:	4b1e      	ldr	r3, [pc, #120]	; (800a474 <phase_1_configure_activations+0x188>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a400:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <phase_1_configure_activations+0x1c0>)
 800a402:	6093      	str	r3, [r2, #8]
    eltwise_17_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800a404:	4b1b      	ldr	r3, [pc, #108]	; (800a474 <phase_1_configure_activations+0x188>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a40c:	4a27      	ldr	r2, [pc, #156]	; (800a4ac <phase_1_configure_activations+0x1c0>)
 800a40e:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a410:	4b18      	ldr	r3, [pc, #96]	; (800a474 <phase_1_configure_activations+0x188>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a26      	ldr	r2, [pc, #152]	; (800a4b0 <phase_1_configure_activations+0x1c4>)
 800a416:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a418:	4b16      	ldr	r3, [pc, #88]	; (800a474 <phase_1_configure_activations+0x188>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a24      	ldr	r2, [pc, #144]	; (800a4b0 <phase_1_configure_activations+0x1c4>)
 800a41e:	60d3      	str	r3, [r2, #12]
    
    nl_19_nl_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800a420:	4b14      	ldr	r3, [pc, #80]	; (800a474 <phase_1_configure_activations+0x188>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a428:	4a22      	ldr	r2, [pc, #136]	; (800a4b4 <phase_1_configure_activations+0x1c8>)
 800a42a:	6093      	str	r3, [r2, #8]
    nl_19_nl_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800a42c:	4b11      	ldr	r3, [pc, #68]	; (800a474 <phase_1_configure_activations+0x188>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a434:	4a1f      	ldr	r2, [pc, #124]	; (800a4b4 <phase_1_configure_activations+0x1c8>)
 800a436:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a438:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <phase_1_configure_activations+0x188>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1e      	ldr	r2, [pc, #120]	; (800a4b8 <phase_1_configure_activations+0x1cc>)
 800a43e:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <phase_1_configure_activations+0x188>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a1c      	ldr	r2, [pc, #112]	; (800a4b8 <phase_1_configure_activations+0x1cc>)
 800a446:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 40);
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <phase_1_configure_activations+0x188>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3328      	adds	r3, #40	; 0x28
 800a44e:	4a1b      	ldr	r2, [pc, #108]	; (800a4bc <phase_1_configure_activations+0x1d0>)
 800a450:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 40);
 800a452:	4b08      	ldr	r3, [pc, #32]	; (800a474 <phase_1_configure_activations+0x188>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3328      	adds	r3, #40	; 0x28
 800a458:	4a18      	ldr	r2, [pc, #96]	; (800a4bc <phase_1_configure_activations+0x1d0>)
 800a45a:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e005      	b.n	800a46c <phase_1_configure_activations+0x180>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800a460:	2213      	movs	r2, #19
 800a462:	2130      	movs	r1, #48	; 0x30
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 febd 	bl	800b1e4 <ai_platform_network_set_error>
  return false;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	20001e28 	.word	0x20001e28
 800a478:	0003c080 	.word	0x0003c080
 800a47c:	200000dc 	.word	0x200000dc
 800a480:	200000ec 	.word	0x200000ec
 800a484:	2000010c 	.word	0x2000010c
 800a488:	2000011c 	.word	0x2000011c
 800a48c:	2000012c 	.word	0x2000012c
 800a490:	2000013c 	.word	0x2000013c
 800a494:	2000014c 	.word	0x2000014c
 800a498:	2000015c 	.word	0x2000015c
 800a49c:	2000016c 	.word	0x2000016c
 800a4a0:	2000017c 	.word	0x2000017c
 800a4a4:	2000018c 	.word	0x2000018c
 800a4a8:	2000019c 	.word	0x2000019c
 800a4ac:	200001ac 	.word	0x200001ac
 800a4b0:	200001bc 	.word	0x200001bc
 800a4b4:	200001cc 	.word	0x200001cc
 800a4b8:	200001dc 	.word	0x200001dc
 800a4bc:	200001ec 	.word	0x200001ec

0800a4c0 <phase_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_phase_1_weights_map, 1, params)) {
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	4892      	ldr	r0, [pc, #584]	; (800a718 <phase_1_configure_weights+0x258>)
 800a4d0:	f000 fccc 	bl	800ae6c <ai_platform_get_weights_map>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 81c4 	beq.w	800a864 <phase_1_configure_weights+0x3a4>
    /* Updating weights (byte) offsets */
    
    eltwise_8_scale_array.format |= AI_FMT_FLAG_CONST;
 800a4dc:	4b8f      	ldr	r3, [pc, #572]	; (800a71c <phase_1_configure_weights+0x25c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4e4:	4a8d      	ldr	r2, [pc, #564]	; (800a71c <phase_1_configure_weights+0x25c>)
 800a4e6:	6013      	str	r3, [r2, #0]
    eltwise_8_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 0);
 800a4e8:	4b8b      	ldr	r3, [pc, #556]	; (800a718 <phase_1_configure_weights+0x258>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a8b      	ldr	r2, [pc, #556]	; (800a71c <phase_1_configure_weights+0x25c>)
 800a4ee:	6093      	str	r3, [r2, #8]
    eltwise_8_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 0);
 800a4f0:	4b89      	ldr	r3, [pc, #548]	; (800a718 <phase_1_configure_weights+0x258>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a89      	ldr	r2, [pc, #548]	; (800a71c <phase_1_configure_weights+0x25c>)
 800a4f6:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800a4f8:	4b89      	ldr	r3, [pc, #548]	; (800a720 <phase_1_configure_weights+0x260>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a500:	4a87      	ldr	r2, [pc, #540]	; (800a720 <phase_1_configure_weights+0x260>)
 800a502:	6013      	str	r3, [r2, #0]
    eltwise_8_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 256);
 800a504:	4b84      	ldr	r3, [pc, #528]	; (800a718 <phase_1_configure_weights+0x258>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a50c:	4a84      	ldr	r2, [pc, #528]	; (800a720 <phase_1_configure_weights+0x260>)
 800a50e:	6093      	str	r3, [r2, #8]
    eltwise_8_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 256);
 800a510:	4b81      	ldr	r3, [pc, #516]	; (800a718 <phase_1_configure_weights+0x258>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a518:	4a81      	ldr	r2, [pc, #516]	; (800a720 <phase_1_configure_weights+0x260>)
 800a51a:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_scale_array.format |= AI_FMT_FLAG_CONST;
 800a51c:	4b81      	ldr	r3, [pc, #516]	; (800a724 <phase_1_configure_weights+0x264>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a524:	4a7f      	ldr	r2, [pc, #508]	; (800a724 <phase_1_configure_weights+0x264>)
 800a526:	6013      	str	r3, [r2, #0]
    eltwise_11_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 512);
 800a528:	4b7b      	ldr	r3, [pc, #492]	; (800a718 <phase_1_configure_weights+0x258>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a530:	4a7c      	ldr	r2, [pc, #496]	; (800a724 <phase_1_configure_weights+0x264>)
 800a532:	6093      	str	r3, [r2, #8]
    eltwise_11_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 512);
 800a534:	4b78      	ldr	r3, [pc, #480]	; (800a718 <phase_1_configure_weights+0x258>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a53c:	4a79      	ldr	r2, [pc, #484]	; (800a724 <phase_1_configure_weights+0x264>)
 800a53e:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800a540:	4b79      	ldr	r3, [pc, #484]	; (800a728 <phase_1_configure_weights+0x268>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a548:	4a77      	ldr	r2, [pc, #476]	; (800a728 <phase_1_configure_weights+0x268>)
 800a54a:	6013      	str	r3, [r2, #0]
    eltwise_11_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 768);
 800a54c:	4b72      	ldr	r3, [pc, #456]	; (800a718 <phase_1_configure_weights+0x258>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a554:	4a74      	ldr	r2, [pc, #464]	; (800a728 <phase_1_configure_weights+0x268>)
 800a556:	6093      	str	r3, [r2, #8]
    eltwise_11_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 768);
 800a558:	4b6f      	ldr	r3, [pc, #444]	; (800a718 <phase_1_configure_weights+0x258>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a560:	4a71      	ldr	r2, [pc, #452]	; (800a728 <phase_1_configure_weights+0x268>)
 800a562:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800a564:	4b71      	ldr	r3, [pc, #452]	; (800a72c <phase_1_configure_weights+0x26c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a56c:	4a6f      	ldr	r2, [pc, #444]	; (800a72c <phase_1_configure_weights+0x26c>)
 800a56e:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800a570:	4b69      	ldr	r3, [pc, #420]	; (800a718 <phase_1_configure_weights+0x258>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a578:	4a6c      	ldr	r2, [pc, #432]	; (800a72c <phase_1_configure_weights+0x26c>)
 800a57a:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800a57c:	4b66      	ldr	r3, [pc, #408]	; (800a718 <phase_1_configure_weights+0x258>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a584:	4a69      	ldr	r2, [pc, #420]	; (800a72c <phase_1_configure_weights+0x26c>)
 800a586:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800a588:	4b69      	ldr	r3, [pc, #420]	; (800a730 <phase_1_configure_weights+0x270>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a590:	4a67      	ldr	r2, [pc, #412]	; (800a730 <phase_1_configure_weights+0x270>)
 800a592:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800a594:	4b60      	ldr	r3, [pc, #384]	; (800a718 <phase_1_configure_weights+0x258>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	4b66      	ldr	r3, [pc, #408]	; (800a734 <phase_1_configure_weights+0x274>)
 800a59a:	4413      	add	r3, r2
 800a59c:	4a64      	ldr	r2, [pc, #400]	; (800a730 <phase_1_configure_weights+0x270>)
 800a59e:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800a5a0:	4b5d      	ldr	r3, [pc, #372]	; (800a718 <phase_1_configure_weights+0x258>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	4b63      	ldr	r3, [pc, #396]	; (800a734 <phase_1_configure_weights+0x274>)
 800a5a6:	4413      	add	r3, r2
 800a5a8:	4a61      	ldr	r2, [pc, #388]	; (800a730 <phase_1_configure_weights+0x270>)
 800a5aa:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 800a5ac:	4b62      	ldr	r3, [pc, #392]	; (800a738 <phase_1_configure_weights+0x278>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5b4:	4a60      	ldr	r2, [pc, #384]	; (800a738 <phase_1_configure_weights+0x278>)
 800a5b6:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800a5b8:	4b57      	ldr	r3, [pc, #348]	; (800a718 <phase_1_configure_weights+0x258>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	4b5f      	ldr	r3, [pc, #380]	; (800a73c <phase_1_configure_weights+0x27c>)
 800a5be:	4413      	add	r3, r2
 800a5c0:	4a5d      	ldr	r2, [pc, #372]	; (800a738 <phase_1_configure_weights+0x278>)
 800a5c2:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800a5c4:	4b54      	ldr	r3, [pc, #336]	; (800a718 <phase_1_configure_weights+0x258>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	4b5c      	ldr	r3, [pc, #368]	; (800a73c <phase_1_configure_weights+0x27c>)
 800a5ca:	4413      	add	r3, r2
 800a5cc:	4a5a      	ldr	r2, [pc, #360]	; (800a738 <phase_1_configure_weights+0x278>)
 800a5ce:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800a5d0:	4b5b      	ldr	r3, [pc, #364]	; (800a740 <phase_1_configure_weights+0x280>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5d8:	4a59      	ldr	r2, [pc, #356]	; (800a740 <phase_1_configure_weights+0x280>)
 800a5da:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800a5dc:	4b4e      	ldr	r3, [pc, #312]	; (800a718 <phase_1_configure_weights+0x258>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800a5e4:	4a56      	ldr	r2, [pc, #344]	; (800a740 <phase_1_configure_weights+0x280>)
 800a5e6:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800a5e8:	4b4b      	ldr	r3, [pc, #300]	; (800a718 <phase_1_configure_weights+0x258>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800a5f0:	4a53      	ldr	r2, [pc, #332]	; (800a740 <phase_1_configure_weights+0x280>)
 800a5f2:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_scale_array.format |= AI_FMT_FLAG_CONST;
 800a5f4:	4b53      	ldr	r3, [pc, #332]	; (800a744 <phase_1_configure_weights+0x284>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5fc:	4a51      	ldr	r2, [pc, #324]	; (800a744 <phase_1_configure_weights+0x284>)
 800a5fe:	6013      	str	r3, [r2, #0]
    eltwise_17_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800a600:	4b45      	ldr	r3, [pc, #276]	; (800a718 <phase_1_configure_weights+0x258>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b50      	ldr	r3, [pc, #320]	; (800a748 <phase_1_configure_weights+0x288>)
 800a606:	4413      	add	r3, r2
 800a608:	4a4e      	ldr	r2, [pc, #312]	; (800a744 <phase_1_configure_weights+0x284>)
 800a60a:	6093      	str	r3, [r2, #8]
    eltwise_17_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800a60c:	4b42      	ldr	r3, [pc, #264]	; (800a718 <phase_1_configure_weights+0x258>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4b4d      	ldr	r3, [pc, #308]	; (800a748 <phase_1_configure_weights+0x288>)
 800a612:	4413      	add	r3, r2
 800a614:	4a4b      	ldr	r2, [pc, #300]	; (800a744 <phase_1_configure_weights+0x284>)
 800a616:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800a618:	4b4c      	ldr	r3, [pc, #304]	; (800a74c <phase_1_configure_weights+0x28c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a620:	4a4a      	ldr	r2, [pc, #296]	; (800a74c <phase_1_configure_weights+0x28c>)
 800a622:	6013      	str	r3, [r2, #0]
    eltwise_17_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800a624:	4b3c      	ldr	r3, [pc, #240]	; (800a718 <phase_1_configure_weights+0x258>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	4b49      	ldr	r3, [pc, #292]	; (800a750 <phase_1_configure_weights+0x290>)
 800a62a:	4413      	add	r3, r2
 800a62c:	4a47      	ldr	r2, [pc, #284]	; (800a74c <phase_1_configure_weights+0x28c>)
 800a62e:	6093      	str	r3, [r2, #8]
    eltwise_17_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800a630:	4b39      	ldr	r3, [pc, #228]	; (800a718 <phase_1_configure_weights+0x258>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4b46      	ldr	r3, [pc, #280]	; (800a750 <phase_1_configure_weights+0x290>)
 800a636:	4413      	add	r3, r2
 800a638:	4a44      	ldr	r2, [pc, #272]	; (800a74c <phase_1_configure_weights+0x28c>)
 800a63a:	60d3      	str	r3, [r2, #12]
    
    dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800a63c:	4b45      	ldr	r3, [pc, #276]	; (800a754 <phase_1_configure_weights+0x294>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a644:	4a43      	ldr	r2, [pc, #268]	; (800a754 <phase_1_configure_weights+0x294>)
 800a646:	6013      	str	r3, [r2, #0]
    dense_19_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 299520);
 800a648:	4b33      	ldr	r3, [pc, #204]	; (800a718 <phase_1_configure_weights+0x258>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	4b42      	ldr	r3, [pc, #264]	; (800a758 <phase_1_configure_weights+0x298>)
 800a64e:	4413      	add	r3, r2
 800a650:	4a40      	ldr	r2, [pc, #256]	; (800a754 <phase_1_configure_weights+0x294>)
 800a652:	6093      	str	r3, [r2, #8]
    dense_19_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 298496);
 800a654:	4b30      	ldr	r3, [pc, #192]	; (800a718 <phase_1_configure_weights+0x258>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	4b40      	ldr	r3, [pc, #256]	; (800a75c <phase_1_configure_weights+0x29c>)
 800a65a:	4413      	add	r3, r2
 800a65c:	4a3d      	ldr	r2, [pc, #244]	; (800a754 <phase_1_configure_weights+0x294>)
 800a65e:	60d3      	str	r3, [r2, #12]
    
    dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800a660:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <phase_1_configure_weights+0x2a0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a668:	4a3d      	ldr	r2, [pc, #244]	; (800a760 <phase_1_configure_weights+0x2a0>)
 800a66a:	6013      	str	r3, [r2, #0]
    dense_19_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800a66c:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <phase_1_configure_weights+0x258>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	4b3c      	ldr	r3, [pc, #240]	; (800a764 <phase_1_configure_weights+0x2a4>)
 800a672:	4413      	add	r3, r2
 800a674:	4a3a      	ldr	r2, [pc, #232]	; (800a760 <phase_1_configure_weights+0x2a0>)
 800a676:	6093      	str	r3, [r2, #8]
    dense_19_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800a678:	4b27      	ldr	r3, [pc, #156]	; (800a718 <phase_1_configure_weights+0x258>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	4b39      	ldr	r3, [pc, #228]	; (800a764 <phase_1_configure_weights+0x2a4>)
 800a67e:	4413      	add	r3, r2
 800a680:	4a37      	ldr	r2, [pc, #220]	; (800a760 <phase_1_configure_weights+0x2a0>)
 800a682:	60d3      	str	r3, [r2, #12]
    
    dense_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800a684:	4b38      	ldr	r3, [pc, #224]	; (800a768 <phase_1_configure_weights+0x2a8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a68c:	4a36      	ldr	r2, [pc, #216]	; (800a768 <phase_1_configure_weights+0x2a8>)
 800a68e:	6013      	str	r3, [r2, #0]
    dense_20_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800a690:	4b21      	ldr	r3, [pc, #132]	; (800a718 <phase_1_configure_weights+0x258>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	4b35      	ldr	r3, [pc, #212]	; (800a76c <phase_1_configure_weights+0x2ac>)
 800a696:	4413      	add	r3, r2
 800a698:	4a33      	ldr	r2, [pc, #204]	; (800a768 <phase_1_configure_weights+0x2a8>)
 800a69a:	6093      	str	r3, [r2, #8]
    dense_20_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800a69c:	4b1e      	ldr	r3, [pc, #120]	; (800a718 <phase_1_configure_weights+0x258>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	4b32      	ldr	r3, [pc, #200]	; (800a76c <phase_1_configure_weights+0x2ac>)
 800a6a2:	4413      	add	r3, r2
 800a6a4:	4a30      	ldr	r2, [pc, #192]	; (800a768 <phase_1_configure_weights+0x2a8>)
 800a6a6:	60d3      	str	r3, [r2, #12]
    
    dense_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800a6a8:	4b31      	ldr	r3, [pc, #196]	; (800a770 <phase_1_configure_weights+0x2b0>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b0:	4a2f      	ldr	r2, [pc, #188]	; (800a770 <phase_1_configure_weights+0x2b0>)
 800a6b2:	6013      	str	r3, [r2, #0]
    dense_20_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800a6b4:	4b18      	ldr	r3, [pc, #96]	; (800a718 <phase_1_configure_weights+0x258>)
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	4b2e      	ldr	r3, [pc, #184]	; (800a774 <phase_1_configure_weights+0x2b4>)
 800a6ba:	4413      	add	r3, r2
 800a6bc:	4a2c      	ldr	r2, [pc, #176]	; (800a770 <phase_1_configure_weights+0x2b0>)
 800a6be:	6093      	str	r3, [r2, #8]
    dense_20_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800a6c0:	4b15      	ldr	r3, [pc, #84]	; (800a718 <phase_1_configure_weights+0x258>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	4b2b      	ldr	r3, [pc, #172]	; (800a774 <phase_1_configure_weights+0x2b4>)
 800a6c6:	4413      	add	r3, r2
 800a6c8:	4a29      	ldr	r2, [pc, #164]	; (800a770 <phase_1_configure_weights+0x2b0>)
 800a6ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800a6cc:	4b2a      	ldr	r3, [pc, #168]	; (800a778 <phase_1_configure_weights+0x2b8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6d4:	4a28      	ldr	r2, [pc, #160]	; (800a778 <phase_1_configure_weights+0x2b8>)
 800a6d6:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800a6d8:	4b0f      	ldr	r3, [pc, #60]	; (800a718 <phase_1_configure_weights+0x258>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b27      	ldr	r3, [pc, #156]	; (800a77c <phase_1_configure_weights+0x2bc>)
 800a6de:	4413      	add	r3, r2
 800a6e0:	4a25      	ldr	r2, [pc, #148]	; (800a778 <phase_1_configure_weights+0x2b8>)
 800a6e2:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800a6e4:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <phase_1_configure_weights+0x258>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	4b24      	ldr	r3, [pc, #144]	; (800a77c <phase_1_configure_weights+0x2bc>)
 800a6ea:	4413      	add	r3, r2
 800a6ec:	4a22      	ldr	r2, [pc, #136]	; (800a778 <phase_1_configure_weights+0x2b8>)
 800a6ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800a6f0:	4b23      	ldr	r3, [pc, #140]	; (800a780 <phase_1_configure_weights+0x2c0>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6f8:	4a21      	ldr	r2, [pc, #132]	; (800a780 <phase_1_configure_weights+0x2c0>)
 800a6fa:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <phase_1_configure_weights+0x258>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	4b20      	ldr	r3, [pc, #128]	; (800a784 <phase_1_configure_weights+0x2c4>)
 800a702:	4413      	add	r3, r2
 800a704:	4a1e      	ldr	r2, [pc, #120]	; (800a780 <phase_1_configure_weights+0x2c0>)
 800a706:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800a708:	4b03      	ldr	r3, [pc, #12]	; (800a718 <phase_1_configure_weights+0x258>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b1d      	ldr	r3, [pc, #116]	; (800a784 <phase_1_configure_weights+0x2c4>)
 800a70e:	4413      	add	r3, r2
 800a710:	4a1b      	ldr	r2, [pc, #108]	; (800a780 <phase_1_configure_weights+0x2c0>)
 800a712:	60d3      	str	r3, [r2, #12]
 800a714:	e038      	b.n	800a788 <phase_1_configure_weights+0x2c8>
 800a716:	bf00      	nop
 800a718:	20001e2c 	.word	0x20001e2c
 800a71c:	2000000c 	.word	0x2000000c
 800a720:	2000001c 	.word	0x2000001c
 800a724:	2000002c 	.word	0x2000002c
 800a728:	2000003c 	.word	0x2000003c
 800a72c:	2000004c 	.word	0x2000004c
 800a730:	2000005c 	.word	0x2000005c
 800a734:	00048400 	.word	0x00048400
 800a738:	2000006c 	.word	0x2000006c
 800a73c:	00048600 	.word	0x00048600
 800a740:	2000007c 	.word	0x2000007c
 800a744:	2000008c 	.word	0x2000008c
 800a748:	00048a00 	.word	0x00048a00
 800a74c:	2000009c 	.word	0x2000009c
 800a750:	00048c00 	.word	0x00048c00
 800a754:	200000ac 	.word	0x200000ac
 800a758:	00049200 	.word	0x00049200
 800a75c:	00048e00 	.word	0x00048e00
 800a760:	200000bc 	.word	0x200000bc
 800a764:	00149200 	.word	0x00149200
 800a768:	200000cc 	.word	0x200000cc
 800a76c:	00149600 	.word	0x00149600
 800a770:	200000fc 	.word	0x200000fc
 800a774:	0014be00 	.word	0x0014be00
 800a778:	200001fc 	.word	0x200001fc
 800a77c:	0014be28 	.word	0x0014be28
 800a780:	2000020c 	.word	0x2000020c
 800a784:	0014c2a8 	.word	0x0014c2a8
    
    eltwise_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800a788:	4b3b      	ldr	r3, [pc, #236]	; (800a878 <phase_1_configure_weights+0x3b8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a790:	4a39      	ldr	r2, [pc, #228]	; (800a878 <phase_1_configure_weights+0x3b8>)
 800a792:	6013      	str	r3, [r2, #0]
    eltwise_2_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800a794:	4b39      	ldr	r3, [pc, #228]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	4b39      	ldr	r3, [pc, #228]	; (800a880 <phase_1_configure_weights+0x3c0>)
 800a79a:	4413      	add	r3, r2
 800a79c:	4a36      	ldr	r2, [pc, #216]	; (800a878 <phase_1_configure_weights+0x3b8>)
 800a79e:	6093      	str	r3, [r2, #8]
    eltwise_2_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800a7a0:	4b36      	ldr	r3, [pc, #216]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	4b36      	ldr	r3, [pc, #216]	; (800a880 <phase_1_configure_weights+0x3c0>)
 800a7a6:	4413      	add	r3, r2
 800a7a8:	4a33      	ldr	r2, [pc, #204]	; (800a878 <phase_1_configure_weights+0x3b8>)
 800a7aa:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800a7ac:	4b35      	ldr	r3, [pc, #212]	; (800a884 <phase_1_configure_weights+0x3c4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7b4:	4a33      	ldr	r2, [pc, #204]	; (800a884 <phase_1_configure_weights+0x3c4>)
 800a7b6:	6013      	str	r3, [r2, #0]
    eltwise_2_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800a7b8:	4b30      	ldr	r3, [pc, #192]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b32      	ldr	r3, [pc, #200]	; (800a888 <phase_1_configure_weights+0x3c8>)
 800a7be:	4413      	add	r3, r2
 800a7c0:	4a30      	ldr	r2, [pc, #192]	; (800a884 <phase_1_configure_weights+0x3c4>)
 800a7c2:	6093      	str	r3, [r2, #8]
    eltwise_2_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800a7c4:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b2f      	ldr	r3, [pc, #188]	; (800a888 <phase_1_configure_weights+0x3c8>)
 800a7ca:	4413      	add	r3, r2
 800a7cc:	4a2d      	ldr	r2, [pc, #180]	; (800a884 <phase_1_configure_weights+0x3c4>)
 800a7ce:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_scale_array.format |= AI_FMT_FLAG_CONST;
 800a7d0:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <phase_1_configure_weights+0x3cc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7d8:	4a2c      	ldr	r2, [pc, #176]	; (800a88c <phase_1_configure_weights+0x3cc>)
 800a7da:	6013      	str	r3, [r2, #0]
    eltwise_5_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800a7dc:	4b27      	ldr	r3, [pc, #156]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b2b      	ldr	r3, [pc, #172]	; (800a890 <phase_1_configure_weights+0x3d0>)
 800a7e2:	4413      	add	r3, r2
 800a7e4:	4a29      	ldr	r2, [pc, #164]	; (800a88c <phase_1_configure_weights+0x3cc>)
 800a7e6:	6093      	str	r3, [r2, #8]
    eltwise_5_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800a7e8:	4b24      	ldr	r3, [pc, #144]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	4b28      	ldr	r3, [pc, #160]	; (800a890 <phase_1_configure_weights+0x3d0>)
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4a26      	ldr	r2, [pc, #152]	; (800a88c <phase_1_configure_weights+0x3cc>)
 800a7f2:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a7f4:	4b27      	ldr	r3, [pc, #156]	; (800a894 <phase_1_configure_weights+0x3d4>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7fc:	4a25      	ldr	r2, [pc, #148]	; (800a894 <phase_1_configure_weights+0x3d4>)
 800a7fe:	6013      	str	r3, [r2, #0]
    eltwise_5_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800a800:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b24      	ldr	r3, [pc, #144]	; (800a898 <phase_1_configure_weights+0x3d8>)
 800a806:	4413      	add	r3, r2
 800a808:	4a22      	ldr	r2, [pc, #136]	; (800a894 <phase_1_configure_weights+0x3d4>)
 800a80a:	6093      	str	r3, [r2, #8]
    eltwise_5_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800a80c:	4b1b      	ldr	r3, [pc, #108]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b21      	ldr	r3, [pc, #132]	; (800a898 <phase_1_configure_weights+0x3d8>)
 800a812:	4413      	add	r3, r2
 800a814:	4a1f      	ldr	r2, [pc, #124]	; (800a894 <phase_1_configure_weights+0x3d4>)
 800a816:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a818:	4b20      	ldr	r3, [pc, #128]	; (800a89c <phase_1_configure_weights+0x3dc>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a820:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <phase_1_configure_weights+0x3dc>)
 800a822:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800a824:	4b15      	ldr	r3, [pc, #84]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <phase_1_configure_weights+0x3e0>)
 800a82a:	4413      	add	r3, r2
 800a82c:	4a1b      	ldr	r2, [pc, #108]	; (800a89c <phase_1_configure_weights+0x3dc>)
 800a82e:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800a830:	4b12      	ldr	r3, [pc, #72]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	4b1a      	ldr	r3, [pc, #104]	; (800a8a0 <phase_1_configure_weights+0x3e0>)
 800a836:	4413      	add	r3, r2
 800a838:	4a18      	ldr	r2, [pc, #96]	; (800a89c <phase_1_configure_weights+0x3dc>)
 800a83a:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a83c:	4b19      	ldr	r3, [pc, #100]	; (800a8a4 <phase_1_configure_weights+0x3e4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a844:	4a17      	ldr	r2, [pc, #92]	; (800a8a4 <phase_1_configure_weights+0x3e4>)
 800a846:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <phase_1_configure_weights+0x3e8>)
 800a84e:	4413      	add	r3, r2
 800a850:	4a14      	ldr	r2, [pc, #80]	; (800a8a4 <phase_1_configure_weights+0x3e4>)
 800a852:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <phase_1_configure_weights+0x3bc>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <phase_1_configure_weights+0x3e8>)
 800a85a:	4413      	add	r3, r2
 800a85c:	4a11      	ldr	r2, [pc, #68]	; (800a8a4 <phase_1_configure_weights+0x3e4>)
 800a85e:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a860:	2301      	movs	r3, #1
 800a862:	e005      	b.n	800a870 <phase_1_configure_weights+0x3b0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800a864:	2212      	movs	r2, #18
 800a866:	2130      	movs	r1, #48	; 0x30
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fcbb 	bl	800b1e4 <ai_platform_network_set_error>
  return false;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	2000021c 	.word	0x2000021c
 800a87c:	20001e2c 	.word	0x20001e2c
 800a880:	0014c328 	.word	0x0014c328
 800a884:	2000022c 	.word	0x2000022c
 800a888:	0014c3a8 	.word	0x0014c3a8
 800a88c:	2000023c 	.word	0x2000023c
 800a890:	0014c428 	.word	0x0014c428
 800a894:	2000024c 	.word	0x2000024c
 800a898:	0014c4a8 	.word	0x0014c4a8
 800a89c:	2000025c 	.word	0x2000025c
 800a8a0:	0014c528 	.word	0x0014c528
 800a8a4:	2000026c 	.word	0x2000026c
 800a8a8:	0015e528 	.word	0x0015e528

0800a8ac <ai_phase_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_phase_1_get_error(ai_handle network)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fb89 	bl	800afcc <ai_platform_network_get_error>
 800a8ba:	4603      	mov	r3, r0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <ai_phase_1_create>:

AI_API_ENTRY
ai_error ai_phase_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	2305      	movs	r3, #5
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <ai_phase_1_create+0x28>)
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 ff9b 	bl	800b818 <ai_platform_network_create>
 800a8e2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20001308 	.word	0x20001308

0800a8f0 <ai_phase_1_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_phase_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <ai_phase_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800a900:	4b06      	ldr	r3, [pc, #24]	; (800a91c <ai_phase_1_inputs_get+0x2c>)
 800a902:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a06      	ldr	r2, [pc, #24]	; (800a920 <ai_phase_1_inputs_get+0x30>)
 800a908:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fc6f 	bl	800b1f0 <ai_platform_inputs_get>
 800a912:	4603      	mov	r3, r0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20001308 	.word	0x20001308
 800a920:	a1c00100 	.word	0xa1c00100

0800a924 <ai_phase_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_phase_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d104      	bne.n	800a93e <ai_phase_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <ai_phase_1_outputs_get+0x2c>)
 800a936:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a06      	ldr	r2, [pc, #24]	; (800a954 <ai_phase_1_outputs_get+0x30>)
 800a93c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fde1 	bl	800b508 <ai_platform_outputs_get>
 800a946:	4603      	mov	r3, r0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20001308 	.word	0x20001308
 800a954:	a1c00100 	.word	0xa1c00100

0800a958 <ai_phase_1_init>:
}

AI_API_ENTRY
ai_bool ai_phase_1_init(
  ai_handle network, const ai_network_params* params)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 f931 	bl	800bbcc <ai_platform_network_init>
 800a96a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <ai_phase_1_init+0x1e>
 800a972:	2300      	movs	r3, #0
 800a974:	e028      	b.n	800a9c8 <ai_phase_1_init+0x70>

  ai_bool ok = true;
 800a976:	2301      	movs	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_weights(net_ctx, params);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff fd9f 	bl	800a4c0 <phase_1_configure_weights>
 800a982:	4603      	mov	r3, r0
 800a984:	461a      	mov	r2, r3
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	4013      	ands	r3, r2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bf14      	ite	ne
 800a98e:	2301      	movne	r3, #1
 800a990:	2300      	moveq	r3, #0
 800a992:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_activations(net_ctx, params);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f7ff fca8 	bl	800a2ec <phase_1_configure_activations>
 800a99c:	4603      	mov	r3, r0
 800a99e:	461a      	mov	r2, r3
 800a9a0:	7afb      	ldrb	r3, [r7, #11]
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 faa8 	bl	800bf04 <ai_platform_network_post_init>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	7afb      	ldrb	r3, [r7, #11]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bf14      	ite	ne
 800a9c0:	2301      	movne	r3, #1
 800a9c2:	2300      	moveq	r3, #0
 800a9c4:	72fb      	strb	r3, [r7, #11]

  return ok;
 800a9c6:	7afb      	ldrb	r3, [r7, #11]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <ai_phase_1_run>:


AI_API_ENTRY
ai_i32 ai_phase_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f001 fbb9 	bl	800c158 <ai_platform_network_process>
 800a9e6:	4603      	mov	r3, r0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <ai_phase_1_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_activations_buffer_get(const ai_handle ptr)
{
 800a9f0:	b4b0      	push	{r4, r5, r7}
 800a9f2:	b08f      	sub	sp, #60	; 0x3c
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <ai_phase_1_data_activations_buffer_get+0x60>)
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	623b      	str	r3, [r7, #32]
 800aa02:	2300      	movs	r3, #0
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
 800aa06:	2300      	movs	r3, #0
 800aa08:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa0a:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <ai_phase_1_data_activations_buffer_get+0x64>)
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	2204      	movs	r2, #4
 800aa18:	f362 231f 	bfi	r3, r2, #8, #24
 800aa1c:	633b      	str	r3, [r7, #48]	; 0x30
 800aa1e:	4b0e      	ldr	r3, [pc, #56]	; (800aa58 <ai_phase_1_data_activations_buffer_get+0x68>)
 800aa20:	f107 040c 	add.w	r4, r7, #12
 800aa24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa2a:	f107 030c 	add.w	r3, r7, #12
 800aa2e:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_ACTIVATIONS_SIZE, 1, AI_PHASE_1_DATA_ACTIVATIONS_COUNT),
    AI_PHASE_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	461d      	mov	r5, r3
 800aa34:	f107 041c 	add.w	r4, r7, #28
 800aa38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aa40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	373c      	adds	r7, #60	; 0x3c
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bcb0      	pop	{r4, r5, r7}
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	00040440 	.word	0x00040440
 800aa54:	00043e80 	.word	0x00043e80
 800aa58:	0800ed34 	.word	0x0800ed34

0800aa5c <ai_phase_1_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_weights_buffer_get(const ai_handle ptr)
{
 800aa5c:	b4b0      	push	{r4, r5, r7}
 800aa5e:	b08f      	sub	sp, #60	; 0x3c
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800aa66:	4b15      	ldr	r3, [pc, #84]	; (800aabc <ai_phase_1_data_weights_buffer_get+0x60>)
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	623b      	str	r3, [r7, #32]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
 800aa72:	2300      	movs	r3, #0
 800aa74:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa76:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <ai_phase_1_data_weights_buffer_get+0x64>)
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	2204      	movs	r2, #4
 800aa84:	f362 231f 	bfi	r3, r2, #8, #24
 800aa88:	633b      	str	r3, [r7, #48]	; 0x30
 800aa8a:	4b0e      	ldr	r3, [pc, #56]	; (800aac4 <ai_phase_1_data_weights_buffer_get+0x68>)
 800aa8c:	f107 040c 	add.w	r4, r7, #12
 800aa90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa96:	f107 030c 	add.w	r3, r7, #12
 800aa9a:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_WEIGHTS_SIZE, 1, AI_PHASE_1_DATA_WEIGHTS_COUNT),
    AI_PHASE_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	461d      	mov	r5, r3
 800aaa0:	f107 041c 	add.w	r4, r7, #28
 800aaa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aaa8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aaac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	373c      	adds	r7, #60	; 0x3c
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bcb0      	pop	{r4, r5, r7}
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	40040440 	.word	0x40040440
 800aac0:	0015e628 	.word	0x0015e628
 800aac4:	0800ed44 	.word	0x0800ed44

0800aac8 <ai_phase_1_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_phase_1_data_weights_get(void)
{
 800aac8:	b480      	push	{r7}
 800aaca:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_phase_1_weights_table);
 800aacc:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <ai_phase_1_data_weights_get+0x10>)

}
 800aace:	4618      	mov	r0, r3
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	200013ac 	.word	0x200013ac

0800aadc <modelSetup>:
ai_error ai_err;
// Pointer to our model
ai_handle phase_1;

int modelSetup()
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	f5ad 2d87 	sub.w	sp, sp, #276480	; 0x43800
 800aae2:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 800aae6:	af00      	add	r7, sp, #0



	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
		AI_PHASE_1_DATA_WEIGHTS(ai_phase_1_data_weights_get()),
 800aae8:	f7ff ffee 	bl	800aac8 <ai_phase_1_data_weights_get>
 800aaec:	4602      	mov	r2, r0
 800aaee:	f607 63b8 	addw	r3, r7, #3768	; 0xeb8
 800aaf2:	f6a3 63b8 	subw	r3, r3, #3768	; 0xeb8
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7ff ffaf 	bl	800aa5c <ai_phase_1_data_weights_buffer_get>
		AI_PHASE_1_DATA_ACTIVATIONS(activations)
 800aafe:	f607 63b8 	addw	r3, r7, #3768	; 0xeb8
 800ab02:	f6a3 63b8 	subw	r3, r3, #3768	; 0xeb8
 800ab06:	f103 021c 	add.w	r2, r3, #28
 800ab0a:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <modelSetup+0xc4>)
 800ab0c:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
 800ab10:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 800ab14:	443b      	add	r3, r7
 800ab16:	4619      	mov	r1, r3
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f7ff ff69 	bl	800a9f0 <ai_phase_1_data_activations_buffer_get>
	  };

	  // Create instance of neural network
	  ai_err = ai_phase_1_create(&phase_1, AI_PHASE_1_DATA_CONFIG);
 800ab1e:	2100      	movs	r1, #0
 800ab20:	4820      	ldr	r0, [pc, #128]	; (800aba4 <modelSetup+0xc8>)
 800ab22:	f7ff fecf 	bl	800a8c4 <ai_phase_1_create>
 800ab26:	4603      	mov	r3, r0
 800ab28:	4a1f      	ldr	r2, [pc, #124]	; (800aba8 <modelSetup+0xcc>)
 800ab2a:	6013      	str	r3, [r2, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 800ab2c:	4b1e      	ldr	r3, [pc, #120]	; (800aba8 <modelSetup+0xcc>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <modelSetup+0x5c>
	  {
		return 2;
 800ab34:	2302      	movs	r3, #2
 800ab36:	e02c      	b.n	800ab92 <modelSetup+0xb6>
	  }

		// Initialize neural network
		if (!ai_phase_1_init(phase_1, &ai_params))
 800ab38:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <modelSetup+0xc8>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	4b1b      	ldr	r3, [pc, #108]	; (800abac <modelSetup+0xd0>)
 800ab3e:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
 800ab42:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 800ab46:	443b      	add	r3, r7
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7ff ff04 	bl	800a958 <ai_phase_1_init>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f083 0301 	eor.w	r3, r3, #1
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <modelSetup+0x84>
		{
		  return 1;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e018      	b.n	800ab92 <modelSetup+0xb6>
		}
		// Initialize wrapper structs that hold pointers to data and info about the
		  // data (tensor height, width, channels)
		  ai_input  = ai_phase_1_inputs_get(phase_1, 0);
 800ab60:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <modelSetup+0xc8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2100      	movs	r1, #0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fec2 	bl	800a8f0 <ai_phase_1_inputs_get>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	4a10      	ldr	r2, [pc, #64]	; (800abb0 <modelSetup+0xd4>)
 800ab70:	6013      	str	r3, [r2, #0]

		  ai_output = AI_PHASE_1_OUT;
 800ab72:	2100      	movs	r1, #0
 800ab74:	2000      	movs	r0, #0
 800ab76:	f7ff fed5 	bl	800a924 <ai_phase_1_outputs_get>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4a0d      	ldr	r2, [pc, #52]	; (800abb4 <modelSetup+0xd8>)
 800ab7e:	6013      	str	r3, [r2, #0]


		  // Set pointers wrapper structs to our data buffers
		  //ai_input[0].n_batches = 1;
		  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800ab80:	4b0b      	ldr	r3, [pc, #44]	; (800abb0 <modelSetup+0xd4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a0c      	ldr	r2, [pc, #48]	; (800abb8 <modelSetup+0xdc>)
 800ab86:	605a      	str	r2, [r3, #4]
		  //ai_output[0].n_batches = 1;
		  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800ab88:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <modelSetup+0xd8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <modelSetup+0xe0>)
 800ab8e:	605a      	str	r2, [r3, #4]
		  return 0;
 800ab90:	2300      	movs	r3, #0

}
 800ab92:	4618      	mov	r0, r3
 800ab94:	f507 2787 	add.w	r7, r7, #276480	; 0x43800
 800ab98:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	fffbc180 	.word	0xfffbc180
 800aba4:	20001f1c 	.word	0x20001f1c
 800aba8:	20009d54 	.word	0x20009d54
 800abac:	fffbc148 	.word	0xfffbc148
 800abb0:	20009d48 	.word	0x20009d48
 800abb4:	20009d4c 	.word	0x20009d4c
 800abb8:	20001f20 	.word	0x20001f20
 800abbc:	20009d20 	.word	0x20009d20

0800abc0 <modelRun>:

ModelOutput modelRun(float* input)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b092      	sub	sp, #72	; 0x48
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	ai_error ai_err;
	float y_val[10];
	// Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800abc8:	2300      	movs	r3, #0
 800abca:	647b      	str	r3, [r7, #68]	; 0x44
 800abcc:	e00c      	b.n	800abe8 <modelRun+0x28>
	{
		((ai_float *)in_data)[i] = (ai_float)input[i];
 800abce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	441a      	add	r2, r3
 800abd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	492c      	ldr	r1, [pc, #176]	; (800ac8c <modelRun+0xcc>)
 800abdc:	440b      	add	r3, r1
 800abde:	6812      	ldr	r2, [r2, #0]
 800abe0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800abe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe4:	3301      	adds	r3, #1
 800abe6:	647b      	str	r3, [r7, #68]	; 0x44
 800abe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abea:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 800abee:	d3ee      	bcc.n	800abce <modelRun+0xe>
	}


	// Perform inference
	nbatch = ai_phase_1_run(phase_1, &ai_input[0], &ai_output[0]);
 800abf0:	4b27      	ldr	r3, [pc, #156]	; (800ac90 <modelRun+0xd0>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a27      	ldr	r2, [pc, #156]	; (800ac94 <modelRun+0xd4>)
 800abf6:	6811      	ldr	r1, [r2, #0]
 800abf8:	4a27      	ldr	r2, [pc, #156]	; (800ac98 <modelRun+0xd8>)
 800abfa:	6812      	ldr	r2, [r2, #0]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff fee7 	bl	800a9d0 <ai_phase_1_run>
 800ac02:	4603      	mov	r3, r0
 800ac04:	4a25      	ldr	r2, [pc, #148]	; (800ac9c <modelRun+0xdc>)
 800ac06:	6013      	str	r3, [r2, #0]
	if (nbatch != 1) {
 800ac08:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <modelRun+0xdc>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d006      	beq.n	800ac1e <modelRun+0x5e>
		ai_err =  ai_phase_1_get_error(phase_1);
 800ac10:	4b1f      	ldr	r3, [pc, #124]	; (800ac90 <modelRun+0xd0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fe49 	bl	800a8ac <ai_phase_1_get_error>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	637b      	str	r3, [r7, #52]	; 0x34
	}
	float max = 0;
 800ac1e:	f04f 0300 	mov.w	r3, #0
 800ac22:	643b      	str	r3, [r7, #64]	; 0x40
	int max_ind = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i =0; i<10; i++)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac2c:	e024      	b.n	800ac78 <modelRun+0xb8>
	{
		// Read output (predicted y) of neural network
		y_val[i] = ((float *)out_data)[i];
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4a1b      	ldr	r2, [pc, #108]	; (800aca0 <modelRun+0xe0>)
 800ac34:	4413      	add	r3, r2
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	3348      	adds	r3, #72	; 0x48
 800ac3e:	443b      	add	r3, r7
 800ac40:	3b3c      	subs	r3, #60	; 0x3c
 800ac42:	601a      	str	r2, [r3, #0]
		if (y_val[i]>max)
 800ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	3348      	adds	r3, #72	; 0x48
 800ac4a:	443b      	add	r3, r7
 800ac4c:	3b3c      	subs	r3, #60	; 0x3c
 800ac4e:	edd3 7a00 	vldr	s15, [r3]
 800ac52:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ac56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5e:	d508      	bpl.n	800ac72 <modelRun+0xb2>
		{
			max_ind = i;
 800ac60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
			max  = y_val[i];
 800ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	3348      	adds	r3, #72	; 0x48
 800ac6a:	443b      	add	r3, r7
 800ac6c:	3b3c      	subs	r3, #60	; 0x3c
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	643b      	str	r3, [r7, #64]	; 0x40
	for (int i =0; i<10; i++)
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	3301      	adds	r3, #1
 800ac76:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	2b09      	cmp	r3, #9
 800ac7c:	ddd7      	ble.n	800ac2e <modelRun+0x6e>
		}
	}

	return max_ind;
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac80:	b2db      	uxtb	r3, r3

}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3748      	adds	r7, #72	; 0x48
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20001f20 	.word	0x20001f20
 800ac90:	20001f1c 	.word	0x20001f1c
 800ac94:	20009d48 	.word	0x20009d48
 800ac98:	20009d4c 	.word	0x20009d4c
 800ac9c:	20009d50 	.word	0x20009d50
 800aca0:	20009d20 	.word	0x20009d20

0800aca4 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800aca8:	2200      	movs	r2, #0
 800acaa:	4906      	ldr	r1, [pc, #24]	; (800acc4 <SDInit+0x20>)
 800acac:	4806      	ldr	r0, [pc, #24]	; (800acc8 <SDInit+0x24>)
 800acae:	f7fe fed5 	bl	8009a5c <f_mount>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <SDInit+0x18>
	      {
	          Error_Handler();
 800acb8:	f7f6 f9fe 	bl	80010b8 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20001988 	.word	0x20001988
 800acc8:	2000198c 	.word	0x2000198c

0800accc <openFile>:
		  return -1;
	  }
	  return 0;
}
int openFile(char* file_name)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_OPEN_EXISTING | FA_READ);
 800acd4:	2201      	movs	r2, #1
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4807      	ldr	r0, [pc, #28]	; (800acf8 <openFile+0x2c>)
 800acda:	f7fe ff05 	bl	8009ae8 <f_open>
 800acde:	4603      	mov	r3, r0
 800ace0:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <openFile+0x22>
	  {
		  return -1;
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acec:	e000      	b.n	800acf0 <openFile+0x24>
	  }
	  return 0;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20001bbc 	.word	0x20001bbc

0800acfc <readFile>:
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
	return byteswritten;
}
int readFile(char*buffer , int size)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	uint32_t bytesread;
	int err;
	f_read(&SDFile, buffer, size, (void *)&bytesread);
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	4804      	ldr	r0, [pc, #16]	; (800ad20 <readFile+0x24>)
 800ad10:	f7ff f8a8 	bl	8009e64 <f_read>
	return bytesread;
 800ad14:	68fb      	ldr	r3, [r7, #12]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001bbc 	.word	0x20001bbc

0800ad24 <SDclose>:
int SDclose()
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800ad28:	4802      	ldr	r0, [pc, #8]	; (800ad34 <SDclose+0x10>)
 800ad2a:	f7ff fa58 	bl	800a1de <f_close>
	return 0;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20001bbc 	.word	0x20001bbc

0800ad38 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern click;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800ad42:	88fb      	ldrh	r3, [r7, #6]
 800ad44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad48:	d103      	bne.n	800ad52 <HAL_GPIO_EXTI_Callback+0x1a>
	  click = 1;
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <HAL_GPIO_EXTI_Callback+0x28>)
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800ad50:	e000      	b.n	800ad54 <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 800ad52:	bf00      	nop
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	20001684 	.word	0x20001684

0800ad64 <ledsShowValue>:

void ledsShowValue(int value)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !((value)&0x1));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bf0c      	ite	eq
 800ad76:	2301      	moveq	r3, #1
 800ad78:	2300      	movne	r3, #0
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad82:	4817      	ldr	r0, [pc, #92]	; (800ade0 <ledsShowValue+0x7c>)
 800ad84:	f7f8 fae4 	bl	8003350 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !((value>>1)&0x1));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	bf0c      	ite	eq
 800ad92:	2301      	moveq	r3, #1
 800ad94:	2300      	movne	r3, #0
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	461a      	mov	r2, r3
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	4811      	ldr	r0, [pc, #68]	; (800ade4 <ledsShowValue+0x80>)
 800ad9e:	f7f8 fad7 	bl	8003350 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !((value>>2)&0x1));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f003 0304 	and.w	r3, r3, #4
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf0c      	ite	eq
 800adac:	2301      	moveq	r3, #1
 800adae:	2300      	movne	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	2102      	movs	r1, #2
 800adb6:	480b      	ldr	r0, [pc, #44]	; (800ade4 <ledsShowValue+0x80>)
 800adb8:	f7f8 faca 	bl	8003350 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !((value>>3)&0x1));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f003 0308 	and.w	r3, r3, #8
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bf0c      	ite	eq
 800adc6:	2301      	moveq	r3, #1
 800adc8:	2300      	movne	r3, #0
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	461a      	mov	r2, r3
 800adce:	2108      	movs	r1, #8
 800add0:	4804      	ldr	r0, [pc, #16]	; (800ade4 <ledsShowValue+0x80>)
 800add2:	f7f8 fabd 	bl	8003350 <HAL_GPIO_WritePin>
}
 800add6:	bf00      	nop
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	40022000 	.word	0x40022000
 800ade4:	40022400 	.word	0x40022400

0800ade8 <ai_buffer_get_size>:
 800ade8:	b368      	cbz	r0, 800ae46 <ai_buffer_get_size+0x5e>
 800adea:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <ai_buffer_get_size+0x60>)
 800adec:	4a17      	ldr	r2, [pc, #92]	; (800ae4c <ai_buffer_get_size+0x64>)
 800adee:	b410      	push	{r4}
 800adf0:	6804      	ldr	r4, [r0, #0]
 800adf2:	4023      	ands	r3, r4
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d123      	bne.n	800ae40 <ai_buffer_get_size+0x58>
 800adf8:	b311      	cbz	r1, 800ae40 <ai_buffer_get_size+0x58>
 800adfa:	6984      	ldr	r4, [r0, #24]
 800adfc:	6862      	ldr	r2, [r4, #4]
 800adfe:	321f      	adds	r2, #31
 800ae00:	f022 021f 	bic.w	r2, r2, #31
 800ae04:	7d03      	ldrb	r3, [r0, #20]
 800ae06:	6941      	ldr	r1, [r0, #20]
 800ae08:	f1a3 0301 	sub.w	r3, r3, #1
 800ae0c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ae10:	fab3 f383 	clz	r3, r3
 800ae14:	095b      	lsrs	r3, r3, #5
 800ae16:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ae1a:	da0c      	bge.n	800ae36 <ai_buffer_get_size+0x4e>
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d103      	bne.n	800ae28 <ai_buffer_get_size+0x40>
 800ae20:	2802      	cmp	r0, #2
 800ae22:	f04f 0302 	mov.w	r3, #2
 800ae26:	d006      	beq.n	800ae36 <ai_buffer_get_size+0x4e>
 800ae28:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	4298      	cmp	r0, r3
 800ae30:	fb01 f202 	mul.w	r2, r1, r2
 800ae34:	d1f2      	bne.n	800ae1c <ai_buffer_get_size+0x34>
 800ae36:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ae3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	6984      	ldr	r4, [r0, #24]
 800ae42:	6862      	ldr	r2, [r4, #4]
 800ae44:	e7de      	b.n	800ae04 <ai_buffer_get_size+0x1c>
 800ae46:	4770      	bx	lr
 800ae48:	017fffff 	.word	0x017fffff
 800ae4c:	000400c0 	.word	0x000400c0

0800ae50 <ai_buffer_array_sane>:
 800ae50:	b138      	cbz	r0, 800ae62 <ai_buffer_array_sane+0x12>
 800ae52:	6843      	ldr	r3, [r0, #4]
 800ae54:	b123      	cbz	r3, 800ae60 <ai_buffer_array_sane+0x10>
 800ae56:	8840      	ldrh	r0, [r0, #2]
 800ae58:	3800      	subs	r0, #0
 800ae5a:	bf18      	it	ne
 800ae5c:	2001      	movne	r0, #1
 800ae5e:	4770      	bx	lr
 800ae60:	4618      	mov	r0, r3
 800ae62:	4770      	bx	lr

0800ae64 <_ai_platform_acquire_crc>:
 800ae64:	2001      	movs	r0, #1
 800ae66:	4770      	bx	lr

0800ae68 <_ai_platform_release_crc>:
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop

0800ae6c <ai_platform_get_weights_map>:
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	bf18      	it	ne
 800ae70:	2800      	cmpne	r0, #0
 800ae72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae74:	bf0c      	ite	eq
 800ae76:	2401      	moveq	r4, #1
 800ae78:	2400      	movne	r4, #0
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	bf08      	it	eq
 800ae7e:	f044 0401 	orreq.w	r4, r4, #1
 800ae82:	b114      	cbz	r4, 800ae8a <ai_platform_get_weights_map+0x1e>
 800ae84:	2400      	movs	r4, #0
 800ae86:	4620      	mov	r0, r4
 800ae88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae8a:	4616      	mov	r6, r2
 800ae8c:	4b22      	ldr	r3, [pc, #136]	; (800af18 <ai_platform_get_weights_map+0xac>)
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	4605      	mov	r5, r0
 800ae92:	460f      	mov	r7, r1
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d022      	beq.n	800aede <ai_platform_get_weights_map+0x72>
 800ae98:	6870      	ldr	r0, [r6, #4]
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0f2      	beq.n	800ae84 <ai_platform_get_weights_map+0x18>
 800ae9e:	6806      	ldr	r6, [r0, #0]
 800aea0:	429e      	cmp	r6, r3
 800aea2:	d006      	beq.n	800aeb2 <ai_platform_get_weights_map+0x46>
 800aea4:	f1a1 0401 	sub.w	r4, r1, #1
 800aea8:	6028      	str	r0, [r5, #0]
 800aeaa:	fab4 f484 	clz	r4, r4
 800aeae:	0964      	lsrs	r4, r4, #5
 800aeb0:	e7e9      	b.n	800ae86 <ai_platform_get_weights_map+0x1a>
 800aeb2:	3d04      	subs	r5, #4
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	e000      	b.n	800aebc <ai_platform_get_weights_map+0x50>
 800aeba:	4619      	mov	r1, r3
 800aebc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800aec0:	42b3      	cmp	r3, r6
 800aec2:	d025      	beq.n	800af10 <ai_platform_get_weights_map+0xa4>
 800aec4:	f845 3f04 	str.w	r3, [r5, #4]!
 800aec8:	1c4b      	adds	r3, r1, #1
 800aeca:	429f      	cmp	r7, r3
 800aecc:	d8f5      	bhi.n	800aeba <ai_platform_get_weights_map+0x4e>
 800aece:	d1da      	bne.n	800ae86 <ai_platform_get_weights_map+0x1a>
 800aed0:	3102      	adds	r1, #2
 800aed2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800aed6:	42b3      	cmp	r3, r6
 800aed8:	d1d5      	bne.n	800ae86 <ai_platform_get_weights_map+0x1a>
 800aeda:	2401      	movs	r4, #1
 800aedc:	e7d3      	b.n	800ae86 <ai_platform_get_weights_map+0x1a>
 800aede:	1d30      	adds	r0, r6, #4
 800aee0:	f7ff ffb6 	bl	800ae50 <ai_buffer_array_sane>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d0cd      	beq.n	800ae84 <ai_platform_get_weights_map+0x18>
 800aee8:	88f3      	ldrh	r3, [r6, #6]
 800aeea:	429f      	cmp	r7, r3
 800aeec:	d1ca      	bne.n	800ae84 <ai_platform_get_weights_map+0x18>
 800aeee:	3d04      	subs	r5, #4
 800aef0:	4622      	mov	r2, r4
 800aef2:	68b3      	ldr	r3, [r6, #8]
 800aef4:	4423      	add	r3, r4
 800aef6:	341c      	adds	r4, #28
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	b123      	cbz	r3, 800af06 <ai_platform_get_weights_map+0x9a>
 800aefc:	3201      	adds	r2, #1
 800aefe:	f845 3f04 	str.w	r3, [r5, #4]!
 800af02:	4297      	cmp	r7, r2
 800af04:	d8f5      	bhi.n	800aef2 <ai_platform_get_weights_map+0x86>
 800af06:	1abc      	subs	r4, r7, r2
 800af08:	fab4 f484 	clz	r4, r4
 800af0c:	0964      	lsrs	r4, r4, #5
 800af0e:	e7ba      	b.n	800ae86 <ai_platform_get_weights_map+0x1a>
 800af10:	428f      	cmp	r7, r1
 800af12:	d1b8      	bne.n	800ae86 <ai_platform_get_weights_map+0x1a>
 800af14:	e7e1      	b.n	800aeda <ai_platform_get_weights_map+0x6e>
 800af16:	bf00      	nop
 800af18:	a1facade 	.word	0xa1facade

0800af1c <ai_platform_get_activations_map>:
 800af1c:	2900      	cmp	r1, #0
 800af1e:	bf18      	it	ne
 800af20:	2800      	cmpne	r0, #0
 800af22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af24:	bf0c      	ite	eq
 800af26:	2401      	moveq	r4, #1
 800af28:	2400      	movne	r4, #0
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	bf08      	it	eq
 800af2e:	f044 0401 	orreq.w	r4, r4, #1
 800af32:	b114      	cbz	r4, 800af3a <ai_platform_get_activations_map+0x1e>
 800af34:	2400      	movs	r4, #0
 800af36:	4620      	mov	r0, r4
 800af38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af3a:	4616      	mov	r6, r2
 800af3c:	4b22      	ldr	r3, [pc, #136]	; (800afc8 <ai_platform_get_activations_map+0xac>)
 800af3e:	6812      	ldr	r2, [r2, #0]
 800af40:	4605      	mov	r5, r0
 800af42:	460f      	mov	r7, r1
 800af44:	429a      	cmp	r2, r3
 800af46:	d022      	beq.n	800af8e <ai_platform_get_activations_map+0x72>
 800af48:	6a30      	ldr	r0, [r6, #32]
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d0f2      	beq.n	800af34 <ai_platform_get_activations_map+0x18>
 800af4e:	6806      	ldr	r6, [r0, #0]
 800af50:	429e      	cmp	r6, r3
 800af52:	d006      	beq.n	800af62 <ai_platform_get_activations_map+0x46>
 800af54:	f1a1 0401 	sub.w	r4, r1, #1
 800af58:	6028      	str	r0, [r5, #0]
 800af5a:	fab4 f484 	clz	r4, r4
 800af5e:	0964      	lsrs	r4, r4, #5
 800af60:	e7e9      	b.n	800af36 <ai_platform_get_activations_map+0x1a>
 800af62:	3d04      	subs	r5, #4
 800af64:	4602      	mov	r2, r0
 800af66:	4621      	mov	r1, r4
 800af68:	e000      	b.n	800af6c <ai_platform_get_activations_map+0x50>
 800af6a:	4619      	mov	r1, r3
 800af6c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800af70:	42b3      	cmp	r3, r6
 800af72:	d026      	beq.n	800afc2 <ai_platform_get_activations_map+0xa6>
 800af74:	f845 3f04 	str.w	r3, [r5, #4]!
 800af78:	1c4b      	adds	r3, r1, #1
 800af7a:	429f      	cmp	r7, r3
 800af7c:	d8f5      	bhi.n	800af6a <ai_platform_get_activations_map+0x4e>
 800af7e:	d1da      	bne.n	800af36 <ai_platform_get_activations_map+0x1a>
 800af80:	3102      	adds	r1, #2
 800af82:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800af86:	42b3      	cmp	r3, r6
 800af88:	d1d5      	bne.n	800af36 <ai_platform_get_activations_map+0x1a>
 800af8a:	2401      	movs	r4, #1
 800af8c:	e7d3      	b.n	800af36 <ai_platform_get_activations_map+0x1a>
 800af8e:	f106 000c 	add.w	r0, r6, #12
 800af92:	f7ff ff5d 	bl	800ae50 <ai_buffer_array_sane>
 800af96:	2800      	cmp	r0, #0
 800af98:	d0cc      	beq.n	800af34 <ai_platform_get_activations_map+0x18>
 800af9a:	89f3      	ldrh	r3, [r6, #14]
 800af9c:	429f      	cmp	r7, r3
 800af9e:	d1c9      	bne.n	800af34 <ai_platform_get_activations_map+0x18>
 800afa0:	3d04      	subs	r5, #4
 800afa2:	4622      	mov	r2, r4
 800afa4:	6933      	ldr	r3, [r6, #16]
 800afa6:	4423      	add	r3, r4
 800afa8:	341c      	adds	r4, #28
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	b123      	cbz	r3, 800afb8 <ai_platform_get_activations_map+0x9c>
 800afae:	3201      	adds	r2, #1
 800afb0:	f845 3f04 	str.w	r3, [r5, #4]!
 800afb4:	4297      	cmp	r7, r2
 800afb6:	d8f5      	bhi.n	800afa4 <ai_platform_get_activations_map+0x88>
 800afb8:	1abc      	subs	r4, r7, r2
 800afba:	fab4 f484 	clz	r4, r4
 800afbe:	0964      	lsrs	r4, r4, #5
 800afc0:	e7b9      	b.n	800af36 <ai_platform_get_activations_map+0x1a>
 800afc2:	428f      	cmp	r7, r1
 800afc4:	d1b7      	bne.n	800af36 <ai_platform_get_activations_map+0x1a>
 800afc6:	e7e0      	b.n	800af8a <ai_platform_get_activations_map+0x6e>
 800afc8:	a1facade 	.word	0xa1facade

0800afcc <ai_platform_network_get_error>:
 800afcc:	b510      	push	{r4, lr}
 800afce:	2800      	cmp	r0, #0
 800afd0:	d03f      	beq.n	800b052 <ai_platform_network_get_error+0x86>
 800afd2:	4b7d      	ldr	r3, [pc, #500]	; (800b1c8 <ai_platform_network_get_error+0x1fc>)
 800afd4:	4604      	mov	r4, r0
 800afd6:	6802      	ldr	r2, [r0, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d13a      	bne.n	800b052 <ai_platform_network_get_error+0x86>
 800afdc:	f7ff ff42 	bl	800ae64 <_ai_platform_acquire_crc>
 800afe0:	4b7a      	ldr	r3, [pc, #488]	; (800b1cc <ai_platform_network_get_error+0x200>)
 800afe2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afec:	189a      	adds	r2, r3, r2
 800afee:	2a01      	cmp	r2, #1
 800aff0:	f240 8086 	bls.w	800b100 <ai_platform_network_get_error+0x134>
 800aff4:	f240 4249 	movw	r2, #1097	; 0x449
 800aff8:	4293      	cmp	r3, r2
 800affa:	f000 8081 	beq.w	800b100 <ai_platform_network_get_error+0x134>
 800affe:	4a74      	ldr	r2, [pc, #464]	; (800b1d0 <ai_platform_network_get_error+0x204>)
 800b000:	6813      	ldr	r3, [r2, #0]
 800b002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b006:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b00a:	f000 8087 	beq.w	800b11c <ai_platform_network_get_error+0x150>
 800b00e:	6813      	ldr	r3, [r2, #0]
 800b010:	f240 4183 	movw	r1, #1155	; 0x483
 800b014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b018:	428b      	cmp	r3, r1
 800b01a:	f000 80a9 	beq.w	800b170 <ai_platform_network_get_error+0x1a4>
 800b01e:	6813      	ldr	r3, [r2, #0]
 800b020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b024:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b028:	f000 80c0 	beq.w	800b1ac <ai_platform_network_get_error+0x1e0>
 800b02c:	6813      	ldr	r3, [r2, #0]
 800b02e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b032:	2b00      	cmp	r3, #0
 800b034:	f040 8082 	bne.w	800b13c <ai_platform_network_get_error+0x170>
 800b038:	4a66      	ldr	r2, [pc, #408]	; (800b1d4 <ai_platform_network_get_error+0x208>)
 800b03a:	2301      	movs	r3, #1
 800b03c:	6093      	str	r3, [r2, #8]
 800b03e:	6893      	ldr	r3, [r2, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1fc      	bne.n	800b03e <ai_platform_network_get_error+0x72>
 800b044:	4964      	ldr	r1, [pc, #400]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b046:	4b65      	ldr	r3, [pc, #404]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b048:	6011      	str	r1, [r2, #0]
 800b04a:	6812      	ldr	r2, [r2, #0]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d075      	beq.n	800b13c <ai_platform_network_get_error+0x170>
 800b050:	e7fe      	b.n	800b050 <ai_platform_network_get_error+0x84>
 800b052:	f7ff ff07 	bl	800ae64 <_ai_platform_acquire_crc>
 800b056:	4b5d      	ldr	r3, [pc, #372]	; (800b1cc <ai_platform_network_get_error+0x200>)
 800b058:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b062:	185a      	adds	r2, r3, r1
 800b064:	2a01      	cmp	r2, #1
 800b066:	d929      	bls.n	800b0bc <ai_platform_network_get_error+0xf0>
 800b068:	f240 4249 	movw	r2, #1097	; 0x449
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d025      	beq.n	800b0bc <ai_platform_network_get_error+0xf0>
 800b070:	4a57      	ldr	r2, [pc, #348]	; (800b1d0 <ai_platform_network_get_error+0x204>)
 800b072:	6813      	ldr	r3, [r2, #0]
 800b074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b078:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b07c:	d02b      	beq.n	800b0d6 <ai_platform_network_get_error+0x10a>
 800b07e:	6813      	ldr	r3, [r2, #0]
 800b080:	f240 4183 	movw	r1, #1155	; 0x483
 800b084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b088:	428b      	cmp	r3, r1
 800b08a:	d060      	beq.n	800b14e <ai_platform_network_get_error+0x182>
 800b08c:	6813      	ldr	r3, [r2, #0]
 800b08e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b092:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b096:	d07c      	beq.n	800b192 <ai_platform_network_get_error+0x1c6>
 800b098:	6813      	ldr	r3, [r2, #0]
 800b09a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d129      	bne.n	800b0f6 <ai_platform_network_get_error+0x12a>
 800b0a2:	4a4c      	ldr	r2, [pc, #304]	; (800b1d4 <ai_platform_network_get_error+0x208>)
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	6093      	str	r3, [r2, #8]
 800b0a8:	6893      	ldr	r3, [r2, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1fc      	bne.n	800b0a8 <ai_platform_network_get_error+0xdc>
 800b0ae:	494a      	ldr	r1, [pc, #296]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b0b0:	4b4a      	ldr	r3, [pc, #296]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b0b2:	6011      	str	r1, [r2, #0]
 800b0b4:	6812      	ldr	r2, [r2, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d01d      	beq.n	800b0f6 <ai_platform_network_get_error+0x12a>
 800b0ba:	e7fe      	b.n	800b0ba <ai_platform_network_get_error+0xee>
 800b0bc:	4a45      	ldr	r2, [pc, #276]	; (800b1d4 <ai_platform_network_get_error+0x208>)
 800b0be:	2301      	movs	r3, #1
 800b0c0:	6093      	str	r3, [r2, #8]
 800b0c2:	6893      	ldr	r3, [r2, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1fc      	bne.n	800b0c2 <ai_platform_network_get_error+0xf6>
 800b0c8:	4943      	ldr	r1, [pc, #268]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b0ca:	4b44      	ldr	r3, [pc, #272]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b0cc:	6011      	str	r1, [r2, #0]
 800b0ce:	6812      	ldr	r2, [r2, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d010      	beq.n	800b0f6 <ai_platform_network_get_error+0x12a>
 800b0d4:	e7fe      	b.n	800b0d4 <ai_platform_network_get_error+0x108>
 800b0d6:	4a42      	ldr	r2, [pc, #264]	; (800b1e0 <ai_platform_network_get_error+0x214>)
 800b0d8:	2301      	movs	r3, #1
 800b0da:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b0de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1fb      	bne.n	800b0de <ai_platform_network_get_error+0x112>
 800b0e6:	493c      	ldr	r1, [pc, #240]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b0e8:	4b3c      	ldr	r3, [pc, #240]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b0ea:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b0ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d111      	bne.n	800b11a <ai_platform_network_get_error+0x14e>
 800b0f6:	f7ff feb7 	bl	800ae68 <_ai_platform_release_crc>
 800b0fa:	f241 0010 	movw	r0, #4112	; 0x1010
 800b0fe:	bd10      	pop	{r4, pc}
 800b100:	4a34      	ldr	r2, [pc, #208]	; (800b1d4 <ai_platform_network_get_error+0x208>)
 800b102:	2301      	movs	r3, #1
 800b104:	6093      	str	r3, [r2, #8]
 800b106:	6893      	ldr	r3, [r2, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1fc      	bne.n	800b106 <ai_platform_network_get_error+0x13a>
 800b10c:	4932      	ldr	r1, [pc, #200]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b10e:	4b33      	ldr	r3, [pc, #204]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b110:	6011      	str	r1, [r2, #0]
 800b112:	6812      	ldr	r2, [r2, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d011      	beq.n	800b13c <ai_platform_network_get_error+0x170>
 800b118:	e7fe      	b.n	800b118 <ai_platform_network_get_error+0x14c>
 800b11a:	e7fe      	b.n	800b11a <ai_platform_network_get_error+0x14e>
 800b11c:	4a30      	ldr	r2, [pc, #192]	; (800b1e0 <ai_platform_network_get_error+0x214>)
 800b11e:	2301      	movs	r3, #1
 800b120:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b124:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1fb      	bne.n	800b124 <ai_platform_network_get_error+0x158>
 800b12c:	492a      	ldr	r1, [pc, #168]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b12e:	4b2b      	ldr	r3, [pc, #172]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b130:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b134:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b138:	429a      	cmp	r2, r3
 800b13a:	d107      	bne.n	800b14c <ai_platform_network_get_error+0x180>
 800b13c:	f7ff fe94 	bl	800ae68 <_ai_platform_release_crc>
 800b140:	f104 0010 	add.w	r0, r4, #16
 800b144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b148:	f001 bae6 	b.w	800c718 <core_get_error>
 800b14c:	e7fe      	b.n	800b14c <ai_platform_network_get_error+0x180>
 800b14e:	4a24      	ldr	r2, [pc, #144]	; (800b1e0 <ai_platform_network_get_error+0x214>)
 800b150:	2301      	movs	r3, #1
 800b152:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b156:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1fb      	bne.n	800b156 <ai_platform_network_get_error+0x18a>
 800b15e:	491e      	ldr	r1, [pc, #120]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b160:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b162:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b166:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d0c3      	beq.n	800b0f6 <ai_platform_network_get_error+0x12a>
 800b16e:	e7fe      	b.n	800b16e <ai_platform_network_get_error+0x1a2>
 800b170:	4a1b      	ldr	r2, [pc, #108]	; (800b1e0 <ai_platform_network_get_error+0x214>)
 800b172:	2301      	movs	r3, #1
 800b174:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b178:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1fb      	bne.n	800b178 <ai_platform_network_get_error+0x1ac>
 800b180:	4915      	ldr	r1, [pc, #84]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b182:	4b16      	ldr	r3, [pc, #88]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b184:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b188:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d0d5      	beq.n	800b13c <ai_platform_network_get_error+0x170>
 800b190:	e7fe      	b.n	800b190 <ai_platform_network_get_error+0x1c4>
 800b192:	4a10      	ldr	r2, [pc, #64]	; (800b1d4 <ai_platform_network_get_error+0x208>)
 800b194:	2301      	movs	r3, #1
 800b196:	6093      	str	r3, [r2, #8]
 800b198:	6893      	ldr	r3, [r2, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1fc      	bne.n	800b198 <ai_platform_network_get_error+0x1cc>
 800b19e:	490e      	ldr	r1, [pc, #56]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b1a2:	6011      	str	r1, [r2, #0]
 800b1a4:	6812      	ldr	r2, [r2, #0]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d0a5      	beq.n	800b0f6 <ai_platform_network_get_error+0x12a>
 800b1aa:	e7fe      	b.n	800b1aa <ai_platform_network_get_error+0x1de>
 800b1ac:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <ai_platform_network_get_error+0x208>)
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	6093      	str	r3, [r2, #8]
 800b1b2:	6893      	ldr	r3, [r2, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1fc      	bne.n	800b1b2 <ai_platform_network_get_error+0x1e6>
 800b1b8:	4907      	ldr	r1, [pc, #28]	; (800b1d8 <ai_platform_network_get_error+0x20c>)
 800b1ba:	4b08      	ldr	r3, [pc, #32]	; (800b1dc <ai_platform_network_get_error+0x210>)
 800b1bc:	6011      	str	r1, [r2, #0]
 800b1be:	6812      	ldr	r2, [r2, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d0bb      	beq.n	800b13c <ai_platform_network_get_error+0x170>
 800b1c4:	e7fe      	b.n	800b1c4 <ai_platform_network_get_error+0x1f8>
 800b1c6:	bf00      	nop
 800b1c8:	a1c00100 	.word	0xa1c00100
 800b1cc:	e0042000 	.word	0xe0042000
 800b1d0:	5c001000 	.word	0x5c001000
 800b1d4:	40023000 	.word	0x40023000
 800b1d8:	f407a5c2 	.word	0xf407a5c2
 800b1dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800b1e0:	58024000 	.word	0x58024000

0800b1e4 <ai_platform_network_set_error>:
 800b1e4:	b110      	cbz	r0, 800b1ec <ai_platform_network_set_error+0x8>
 800b1e6:	3010      	adds	r0, #16
 800b1e8:	f001 ba9c 	b.w	800c724 <core_set_error>
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop

0800b1f0 <ai_platform_inputs_get>:
 800b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	9102      	str	r1, [sp, #8]
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	f000 8093 	beq.w	800b324 <ai_platform_inputs_get+0x134>
 800b1fe:	4baa      	ldr	r3, [pc, #680]	; (800b4a8 <ai_platform_inputs_get+0x2b8>)
 800b200:	4681      	mov	r9, r0
 800b202:	6802      	ldr	r2, [r0, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	f040 808d 	bne.w	800b324 <ai_platform_inputs_get+0x134>
 800b20a:	f7ff fe2b 	bl	800ae64 <_ai_platform_acquire_crc>
 800b20e:	4ba7      	ldr	r3, [pc, #668]	; (800b4ac <ai_platform_inputs_get+0x2bc>)
 800b210:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b21a:	189a      	adds	r2, r3, r2
 800b21c:	2a01      	cmp	r2, #1
 800b21e:	f240 80da 	bls.w	800b3d6 <ai_platform_inputs_get+0x1e6>
 800b222:	f240 4249 	movw	r2, #1097	; 0x449
 800b226:	4293      	cmp	r3, r2
 800b228:	f000 80d5 	beq.w	800b3d6 <ai_platform_inputs_get+0x1e6>
 800b22c:	4aa0      	ldr	r2, [pc, #640]	; (800b4b0 <ai_platform_inputs_get+0x2c0>)
 800b22e:	6813      	ldr	r3, [r2, #0]
 800b230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b234:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b238:	f000 80dc 	beq.w	800b3f4 <ai_platform_inputs_get+0x204>
 800b23c:	6813      	ldr	r3, [r2, #0]
 800b23e:	f240 4183 	movw	r1, #1155	; 0x483
 800b242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b246:	428b      	cmp	r3, r1
 800b248:	f000 810e 	beq.w	800b468 <ai_platform_inputs_get+0x278>
 800b24c:	6813      	ldr	r3, [r2, #0]
 800b24e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b252:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b256:	f000 8143 	beq.w	800b4e0 <ai_platform_inputs_get+0x2f0>
 800b25a:	6813      	ldr	r3, [r2, #0]
 800b25c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8113 	beq.w	800b48c <ai_platform_inputs_get+0x29c>
 800b266:	f7ff fdff 	bl	800ae68 <_ai_platform_release_crc>
 800b26a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 80d2 	beq.w	800b418 <ai_platform_inputs_get+0x228>
 800b274:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b278:	f1ba 0f00 	cmp.w	sl, #0
 800b27c:	f000 80cc 	beq.w	800b418 <ai_platform_inputs_get+0x228>
 800b280:	2100      	movs	r1, #0
 800b282:	f8cd 900c 	str.w	r9, [sp, #12]
 800b286:	460d      	mov	r5, r1
 800b288:	4689      	mov	r9, r1
 800b28a:	e016      	b.n	800b2ba <ai_platform_inputs_get+0xca>
 800b28c:	9a01      	ldr	r2, [sp, #4]
 800b28e:	2301      	movs	r3, #1
 800b290:	f848 3002 	str.w	r3, [r8, r2]
 800b294:	69b2      	ldr	r2, [r6, #24]
 800b296:	f04f 0301 	mov.w	r3, #1
 800b29a:	6856      	ldr	r6, [r2, #4]
 800b29c:	3501      	adds	r5, #1
 800b29e:	f109 091c 	add.w	r9, r9, #28
 800b2a2:	7523      	strb	r3, [r4, #20]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	6962      	ldr	r2, [r4, #20]
 800b2a8:	60a7      	str	r7, [r4, #8]
 800b2aa:	f36b 221f 	bfi	r2, fp, #8, #24
 800b2ae:	6126      	str	r6, [r4, #16]
 800b2b0:	61a1      	str	r1, [r4, #24]
 800b2b2:	60e3      	str	r3, [r4, #12]
 800b2b4:	6162      	str	r2, [r4, #20]
 800b2b6:	e9c4 0c00 	strd	r0, ip, [r4]
 800b2ba:	f8ba 3000 	ldrh.w	r3, [sl]
 800b2be:	b2ac      	uxth	r4, r5
 800b2c0:	42ab      	cmp	r3, r5
 800b2c2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	f240 80b5 	bls.w	800b436 <ai_platform_inputs_get+0x246>
 800b2cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 80b0 	beq.w	800b436 <ai_platform_inputs_get+0x246>
 800b2d6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	f000 80ab 	beq.w	800b436 <ai_platform_inputs_get+0x246>
 800b2e0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b2e4:	69b2      	ldr	r2, [r6, #24]
 800b2e6:	68f1      	ldr	r1, [r6, #12]
 800b2e8:	6810      	ldr	r0, [r2, #0]
 800b2ea:	9100      	str	r1, [sp, #0]
 800b2ec:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b2f0:	68b3      	ldr	r3, [r6, #8]
 800b2f2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b2f6:	444c      	add	r4, r9
 800b2f8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b2fc:	f003 fa5e 	bl	800e7bc <ai_array_to_buffer_fmt>
 800b300:	69b2      	ldr	r2, [r6, #24]
 800b302:	9900      	ldr	r1, [sp, #0]
 800b304:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b308:	2f00      	cmp	r7, #0
 800b30a:	d0c4      	beq.n	800b296 <ai_platform_inputs_get+0xa6>
 800b30c:	2200      	movs	r2, #0
 800b30e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b312:	6832      	ldr	r2, [r6, #0]
 800b314:	607a      	str	r2, [r7, #4]
 800b316:	b112      	cbz	r2, 800b31e <ai_platform_inputs_get+0x12e>
 800b318:	8852      	ldrh	r2, [r2, #2]
 800b31a:	2a00      	cmp	r2, #0
 800b31c:	d1b6      	bne.n	800b28c <ai_platform_inputs_get+0x9c>
 800b31e:	69b2      	ldr	r2, [r6, #24]
 800b320:	2700      	movs	r7, #0
 800b322:	e7b8      	b.n	800b296 <ai_platform_inputs_get+0xa6>
 800b324:	f7ff fd9e 	bl	800ae64 <_ai_platform_acquire_crc>
 800b328:	4b60      	ldr	r3, [pc, #384]	; (800b4ac <ai_platform_inputs_get+0x2bc>)
 800b32a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b334:	185a      	adds	r2, r3, r1
 800b336:	2a01      	cmp	r2, #1
 800b338:	d92a      	bls.n	800b390 <ai_platform_inputs_get+0x1a0>
 800b33a:	f240 4249 	movw	r2, #1097	; 0x449
 800b33e:	4293      	cmp	r3, r2
 800b340:	d026      	beq.n	800b390 <ai_platform_inputs_get+0x1a0>
 800b342:	4a5b      	ldr	r2, [pc, #364]	; (800b4b0 <ai_platform_inputs_get+0x2c0>)
 800b344:	6813      	ldr	r3, [r2, #0]
 800b346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b34a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b34e:	d02c      	beq.n	800b3aa <ai_platform_inputs_get+0x1ba>
 800b350:	6813      	ldr	r3, [r2, #0]
 800b352:	f240 4183 	movw	r1, #1155	; 0x483
 800b356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b35a:	428b      	cmp	r3, r1
 800b35c:	d073      	beq.n	800b446 <ai_platform_inputs_get+0x256>
 800b35e:	6813      	ldr	r3, [r2, #0]
 800b360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b364:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b368:	f000 80ac 	beq.w	800b4c4 <ai_platform_inputs_get+0x2d4>
 800b36c:	6813      	ldr	r3, [r2, #0]
 800b36e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b372:	2b00      	cmp	r3, #0
 800b374:	d129      	bne.n	800b3ca <ai_platform_inputs_get+0x1da>
 800b376:	4a4f      	ldr	r2, [pc, #316]	; (800b4b4 <ai_platform_inputs_get+0x2c4>)
 800b378:	2301      	movs	r3, #1
 800b37a:	6093      	str	r3, [r2, #8]
 800b37c:	6893      	ldr	r3, [r2, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1fc      	bne.n	800b37c <ai_platform_inputs_get+0x18c>
 800b382:	494d      	ldr	r1, [pc, #308]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b384:	4b4d      	ldr	r3, [pc, #308]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b386:	6011      	str	r1, [r2, #0]
 800b388:	6812      	ldr	r2, [r2, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d01d      	beq.n	800b3ca <ai_platform_inputs_get+0x1da>
 800b38e:	e7fe      	b.n	800b38e <ai_platform_inputs_get+0x19e>
 800b390:	4a48      	ldr	r2, [pc, #288]	; (800b4b4 <ai_platform_inputs_get+0x2c4>)
 800b392:	2301      	movs	r3, #1
 800b394:	6093      	str	r3, [r2, #8]
 800b396:	6893      	ldr	r3, [r2, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1fc      	bne.n	800b396 <ai_platform_inputs_get+0x1a6>
 800b39c:	4946      	ldr	r1, [pc, #280]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b39e:	4b47      	ldr	r3, [pc, #284]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b3a0:	6011      	str	r1, [r2, #0]
 800b3a2:	6812      	ldr	r2, [r2, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d010      	beq.n	800b3ca <ai_platform_inputs_get+0x1da>
 800b3a8:	e7fe      	b.n	800b3a8 <ai_platform_inputs_get+0x1b8>
 800b3aa:	4a45      	ldr	r2, [pc, #276]	; (800b4c0 <ai_platform_inputs_get+0x2d0>)
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1fb      	bne.n	800b3b2 <ai_platform_inputs_get+0x1c2>
 800b3ba:	493f      	ldr	r1, [pc, #252]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b3bc:	4b3f      	ldr	r3, [pc, #252]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b3be:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b3c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d113      	bne.n	800b3f2 <ai_platform_inputs_get+0x202>
 800b3ca:	f7ff fd4d 	bl	800ae68 <_ai_platform_release_crc>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	b005      	add	sp, #20
 800b3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d6:	4a37      	ldr	r2, [pc, #220]	; (800b4b4 <ai_platform_inputs_get+0x2c4>)
 800b3d8:	2301      	movs	r3, #1
 800b3da:	6093      	str	r3, [r2, #8]
 800b3dc:	6893      	ldr	r3, [r2, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1fc      	bne.n	800b3dc <ai_platform_inputs_get+0x1ec>
 800b3e2:	4b35      	ldr	r3, [pc, #212]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	4b35      	ldr	r3, [pc, #212]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b3e8:	6812      	ldr	r2, [r2, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	f43f af3b 	beq.w	800b266 <ai_platform_inputs_get+0x76>
 800b3f0:	e7fe      	b.n	800b3f0 <ai_platform_inputs_get+0x200>
 800b3f2:	e7fe      	b.n	800b3f2 <ai_platform_inputs_get+0x202>
 800b3f4:	4a32      	ldr	r2, [pc, #200]	; (800b4c0 <ai_platform_inputs_get+0x2d0>)
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1fb      	bne.n	800b3fc <ai_platform_inputs_get+0x20c>
 800b404:	4b2c      	ldr	r3, [pc, #176]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b406:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b40a:	4b2c      	ldr	r3, [pc, #176]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b40c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b410:	429a      	cmp	r2, r3
 800b412:	f43f af28 	beq.w	800b266 <ai_platform_inputs_get+0x76>
 800b416:	e7fe      	b.n	800b416 <ai_platform_inputs_get+0x226>
 800b418:	2400      	movs	r4, #0
 800b41a:	2218      	movs	r2, #24
 800b41c:	2111      	movs	r1, #17
 800b41e:	f109 0010 	add.w	r0, r9, #16
 800b422:	f001 f97f 	bl	800c724 <core_set_error>
 800b426:	4620      	mov	r0, r4
 800b428:	9b02      	ldr	r3, [sp, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0d0      	beq.n	800b3d0 <ai_platform_inputs_get+0x1e0>
 800b42e:	801c      	strh	r4, [r3, #0]
 800b430:	b005      	add	sp, #20
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d0ec      	beq.n	800b418 <ai_platform_inputs_get+0x228>
 800b43e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b442:	6858      	ldr	r0, [r3, #4]
 800b444:	e7f0      	b.n	800b428 <ai_platform_inputs_get+0x238>
 800b446:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <ai_platform_inputs_get+0x2d0>)
 800b448:	2301      	movs	r3, #1
 800b44a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b44e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1fb      	bne.n	800b44e <ai_platform_inputs_get+0x25e>
 800b456:	4918      	ldr	r1, [pc, #96]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b458:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b45a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b45e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b462:	429a      	cmp	r2, r3
 800b464:	d0b1      	beq.n	800b3ca <ai_platform_inputs_get+0x1da>
 800b466:	e7fe      	b.n	800b466 <ai_platform_inputs_get+0x276>
 800b468:	4a15      	ldr	r2, [pc, #84]	; (800b4c0 <ai_platform_inputs_get+0x2d0>)
 800b46a:	2301      	movs	r3, #1
 800b46c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b470:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1fb      	bne.n	800b470 <ai_platform_inputs_get+0x280>
 800b478:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b47a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b47e:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b480:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b484:	429a      	cmp	r2, r3
 800b486:	f43f aeee 	beq.w	800b266 <ai_platform_inputs_get+0x76>
 800b48a:	e7fe      	b.n	800b48a <ai_platform_inputs_get+0x29a>
 800b48c:	4a09      	ldr	r2, [pc, #36]	; (800b4b4 <ai_platform_inputs_get+0x2c4>)
 800b48e:	2301      	movs	r3, #1
 800b490:	6093      	str	r3, [r2, #8]
 800b492:	6893      	ldr	r3, [r2, #8]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1fc      	bne.n	800b492 <ai_platform_inputs_get+0x2a2>
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <ai_platform_inputs_get+0x2c8>)
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <ai_platform_inputs_get+0x2cc>)
 800b49e:	6812      	ldr	r2, [r2, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	f43f aee0 	beq.w	800b266 <ai_platform_inputs_get+0x76>
 800b4a6:	e7fe      	b.n	800b4a6 <ai_platform_inputs_get+0x2b6>
 800b4a8:	a1c00100 	.word	0xa1c00100
 800b4ac:	e0042000 	.word	0xe0042000
 800b4b0:	5c001000 	.word	0x5c001000
 800b4b4:	40023000 	.word	0x40023000
 800b4b8:	f407a5c2 	.word	0xf407a5c2
 800b4bc:	b5e8b5cd 	.word	0xb5e8b5cd
 800b4c0:	58024000 	.word	0x58024000
 800b4c4:	4a0d      	ldr	r2, [pc, #52]	; (800b4fc <ai_platform_inputs_get+0x30c>)
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	6093      	str	r3, [r2, #8]
 800b4ca:	6893      	ldr	r3, [r2, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1fc      	bne.n	800b4ca <ai_platform_inputs_get+0x2da>
 800b4d0:	490b      	ldr	r1, [pc, #44]	; (800b500 <ai_platform_inputs_get+0x310>)
 800b4d2:	4b0c      	ldr	r3, [pc, #48]	; (800b504 <ai_platform_inputs_get+0x314>)
 800b4d4:	6011      	str	r1, [r2, #0]
 800b4d6:	6812      	ldr	r2, [r2, #0]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	f43f af76 	beq.w	800b3ca <ai_platform_inputs_get+0x1da>
 800b4de:	e7fe      	b.n	800b4de <ai_platform_inputs_get+0x2ee>
 800b4e0:	4a06      	ldr	r2, [pc, #24]	; (800b4fc <ai_platform_inputs_get+0x30c>)
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	6093      	str	r3, [r2, #8]
 800b4e6:	6893      	ldr	r3, [r2, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1fc      	bne.n	800b4e6 <ai_platform_inputs_get+0x2f6>
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <ai_platform_inputs_get+0x310>)
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <ai_platform_inputs_get+0x314>)
 800b4f2:	6812      	ldr	r2, [r2, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	f43f aeb6 	beq.w	800b266 <ai_platform_inputs_get+0x76>
 800b4fa:	e7fe      	b.n	800b4fa <ai_platform_inputs_get+0x30a>
 800b4fc:	40023000 	.word	0x40023000
 800b500:	f407a5c2 	.word	0xf407a5c2
 800b504:	b5e8b5cd 	.word	0xb5e8b5cd

0800b508 <ai_platform_outputs_get>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	b085      	sub	sp, #20
 800b50e:	9102      	str	r1, [sp, #8]
 800b510:	2800      	cmp	r0, #0
 800b512:	f000 808f 	beq.w	800b634 <ai_platform_outputs_get+0x12c>
 800b516:	4ba8      	ldr	r3, [pc, #672]	; (800b7b8 <ai_platform_outputs_get+0x2b0>)
 800b518:	4681      	mov	r9, r0
 800b51a:	6802      	ldr	r2, [r0, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	f040 8089 	bne.w	800b634 <ai_platform_outputs_get+0x12c>
 800b522:	f7ff fc9f 	bl	800ae64 <_ai_platform_acquire_crc>
 800b526:	4ba5      	ldr	r3, [pc, #660]	; (800b7bc <ai_platform_outputs_get+0x2b4>)
 800b528:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b532:	189a      	adds	r2, r3, r2
 800b534:	2a01      	cmp	r2, #1
 800b536:	f240 80d6 	bls.w	800b6e6 <ai_platform_outputs_get+0x1de>
 800b53a:	f240 4249 	movw	r2, #1097	; 0x449
 800b53e:	4293      	cmp	r3, r2
 800b540:	f000 80d1 	beq.w	800b6e6 <ai_platform_outputs_get+0x1de>
 800b544:	4a9e      	ldr	r2, [pc, #632]	; (800b7c0 <ai_platform_outputs_get+0x2b8>)
 800b546:	6813      	ldr	r3, [r2, #0]
 800b548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b54c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b550:	f000 80d8 	beq.w	800b704 <ai_platform_outputs_get+0x1fc>
 800b554:	6813      	ldr	r3, [r2, #0]
 800b556:	f240 4183 	movw	r1, #1155	; 0x483
 800b55a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b55e:	428b      	cmp	r3, r1
 800b560:	f000 8109 	beq.w	800b776 <ai_platform_outputs_get+0x26e>
 800b564:	6813      	ldr	r3, [r2, #0]
 800b566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b56a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b56e:	f000 813f 	beq.w	800b7f0 <ai_platform_outputs_get+0x2e8>
 800b572:	6813      	ldr	r3, [r2, #0]
 800b574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 810e 	beq.w	800b79a <ai_platform_outputs_get+0x292>
 800b57e:	f7ff fc73 	bl	800ae68 <_ai_platform_release_crc>
 800b582:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b586:	2b01      	cmp	r3, #1
 800b588:	f240 80db 	bls.w	800b742 <ai_platform_outputs_get+0x23a>
 800b58c:	2100      	movs	r1, #0
 800b58e:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b592:	f8cd 900c 	str.w	r9, [sp, #12]
 800b596:	460d      	mov	r5, r1
 800b598:	4689      	mov	r9, r1
 800b59a:	e016      	b.n	800b5ca <ai_platform_outputs_get+0xc2>
 800b59c:	9a01      	ldr	r2, [sp, #4]
 800b59e:	2301      	movs	r3, #1
 800b5a0:	f848 3002 	str.w	r3, [r8, r2]
 800b5a4:	69b2      	ldr	r2, [r6, #24]
 800b5a6:	f04f 0301 	mov.w	r3, #1
 800b5aa:	6856      	ldr	r6, [r2, #4]
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	f109 091c 	add.w	r9, r9, #28
 800b5b2:	7523      	strb	r3, [r4, #20]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6962      	ldr	r2, [r4, #20]
 800b5b8:	60a7      	str	r7, [r4, #8]
 800b5ba:	f36b 221f 	bfi	r2, fp, #8, #24
 800b5be:	6126      	str	r6, [r4, #16]
 800b5c0:	61a1      	str	r1, [r4, #24]
 800b5c2:	60e3      	str	r3, [r4, #12]
 800b5c4:	6162      	str	r2, [r4, #20]
 800b5c6:	e9c4 0c00 	strd	r0, ip, [r4]
 800b5ca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b5ce:	b2ac      	uxth	r4, r5
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	f240 80a6 	bls.w	800b728 <ai_platform_outputs_get+0x220>
 800b5dc:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 80a1 	beq.w	800b728 <ai_platform_outputs_get+0x220>
 800b5e6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	f000 809c 	beq.w	800b728 <ai_platform_outputs_get+0x220>
 800b5f0:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b5f4:	69b2      	ldr	r2, [r6, #24]
 800b5f6:	68f1      	ldr	r1, [r6, #12]
 800b5f8:	6810      	ldr	r0, [r2, #0]
 800b5fa:	9100      	str	r1, [sp, #0]
 800b5fc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b600:	68b3      	ldr	r3, [r6, #8]
 800b602:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b606:	444c      	add	r4, r9
 800b608:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b60c:	f003 f8d6 	bl	800e7bc <ai_array_to_buffer_fmt>
 800b610:	69b2      	ldr	r2, [r6, #24]
 800b612:	9900      	ldr	r1, [sp, #0]
 800b614:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b618:	2f00      	cmp	r7, #0
 800b61a:	d0c4      	beq.n	800b5a6 <ai_platform_outputs_get+0x9e>
 800b61c:	2200      	movs	r2, #0
 800b61e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b622:	6832      	ldr	r2, [r6, #0]
 800b624:	607a      	str	r2, [r7, #4]
 800b626:	b112      	cbz	r2, 800b62e <ai_platform_outputs_get+0x126>
 800b628:	8852      	ldrh	r2, [r2, #2]
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	d1b6      	bne.n	800b59c <ai_platform_outputs_get+0x94>
 800b62e:	69b2      	ldr	r2, [r6, #24]
 800b630:	2700      	movs	r7, #0
 800b632:	e7b8      	b.n	800b5a6 <ai_platform_outputs_get+0x9e>
 800b634:	f7ff fc16 	bl	800ae64 <_ai_platform_acquire_crc>
 800b638:	4b60      	ldr	r3, [pc, #384]	; (800b7bc <ai_platform_outputs_get+0x2b4>)
 800b63a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b644:	185a      	adds	r2, r3, r1
 800b646:	2a01      	cmp	r2, #1
 800b648:	d92a      	bls.n	800b6a0 <ai_platform_outputs_get+0x198>
 800b64a:	f240 4249 	movw	r2, #1097	; 0x449
 800b64e:	4293      	cmp	r3, r2
 800b650:	d026      	beq.n	800b6a0 <ai_platform_outputs_get+0x198>
 800b652:	4a5b      	ldr	r2, [pc, #364]	; (800b7c0 <ai_platform_outputs_get+0x2b8>)
 800b654:	6813      	ldr	r3, [r2, #0]
 800b656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b65a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b65e:	d02c      	beq.n	800b6ba <ai_platform_outputs_get+0x1b2>
 800b660:	6813      	ldr	r3, [r2, #0]
 800b662:	f240 4183 	movw	r1, #1155	; 0x483
 800b666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b66a:	428b      	cmp	r3, r1
 800b66c:	d072      	beq.n	800b754 <ai_platform_outputs_get+0x24c>
 800b66e:	6813      	ldr	r3, [r2, #0]
 800b670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b674:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b678:	f000 80ac 	beq.w	800b7d4 <ai_platform_outputs_get+0x2cc>
 800b67c:	6813      	ldr	r3, [r2, #0]
 800b67e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b682:	2b00      	cmp	r3, #0
 800b684:	d129      	bne.n	800b6da <ai_platform_outputs_get+0x1d2>
 800b686:	4a4f      	ldr	r2, [pc, #316]	; (800b7c4 <ai_platform_outputs_get+0x2bc>)
 800b688:	2301      	movs	r3, #1
 800b68a:	6093      	str	r3, [r2, #8]
 800b68c:	6893      	ldr	r3, [r2, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1fc      	bne.n	800b68c <ai_platform_outputs_get+0x184>
 800b692:	494d      	ldr	r1, [pc, #308]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b694:	4b4d      	ldr	r3, [pc, #308]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b696:	6011      	str	r1, [r2, #0]
 800b698:	6812      	ldr	r2, [r2, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d01d      	beq.n	800b6da <ai_platform_outputs_get+0x1d2>
 800b69e:	e7fe      	b.n	800b69e <ai_platform_outputs_get+0x196>
 800b6a0:	4a48      	ldr	r2, [pc, #288]	; (800b7c4 <ai_platform_outputs_get+0x2bc>)
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	6093      	str	r3, [r2, #8]
 800b6a6:	6893      	ldr	r3, [r2, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1fc      	bne.n	800b6a6 <ai_platform_outputs_get+0x19e>
 800b6ac:	4946      	ldr	r1, [pc, #280]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b6ae:	4b47      	ldr	r3, [pc, #284]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b6b0:	6011      	str	r1, [r2, #0]
 800b6b2:	6812      	ldr	r2, [r2, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d010      	beq.n	800b6da <ai_platform_outputs_get+0x1d2>
 800b6b8:	e7fe      	b.n	800b6b8 <ai_platform_outputs_get+0x1b0>
 800b6ba:	4a45      	ldr	r2, [pc, #276]	; (800b7d0 <ai_platform_outputs_get+0x2c8>)
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b6c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1fb      	bne.n	800b6c2 <ai_platform_outputs_get+0x1ba>
 800b6ca:	493f      	ldr	r1, [pc, #252]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b6cc:	4b3f      	ldr	r3, [pc, #252]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b6ce:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b6d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d113      	bne.n	800b702 <ai_platform_outputs_get+0x1fa>
 800b6da:	f7ff fbc5 	bl	800ae68 <_ai_platform_release_crc>
 800b6de:	2000      	movs	r0, #0
 800b6e0:	b005      	add	sp, #20
 800b6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e6:	4a37      	ldr	r2, [pc, #220]	; (800b7c4 <ai_platform_outputs_get+0x2bc>)
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	6093      	str	r3, [r2, #8]
 800b6ec:	6893      	ldr	r3, [r2, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1fc      	bne.n	800b6ec <ai_platform_outputs_get+0x1e4>
 800b6f2:	4b35      	ldr	r3, [pc, #212]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b6f4:	6013      	str	r3, [r2, #0]
 800b6f6:	4b35      	ldr	r3, [pc, #212]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b6f8:	6812      	ldr	r2, [r2, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	f43f af3f 	beq.w	800b57e <ai_platform_outputs_get+0x76>
 800b700:	e7fe      	b.n	800b700 <ai_platform_outputs_get+0x1f8>
 800b702:	e7fe      	b.n	800b702 <ai_platform_outputs_get+0x1fa>
 800b704:	4a32      	ldr	r2, [pc, #200]	; (800b7d0 <ai_platform_outputs_get+0x2c8>)
 800b706:	2301      	movs	r3, #1
 800b708:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b70c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1fb      	bne.n	800b70c <ai_platform_outputs_get+0x204>
 800b714:	4b2c      	ldr	r3, [pc, #176]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b716:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b71a:	4b2c      	ldr	r3, [pc, #176]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b71c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b720:	429a      	cmp	r2, r3
 800b722:	f43f af2c 	beq.w	800b57e <ai_platform_outputs_get+0x76>
 800b726:	e7fe      	b.n	800b726 <ai_platform_outputs_get+0x21e>
 800b728:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b72c:	b14c      	cbz	r4, 800b742 <ai_platform_outputs_get+0x23a>
 800b72e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b732:	6858      	ldr	r0, [r3, #4]
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0d2      	beq.n	800b6e0 <ai_platform_outputs_get+0x1d8>
 800b73a:	801c      	strh	r4, [r3, #0]
 800b73c:	b005      	add	sp, #20
 800b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b742:	2400      	movs	r4, #0
 800b744:	2218      	movs	r2, #24
 800b746:	2111      	movs	r1, #17
 800b748:	f109 0010 	add.w	r0, r9, #16
 800b74c:	f000 ffea 	bl	800c724 <core_set_error>
 800b750:	4620      	mov	r0, r4
 800b752:	e7ef      	b.n	800b734 <ai_platform_outputs_get+0x22c>
 800b754:	4a1e      	ldr	r2, [pc, #120]	; (800b7d0 <ai_platform_outputs_get+0x2c8>)
 800b756:	2301      	movs	r3, #1
 800b758:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b75c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1fb      	bne.n	800b75c <ai_platform_outputs_get+0x254>
 800b764:	4918      	ldr	r1, [pc, #96]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b766:	4b19      	ldr	r3, [pc, #100]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b768:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b76c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b770:	429a      	cmp	r2, r3
 800b772:	d0b2      	beq.n	800b6da <ai_platform_outputs_get+0x1d2>
 800b774:	e7fe      	b.n	800b774 <ai_platform_outputs_get+0x26c>
 800b776:	4a16      	ldr	r2, [pc, #88]	; (800b7d0 <ai_platform_outputs_get+0x2c8>)
 800b778:	2301      	movs	r3, #1
 800b77a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b77e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1fb      	bne.n	800b77e <ai_platform_outputs_get+0x276>
 800b786:	4b10      	ldr	r3, [pc, #64]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b788:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b78e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b792:	429a      	cmp	r2, r3
 800b794:	f43f aef3 	beq.w	800b57e <ai_platform_outputs_get+0x76>
 800b798:	e7fe      	b.n	800b798 <ai_platform_outputs_get+0x290>
 800b79a:	4a0a      	ldr	r2, [pc, #40]	; (800b7c4 <ai_platform_outputs_get+0x2bc>)
 800b79c:	2301      	movs	r3, #1
 800b79e:	6093      	str	r3, [r2, #8]
 800b7a0:	6893      	ldr	r3, [r2, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1fc      	bne.n	800b7a0 <ai_platform_outputs_get+0x298>
 800b7a6:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <ai_platform_outputs_get+0x2c0>)
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <ai_platform_outputs_get+0x2c4>)
 800b7ac:	6812      	ldr	r2, [r2, #0]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	f43f aee5 	beq.w	800b57e <ai_platform_outputs_get+0x76>
 800b7b4:	e7fe      	b.n	800b7b4 <ai_platform_outputs_get+0x2ac>
 800b7b6:	bf00      	nop
 800b7b8:	a1c00100 	.word	0xa1c00100
 800b7bc:	e0042000 	.word	0xe0042000
 800b7c0:	5c001000 	.word	0x5c001000
 800b7c4:	40023000 	.word	0x40023000
 800b7c8:	f407a5c2 	.word	0xf407a5c2
 800b7cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7d0:	58024000 	.word	0x58024000
 800b7d4:	4a0d      	ldr	r2, [pc, #52]	; (800b80c <ai_platform_outputs_get+0x304>)
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	6093      	str	r3, [r2, #8]
 800b7da:	6893      	ldr	r3, [r2, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1fc      	bne.n	800b7da <ai_platform_outputs_get+0x2d2>
 800b7e0:	490b      	ldr	r1, [pc, #44]	; (800b810 <ai_platform_outputs_get+0x308>)
 800b7e2:	4b0c      	ldr	r3, [pc, #48]	; (800b814 <ai_platform_outputs_get+0x30c>)
 800b7e4:	6011      	str	r1, [r2, #0]
 800b7e6:	6812      	ldr	r2, [r2, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	f43f af76 	beq.w	800b6da <ai_platform_outputs_get+0x1d2>
 800b7ee:	e7fe      	b.n	800b7ee <ai_platform_outputs_get+0x2e6>
 800b7f0:	4a06      	ldr	r2, [pc, #24]	; (800b80c <ai_platform_outputs_get+0x304>)
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	6093      	str	r3, [r2, #8]
 800b7f6:	6893      	ldr	r3, [r2, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1fc      	bne.n	800b7f6 <ai_platform_outputs_get+0x2ee>
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <ai_platform_outputs_get+0x308>)
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	4b04      	ldr	r3, [pc, #16]	; (800b814 <ai_platform_outputs_get+0x30c>)
 800b802:	6812      	ldr	r2, [r2, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	f43f aeba 	beq.w	800b57e <ai_platform_outputs_get+0x76>
 800b80a:	e7fe      	b.n	800b80a <ai_platform_outputs_get+0x302>
 800b80c:	40023000 	.word	0x40023000
 800b810:	f407a5c2 	.word	0xf407a5c2
 800b814:	b5e8b5cd 	.word	0xb5e8b5cd

0800b818 <ai_platform_network_create>:
 800b818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b81c:	b083      	sub	sp, #12
 800b81e:	4604      	mov	r4, r0
 800b820:	4615      	mov	r5, r2
 800b822:	461e      	mov	r6, r3
 800b824:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800b828:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800b82c:	f7ff fb1a 	bl	800ae64 <_ai_platform_acquire_crc>
 800b830:	2800      	cmp	r0, #0
 800b832:	f000 80bd 	beq.w	800b9b0 <ai_platform_network_create+0x198>
 800b836:	4ba5      	ldr	r3, [pc, #660]	; (800bacc <ai_platform_network_create+0x2b4>)
 800b838:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800b83c:	4601      	mov	r1, r0
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b844:	eb03 020c 	add.w	r2, r3, ip
 800b848:	2a01      	cmp	r2, #1
 800b84a:	f240 80a8 	bls.w	800b99e <ai_platform_network_create+0x186>
 800b84e:	f240 4249 	movw	r2, #1097	; 0x449
 800b852:	4293      	cmp	r3, r2
 800b854:	f000 80a3 	beq.w	800b99e <ai_platform_network_create+0x186>
 800b858:	4a9d      	ldr	r2, [pc, #628]	; (800bad0 <ai_platform_network_create+0x2b8>)
 800b85a:	6813      	ldr	r3, [r2, #0]
 800b85c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b860:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b864:	f000 80b9 	beq.w	800b9da <ai_platform_network_create+0x1c2>
 800b868:	6813      	ldr	r3, [r2, #0]
 800b86a:	f240 4c83 	movw	ip, #1155	; 0x483
 800b86e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b872:	4563      	cmp	r3, ip
 800b874:	f000 80a1 	beq.w	800b9ba <ai_platform_network_create+0x1a2>
 800b878:	6813      	ldr	r3, [r2, #0]
 800b87a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b87e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b882:	f000 8153 	beq.w	800bb2c <ai_platform_network_create+0x314>
 800b886:	6813      	ldr	r3, [r2, #0]
 800b888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 808d 	bne.w	800b9ac <ai_platform_network_create+0x194>
 800b892:	4a90      	ldr	r2, [pc, #576]	; (800bad4 <ai_platform_network_create+0x2bc>)
 800b894:	2318      	movs	r3, #24
 800b896:	6093      	str	r3, [r2, #8]
 800b898:	6893      	ldr	r3, [r2, #8]
 800b89a:	2b18      	cmp	r3, #24
 800b89c:	f040 8086 	bne.w	800b9ac <ai_platform_network_create+0x194>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	6093      	str	r3, [r2, #8]
 800b8a4:	6893      	ldr	r3, [r2, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1fc      	bne.n	800b8a4 <ai_platform_network_create+0x8c>
 800b8aa:	4608      	mov	r0, r1
 800b8ac:	f7ff fadc 	bl	800ae68 <_ai_platform_release_crc>
 800b8b0:	f7ff fad8 	bl	800ae64 <_ai_platform_acquire_crc>
 800b8b4:	4b85      	ldr	r3, [pc, #532]	; (800bacc <ai_platform_network_create+0x2b4>)
 800b8b6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8c0:	189a      	adds	r2, r3, r2
 800b8c2:	2a01      	cmp	r2, #1
 800b8c4:	f240 809f 	bls.w	800ba06 <ai_platform_network_create+0x1ee>
 800b8c8:	f240 4249 	movw	r2, #1097	; 0x449
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	f000 809a 	beq.w	800ba06 <ai_platform_network_create+0x1ee>
 800b8d2:	4a7f      	ldr	r2, [pc, #508]	; (800bad0 <ai_platform_network_create+0x2b8>)
 800b8d4:	6813      	ldr	r3, [r2, #0]
 800b8d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b8de:	f000 80a0 	beq.w	800ba22 <ai_platform_network_create+0x20a>
 800b8e2:	6813      	ldr	r3, [r2, #0]
 800b8e4:	f240 4183 	movw	r1, #1155	; 0x483
 800b8e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8ec:	428b      	cmp	r3, r1
 800b8ee:	f000 80bf 	beq.w	800ba70 <ai_platform_network_create+0x258>
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b8fc:	f000 8123 	beq.w	800bb46 <ai_platform_network_create+0x32e>
 800b900:	6813      	ldr	r3, [r2, #0]
 800b902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 80c4 	beq.w	800ba94 <ai_platform_network_create+0x27c>
 800b90c:	f7ff faac 	bl	800ae68 <_ai_platform_release_crc>
 800b910:	2c00      	cmp	r4, #0
 800b912:	f000 80aa 	beq.w	800ba6a <ai_platform_network_create+0x252>
 800b916:	4b70      	ldr	r3, [pc, #448]	; (800bad8 <ai_platform_network_create+0x2c0>)
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	6025      	str	r5, [r4, #0]
 800b91c:	f000 fefa 	bl	800c714 <core_init>
 800b920:	2800      	cmp	r0, #0
 800b922:	f000 8090 	beq.w	800ba46 <ai_platform_network_create+0x22e>
 800b926:	f7ff fa9d 	bl	800ae64 <_ai_platform_acquire_crc>
 800b92a:	4b68      	ldr	r3, [pc, #416]	; (800bacc <ai_platform_network_create+0x2b4>)
 800b92c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b936:	185a      	adds	r2, r3, r1
 800b938:	2a01      	cmp	r2, #1
 800b93a:	f240 80b9 	bls.w	800bab0 <ai_platform_network_create+0x298>
 800b93e:	f240 4249 	movw	r2, #1097	; 0x449
 800b942:	4293      	cmp	r3, r2
 800b944:	f000 80b4 	beq.w	800bab0 <ai_platform_network_create+0x298>
 800b948:	4a61      	ldr	r2, [pc, #388]	; (800bad0 <ai_platform_network_create+0x2b8>)
 800b94a:	6813      	ldr	r3, [r2, #0]
 800b94c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b950:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b954:	f000 80c8 	beq.w	800bae8 <ai_platform_network_create+0x2d0>
 800b958:	6813      	ldr	r3, [r2, #0]
 800b95a:	f240 4183 	movw	r1, #1155	; 0x483
 800b95e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b962:	428b      	cmp	r3, r1
 800b964:	f000 8107 	beq.w	800bb76 <ai_platform_network_create+0x35e>
 800b968:	6813      	ldr	r3, [r2, #0]
 800b96a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b96e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b972:	f000 8111 	beq.w	800bb98 <ai_platform_network_create+0x380>
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f040 80c3 	bne.w	800bb08 <ai_platform_network_create+0x2f0>
 800b982:	4b54      	ldr	r3, [pc, #336]	; (800bad4 <ai_platform_network_create+0x2bc>)
 800b984:	2201      	movs	r2, #1
 800b986:	609a      	str	r2, [r3, #8]
 800b988:	689a      	ldr	r2, [r3, #8]
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	d1fc      	bne.n	800b988 <ai_platform_network_create+0x170>
 800b98e:	4a53      	ldr	r2, [pc, #332]	; (800badc <ai_platform_network_create+0x2c4>)
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	4b52      	ldr	r3, [pc, #328]	; (800bae0 <ai_platform_network_create+0x2c8>)
 800b996:	429a      	cmp	r2, r3
 800b998:	f000 80b6 	beq.w	800bb08 <ai_platform_network_create+0x2f0>
 800b99c:	e7fe      	b.n	800b99c <ai_platform_network_create+0x184>
 800b99e:	4b4d      	ldr	r3, [pc, #308]	; (800bad4 <ai_platform_network_create+0x2bc>)
 800b9a0:	2218      	movs	r2, #24
 800b9a2:	609a      	str	r2, [r3, #8]
 800b9a4:	689a      	ldr	r2, [r3, #8]
 800b9a6:	2a18      	cmp	r2, #24
 800b9a8:	d027      	beq.n	800b9fa <ai_platform_network_create+0x1e2>
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	f7ff fa5c 	bl	800ae68 <_ai_platform_release_crc>
 800b9b0:	f244 1033 	movw	r0, #16691	; 0x4133
 800b9b4:	b003      	add	sp, #12
 800b9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ba:	4a4a      	ldr	r2, [pc, #296]	; (800bae4 <ai_platform_network_create+0x2cc>)
 800b9bc:	2318      	movs	r3, #24
 800b9be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9c6:	2b18      	cmp	r3, #24
 800b9c8:	d1f0      	bne.n	800b9ac <ai_platform_network_create+0x194>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1fb      	bne.n	800b9d0 <ai_platform_network_create+0x1b8>
 800b9d8:	e767      	b.n	800b8aa <ai_platform_network_create+0x92>
 800b9da:	4a42      	ldr	r2, [pc, #264]	; (800bae4 <ai_platform_network_create+0x2cc>)
 800b9dc:	2318      	movs	r3, #24
 800b9de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9e6:	2b18      	cmp	r3, #24
 800b9e8:	d1e0      	bne.n	800b9ac <ai_platform_network_create+0x194>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1fb      	bne.n	800b9f0 <ai_platform_network_create+0x1d8>
 800b9f8:	e757      	b.n	800b8aa <ai_platform_network_create+0x92>
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	609a      	str	r2, [r3, #8]
 800b9fe:	689a      	ldr	r2, [r3, #8]
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	d1fc      	bne.n	800b9fe <ai_platform_network_create+0x1e6>
 800ba04:	e751      	b.n	800b8aa <ai_platform_network_create+0x92>
 800ba06:	4a33      	ldr	r2, [pc, #204]	; (800bad4 <ai_platform_network_create+0x2bc>)
 800ba08:	2301      	movs	r3, #1
 800ba0a:	6093      	str	r3, [r2, #8]
 800ba0c:	6891      	ldr	r1, [r2, #8]
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	d1fc      	bne.n	800ba0c <ai_platform_network_create+0x1f4>
 800ba12:	4b32      	ldr	r3, [pc, #200]	; (800badc <ai_platform_network_create+0x2c4>)
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	4b32      	ldr	r3, [pc, #200]	; (800bae0 <ai_platform_network_create+0x2c8>)
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	f43f af76 	beq.w	800b90c <ai_platform_network_create+0xf4>
 800ba20:	e7fe      	b.n	800ba20 <ai_platform_network_create+0x208>
 800ba22:	4a30      	ldr	r2, [pc, #192]	; (800bae4 <ai_platform_network_create+0x2cc>)
 800ba24:	2301      	movs	r3, #1
 800ba26:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba2a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1fb      	bne.n	800ba2a <ai_platform_network_create+0x212>
 800ba32:	4b2a      	ldr	r3, [pc, #168]	; (800badc <ai_platform_network_create+0x2c4>)
 800ba34:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ba38:	4b29      	ldr	r3, [pc, #164]	; (800bae0 <ai_platform_network_create+0x2c8>)
 800ba3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	f43f af64 	beq.w	800b90c <ai_platform_network_create+0xf4>
 800ba44:	e7fe      	b.n	800ba44 <ai_platform_network_create+0x22c>
 800ba46:	f04f 0930 	mov.w	r9, #48	; 0x30
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	2410      	movs	r4, #16
 800ba50:	4642      	mov	r2, r8
 800ba52:	4639      	mov	r1, r7
 800ba54:	4630      	mov	r0, r6
 800ba56:	f002 fe95 	bl	800e784 <ai_version_get>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	64ab      	str	r3, [r5, #72]	; 0x48
 800ba60:	f369 0007 	bfi	r0, r9, #0, #8
 800ba64:	f364 201f 	bfi	r0, r4, #8, #24
 800ba68:	e7a4      	b.n	800b9b4 <ai_platform_network_create+0x19c>
 800ba6a:	f241 0010 	movw	r0, #4112	; 0x1010
 800ba6e:	e7a1      	b.n	800b9b4 <ai_platform_network_create+0x19c>
 800ba70:	4a1c      	ldr	r2, [pc, #112]	; (800bae4 <ai_platform_network_create+0x2cc>)
 800ba72:	2301      	movs	r3, #1
 800ba74:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba78:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1fb      	bne.n	800ba78 <ai_platform_network_create+0x260>
 800ba80:	4b16      	ldr	r3, [pc, #88]	; (800badc <ai_platform_network_create+0x2c4>)
 800ba82:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ba86:	4b16      	ldr	r3, [pc, #88]	; (800bae0 <ai_platform_network_create+0x2c8>)
 800ba88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	f43f af3d 	beq.w	800b90c <ai_platform_network_create+0xf4>
 800ba92:	e7fe      	b.n	800ba92 <ai_platform_network_create+0x27a>
 800ba94:	4a0f      	ldr	r2, [pc, #60]	; (800bad4 <ai_platform_network_create+0x2bc>)
 800ba96:	2301      	movs	r3, #1
 800ba98:	6093      	str	r3, [r2, #8]
 800ba9a:	6893      	ldr	r3, [r2, #8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1fc      	bne.n	800ba9a <ai_platform_network_create+0x282>
 800baa0:	4b0e      	ldr	r3, [pc, #56]	; (800badc <ai_platform_network_create+0x2c4>)
 800baa2:	6013      	str	r3, [r2, #0]
 800baa4:	4b0e      	ldr	r3, [pc, #56]	; (800bae0 <ai_platform_network_create+0x2c8>)
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	f43f af2f 	beq.w	800b90c <ai_platform_network_create+0xf4>
 800baae:	e7fe      	b.n	800baae <ai_platform_network_create+0x296>
 800bab0:	4a08      	ldr	r2, [pc, #32]	; (800bad4 <ai_platform_network_create+0x2bc>)
 800bab2:	2301      	movs	r3, #1
 800bab4:	6093      	str	r3, [r2, #8]
 800bab6:	6893      	ldr	r3, [r2, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1fc      	bne.n	800bab6 <ai_platform_network_create+0x29e>
 800babc:	4b07      	ldr	r3, [pc, #28]	; (800badc <ai_platform_network_create+0x2c4>)
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <ai_platform_network_create+0x2c8>)
 800bac2:	6812      	ldr	r2, [r2, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d01f      	beq.n	800bb08 <ai_platform_network_create+0x2f0>
 800bac8:	e7fe      	b.n	800bac8 <ai_platform_network_create+0x2b0>
 800baca:	bf00      	nop
 800bacc:	e0042000 	.word	0xe0042000
 800bad0:	5c001000 	.word	0x5c001000
 800bad4:	40023000 	.word	0x40023000
 800bad8:	a1c00100 	.word	0xa1c00100
 800badc:	f407a5c2 	.word	0xf407a5c2
 800bae0:	b5e8b5cd 	.word	0xb5e8b5cd
 800bae4:	58024000 	.word	0x58024000
 800bae8:	4a33      	ldr	r2, [pc, #204]	; (800bbb8 <ai_platform_network_create+0x3a0>)
 800baea:	2301      	movs	r3, #1
 800baec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800baf0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1fb      	bne.n	800baf0 <ai_platform_network_create+0x2d8>
 800baf8:	4b30      	ldr	r3, [pc, #192]	; (800bbbc <ai_platform_network_create+0x3a4>)
 800bafa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bafe:	4b30      	ldr	r3, [pc, #192]	; (800bbc0 <ai_platform_network_create+0x3a8>)
 800bb00:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d12c      	bne.n	800bb62 <ai_platform_network_create+0x34a>
 800bb08:	f7ff f9ae 	bl	800ae68 <_ai_platform_release_crc>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4639      	mov	r1, r7
 800bb10:	4630      	mov	r0, r6
 800bb12:	f002 fe37 	bl	800e784 <ai_version_get>
 800bb16:	4681      	mov	r9, r0
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2105      	movs	r1, #5
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	f002 fe31 	bl	800e784 <ai_version_get>
 800bb22:	4581      	cmp	r9, r0
 800bb24:	d01e      	beq.n	800bb64 <ai_platform_network_create+0x34c>
 800bb26:	f04f 0901 	mov.w	r9, #1
 800bb2a:	e78e      	b.n	800ba4a <ai_platform_network_create+0x232>
 800bb2c:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <ai_platform_network_create+0x3ac>)
 800bb2e:	2218      	movs	r2, #24
 800bb30:	609a      	str	r2, [r3, #8]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	2a18      	cmp	r2, #24
 800bb36:	f47f af39 	bne.w	800b9ac <ai_platform_network_create+0x194>
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	609a      	str	r2, [r3, #8]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	d1fc      	bne.n	800bb3e <ai_platform_network_create+0x326>
 800bb44:	e6b1      	b.n	800b8aa <ai_platform_network_create+0x92>
 800bb46:	4a1f      	ldr	r2, [pc, #124]	; (800bbc4 <ai_platform_network_create+0x3ac>)
 800bb48:	2301      	movs	r3, #1
 800bb4a:	6093      	str	r3, [r2, #8]
 800bb4c:	6893      	ldr	r3, [r2, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1fc      	bne.n	800bb4c <ai_platform_network_create+0x334>
 800bb52:	4b1a      	ldr	r3, [pc, #104]	; (800bbbc <ai_platform_network_create+0x3a4>)
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	4b1a      	ldr	r3, [pc, #104]	; (800bbc0 <ai_platform_network_create+0x3a8>)
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	f43f aed6 	beq.w	800b90c <ai_platform_network_create+0xf4>
 800bb60:	e7fe      	b.n	800bb60 <ai_platform_network_create+0x348>
 800bb62:	e7fe      	b.n	800bb62 <ai_platform_network_create+0x34a>
 800bb64:	4b18      	ldr	r3, [pc, #96]	; (800bbc8 <ai_platform_network_create+0x3b0>)
 800bb66:	a801      	add	r0, sp, #4
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	f002 fc51 	bl	800e410 <ai_check_custom_types>
 800bb6e:	b300      	cbz	r0, 800bbb2 <ai_platform_network_create+0x39a>
 800bb70:	2400      	movs	r4, #0
 800bb72:	46a1      	mov	r9, r4
 800bb74:	e76c      	b.n	800ba50 <ai_platform_network_create+0x238>
 800bb76:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <ai_platform_network_create+0x3a0>)
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800bb7e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800bb82:	2a00      	cmp	r2, #0
 800bb84:	d1fb      	bne.n	800bb7e <ai_platform_network_create+0x366>
 800bb86:	4a0d      	ldr	r2, [pc, #52]	; (800bbbc <ai_platform_network_create+0x3a4>)
 800bb88:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800bb8c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <ai_platform_network_create+0x3a8>)
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d0b8      	beq.n	800bb08 <ai_platform_network_create+0x2f0>
 800bb96:	e7fe      	b.n	800bb96 <ai_platform_network_create+0x37e>
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <ai_platform_network_create+0x3ac>)
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	609a      	str	r2, [r3, #8]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	d1fc      	bne.n	800bb9e <ai_platform_network_create+0x386>
 800bba4:	4a05      	ldr	r2, [pc, #20]	; (800bbbc <ai_platform_network_create+0x3a4>)
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <ai_platform_network_create+0x3a8>)
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d0ab      	beq.n	800bb08 <ai_platform_network_create+0x2f0>
 800bbb0:	e7fe      	b.n	800bbb0 <ai_platform_network_create+0x398>
 800bbb2:	f04f 0902 	mov.w	r9, #2
 800bbb6:	e748      	b.n	800ba4a <ai_platform_network_create+0x232>
 800bbb8:	58024000 	.word	0x58024000
 800bbbc:	f407a5c2 	.word	0xf407a5c2
 800bbc0:	b5e8b5cd 	.word	0xb5e8b5cd
 800bbc4:	40023000 	.word	0x40023000
 800bbc8:	84048403 	.word	0x84048403

0800bbcc <ai_platform_network_init>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d052      	beq.n	800bc7a <ai_platform_network_init+0xae>
 800bbd4:	4bab      	ldr	r3, [pc, #684]	; (800be84 <ai_platform_network_init+0x2b8>)
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	6802      	ldr	r2, [r0, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d14d      	bne.n	800bc7a <ai_platform_network_init+0xae>
 800bbde:	460d      	mov	r5, r1
 800bbe0:	f7ff f940 	bl	800ae64 <_ai_platform_acquire_crc>
 800bbe4:	4ba8      	ldr	r3, [pc, #672]	; (800be88 <ai_platform_network_init+0x2bc>)
 800bbe6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbf0:	189a      	adds	r2, r3, r2
 800bbf2:	2a01      	cmp	r2, #1
 800bbf4:	f240 809b 	bls.w	800bd2e <ai_platform_network_init+0x162>
 800bbf8:	f240 4249 	movw	r2, #1097	; 0x449
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	f000 8096 	beq.w	800bd2e <ai_platform_network_init+0x162>
 800bc02:	4aa2      	ldr	r2, [pc, #648]	; (800be8c <ai_platform_network_init+0x2c0>)
 800bc04:	6813      	ldr	r3, [r2, #0]
 800bc06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc0a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bc0e:	f000 809d 	beq.w	800bd4c <ai_platform_network_init+0x180>
 800bc12:	6813      	ldr	r3, [r2, #0]
 800bc14:	f240 4183 	movw	r1, #1155	; 0x483
 800bc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc1c:	428b      	cmp	r3, r1
 800bc1e:	f000 80e4 	beq.w	800bdea <ai_platform_network_init+0x21e>
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc28:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bc2c:	f000 811b 	beq.w	800be66 <ai_platform_network_init+0x29a>
 800bc30:	6813      	ldr	r3, [r2, #0]
 800bc32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 80f9 	beq.w	800be2e <ai_platform_network_init+0x262>
 800bc3c:	f7ff f914 	bl	800ae68 <_ai_platform_release_crc>
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	f000 8147 	beq.w	800bed4 <ai_platform_network_init+0x308>
 800bc46:	4b92      	ldr	r3, [pc, #584]	; (800be90 <ai_platform_network_init+0x2c4>)
 800bc48:	682a      	ldr	r2, [r5, #0]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	f040 8090 	bne.w	800bd70 <ai_platform_network_init+0x1a4>
 800bc50:	692b      	ldr	r3, [r5, #16]
 800bc52:	89ae      	ldrh	r6, [r5, #12]
 800bc54:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800bc58:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800bc5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc5e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800bc62:	2303      	movs	r3, #3
 800bc64:	84a6      	strh	r6, [r4, #36]	; 0x24
 800bc66:	4626      	mov	r6, r4
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800bc6e:	60e3      	str	r3, [r4, #12]
 800bc70:	f002 fbf6 	bl	800e460 <ai_layers_init_all>
 800bc74:	4630      	mov	r0, r6
 800bc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7a:	f7ff f8f3 	bl	800ae64 <_ai_platform_acquire_crc>
 800bc7e:	4b82      	ldr	r3, [pc, #520]	; (800be88 <ai_platform_network_init+0x2bc>)
 800bc80:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc8a:	185a      	adds	r2, r3, r1
 800bc8c:	2a01      	cmp	r2, #1
 800bc8e:	d92b      	bls.n	800bce8 <ai_platform_network_init+0x11c>
 800bc90:	f240 4249 	movw	r2, #1097	; 0x449
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d027      	beq.n	800bce8 <ai_platform_network_init+0x11c>
 800bc98:	4a7c      	ldr	r2, [pc, #496]	; (800be8c <ai_platform_network_init+0x2c0>)
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bca0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bca4:	d02d      	beq.n	800bd02 <ai_platform_network_init+0x136>
 800bca6:	6813      	ldr	r3, [r2, #0]
 800bca8:	f240 4183 	movw	r1, #1155	; 0x483
 800bcac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	f000 8089 	beq.w	800bdc8 <ai_platform_network_init+0x1fc>
 800bcb6:	6813      	ldr	r3, [r2, #0]
 800bcb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcbc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bcc0:	f000 80c3 	beq.w	800be4a <ai_platform_network_init+0x27e>
 800bcc4:	6813      	ldr	r3, [r2, #0]
 800bcc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d129      	bne.n	800bd22 <ai_platform_network_init+0x156>
 800bcce:	4a71      	ldr	r2, [pc, #452]	; (800be94 <ai_platform_network_init+0x2c8>)
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	6093      	str	r3, [r2, #8]
 800bcd4:	6893      	ldr	r3, [r2, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1fc      	bne.n	800bcd4 <ai_platform_network_init+0x108>
 800bcda:	496f      	ldr	r1, [pc, #444]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bcdc:	4b6f      	ldr	r3, [pc, #444]	; (800be9c <ai_platform_network_init+0x2d0>)
 800bcde:	6011      	str	r1, [r2, #0]
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d01d      	beq.n	800bd22 <ai_platform_network_init+0x156>
 800bce6:	e7fe      	b.n	800bce6 <ai_platform_network_init+0x11a>
 800bce8:	4a6a      	ldr	r2, [pc, #424]	; (800be94 <ai_platform_network_init+0x2c8>)
 800bcea:	2301      	movs	r3, #1
 800bcec:	6093      	str	r3, [r2, #8]
 800bcee:	6893      	ldr	r3, [r2, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1fc      	bne.n	800bcee <ai_platform_network_init+0x122>
 800bcf4:	4968      	ldr	r1, [pc, #416]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bcf6:	4b69      	ldr	r3, [pc, #420]	; (800be9c <ai_platform_network_init+0x2d0>)
 800bcf8:	6011      	str	r1, [r2, #0]
 800bcfa:	6812      	ldr	r2, [r2, #0]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d010      	beq.n	800bd22 <ai_platform_network_init+0x156>
 800bd00:	e7fe      	b.n	800bd00 <ai_platform_network_init+0x134>
 800bd02:	4a67      	ldr	r2, [pc, #412]	; (800bea0 <ai_platform_network_init+0x2d4>)
 800bd04:	2301      	movs	r3, #1
 800bd06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bd0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1fb      	bne.n	800bd0a <ai_platform_network_init+0x13e>
 800bd12:	4961      	ldr	r1, [pc, #388]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bd14:	4b61      	ldr	r3, [pc, #388]	; (800be9c <ai_platform_network_init+0x2d0>)
 800bd16:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bd1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d113      	bne.n	800bd4a <ai_platform_network_init+0x17e>
 800bd22:	2600      	movs	r6, #0
 800bd24:	f7ff f8a0 	bl	800ae68 <_ai_platform_release_crc>
 800bd28:	4630      	mov	r0, r6
 800bd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2e:	4a59      	ldr	r2, [pc, #356]	; (800be94 <ai_platform_network_init+0x2c8>)
 800bd30:	2301      	movs	r3, #1
 800bd32:	6093      	str	r3, [r2, #8]
 800bd34:	6893      	ldr	r3, [r2, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1fc      	bne.n	800bd34 <ai_platform_network_init+0x168>
 800bd3a:	4b57      	ldr	r3, [pc, #348]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bd3c:	6013      	str	r3, [r2, #0]
 800bd3e:	4b57      	ldr	r3, [pc, #348]	; (800be9c <ai_platform_network_init+0x2d0>)
 800bd40:	6812      	ldr	r2, [r2, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	f43f af7a 	beq.w	800bc3c <ai_platform_network_init+0x70>
 800bd48:	e7fe      	b.n	800bd48 <ai_platform_network_init+0x17c>
 800bd4a:	e7fe      	b.n	800bd4a <ai_platform_network_init+0x17e>
 800bd4c:	4a54      	ldr	r2, [pc, #336]	; (800bea0 <ai_platform_network_init+0x2d4>)
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bd54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1fb      	bne.n	800bd54 <ai_platform_network_init+0x188>
 800bd5c:	4b4e      	ldr	r3, [pc, #312]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bd5e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bd62:	4b4e      	ldr	r3, [pc, #312]	; (800be9c <ai_platform_network_init+0x2d0>)
 800bd64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	f43f af67 	beq.w	800bc3c <ai_platform_network_init+0x70>
 800bd6e:	e7fe      	b.n	800bd6e <ai_platform_network_init+0x1a2>
 800bd70:	2101      	movs	r1, #1
 800bd72:	4628      	mov	r0, r5
 800bd74:	f105 081c 	add.w	r8, r5, #28
 800bd78:	686e      	ldr	r6, [r5, #4]
 800bd7a:	f7ff f835 	bl	800ade8 <ai_buffer_get_size>
 800bd7e:	4607      	mov	r7, r0
 800bd80:	2101      	movs	r1, #1
 800bd82:	4640      	mov	r0, r8
 800bd84:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800bd88:	f7ff f82e 	bl	800ade8 <ai_buffer_get_size>
 800bd8c:	2f00      	cmp	r7, #0
 800bd8e:	d13e      	bne.n	800be0e <ai_platform_network_init+0x242>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	f000 808e 	beq.w	800beb2 <ai_platform_network_init+0x2e6>
 800bd96:	f1b9 0f00 	cmp.w	r9, #0
 800bd9a:	f000 8094 	beq.w	800bec6 <ai_platform_network_init+0x2fa>
 800bd9e:	f04f 0c01 	mov.w	ip, #1
 800bda2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bda4:	2600      	movs	r6, #0
 800bda6:	83e7      	strh	r7, [r4, #30]
 800bda8:	4563      	cmp	r3, ip
 800bdaa:	83a6      	strh	r6, [r4, #28]
 800bdac:	d37a      	bcc.n	800bea4 <ai_platform_network_init+0x2d8>
 800bdae:	f1bc 0f00 	cmp.w	ip, #0
 800bdb2:	f000 809c 	beq.w	800beee <ai_platform_network_init+0x322>
 800bdb6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bdb8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800bdbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdbe:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800bdc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bdc6:	e74c      	b.n	800bc62 <ai_platform_network_init+0x96>
 800bdc8:	4a35      	ldr	r2, [pc, #212]	; (800bea0 <ai_platform_network_init+0x2d4>)
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bdd0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1fb      	bne.n	800bdd0 <ai_platform_network_init+0x204>
 800bdd8:	492f      	ldr	r1, [pc, #188]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bdda:	4b30      	ldr	r3, [pc, #192]	; (800be9c <ai_platform_network_init+0x2d0>)
 800bddc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bde0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d09c      	beq.n	800bd22 <ai_platform_network_init+0x156>
 800bde8:	e7fe      	b.n	800bde8 <ai_platform_network_init+0x21c>
 800bdea:	4a2d      	ldr	r2, [pc, #180]	; (800bea0 <ai_platform_network_init+0x2d4>)
 800bdec:	2301      	movs	r3, #1
 800bdee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bdf2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1fb      	bne.n	800bdf2 <ai_platform_network_init+0x226>
 800bdfa:	4b27      	ldr	r3, [pc, #156]	; (800be98 <ai_platform_network_init+0x2cc>)
 800bdfc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800be00:	4b26      	ldr	r3, [pc, #152]	; (800be9c <ai_platform_network_init+0x2d0>)
 800be02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800be06:	429a      	cmp	r2, r3
 800be08:	f43f af18 	beq.w	800bc3c <ai_platform_network_init+0x70>
 800be0c:	e7fe      	b.n	800be0c <ai_platform_network_init+0x240>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d153      	bne.n	800beba <ai_platform_network_init+0x2ee>
 800be12:	4680      	mov	r8, r0
 800be14:	4684      	mov	ip, r0
 800be16:	2e00      	cmp	r6, #0
 800be18:	d063      	beq.n	800bee2 <ai_platform_network_init+0x316>
 800be1a:	8be6      	ldrh	r6, [r4, #30]
 800be1c:	2e00      	cmp	r6, #0
 800be1e:	d168      	bne.n	800bef2 <ai_platform_network_init+0x326>
 800be20:	2212      	movs	r2, #18
 800be22:	2116      	movs	r1, #22
 800be24:	f104 0010 	add.w	r0, r4, #16
 800be28:	f000 fc7c 	bl	800c724 <core_set_error>
 800be2c:	e77c      	b.n	800bd28 <ai_platform_network_init+0x15c>
 800be2e:	4a19      	ldr	r2, [pc, #100]	; (800be94 <ai_platform_network_init+0x2c8>)
 800be30:	2301      	movs	r3, #1
 800be32:	6093      	str	r3, [r2, #8]
 800be34:	6893      	ldr	r3, [r2, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1fc      	bne.n	800be34 <ai_platform_network_init+0x268>
 800be3a:	4b17      	ldr	r3, [pc, #92]	; (800be98 <ai_platform_network_init+0x2cc>)
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	4b17      	ldr	r3, [pc, #92]	; (800be9c <ai_platform_network_init+0x2d0>)
 800be40:	6812      	ldr	r2, [r2, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	f43f aefa 	beq.w	800bc3c <ai_platform_network_init+0x70>
 800be48:	e7fe      	b.n	800be48 <ai_platform_network_init+0x27c>
 800be4a:	4a12      	ldr	r2, [pc, #72]	; (800be94 <ai_platform_network_init+0x2c8>)
 800be4c:	2301      	movs	r3, #1
 800be4e:	6093      	str	r3, [r2, #8]
 800be50:	6893      	ldr	r3, [r2, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1fc      	bne.n	800be50 <ai_platform_network_init+0x284>
 800be56:	4910      	ldr	r1, [pc, #64]	; (800be98 <ai_platform_network_init+0x2cc>)
 800be58:	4b10      	ldr	r3, [pc, #64]	; (800be9c <ai_platform_network_init+0x2d0>)
 800be5a:	6011      	str	r1, [r2, #0]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	f43f af5f 	beq.w	800bd22 <ai_platform_network_init+0x156>
 800be64:	e7fe      	b.n	800be64 <ai_platform_network_init+0x298>
 800be66:	4a0b      	ldr	r2, [pc, #44]	; (800be94 <ai_platform_network_init+0x2c8>)
 800be68:	2301      	movs	r3, #1
 800be6a:	6093      	str	r3, [r2, #8]
 800be6c:	6893      	ldr	r3, [r2, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1fc      	bne.n	800be6c <ai_platform_network_init+0x2a0>
 800be72:	4b09      	ldr	r3, [pc, #36]	; (800be98 <ai_platform_network_init+0x2cc>)
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	4b09      	ldr	r3, [pc, #36]	; (800be9c <ai_platform_network_init+0x2d0>)
 800be78:	6812      	ldr	r2, [r2, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	f43f aede 	beq.w	800bc3c <ai_platform_network_init+0x70>
 800be80:	e7fe      	b.n	800be80 <ai_platform_network_init+0x2b4>
 800be82:	bf00      	nop
 800be84:	a1c00100 	.word	0xa1c00100
 800be88:	e0042000 	.word	0xe0042000
 800be8c:	5c001000 	.word	0x5c001000
 800be90:	a1facade 	.word	0xa1facade
 800be94:	40023000 	.word	0x40023000
 800be98:	f407a5c2 	.word	0xf407a5c2
 800be9c:	b5e8b5cd 	.word	0xb5e8b5cd
 800bea0:	58024000 	.word	0x58024000
 800bea4:	2213      	movs	r2, #19
 800bea6:	2116      	movs	r1, #22
 800bea8:	f104 0010 	add.w	r0, r4, #16
 800beac:	f000 fc3a 	bl	800c724 <core_set_error>
 800beb0:	e73a      	b.n	800bd28 <ai_platform_network_init+0x15c>
 800beb2:	4607      	mov	r7, r0
 800beb4:	4680      	mov	r8, r0
 800beb6:	4684      	mov	ip, r0
 800beb8:	e773      	b.n	800bda2 <ai_platform_network_init+0x1d6>
 800beba:	f1b9 0f00 	cmp.w	r9, #0
 800bebe:	d002      	beq.n	800bec6 <ai_platform_network_init+0x2fa>
 800bec0:	f04f 0c01 	mov.w	ip, #1
 800bec4:	e7a7      	b.n	800be16 <ai_platform_network_init+0x24a>
 800bec6:	2110      	movs	r1, #16
 800bec8:	2213      	movs	r2, #19
 800beca:	2600      	movs	r6, #0
 800becc:	1860      	adds	r0, r4, r1
 800bece:	f000 fc29 	bl	800c724 <core_set_error>
 800bed2:	e729      	b.n	800bd28 <ai_platform_network_init+0x15c>
 800bed4:	2110      	movs	r1, #16
 800bed6:	2211      	movs	r2, #17
 800bed8:	462e      	mov	r6, r5
 800beda:	1860      	adds	r0, r4, r1
 800bedc:	f000 fc22 	bl	800c724 <core_set_error>
 800bee0:	e722      	b.n	800bd28 <ai_platform_network_init+0x15c>
 800bee2:	2110      	movs	r1, #16
 800bee4:	2212      	movs	r2, #18
 800bee6:	1860      	adds	r0, r4, r1
 800bee8:	f000 fc1c 	bl	800c724 <core_set_error>
 800beec:	e71c      	b.n	800bd28 <ai_platform_network_init+0x15c>
 800beee:	4666      	mov	r6, ip
 800bef0:	e6b7      	b.n	800bc62 <ai_platform_network_init+0x96>
 800bef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bef4:	6a26      	ldr	r6, [r4, #32]
 800bef6:	2701      	movs	r7, #1
 800bef8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800befa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800befe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800bf02:	e74e      	b.n	800bda2 <ai_platform_network_init+0x1d6>

0800bf04 <ai_platform_network_post_init>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d04e      	beq.n	800bfa8 <ai_platform_network_post_init+0xa4>
 800bf0a:	4b8c      	ldr	r3, [pc, #560]	; (800c13c <ai_platform_network_post_init+0x238>)
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	6802      	ldr	r2, [r0, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d149      	bne.n	800bfa8 <ai_platform_network_post_init+0xa4>
 800bf14:	f7fe ffa6 	bl	800ae64 <_ai_platform_acquire_crc>
 800bf18:	4b89      	ldr	r3, [pc, #548]	; (800c140 <ai_platform_network_post_init+0x23c>)
 800bf1a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf24:	189a      	adds	r2, r3, r2
 800bf26:	2a01      	cmp	r2, #1
 800bf28:	f240 8095 	bls.w	800c056 <ai_platform_network_post_init+0x152>
 800bf2c:	f240 4249 	movw	r2, #1097	; 0x449
 800bf30:	4293      	cmp	r3, r2
 800bf32:	f000 8090 	beq.w	800c056 <ai_platform_network_post_init+0x152>
 800bf36:	4a83      	ldr	r2, [pc, #524]	; (800c144 <ai_platform_network_post_init+0x240>)
 800bf38:	6813      	ldr	r3, [r2, #0]
 800bf3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf3e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bf42:	f000 8096 	beq.w	800c072 <ai_platform_network_post_init+0x16e>
 800bf46:	6813      	ldr	r3, [r2, #0]
 800bf48:	f240 4183 	movw	r1, #1155	; 0x483
 800bf4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf50:	428b      	cmp	r3, r1
 800bf52:	f000 80b8 	beq.w	800c0c6 <ai_platform_network_post_init+0x1c2>
 800bf56:	6813      	ldr	r3, [r2, #0]
 800bf58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf5c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bf60:	f000 80de 	beq.w	800c120 <ai_platform_network_post_init+0x21c>
 800bf64:	6813      	ldr	r3, [r2, #0]
 800bf66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 80bd 	beq.w	800c0ea <ai_platform_network_post_init+0x1e6>
 800bf70:	f7fe ff7a 	bl	800ae68 <_ai_platform_release_crc>
 800bf74:	68e3      	ldr	r3, [r4, #12]
 800bf76:	f013 0502 	ands.w	r5, r3, #2
 800bf7a:	f000 808c 	beq.w	800c096 <ai_platform_network_post_init+0x192>
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f002 fa7c 	bl	800e47c <ai_layers_post_init_all>
 800bf84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf86:	b16b      	cbz	r3, 800bfa4 <ai_platform_network_post_init+0xa0>
 800bf88:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800bf8a:	e007      	b.n	800bf9c <ai_platform_network_post_init+0x98>
 800bf8c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800bf90:	4798      	blx	r3
 800bf92:	692b      	ldr	r3, [r5, #16]
 800bf94:	b133      	cbz	r3, 800bfa4 <ai_platform_network_post_init+0xa0>
 800bf96:	42ab      	cmp	r3, r5
 800bf98:	461d      	mov	r5, r3
 800bf9a:	d003      	beq.n	800bfa4 <ai_platform_network_post_init+0xa0>
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	2d00      	cmp	r5, #0
 800bfa2:	d1f3      	bne.n	800bf8c <ai_platform_network_post_init+0x88>
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	f7fe ff5c 	bl	800ae64 <_ai_platform_acquire_crc>
 800bfac:	4b64      	ldr	r3, [pc, #400]	; (800c140 <ai_platform_network_post_init+0x23c>)
 800bfae:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfb8:	185a      	adds	r2, r3, r1
 800bfba:	2a01      	cmp	r2, #1
 800bfbc:	d92a      	bls.n	800c014 <ai_platform_network_post_init+0x110>
 800bfbe:	f240 4249 	movw	r2, #1097	; 0x449
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d026      	beq.n	800c014 <ai_platform_network_post_init+0x110>
 800bfc6:	4a5f      	ldr	r2, [pc, #380]	; (800c144 <ai_platform_network_post_init+0x240>)
 800bfc8:	6813      	ldr	r3, [r2, #0]
 800bfca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfce:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bfd2:	d02c      	beq.n	800c02e <ai_platform_network_post_init+0x12a>
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	f240 4183 	movw	r1, #1155	; 0x483
 800bfda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfde:	428b      	cmp	r3, r1
 800bfe0:	d060      	beq.n	800c0a4 <ai_platform_network_post_init+0x1a0>
 800bfe2:	6813      	ldr	r3, [r2, #0]
 800bfe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfe8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bfec:	f000 808b 	beq.w	800c106 <ai_platform_network_post_init+0x202>
 800bff0:	6813      	ldr	r3, [r2, #0]
 800bff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d129      	bne.n	800c04e <ai_platform_network_post_init+0x14a>
 800bffa:	4a53      	ldr	r2, [pc, #332]	; (800c148 <ai_platform_network_post_init+0x244>)
 800bffc:	2301      	movs	r3, #1
 800bffe:	6093      	str	r3, [r2, #8]
 800c000:	6893      	ldr	r3, [r2, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1fc      	bne.n	800c000 <ai_platform_network_post_init+0xfc>
 800c006:	4951      	ldr	r1, [pc, #324]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c008:	4b51      	ldr	r3, [pc, #324]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c00a:	6011      	str	r1, [r2, #0]
 800c00c:	6812      	ldr	r2, [r2, #0]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d01d      	beq.n	800c04e <ai_platform_network_post_init+0x14a>
 800c012:	e7fe      	b.n	800c012 <ai_platform_network_post_init+0x10e>
 800c014:	4a4c      	ldr	r2, [pc, #304]	; (800c148 <ai_platform_network_post_init+0x244>)
 800c016:	2301      	movs	r3, #1
 800c018:	6093      	str	r3, [r2, #8]
 800c01a:	6893      	ldr	r3, [r2, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1fc      	bne.n	800c01a <ai_platform_network_post_init+0x116>
 800c020:	494a      	ldr	r1, [pc, #296]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c022:	4b4b      	ldr	r3, [pc, #300]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c024:	6011      	str	r1, [r2, #0]
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d010      	beq.n	800c04e <ai_platform_network_post_init+0x14a>
 800c02c:	e7fe      	b.n	800c02c <ai_platform_network_post_init+0x128>
 800c02e:	4a49      	ldr	r2, [pc, #292]	; (800c154 <ai_platform_network_post_init+0x250>)
 800c030:	2301      	movs	r3, #1
 800c032:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c036:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1fb      	bne.n	800c036 <ai_platform_network_post_init+0x132>
 800c03e:	4943      	ldr	r1, [pc, #268]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c040:	4b43      	ldr	r3, [pc, #268]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c042:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c046:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d110      	bne.n	800c070 <ai_platform_network_post_init+0x16c>
 800c04e:	f7fe ff0b 	bl	800ae68 <_ai_platform_release_crc>
 800c052:	2000      	movs	r0, #0
 800c054:	bd38      	pop	{r3, r4, r5, pc}
 800c056:	4a3c      	ldr	r2, [pc, #240]	; (800c148 <ai_platform_network_post_init+0x244>)
 800c058:	2301      	movs	r3, #1
 800c05a:	6093      	str	r3, [r2, #8]
 800c05c:	6893      	ldr	r3, [r2, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1fc      	bne.n	800c05c <ai_platform_network_post_init+0x158>
 800c062:	493a      	ldr	r1, [pc, #232]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c064:	4b3a      	ldr	r3, [pc, #232]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c066:	6011      	str	r1, [r2, #0]
 800c068:	6812      	ldr	r2, [r2, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d080      	beq.n	800bf70 <ai_platform_network_post_init+0x6c>
 800c06e:	e7fe      	b.n	800c06e <ai_platform_network_post_init+0x16a>
 800c070:	e7fe      	b.n	800c070 <ai_platform_network_post_init+0x16c>
 800c072:	4a38      	ldr	r2, [pc, #224]	; (800c154 <ai_platform_network_post_init+0x250>)
 800c074:	2301      	movs	r3, #1
 800c076:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c07a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1fb      	bne.n	800c07a <ai_platform_network_post_init+0x176>
 800c082:	4932      	ldr	r1, [pc, #200]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c084:	4b32      	ldr	r3, [pc, #200]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c086:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c08a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c08e:	429a      	cmp	r2, r3
 800c090:	f43f af6e 	beq.w	800bf70 <ai_platform_network_post_init+0x6c>
 800c094:	e7fe      	b.n	800c094 <ai_platform_network_post_init+0x190>
 800c096:	2210      	movs	r2, #16
 800c098:	2111      	movs	r1, #17
 800c09a:	18a0      	adds	r0, r4, r2
 800c09c:	f000 fb42 	bl	800c724 <core_set_error>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	4a2b      	ldr	r2, [pc, #172]	; (800c154 <ai_platform_network_post_init+0x250>)
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c0ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1fb      	bne.n	800c0ac <ai_platform_network_post_init+0x1a8>
 800c0b4:	4925      	ldr	r1, [pc, #148]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c0b6:	4b26      	ldr	r3, [pc, #152]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c0b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c0bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d0c4      	beq.n	800c04e <ai_platform_network_post_init+0x14a>
 800c0c4:	e7fe      	b.n	800c0c4 <ai_platform_network_post_init+0x1c0>
 800c0c6:	4a23      	ldr	r2, [pc, #140]	; (800c154 <ai_platform_network_post_init+0x250>)
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c0ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1fb      	bne.n	800c0ce <ai_platform_network_post_init+0x1ca>
 800c0d6:	491d      	ldr	r1, [pc, #116]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c0d8:	4b1d      	ldr	r3, [pc, #116]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c0da:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c0de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	f43f af44 	beq.w	800bf70 <ai_platform_network_post_init+0x6c>
 800c0e8:	e7fe      	b.n	800c0e8 <ai_platform_network_post_init+0x1e4>
 800c0ea:	4a17      	ldr	r2, [pc, #92]	; (800c148 <ai_platform_network_post_init+0x244>)
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	6093      	str	r3, [r2, #8]
 800c0f0:	6893      	ldr	r3, [r2, #8]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1fc      	bne.n	800c0f0 <ai_platform_network_post_init+0x1ec>
 800c0f6:	4915      	ldr	r1, [pc, #84]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c0f8:	4b15      	ldr	r3, [pc, #84]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c0fa:	6011      	str	r1, [r2, #0]
 800c0fc:	6812      	ldr	r2, [r2, #0]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	f43f af36 	beq.w	800bf70 <ai_platform_network_post_init+0x6c>
 800c104:	e7fe      	b.n	800c104 <ai_platform_network_post_init+0x200>
 800c106:	4a10      	ldr	r2, [pc, #64]	; (800c148 <ai_platform_network_post_init+0x244>)
 800c108:	2301      	movs	r3, #1
 800c10a:	6093      	str	r3, [r2, #8]
 800c10c:	6893      	ldr	r3, [r2, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1fc      	bne.n	800c10c <ai_platform_network_post_init+0x208>
 800c112:	490e      	ldr	r1, [pc, #56]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c114:	4b0e      	ldr	r3, [pc, #56]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c116:	6011      	str	r1, [r2, #0]
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d097      	beq.n	800c04e <ai_platform_network_post_init+0x14a>
 800c11e:	e7fe      	b.n	800c11e <ai_platform_network_post_init+0x21a>
 800c120:	4a09      	ldr	r2, [pc, #36]	; (800c148 <ai_platform_network_post_init+0x244>)
 800c122:	2301      	movs	r3, #1
 800c124:	6093      	str	r3, [r2, #8]
 800c126:	6893      	ldr	r3, [r2, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1fc      	bne.n	800c126 <ai_platform_network_post_init+0x222>
 800c12c:	4907      	ldr	r1, [pc, #28]	; (800c14c <ai_platform_network_post_init+0x248>)
 800c12e:	4b08      	ldr	r3, [pc, #32]	; (800c150 <ai_platform_network_post_init+0x24c>)
 800c130:	6011      	str	r1, [r2, #0]
 800c132:	6812      	ldr	r2, [r2, #0]
 800c134:	429a      	cmp	r2, r3
 800c136:	f43f af1b 	beq.w	800bf70 <ai_platform_network_post_init+0x6c>
 800c13a:	e7fe      	b.n	800c13a <ai_platform_network_post_init+0x236>
 800c13c:	a1c00100 	.word	0xa1c00100
 800c140:	e0042000 	.word	0xe0042000
 800c144:	5c001000 	.word	0x5c001000
 800c148:	40023000 	.word	0x40023000
 800c14c:	f407a5c2 	.word	0xf407a5c2
 800c150:	b5e8b5cd 	.word	0xb5e8b5cd
 800c154:	58024000 	.word	0x58024000

0800c158 <ai_platform_network_process>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	b085      	sub	sp, #20
 800c15e:	460e      	mov	r6, r1
 800c160:	4605      	mov	r5, r0
 800c162:	9201      	str	r2, [sp, #4]
 800c164:	b120      	cbz	r0, 800c170 <ai_platform_network_process+0x18>
 800c166:	4b24      	ldr	r3, [pc, #144]	; (800c1f8 <ai_platform_network_process+0xa0>)
 800c168:	6802      	ldr	r2, [r0, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	bf18      	it	ne
 800c16e:	2500      	movne	r5, #0
 800c170:	f7fe fe78 	bl	800ae64 <_ai_platform_acquire_crc>
 800c174:	4b21      	ldr	r3, [pc, #132]	; (800c1fc <ai_platform_network_process+0xa4>)
 800c176:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c180:	185a      	adds	r2, r3, r1
 800c182:	2a01      	cmp	r2, #1
 800c184:	d92b      	bls.n	800c1de <ai_platform_network_process+0x86>
 800c186:	f240 4249 	movw	r2, #1097	; 0x449
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d027      	beq.n	800c1de <ai_platform_network_process+0x86>
 800c18e:	4a1c      	ldr	r2, [pc, #112]	; (800c200 <ai_platform_network_process+0xa8>)
 800c190:	6813      	ldr	r3, [r2, #0]
 800c192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c196:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c19a:	d039      	beq.n	800c210 <ai_platform_network_process+0xb8>
 800c19c:	6813      	ldr	r3, [r2, #0]
 800c19e:	f240 4183 	movw	r1, #1155	; 0x483
 800c1a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1a6:	428b      	cmp	r3, r1
 800c1a8:	f000 819c 	beq.w	800c4e4 <ai_platform_network_process+0x38c>
 800c1ac:	6813      	ldr	r3, [r2, #0]
 800c1ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1b2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c1b6:	f000 8179 	beq.w	800c4ac <ai_platform_network_process+0x354>
 800c1ba:	6813      	ldr	r3, [r2, #0]
 800c1bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d136      	bne.n	800c232 <ai_platform_network_process+0xda>
 800c1c4:	4a0f      	ldr	r2, [pc, #60]	; (800c204 <ai_platform_network_process+0xac>)
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	6093      	str	r3, [r2, #8]
 800c1ca:	6893      	ldr	r3, [r2, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1fc      	bne.n	800c1ca <ai_platform_network_process+0x72>
 800c1d0:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <ai_platform_network_process+0xb0>)
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <ai_platform_network_process+0xb4>)
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d02a      	beq.n	800c232 <ai_platform_network_process+0xda>
 800c1dc:	e7fe      	b.n	800c1dc <ai_platform_network_process+0x84>
 800c1de:	4a09      	ldr	r2, [pc, #36]	; (800c204 <ai_platform_network_process+0xac>)
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	6093      	str	r3, [r2, #8]
 800c1e4:	6893      	ldr	r3, [r2, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1fc      	bne.n	800c1e4 <ai_platform_network_process+0x8c>
 800c1ea:	4b07      	ldr	r3, [pc, #28]	; (800c208 <ai_platform_network_process+0xb0>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	4b07      	ldr	r3, [pc, #28]	; (800c20c <ai_platform_network_process+0xb4>)
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d01d      	beq.n	800c232 <ai_platform_network_process+0xda>
 800c1f6:	e7fe      	b.n	800c1f6 <ai_platform_network_process+0x9e>
 800c1f8:	a1c00100 	.word	0xa1c00100
 800c1fc:	e0042000 	.word	0xe0042000
 800c200:	5c001000 	.word	0x5c001000
 800c204:	40023000 	.word	0x40023000
 800c208:	f407a5c2 	.word	0xf407a5c2
 800c20c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c210:	4ab0      	ldr	r2, [pc, #704]	; (800c4d4 <ai_platform_network_process+0x37c>)
 800c212:	2301      	movs	r3, #1
 800c214:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c218:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1fb      	bne.n	800c218 <ai_platform_network_process+0xc0>
 800c220:	4bad      	ldr	r3, [pc, #692]	; (800c4d8 <ai_platform_network_process+0x380>)
 800c222:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c226:	4bad      	ldr	r3, [pc, #692]	; (800c4dc <ai_platform_network_process+0x384>)
 800c228:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c22c:	429a      	cmp	r2, r3
 800c22e:	f040 812b 	bne.w	800c488 <ai_platform_network_process+0x330>
 800c232:	f7fe fe19 	bl	800ae68 <_ai_platform_release_crc>
 800c236:	2d00      	cmp	r5, #0
 800c238:	f000 8172 	beq.w	800c520 <ai_platform_network_process+0x3c8>
 800c23c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 8123 	beq.w	800c48a <ai_platform_network_process+0x332>
 800c244:	68eb      	ldr	r3, [r5, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800c24c:	f003 0303 	and.w	r3, r3, #3
 800c250:	616a      	str	r2, [r5, #20]
 800c252:	2b03      	cmp	r3, #3
 800c254:	f040 811f 	bne.w	800c496 <ai_platform_network_process+0x33e>
 800c258:	2e00      	cmp	r6, #0
 800c25a:	f000 8156 	beq.w	800c50a <ai_platform_network_process+0x3b2>
 800c25e:	fab8 f788 	clz	r7, r8
 800c262:	097f      	lsrs	r7, r7, #5
 800c264:	f1b8 0f00 	cmp.w	r8, #0
 800c268:	f000 814f 	beq.w	800c50a <ai_platform_network_process+0x3b2>
 800c26c:	f8b8 3000 	ldrh.w	r3, [r8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	f000 814a 	beq.w	800c50a <ai_platform_network_process+0x3b2>
 800c276:	69b3      	ldr	r3, [r6, #24]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800c27e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d072      	beq.n	800c36c <ai_platform_network_process+0x214>
 800c286:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c28a:	2c00      	cmp	r4, #0
 800c28c:	d06e      	beq.n	800c36c <ai_platform_network_process+0x214>
 800c28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c292:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c296:	f8d3 a000 	ldr.w	sl, [r3]
 800c29a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800c29e:	f000 8133 	beq.w	800c508 <ai_platform_network_process+0x3b0>
 800c2a2:	69a3      	ldr	r3, [r4, #24]
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	685d      	ldr	r5, [r3, #4]
 800c2aa:	f7fe fd9d 	bl	800ade8 <ai_buffer_get_size>
 800c2ae:	4285      	cmp	r5, r0
 800c2b0:	f0c0 8138 	bcc.w	800c524 <ai_platform_network_process+0x3cc>
 800c2b4:	68e0      	ldr	r0, [r4, #12]
 800c2b6:	69b1      	ldr	r1, [r6, #24]
 800c2b8:	68c2      	ldr	r2, [r0, #12]
 800c2ba:	68cb      	ldr	r3, [r1, #12]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	f040 8131 	bne.w	800c524 <ai_platform_network_process+0x3cc>
 800c2c2:	6882      	ldr	r2, [r0, #8]
 800c2c4:	688b      	ldr	r3, [r1, #8]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	f040 812c 	bne.w	800c524 <ai_platform_network_process+0x3cc>
 800c2cc:	6842      	ldr	r2, [r0, #4]
 800c2ce:	684b      	ldr	r3, [r1, #4]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	f040 8127 	bne.w	800c524 <ai_platform_network_process+0x3cc>
 800c2d6:	69a3      	ldr	r3, [r4, #24]
 800c2d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2dc:	f002 fb02 	bl	800e8e4 <ai_array_get_data_byte_size>
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f002 fa54 	bl	800e790 <get_tensor_byte_size>
 800c2e8:	4285      	cmp	r5, r0
 800c2ea:	f0c0 811b 	bcc.w	800c524 <ai_platform_network_process+0x3cc>
 800c2ee:	69a3      	ldr	r3, [r4, #24]
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	f002 fa63 	bl	800e7bc <ai_array_to_buffer_fmt>
 800c2f6:	6833      	ldr	r3, [r6, #0]
 800c2f8:	4058      	eors	r0, r3
 800c2fa:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c2fe:	f040 81ca 	bne.w	800c696 <ai_platform_network_process+0x53e>
 800c302:	6873      	ldr	r3, [r6, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 81bd 	beq.w	800c684 <ai_platform_network_process+0x52c>
 800c30a:	69b3      	ldr	r3, [r6, #24]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f000 81ca 	beq.w	800c6a8 <ai_platform_network_process+0x550>
 800c314:	9a02      	ldr	r2, [sp, #8]
 800c316:	4620      	mov	r0, r4
 800c318:	3701      	adds	r7, #1
 800c31a:	361c      	adds	r6, #28
 800c31c:	429a      	cmp	r2, r3
 800c31e:	bf38      	it	cc
 800c320:	461a      	movcc	r2, r3
 800c322:	9202      	str	r2, [sp, #8]
 800c324:	f002 fa34 	bl	800e790 <get_tensor_byte_size>
 800c328:	f8c9 0008 	str.w	r0, [r9, #8]
 800c32c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	fb00 f303 	mul.w	r3, r0, r3
 800c336:	f8c9 300c 	str.w	r3, [r9, #12]
 800c33a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c33e:	440b      	add	r3, r1
 800c340:	f8c9 1004 	str.w	r1, [r9, #4]
 800c344:	f84a 300b 	str.w	r3, [sl, fp]
 800c348:	69a0      	ldr	r0, [r4, #24]
 800c34a:	6803      	ldr	r3, [r0, #0]
 800c34c:	009a      	lsls	r2, r3, #2
 800c34e:	f100 80bb 	bmi.w	800c4c8 <ai_platform_network_process+0x370>
 800c352:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	4419      	add	r1, r3
 800c35a:	6081      	str	r1, [r0, #8]
 800c35c:	69a3      	ldr	r3, [r4, #24]
 800c35e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c362:	60da      	str	r2, [r3, #12]
 800c364:	f8b8 3000 	ldrh.w	r3, [r8]
 800c368:	42bb      	cmp	r3, r7
 800c36a:	d888      	bhi.n	800c27e <ai_platform_network_process+0x126>
 800c36c:	9d03      	ldr	r5, [sp, #12]
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 81a1 	beq.w	800c6ba <ai_platform_network_process+0x562>
 800c378:	2a01      	cmp	r2, #1
 800c37a:	f240 817b 	bls.w	800c674 <ai_platform_network_process+0x51c>
 800c37e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800c382:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 8174 	beq.w	800c674 <ai_platform_network_process+0x51c>
 800c38c:	9e01      	ldr	r6, [sp, #4]
 800c38e:	2700      	movs	r7, #0
 800c390:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 80d3 	beq.w	800c540 <ai_platform_network_process+0x3e8>
 800c39a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c39e:	2c00      	cmp	r4, #0
 800c3a0:	f000 80ce 	beq.w	800c540 <ai_platform_network_process+0x3e8>
 800c3a4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c3a8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c3ac:	f8d3 8000 	ldr.w	r8, [r3]
 800c3b0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800c3b4:	f000 819f 	beq.w	800c6f6 <ai_platform_network_process+0x59e>
 800c3b8:	69a3      	ldr	r3, [r4, #24]
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	4630      	mov	r0, r6
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	9301      	str	r3, [sp, #4]
 800c3c2:	f7fe fd11 	bl	800ade8 <ai_buffer_get_size>
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	4283      	cmp	r3, r0
 800c3ca:	f0c0 8153 	bcc.w	800c674 <ai_platform_network_process+0x51c>
 800c3ce:	68e0      	ldr	r0, [r4, #12]
 800c3d0:	69b1      	ldr	r1, [r6, #24]
 800c3d2:	68c2      	ldr	r2, [r0, #12]
 800c3d4:	68cb      	ldr	r3, [r1, #12]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	f040 814c 	bne.w	800c674 <ai_platform_network_process+0x51c>
 800c3dc:	6882      	ldr	r2, [r0, #8]
 800c3de:	688b      	ldr	r3, [r1, #8]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	f040 8147 	bne.w	800c674 <ai_platform_network_process+0x51c>
 800c3e6:	6842      	ldr	r2, [r0, #4]
 800c3e8:	684b      	ldr	r3, [r1, #4]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	f040 8142 	bne.w	800c674 <ai_platform_network_process+0x51c>
 800c3f0:	69a3      	ldr	r3, [r4, #24]
 800c3f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3f6:	f002 fa75 	bl	800e8e4 <ai_array_get_data_byte_size>
 800c3fa:	9001      	str	r0, [sp, #4]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f002 f9c7 	bl	800e790 <get_tensor_byte_size>
 800c402:	9b01      	ldr	r3, [sp, #4]
 800c404:	4283      	cmp	r3, r0
 800c406:	f0c0 8135 	bcc.w	800c674 <ai_platform_network_process+0x51c>
 800c40a:	69a3      	ldr	r3, [r4, #24]
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	f002 f9d5 	bl	800e7bc <ai_array_to_buffer_fmt>
 800c412:	6833      	ldr	r3, [r6, #0]
 800c414:	4058      	eors	r0, r3
 800c416:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c41a:	f040 815c 	bne.w	800c6d6 <ai_platform_network_process+0x57e>
 800c41e:	6873      	ldr	r3, [r6, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 8150 	beq.w	800c6c6 <ai_platform_network_process+0x56e>
 800c426:	69b3      	ldr	r3, [r6, #24]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 815b 	beq.w	800c6e6 <ai_platform_network_process+0x58e>
 800c430:	9a02      	ldr	r2, [sp, #8]
 800c432:	4620      	mov	r0, r4
 800c434:	3701      	adds	r7, #1
 800c436:	361c      	adds	r6, #28
 800c438:	429a      	cmp	r2, r3
 800c43a:	bf38      	it	cc
 800c43c:	461a      	movcc	r2, r3
 800c43e:	9202      	str	r2, [sp, #8]
 800c440:	f002 f9a6 	bl	800e790 <get_tensor_byte_size>
 800c444:	f8ca 0008 	str.w	r0, [sl, #8]
 800c448:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	fb00 f303 	mul.w	r3, r0, r3
 800c452:	f8ca 300c 	str.w	r3, [sl, #12]
 800c456:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c45a:	440b      	add	r3, r1
 800c45c:	f8ca 1004 	str.w	r1, [sl, #4]
 800c460:	f848 300b 	str.w	r3, [r8, fp]
 800c464:	69a0      	ldr	r0, [r4, #24]
 800c466:	6803      	ldr	r3, [r0, #0]
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	d464      	bmi.n	800c536 <ai_platform_network_process+0x3de>
 800c46c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c470:	1a9b      	subs	r3, r3, r2
 800c472:	4419      	add	r1, r3
 800c474:	6081      	str	r1, [r0, #8]
 800c476:	69a3      	ldr	r3, [r4, #24]
 800c478:	f8da 2004 	ldr.w	r2, [sl, #4]
 800c47c:	60da      	str	r2, [r3, #12]
 800c47e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c482:	429f      	cmp	r7, r3
 800c484:	d384      	bcc.n	800c390 <ai_platform_network_process+0x238>
 800c486:	e05b      	b.n	800c540 <ai_platform_network_process+0x3e8>
 800c488:	e7fe      	b.n	800c488 <ai_platform_network_process+0x330>
 800c48a:	68ea      	ldr	r2, [r5, #12]
 800c48c:	616b      	str	r3, [r5, #20]
 800c48e:	f002 0203 	and.w	r2, r2, #3
 800c492:	2a03      	cmp	r2, #3
 800c494:	d039      	beq.n	800c50a <ai_platform_network_process+0x3b2>
 800c496:	2230      	movs	r2, #48	; 0x30
 800c498:	2111      	movs	r1, #17
 800c49a:	f105 0010 	add.w	r0, r5, #16
 800c49e:	2400      	movs	r4, #0
 800c4a0:	f000 f940 	bl	800c724 <core_set_error>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	b005      	add	sp, #20
 800c4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ac:	4a0c      	ldr	r2, [pc, #48]	; (800c4e0 <ai_platform_network_process+0x388>)
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	6093      	str	r3, [r2, #8]
 800c4b2:	6893      	ldr	r3, [r2, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1fc      	bne.n	800c4b2 <ai_platform_network_process+0x35a>
 800c4b8:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <ai_platform_network_process+0x380>)
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	4b07      	ldr	r3, [pc, #28]	; (800c4dc <ai_platform_network_process+0x384>)
 800c4be:	6812      	ldr	r2, [r2, #0]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	f43f aeb6 	beq.w	800c232 <ai_platform_network_process+0xda>
 800c4c6:	e7fe      	b.n	800c4c6 <ai_platform_network_process+0x36e>
 800c4c8:	f8b8 3000 	ldrh.w	r3, [r8]
 800c4cc:	429f      	cmp	r7, r3
 800c4ce:	f4ff aed6 	bcc.w	800c27e <ai_platform_network_process+0x126>
 800c4d2:	e74b      	b.n	800c36c <ai_platform_network_process+0x214>
 800c4d4:	58024000 	.word	0x58024000
 800c4d8:	f407a5c2 	.word	0xf407a5c2
 800c4dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800c4e0:	40023000 	.word	0x40023000
 800c4e4:	4a88      	ldr	r2, [pc, #544]	; (800c708 <ai_platform_network_process+0x5b0>)
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c4ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1fb      	bne.n	800c4ec <ai_platform_network_process+0x394>
 800c4f4:	4b85      	ldr	r3, [pc, #532]	; (800c70c <ai_platform_network_process+0x5b4>)
 800c4f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c4fa:	4b85      	ldr	r3, [pc, #532]	; (800c710 <ai_platform_network_process+0x5b8>)
 800c4fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c500:	429a      	cmp	r2, r3
 800c502:	f43f ae96 	beq.w	800c232 <ai_platform_network_process+0xda>
 800c506:	e7fe      	b.n	800c506 <ai_platform_network_process+0x3ae>
 800c508:	9d03      	ldr	r5, [sp, #12]
 800c50a:	2400      	movs	r4, #0
 800c50c:	2217      	movs	r2, #23
 800c50e:	2112      	movs	r1, #18
 800c510:	f105 0010 	add.w	r0, r5, #16
 800c514:	f000 f906 	bl	800c724 <core_set_error>
 800c518:	4620      	mov	r0, r4
 800c51a:	b005      	add	sp, #20
 800c51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c520:	462c      	mov	r4, r5
 800c522:	e7bf      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c524:	9d03      	ldr	r5, [sp, #12]
 800c526:	2218      	movs	r2, #24
 800c528:	2112      	movs	r1, #18
 800c52a:	2400      	movs	r4, #0
 800c52c:	f105 0010 	add.w	r0, r5, #16
 800c530:	f000 f8f8 	bl	800c724 <core_set_error>
 800c534:	e7b6      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c536:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c53a:	429f      	cmp	r7, r3
 800c53c:	f4ff af28 	bcc.w	800c390 <ai_platform_network_process+0x238>
 800c540:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c544:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c546:	82ab      	strh	r3, [r5, #20]
 800c548:	2a00      	cmp	r2, #0
 800c54a:	f040 808d 	bne.w	800c668 <ai_platform_network_process+0x510>
 800c54e:	4616      	mov	r6, r2
 800c550:	4617      	mov	r7, r2
 800c552:	8aec      	ldrh	r4, [r5, #22]
 800c554:	429c      	cmp	r4, r3
 800c556:	d2a5      	bcs.n	800c4a4 <ai_platform_network_process+0x34c>
 800c558:	46ab      	mov	fp, r5
 800c55a:	2e00      	cmp	r6, #0
 800c55c:	d030      	beq.n	800c5c0 <ai_platform_network_process+0x468>
 800c55e:	f04f 0800 	mov.w	r8, #0
 800c562:	e014      	b.n	800c58e <ai_platform_network_process+0x436>
 800c564:	6882      	ldr	r2, [r0, #8]
 800c566:	68c5      	ldr	r5, [r0, #12]
 800c568:	6863      	ldr	r3, [r4, #4]
 800c56a:	1b52      	subs	r2, r2, r5
 800c56c:	4413      	add	r3, r2
 800c56e:	6083      	str	r3, [r0, #8]
 800c570:	698b      	ldr	r3, [r1, #24]
 800c572:	6862      	ldr	r2, [r4, #4]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	f859 200a 	ldr.w	r2, [r9, sl]
 800c57a:	f108 0801 	add.w	r8, r8, #1
 800c57e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800c582:	440b      	add	r3, r1
 800c584:	4293      	cmp	r3, r2
 800c586:	d301      	bcc.n	800c58c <ai_platform_network_process+0x434>
 800c588:	68e3      	ldr	r3, [r4, #12]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	6063      	str	r3, [r4, #4]
 800c58e:	8833      	ldrh	r3, [r6, #0]
 800c590:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800c594:	4543      	cmp	r3, r8
 800c596:	d913      	bls.n	800c5c0 <ai_platform_network_process+0x468>
 800c598:	6873      	ldr	r3, [r6, #4]
 800c59a:	b18b      	cbz	r3, 800c5c0 <ai_platform_network_process+0x468>
 800c59c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800c5a0:	b171      	cbz	r1, 800c5c0 <ai_platform_network_process+0x468>
 800c5a2:	6988      	ldr	r0, [r1, #24]
 800c5a4:	68b2      	ldr	r2, [r6, #8]
 800c5a6:	6803      	ldr	r3, [r0, #0]
 800c5a8:	f8d2 9000 	ldr.w	r9, [r2]
 800c5ac:	009d      	lsls	r5, r3, #2
 800c5ae:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800c5b2:	d5d7      	bpl.n	800c564 <ai_platform_network_process+0x40c>
 800c5b4:	6880      	ldr	r0, [r0, #8]
 800c5b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c5ba:	f002 f9cd 	bl	800e958 <memcpy>
 800c5be:	e7da      	b.n	800c576 <ai_platform_network_process+0x41e>
 800c5c0:	4658      	mov	r0, fp
 800c5c2:	f001 ff6f 	bl	800e4a4 <ai_layers_forward_all>
 800c5c6:	2f00      	cmp	r7, #0
 800c5c8:	d03f      	beq.n	800c64a <ai_platform_network_process+0x4f2>
 800c5ca:	2400      	movs	r4, #0
 800c5cc:	e016      	b.n	800c5fc <ai_platform_network_process+0x4a4>
 800c5ce:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800c5d2:	f859 100a 	ldr.w	r1, [r9, sl]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	d302      	bcc.n	800c5e2 <ai_platform_network_process+0x48a>
 800c5dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5e0:	1acb      	subs	r3, r1, r3
 800c5e2:	f8c8 3004 	str.w	r3, [r8, #4]
 800c5e6:	6981      	ldr	r1, [r0, #24]
 800c5e8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800c5ec:	1b52      	subs	r2, r2, r5
 800c5ee:	4413      	add	r3, r2
 800c5f0:	608b      	str	r3, [r1, #8]
 800c5f2:	6983      	ldr	r3, [r0, #24]
 800c5f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c5f8:	60da      	str	r2, [r3, #12]
 800c5fa:	3401      	adds	r4, #1
 800c5fc:	883b      	ldrh	r3, [r7, #0]
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	d923      	bls.n	800c64a <ai_platform_network_process+0x4f2>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	b30b      	cbz	r3, 800c64a <ai_platform_network_process+0x4f2>
 800c606:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c60a:	b1f0      	cbz	r0, 800c64a <ai_platform_network_process+0x4f2>
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800c612:	6983      	ldr	r3, [r0, #24]
 800c614:	f8d2 9000 	ldr.w	r9, [r2]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800c61e:	0092      	lsls	r2, r2, #2
 800c620:	d5d5      	bpl.n	800c5ce <ai_platform_network_process+0x476>
 800c622:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c626:	6899      	ldr	r1, [r3, #8]
 800c628:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c62c:	f002 f994 	bl	800e958 <memcpy>
 800c630:	f859 200a 	ldr.w	r2, [r9, sl]
 800c634:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800c638:	440b      	add	r3, r1
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d302      	bcc.n	800c644 <ai_platform_network_process+0x4ec>
 800c63e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	f8c8 3004 	str.w	r3, [r8, #4]
 800c648:	e7d7      	b.n	800c5fa <ai_platform_network_process+0x4a2>
 800c64a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800c64e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800c652:	3401      	adds	r4, #1
 800c654:	b2a4      	uxth	r4, r4
 800c656:	42a3      	cmp	r3, r4
 800c658:	f8ab 4016 	strh.w	r4, [fp, #22]
 800c65c:	f63f af7d 	bhi.w	800c55a <ai_platform_network_process+0x402>
 800c660:	4620      	mov	r0, r4
 800c662:	b005      	add	sp, #20
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	2a01      	cmp	r2, #1
 800c66a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800c66c:	d029      	beq.n	800c6c2 <ai_platform_network_process+0x56a>
 800c66e:	f106 070c 	add.w	r7, r6, #12
 800c672:	e76e      	b.n	800c552 <ai_platform_network_process+0x3fa>
 800c674:	2218      	movs	r2, #24
 800c676:	2113      	movs	r1, #19
 800c678:	f105 0010 	add.w	r0, r5, #16
 800c67c:	2400      	movs	r4, #0
 800c67e:	f000 f851 	bl	800c724 <core_set_error>
 800c682:	e70f      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c684:	9d03      	ldr	r5, [sp, #12]
 800c686:	4604      	mov	r4, r0
 800c688:	2217      	movs	r2, #23
 800c68a:	2112      	movs	r1, #18
 800c68c:	f105 0010 	add.w	r0, r5, #16
 800c690:	f000 f848 	bl	800c724 <core_set_error>
 800c694:	e706      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c696:	9d03      	ldr	r5, [sp, #12]
 800c698:	2219      	movs	r2, #25
 800c69a:	2112      	movs	r1, #18
 800c69c:	2400      	movs	r4, #0
 800c69e:	f105 0010 	add.w	r0, r5, #16
 800c6a2:	f000 f83f 	bl	800c724 <core_set_error>
 800c6a6:	e6fd      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c6a8:	9d03      	ldr	r5, [sp, #12]
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	2221      	movs	r2, #33	; 0x21
 800c6ae:	2112      	movs	r1, #18
 800c6b0:	f105 0010 	add.w	r0, r5, #16
 800c6b4:	f000 f836 	bl	800c724 <core_set_error>
 800c6b8:	e6f4      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c6ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c6be:	82ab      	strh	r3, [r5, #20]
 800c6c0:	e742      	b.n	800c548 <ai_platform_network_process+0x3f0>
 800c6c2:	2700      	movs	r7, #0
 800c6c4:	e745      	b.n	800c552 <ai_platform_network_process+0x3fa>
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	2217      	movs	r2, #23
 800c6ca:	2113      	movs	r1, #19
 800c6cc:	f105 0010 	add.w	r0, r5, #16
 800c6d0:	f000 f828 	bl	800c724 <core_set_error>
 800c6d4:	e6e6      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c6d6:	2219      	movs	r2, #25
 800c6d8:	2113      	movs	r1, #19
 800c6da:	f105 0010 	add.w	r0, r5, #16
 800c6de:	2400      	movs	r4, #0
 800c6e0:	f000 f820 	bl	800c724 <core_set_error>
 800c6e4:	e6de      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	2221      	movs	r2, #33	; 0x21
 800c6ea:	2113      	movs	r1, #19
 800c6ec:	f105 0010 	add.w	r0, r5, #16
 800c6f0:	f000 f818 	bl	800c724 <core_set_error>
 800c6f4:	e6d6      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c6f6:	2217      	movs	r2, #23
 800c6f8:	2113      	movs	r1, #19
 800c6fa:	f105 0010 	add.w	r0, r5, #16
 800c6fe:	4654      	mov	r4, sl
 800c700:	f000 f810 	bl	800c724 <core_set_error>
 800c704:	e6ce      	b.n	800c4a4 <ai_platform_network_process+0x34c>
 800c706:	bf00      	nop
 800c708:	58024000 	.word	0x58024000
 800c70c:	f407a5c2 	.word	0xf407a5c2
 800c710:	b5e8b5cd 	.word	0xb5e8b5cd

0800c714 <core_init>:
 800c714:	2001      	movs	r0, #1
 800c716:	4770      	bx	lr

0800c718 <core_get_error>:
 800c718:	4603      	mov	r3, r0
 800c71a:	2200      	movs	r2, #0
 800c71c:	6800      	ldr	r0, [r0, #0]
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop

0800c724 <core_set_error>:
 800c724:	4603      	mov	r3, r0
 800c726:	7800      	ldrb	r0, [r0, #0]
 800c728:	b108      	cbz	r0, 800c72e <core_set_error+0xa>
 800c72a:	2000      	movs	r0, #0
 800c72c:	4770      	bx	lr
 800c72e:	7019      	strb	r1, [r3, #0]
 800c730:	2001      	movs	r0, #1
 800c732:	6819      	ldr	r1, [r3, #0]
 800c734:	f362 211f 	bfi	r1, r2, #8, #24
 800c738:	6019      	str	r1, [r3, #0]
 800c73a:	4770      	bx	lr

0800c73c <func_dummy>:
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop

0800c740 <ai_conv2d_stripe_f32.constprop.0>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	ed2d 8b0e 	vpush	{d8-d14}
 800c748:	b09d      	sub	sp, #116	; 0x74
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800c750:	66f8      	str	r0, [r7, #108]	; 0x6c
 800c752:	f1b9 0f01 	cmp.w	r9, #1
 800c756:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800c75a:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800c75e:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800c762:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800c766:	6579      	str	r1, [r7, #84]	; 0x54
 800c768:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800c76c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800c770:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800c774:	663b      	str	r3, [r7, #96]	; 0x60
 800c776:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800c77a:	f000 812f 	beq.w	800c9dc <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800c77e:	45b1      	cmp	r9, r6
 800c780:	f000 8278 	beq.w	800cc74 <ai_conv2d_stripe_f32.constprop.0+0x534>
 800c784:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c788:	2900      	cmp	r1, #0
 800c78a:	f000 8114 	beq.w	800c9b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800c78e:	eba0 0803 	sub.w	r8, r0, r3
 800c792:	1898      	adds	r0, r3, r2
 800c794:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c9d8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800c798:	3801      	subs	r0, #1
 800c79a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c79e:	fb90 f0f2 	sdiv	r0, r0, r2
 800c7a2:	fb02 3111 	mls	r1, r2, r1, r3
 800c7a6:	eba2 0a01 	sub.w	sl, r2, r1
 800c7aa:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800c7ae:	fb01 f100 	mul.w	r1, r1, r0
 800c7b2:	fb9a f0f2 	sdiv	r0, sl, r2
 800c7b6:	fb02 a010 	mls	r0, r2, r0, sl
 800c7ba:	62b9      	str	r1, [r7, #40]	; 0x28
 800c7bc:	4403      	add	r3, r0
 800c7be:	eba8 0100 	sub.w	r1, r8, r0
 800c7c2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c7c6:	4463      	add	r3, ip
 800c7c8:	4411      	add	r1, r2
 800c7ca:	fb00 f303 	mul.w	r3, r0, r3
 800c7ce:	3901      	subs	r1, #1
 800c7d0:	fbb6 f4f9 	udiv	r4, r6, r9
 800c7d4:	623b      	str	r3, [r7, #32]
 800c7d6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800c7da:	fb00 f302 	mul.w	r3, r0, r2
 800c7de:	f8c7 a014 	str.w	sl, [r7, #20]
 800c7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7e4:	fb0e f306 	mul.w	r3, lr, r6
 800c7e8:	1b1b      	subs	r3, r3, r4
 800c7ea:	fb91 fbf2 	sdiv	fp, r1, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	eba5 020b 	sub.w	r2, r5, fp
 800c7f4:	00b1      	lsls	r1, r6, #2
 800c7f6:	46dc      	mov	ip, fp
 800c7f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7fe:	61f9      	str	r1, [r7, #28]
 800c800:	fb04 f303 	mul.w	r3, r4, r3
 800c804:	fb02 f303 	mul.w	r3, r2, r3
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	627b      	str	r3, [r7, #36]	; 0x24
 800c80c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c810:	fbb3 f3f9 	udiv	r3, r3, r9
 800c814:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	633b      	str	r3, [r7, #48]	; 0x30
 800c81e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c822:	f1c3 0800 	rsb	r8, r3, #0
 800c826:	ebae 0303 	sub.w	r3, lr, r3
 800c82a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c82c:	2300      	movs	r3, #0
 800c82e:	653b      	str	r3, [r7, #80]	; 0x50
 800c830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c834:	2b00      	cmp	r3, #0
 800c836:	f2c0 80c4 	blt.w	800c9c2 <ai_conv2d_stripe_f32.constprop.0+0x282>
 800c83a:	2000      	movs	r0, #0
 800c83c:	4673      	mov	r3, lr
 800c83e:	4672      	mov	r2, lr
 800c840:	4601      	mov	r1, r0
 800c842:	3b01      	subs	r3, #1
 800c844:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c846:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800c84a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c84e:	fb93 f3fe 	sdiv	r3, r3, lr
 800c852:	4423      	add	r3, r4
 800c854:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800c856:	fb0a 4303 	mla	r3, sl, r3, r4
 800c85a:	fb92 f4fe 	sdiv	r4, r2, lr
 800c85e:	fb0e 2214 	mls	r2, lr, r4, r2
 800c862:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800c866:	4444      	add	r4, r8
 800c868:	42ac      	cmp	r4, r5
 800c86a:	bf94      	ite	ls
 800c86c:	ebc1 0104 	rsbls	r1, r1, r4
 800c870:	ebc1 0105 	rsbhi	r1, r1, r5
 800c874:	6a3c      	ldr	r4, [r7, #32]
 800c876:	1a89      	subs	r1, r1, r2
 800c878:	4471      	add	r1, lr
 800c87a:	3901      	subs	r1, #1
 800c87c:	fb91 f6fe 	sdiv	r6, r1, lr
 800c880:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800c884:	4421      	add	r1, r4
 800c886:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800c888:	4401      	add	r1, r0
 800c88a:	69f8      	ldr	r0, [r7, #28]
 800c88c:	4411      	add	r1, r2
 800c88e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c890:	fb00 2201 	mla	r2, r0, r1, r2
 800c894:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c896:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c898:	460a      	mov	r2, r1
 800c89a:	2900      	cmp	r1, #0
 800c89c:	bf08      	it	eq
 800c89e:	4622      	moveq	r2, r4
 800c8a0:	42a2      	cmp	r2, r4
 800c8a2:	637a      	str	r2, [r7, #52]	; 0x34
 800c8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a6:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800c8aa:	fb0e 2116 	mls	r1, lr, r6, r2
 800c8ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c8b2:	1b92      	subs	r2, r2, r6
 800c8b4:	f1b9 0f00 	cmp.w	r9, #0
 800c8b8:	d066      	beq.n	800c988 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800c8ba:	fb0a f202 	mul.w	r2, sl, r2
 800c8be:	fb00 f101 	mul.w	r1, r0, r1
 800c8c2:	643a      	str	r2, [r7, #64]	; 0x40
 800c8c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c8c8:	6479      	str	r1, [r7, #68]	; 0x44
 800c8ca:	4591      	cmp	r9, r2
 800c8cc:	d85c      	bhi.n	800c988 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800c8ce:	2500      	movs	r5, #0
 800c8d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8d2:	46ab      	mov	fp, r5
 800c8d4:	3a01      	subs	r2, #1
 800c8d6:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800c8da:	61ba      	str	r2, [r7, #24]
 800c8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8de:	f04f 0800 	mov.w	r8, #0
 800c8e2:	f8c7 b008 	str.w	fp, [r7, #8]
 800c8e6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c8ea:	63ba      	str	r2, [r7, #56]	; 0x38
 800c8ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8ee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c8f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8f6:	f1bc 0f00 	cmp.w	ip, #0
 800c8fa:	ecf2 7a01 	vldmia	r2!, {s15}
 800c8fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c902:	63ba      	str	r2, [r7, #56]	; 0x38
 800c904:	dd21      	ble.n	800c94a <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800c906:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c908:	2100      	movs	r1, #0
 800c90a:	2e00      	cmp	r6, #0
 800c90c:	dd16      	ble.n	800c93c <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800c90e:	2000      	movs	r0, #0
 800c910:	eb02 040a 	add.w	r4, r2, sl
 800c914:	4294      	cmp	r4, r2
 800c916:	d90c      	bls.n	800c932 <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800c918:	4696      	mov	lr, r2
 800c91a:	469b      	mov	fp, r3
 800c91c:	ecbe 6a01 	vldmia	lr!, {s12}
 800c920:	ecfb 5a01 	vldmia	fp!, {s11}
 800c924:	4574      	cmp	r4, lr
 800c926:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c92a:	d8f7      	bhi.n	800c91c <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800c92c:	697c      	ldr	r4, [r7, #20]
 800c92e:	4423      	add	r3, r4
 800c930:	4422      	add	r2, r4
 800c932:	3001      	adds	r0, #1
 800c934:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800c936:	4286      	cmp	r6, r0
 800c938:	4422      	add	r2, r4
 800c93a:	d1e9      	bne.n	800c910 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800c93c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c93e:	3101      	adds	r1, #1
 800c940:	4402      	add	r2, r0
 800c942:	458c      	cmp	ip, r1
 800c944:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c946:	4403      	add	r3, r0
 800c948:	d1df      	bne.n	800c90a <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800c94a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c94c:	f108 0801 	add.w	r8, r8, #1
 800c950:	ece2 7a01 	vstmia	r2!, {s15}
 800c954:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c958:	4413      	add	r3, r2
 800c95a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c95c:	4542      	cmp	r2, r8
 800c95e:	d8c9      	bhi.n	800c8f4 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800c960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c962:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800c966:	4452      	add	r2, sl
 800c968:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c96c:	f10b 0b01 	add.w	fp, fp, #1
 800c970:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	4589      	cmp	r9, r1
 800c976:	bf88      	it	hi
 800c978:	2200      	movhi	r2, #0
 800c97a:	45d9      	cmp	r9, fp
 800c97c:	f102 0201 	add.w	r2, r2, #1
 800c980:	4415      	add	r5, r2
 800c982:	d1ab      	bne.n	800c8dc <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800c984:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800c988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c98a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98e:	440a      	add	r2, r1
 800c990:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800c994:	3301      	adds	r3, #1
 800c996:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c99a:	653b      	str	r3, [r7, #80]	; 0x50
 800c99c:	4411      	add	r1, r2
 800c99e:	eba8 0802 	sub.w	r8, r8, r2
 800c9a2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800c9a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9a8:	1a8a      	subs	r2, r1, r2
 800c9aa:	65ba      	str	r2, [r7, #88]	; 0x58
 800c9ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	f47f af3d 	bne.w	800c830 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800c9b6:	3774      	adds	r7, #116	; 0x74
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	ecbd 8b0e 	vpop	{d8-d14}
 800c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c2:	fb98 f2fe 	sdiv	r2, r8, lr
 800c9c6:	fb0e 8212 	mls	r2, lr, r2, r8
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	ebae 0202 	sub.w	r2, lr, r2
 800c9d4:	e735      	b.n	800c842 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800c9d6:	bf00      	nop
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	fb0e f102 	mul.w	r1, lr, r2
 800c9e0:	2901      	cmp	r1, #1
 800c9e2:	f47f aecf 	bne.w	800c784 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800c9e6:	1ac2      	subs	r2, r0, r3
 800c9e8:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800c9ec:	00b0      	lsls	r0, r6, #2
 800c9ee:	eb0c 0103 	add.w	r1, ip, r3
 800c9f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c9f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9f6:	63b8      	str	r0, [r7, #56]	; 0x38
 800c9f8:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800c9fc:	fb00 f004 	mul.w	r0, r0, r4
 800ca00:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800ca02:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800ca06:	fb00 4101 	mla	r1, r0, r1, r4
 800ca0a:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca0c:	f080 8263 	bcs.w	800ced6 <ai_conv2d_stripe_f32.constprop.0+0x796>
 800ca10:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ca14:	2a00      	cmp	r2, #0
 800ca16:	d0ce      	beq.n	800c9b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ca18:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ca1c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800ca20:	fb05 f202 	mul.w	r2, r5, r2
 800ca24:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800c9d8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800ca28:	fb00 f303 	mul.w	r3, r0, r3
 800ca2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca2e:	fb06 f302 	mul.w	r3, r6, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	643b      	str	r3, [r7, #64]	; 0x40
 800ca36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca38:	fb03 f306 	mul.w	r3, r3, r6
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca44:	fb03 f306 	mul.w	r3, r3, r6
 800ca48:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ca4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ca5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 8104 	beq.w	800cc6e <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800ca66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca68:	ecf3 6a01 	vldmia	r3!, {s13}
 800ca6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 80e8 	beq.w	800cc48 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800ca78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca7c:	f04f 0b00 	mov.w	fp, #0
 800ca80:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800ca84:	425d      	negs	r5, r3
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	657b      	str	r3, [r7, #84]	; 0x54
 800ca8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca8e:	f1b9 0f00 	cmp.w	r9, #0
 800ca92:	f2c0 8219 	blt.w	800cec8 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800ca96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca98:	2300      	movs	r3, #0
 800ca9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca9c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ca9e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800caa0:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800caa4:	fb02 0c06 	mla	ip, r2, r6, r0
 800caa8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800caac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cab0:	4428      	add	r0, r5
 800cab2:	42a0      	cmp	r0, r4
 800cab4:	bf94      	ite	ls
 800cab6:	ebc3 0300 	rsbls	r3, r3, r0
 800caba:	ebc3 0304 	rsbhi	r3, r3, r4
 800cabe:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cac2:	1ac4      	subs	r4, r0, r3
 800cac4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800cac8:	1ac0      	subs	r0, r0, r3
 800caca:	fb02 f303 	mul.w	r3, r2, r3
 800cace:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cad0:	2a00      	cmp	r2, #0
 800cad2:	f340 81f6 	ble.w	800cec2 <ai_conv2d_stripe_f32.constprop.0+0x782>
 800cad6:	fb06 f204 	mul.w	r2, r6, r4
 800cada:	f023 040f 	bic.w	r4, r3, #15
 800cade:	eeb0 7a66 	vmov.f32	s14, s13
 800cae2:	637a      	str	r2, [r7, #52]	; 0x34
 800cae4:	fb06 f200 	mul.w	r2, r6, r0
 800cae8:	1e60      	subs	r0, r4, #1
 800caea:	2600      	movs	r6, #0
 800caec:	0900      	lsrs	r0, r0, #4
 800caee:	633a      	str	r2, [r7, #48]	; 0x30
 800caf0:	3001      	adds	r0, #1
 800caf2:	0102      	lsls	r2, r0, #4
 800caf4:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800caf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cafa:	4662      	mov	r2, ip
 800cafc:	2c00      	cmp	r4, #0
 800cafe:	f340 81e8 	ble.w	800ced2 <ai_conv2d_stripe_f32.constprop.0+0x792>
 800cb02:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800cb06:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800cb0a:	f04f 0800 	mov.w	r8, #0
 800cb0e:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800cb12:	f108 0810 	add.w	r8, r8, #16
 800cb16:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800cb1a:	3040      	adds	r0, #64	; 0x40
 800cb1c:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800cb20:	45a0      	cmp	r8, r4
 800cb22:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cb26:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800cb2a:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800cb2e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800cb32:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800cb36:	eee3 7a84 	vfma.f32	s15, s7, s8
 800cb3a:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800cb3e:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800cb42:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800cb46:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800cb4a:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800cb4e:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800cb52:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cb56:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800cb5a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800cb5e:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800cb62:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800cb66:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800cb6a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800cb6e:	eeee 7a25 	vfma.f32	s15, s28, s11
 800cb72:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800cb76:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800cb7a:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800cb7e:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800cb82:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800cb86:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800cb8a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800cb8e:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800cb92:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800cb96:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800cb9a:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800cb9e:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800cba2:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800cba6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800cbaa:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800cbae:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800cbb2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800cbb6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800cbba:	eee9 7a89 	vfma.f32	s15, s19, s18
 800cbbe:	eee8 7a88 	vfma.f32	s15, s17, s16
 800cbc2:	eee0 7a20 	vfma.f32	s15, s0, s1
 800cbc6:	eee1 7a21 	vfma.f32	s15, s2, s3
 800cbca:	eee2 7a22 	vfma.f32	s15, s4, s5
 800cbce:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cbd2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cbd6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cbda:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cbde:	db96      	blt.n	800cb0e <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800cbe0:	4471      	add	r1, lr
 800cbe2:	4472      	add	r2, lr
 800cbe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cbe6:	4283      	cmp	r3, r0
 800cbe8:	dd11      	ble.n	800cc0e <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800cbea:	4684      	mov	ip, r0
 800cbec:	468a      	mov	sl, r1
 800cbee:	4690      	mov	r8, r2
 800cbf0:	f10c 0c01 	add.w	ip, ip, #1
 800cbf4:	ecf8 5a01 	vldmia	r8!, {s11}
 800cbf8:	ecfa 7a01 	vldmia	sl!, {s15}
 800cbfc:	4563      	cmp	r3, ip
 800cbfe:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc02:	d1f5      	bne.n	800cbf0 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800cc04:	1a18      	subs	r0, r3, r0
 800cc06:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800cc0a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800cc0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cc10:	3601      	adds	r6, #1
 800cc12:	4401      	add	r1, r0
 800cc14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc16:	4402      	add	r2, r0
 800cc18:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc1a:	42b0      	cmp	r0, r6
 800cc1c:	f47f af6e 	bne.w	800cafc <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800cc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc22:	f10b 0b01 	add.w	fp, fp, #1
 800cc26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc2a:	ed83 7a00 	vstr	s14, [r3]
 800cc2e:	440b      	add	r3, r1
 800cc30:	4491      	add	r9, r2
 800cc32:	1aad      	subs	r5, r5, r2
 800cc34:	647b      	str	r3, [r7, #68]	; 0x44
 800cc36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc3a:	4413      	add	r3, r2
 800cc3c:	657b      	str	r3, [r7, #84]	; 0x54
 800cc3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc42:	455b      	cmp	r3, fp
 800cc44:	f47f af23 	bne.w	800ca8e <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800cc48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4e:	440a      	add	r2, r1
 800cc50:	3301      	adds	r3, #1
 800cc52:	66ba      	str	r2, [r7, #104]	; 0x68
 800cc54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc56:	653b      	str	r3, [r7, #80]	; 0x50
 800cc58:	3204      	adds	r2, #4
 800cc5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc5c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cc60:	429a      	cmp	r2, r3
 800cc62:	f43f aea8 	beq.w	800c9b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cc66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f47f aefc 	bne.w	800ca66 <ai_conv2d_stripe_f32.constprop.0+0x326>
 800cc6e:	eef0 6a46 	vmov.f32	s13, s12
 800cc72:	e6fc      	b.n	800ca6e <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800cc74:	fb0e f102 	mul.w	r1, lr, r2
 800cc78:	2901      	cmp	r1, #1
 800cc7a:	f47f ad83 	bne.w	800c784 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800cc7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	f43f ae97 	beq.w	800c9b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cc88:	eb0c 0203 	add.w	r2, ip, r3
 800cc8c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800cc90:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800cc94:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800c9d8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800cc98:	fb01 f202 	mul.w	r2, r1, r2
 800cc9c:	1ac1      	subs	r1, r0, r3
 800cc9e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800cca2:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800cca6:	61fa      	str	r2, [r7, #28]
 800cca8:	1a1a      	subs	r2, r3, r0
 800ccaa:	64f9      	str	r1, [r7, #76]	; 0x4c
 800ccac:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800ccb0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800ccb4:	442a      	add	r2, r5
 800ccb6:	fb03 f301 	mul.w	r3, r3, r1
 800ccba:	fb01 f202 	mul.w	r2, r1, r2
 800ccbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccc0:	0093      	lsls	r3, r2, #2
 800ccc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccc8:	fbb3 f3f6 	udiv	r3, r3, r6
 800cccc:	61bb      	str	r3, [r7, #24]
 800ccce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccda:	f1c3 0b00 	rsb	fp, r3, #0
 800ccde:	00f3      	lsls	r3, r6, #3
 800cce0:	623b      	str	r3, [r7, #32]
 800cce2:	2300      	movs	r3, #0
 800cce4:	653b      	str	r3, [r7, #80]	; 0x50
 800cce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f2c0 80e3 	blt.w	800ceb6 <ai_conv2d_stripe_f32.constprop.0+0x776>
 800ccf0:	2500      	movs	r5, #0
 800ccf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccf4:	462b      	mov	r3, r5
 800ccf6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ccfa:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800ccfe:	445a      	add	r2, fp
 800cd00:	69fc      	ldr	r4, [r7, #28]
 800cd02:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800cd04:	4282      	cmp	r2, r0
 800cd06:	bf28      	it	cs
 800cd08:	4602      	movcs	r2, r0
 800cd0a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	1904      	adds	r4, r0, r4
 800cd12:	2e00      	cmp	r6, #0
 800cd14:	f000 8228 	beq.w	800d168 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800cd18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd1a:	647e      	str	r6, [r7, #68]	; 0x44
 800cd1c:	429e      	cmp	r6, r3
 800cd1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd20:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cd24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd28:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800cd2c:	1a98      	subs	r0, r3, r2
 800cd2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cd32:	fb03 f000 	mul.w	r0, r3, r0
 800cd36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd3a:	1a9b      	subs	r3, r3, r2
 800cd3c:	442c      	add	r4, r5
 800cd3e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800cd40:	fb08 5e04 	mla	lr, r8, r4, r5
 800cd44:	eb0e 0408 	add.w	r4, lr, r8
 800cd48:	45a6      	cmp	lr, r4
 800cd4a:	62bc      	str	r4, [r7, #40]	; 0x28
 800cd4c:	f080 809a 	bcs.w	800ce84 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800cd50:	0080      	lsls	r0, r0, #2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	6378      	str	r0, [r7, #52]	; 0x34
 800cd56:	633b      	str	r3, [r7, #48]	; 0x30
 800cd58:	f022 0303 	bic.w	r3, r2, #3
 800cd5c:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800cd60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd62:	42a0      	cmp	r0, r4
 800cd64:	f200 808e 	bhi.w	800ce84 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800cd68:	1e58      	subs	r0, r3, #1
 800cd6a:	f04f 0900 	mov.w	r9, #0
 800cd6e:	0880      	lsrs	r0, r0, #2
 800cd70:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	fb00 a00a 	mla	r0, r0, sl, sl
 800cd7a:	6138      	str	r0, [r7, #16]
 800cd7c:	0118      	lsls	r0, r3, #4
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	6178      	str	r0, [r7, #20]
 800cd82:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd8a:	4499      	add	r9, r3
 800cd8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd8e:	181c      	adds	r4, r3, r0
 800cd90:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800cd94:	65bc      	str	r4, [r7, #88]	; 0x58
 800cd96:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
 800cd9a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800cd9e:	1820      	adds	r0, r4, r0
 800cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda2:	6438      	str	r0, [r7, #64]	; 0x40
 800cda4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cda6:	ecb3 7a01 	vldmia	r3!, {s14}
 800cdaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdac:	ee27 7a03 	vmul.f32	s14, s14, s6
 800cdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dd55      	ble.n	800ce62 <ai_conv2d_stripe_f32.constprop.0+0x722>
 800cdb6:	4675      	mov	r5, lr
 800cdb8:	f04f 0b00 	mov.w	fp, #0
 800cdbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f340 81d0 	ble.w	800d164 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800cdc4:	6a38      	ldr	r0, [r7, #32]
 800cdc6:	f101 0310 	add.w	r3, r1, #16
 800cdca:	2600      	movs	r6, #0
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	182c      	adds	r4, r5, r0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	eb00 0c08 	add.w	ip, r0, r8
 800cdd6:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cdda:	ed53 4a04 	vldr	s9, [r3, #-16]
 800cdde:	3604      	adds	r6, #4
 800cde0:	eddc 7a00 	vldr	s15, [ip]
 800cde4:	eb04 0c08 	add.w	ip, r4, r8
 800cde8:	ed90 5a00 	vldr	s10, [r0]
 800cdec:	3310      	adds	r3, #16
 800cdee:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cdf2:	edd4 6a00 	vldr	s13, [r4]
 800cdf6:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800cdfa:	4450      	add	r0, sl
 800cdfc:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800ce00:	4454      	add	r4, sl
 800ce02:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ce06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce08:	4296      	cmp	r6, r2
 800ce0a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800ce0e:	eddc 6a00 	vldr	s13, [ip]
 800ce12:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ce16:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce1a:	dbda      	blt.n	800cdd2 <ai_conv2d_stripe_f32.constprop.0+0x692>
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	441d      	add	r5, r3
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	68fc      	ldr	r4, [r7, #12]
 800ce26:	4419      	add	r1, r3
 800ce28:	42a2      	cmp	r2, r4
 800ce2a:	dd11      	ble.n	800ce50 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	462b      	mov	r3, r5
 800ce30:	460e      	mov	r6, r1
 800ce32:	3001      	adds	r0, #1
 800ce34:	edd3 7a00 	vldr	s15, [r3]
 800ce38:	ecf6 6a01 	vldmia	r6!, {s13}
 800ce3c:	4443      	add	r3, r8
 800ce3e:	4290      	cmp	r0, r2
 800ce40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce44:	d1f5      	bne.n	800ce32 <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800ce46:	1b14      	subs	r4, r2, r4
 800ce48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce4c:	fb04 5508 	mla	r5, r4, r8, r5
 800ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce52:	f10b 0b01 	add.w	fp, fp, #1
 800ce56:	441d      	add	r5, r3
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	4419      	add	r1, r3
 800ce5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce5e:	459b      	cmp	fp, r3
 800ce60:	d1ac      	bne.n	800cdbc <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800ce62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ce66:	eca3 7a01 	vstmia	r3!, {s14}
 800ce6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	4419      	add	r1, r3
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	4283      	cmp	r3, r0
 800ce74:	d196      	bne.n	800cda4 <ai_conv2d_stripe_f32.constprop.0+0x664>
 800ce76:	f10e 0e04 	add.w	lr, lr, #4
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	459e      	cmp	lr, r3
 800ce7e:	d382      	bcc.n	800cd86 <ai_conv2d_stripe_f32.constprop.0+0x646>
 800ce80:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800ce84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce8a:	440a      	add	r2, r1
 800ce8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce8e:	3301      	adds	r3, #1
 800ce90:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ce92:	ebab 0b01 	sub.w	fp, fp, r1
 800ce96:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ce9a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce9c:	440a      	add	r2, r1
 800ce9e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cea2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cea6:	429a      	cmp	r2, r3
 800cea8:	f43f ad85 	beq.w	800c9b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ceac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f6bf af1d 	bge.w	800ccf0 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800ceb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceb8:	465b      	mov	r3, fp
 800ceba:	465d      	mov	r5, fp
 800cebc:	eb02 010b 	add.w	r1, r2, fp
 800cec0:	e719      	b.n	800ccf6 <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800cec2:	eeb0 7a66 	vmov.f32	s14, s13
 800cec6:	e6ab      	b.n	800cc20 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800cec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceca:	462b      	mov	r3, r5
 800cecc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cece:	442a      	add	r2, r5
 800ced0:	e5e4      	b.n	800ca9c <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800ced2:	2000      	movs	r0, #0
 800ced4:	e687      	b.n	800cbe6 <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800ced6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ceda:	4669      	mov	r1, sp
 800cedc:	fb05 f202 	mul.w	r2, r5, r2
 800cee0:	ee0e 1a90 	vmov	s29, r1
 800cee4:	fb06 f202 	mul.w	r2, r6, r2
 800cee8:	0095      	lsls	r5, r2, #2
 800ceea:	637a      	str	r2, [r7, #52]	; 0x34
 800ceec:	1dea      	adds	r2, r5, #7
 800ceee:	f022 0207 	bic.w	r2, r2, #7
 800cef2:	ebad 0d02 	sub.w	sp, sp, r2
 800cef6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cefa:	46e9      	mov	r9, sp
 800cefc:	2a00      	cmp	r2, #0
 800cefe:	f000 812d 	beq.w	800d15c <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800cf02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf06:	46ca      	mov	sl, r9
 800cf08:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800d1a8 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800cf0c:	46a9      	mov	r9, r5
 800cf0e:	fb02 f303 	mul.w	r3, r2, r3
 800cf12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf14:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800cf18:	647b      	str	r3, [r7, #68]	; 0x44
 800cf1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf1c:	fb03 f306 	mul.w	r3, r3, r6
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	623b      	str	r3, [r7, #32]
 800cf24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf28:	fb03 f306 	mul.w	r3, r3, r6
 800cf2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
 800cf32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf3e:	2300      	movs	r3, #0
 800cf40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf44:	b123      	cbz	r3, 800cf50 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800cf46:	464a      	mov	r2, r9
 800cf48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	f001 fd04 	bl	800e958 <memcpy>
 800cf50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 811c 	beq.w	800d190 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800cf58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf5a:	ecf3 6a01 	vldmia	r3!, {s13}
 800cf5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f000 80eb 	beq.w	800d140 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800cf6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf6e:	f8c7 901c 	str.w	r9, [r7, #28]
 800cf72:	425d      	negs	r5, r3
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	653b      	str	r3, [r7, #80]	; 0x50
 800cf78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf7a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf80:	657b      	str	r3, [r7, #84]	; 0x54
 800cf82:	2300      	movs	r3, #0
 800cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f2c0 8107 	blt.w	800d19c <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800cf8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf90:	2300      	movs	r3, #0
 800cf92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf94:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cf98:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800cf9c:	4428      	add	r0, r5
 800cf9e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800cfa0:	42b0      	cmp	r0, r6
 800cfa2:	bf94      	ite	ls
 800cfa4:	ebc3 0300 	rsbls	r3, r3, r0
 800cfa8:	ebc3 0306 	rsbhi	r3, r3, r6
 800cfac:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cfb0:	fb02 a204 	mla	r2, r2, r4, sl
 800cfb4:	eba0 0c03 	sub.w	ip, r0, r3
 800cfb8:	1af0      	subs	r0, r6, r3
 800cfba:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800cfbe:	fb06 f303 	mul.w	r3, r6, r3
 800cfc2:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800cfc4:	2e00      	cmp	r6, #0
 800cfc6:	f340 80e6 	ble.w	800d196 <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800cfca:	fb04 f000 	mul.w	r0, r4, r0
 800cfce:	eeb0 7a66 	vmov.f32	s14, s13
 800cfd2:	fb04 fc0c 	mul.w	ip, r4, ip
 800cfd6:	f023 040f 	bic.w	r4, r3, #15
 800cfda:	6338      	str	r0, [r7, #48]	; 0x30
 800cfdc:	2600      	movs	r6, #0
 800cfde:	1e60      	subs	r0, r4, #1
 800cfe0:	0900      	lsrs	r0, r0, #4
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800cfe8:	0100      	lsls	r0, r0, #4
 800cfea:	62b8      	str	r0, [r7, #40]	; 0x28
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	f340 80cd 	ble.w	800d18c <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800cff2:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800cff6:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800cffa:	f04f 0900 	mov.w	r9, #0
 800cffe:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800d002:	f109 0910 	add.w	r9, r9, #16
 800d006:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800d00a:	3040      	adds	r0, #64	; 0x40
 800d00c:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800d010:	45a1      	cmp	r9, r4
 800d012:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d016:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800d01a:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800d01e:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800d022:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800d026:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d02a:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800d02e:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800d032:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800d036:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800d03a:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800d03e:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800d042:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d046:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800d04a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800d04e:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800d052:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800d056:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800d05a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800d05e:	eeee 7a06 	vfma.f32	s15, s28, s12
 800d062:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800d066:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800d06a:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800d06e:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800d072:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800d076:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800d07a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800d07e:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800d082:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800d086:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800d08a:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800d08e:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800d092:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800d096:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d09a:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800d09e:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800d0a2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d0a6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d0aa:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d0ae:	eee8 7a80 	vfma.f32	s15, s17, s0
 800d0b2:	eee0 7a81 	vfma.f32	s15, s1, s2
 800d0b6:	eee1 7a82 	vfma.f32	s15, s3, s4
 800d0ba:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d0be:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d0c2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d0c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d0ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0ce:	db96      	blt.n	800cffe <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800d0d0:	4441      	add	r1, r8
 800d0d2:	4442      	add	r2, r8
 800d0d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0d6:	4283      	cmp	r3, r0
 800d0d8:	dd11      	ble.n	800d0fe <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800d0da:	4686      	mov	lr, r0
 800d0dc:	468b      	mov	fp, r1
 800d0de:	4691      	mov	r9, r2
 800d0e0:	f10e 0e01 	add.w	lr, lr, #1
 800d0e4:	ecb9 6a01 	vldmia	r9!, {s12}
 800d0e8:	ecfb 7a01 	vldmia	fp!, {s15}
 800d0ec:	4573      	cmp	r3, lr
 800d0ee:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d0f2:	d1f5      	bne.n	800d0e0 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800d0f4:	1a18      	subs	r0, r3, r0
 800d0f6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d0fa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800d0fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d100:	3601      	adds	r6, #1
 800d102:	4461      	add	r1, ip
 800d104:	4402      	add	r2, r0
 800d106:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d108:	42b0      	cmp	r0, r6
 800d10a:	f47f af6f 	bne.w	800cfec <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800d10e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d110:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d114:	4401      	add	r1, r0
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	ed82 7a00 	vstr	s14, [r2]
 800d11c:	1a2d      	subs	r5, r5, r0
 800d11e:	6579      	str	r1, [r7, #84]	; 0x54
 800d120:	3301      	adds	r3, #1
 800d122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d126:	440a      	add	r2, r1
 800d128:	6a39      	ldr	r1, [r7, #32]
 800d12a:	643a      	str	r2, [r7, #64]	; 0x40
 800d12c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d12e:	440a      	add	r2, r1
 800d130:	653a      	str	r2, [r7, #80]	; 0x50
 800d132:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d136:	429a      	cmp	r2, r3
 800d138:	f47f af25 	bne.w	800cf86 <ai_conv2d_stripe_f32.constprop.0+0x846>
 800d13c:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800d140:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d144:	444a      	add	r2, r9
 800d146:	3301      	adds	r3, #1
 800d148:	66ba      	str	r2, [r7, #104]	; 0x68
 800d14a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d14c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d14e:	3204      	adds	r2, #4
 800d150:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d152:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d156:	429a      	cmp	r2, r3
 800d158:	f47f aef3 	bne.w	800cf42 <ai_conv2d_stripe_f32.constprop.0+0x802>
 800d15c:	ee1e 3a90 	vmov	r3, s29
 800d160:	469d      	mov	sp, r3
 800d162:	e428      	b.n	800c9b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800d164:	2400      	movs	r4, #0
 800d166:	e65f      	b.n	800ce28 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800d168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d16a:	eeb0 3a63 	vmov.f32	s6, s7
 800d16e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d174:	647b      	str	r3, [r7, #68]	; 0x44
 800d176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d17a:	1a98      	subs	r0, r3, r2
 800d17c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d180:	fb03 f000 	mul.w	r0, r3, r0
 800d184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d188:	1a9b      	subs	r3, r3, r2
 800d18a:	e5d7      	b.n	800cd3c <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800d18c:	2000      	movs	r0, #0
 800d18e:	e7a2      	b.n	800d0d6 <ai_conv2d_stripe_f32.constprop.0+0x996>
 800d190:	eef0 6a48 	vmov.f32	s13, s16
 800d194:	e6e4      	b.n	800cf60 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800d196:	eeb0 7a66 	vmov.f32	s14, s13
 800d19a:	e7b8      	b.n	800d10e <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800d19c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d19e:	462b      	mov	r3, r5
 800d1a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1a2:	442a      	add	r2, r5
 800d1a4:	e6f6      	b.n	800cf94 <ai_conv2d_stripe_f32.constprop.0+0x854>
 800d1a6:	bf00      	nop
 800d1a8:	00000000 	.word	0x00000000

0800d1ac <ai_dict_decompress_f32>:
 800d1ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1b0:	9d08      	ldr	r5, [sp, #32]
 800d1b2:	2b04      	cmp	r3, #4
 800d1b4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d1b8:	d00e      	beq.n	800d1d8 <ai_dict_decompress_f32+0x2c>
 800d1ba:	2b08      	cmp	r3, #8
 800d1bc:	d10a      	bne.n	800d1d4 <ai_dict_decompress_f32+0x28>
 800d1be:	42a8      	cmp	r0, r5
 800d1c0:	d208      	bcs.n	800d1d4 <ai_dict_decompress_f32+0x28>
 800d1c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f840 3b04 	str.w	r3, [r0], #4
 800d1d0:	4285      	cmp	r5, r0
 800d1d2:	d8f6      	bhi.n	800d1c2 <ai_dict_decompress_f32+0x16>
 800d1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d8:	9b07      	ldr	r3, [sp, #28]
 800d1da:	085e      	lsrs	r6, r3, #1
 800d1dc:	f003 0701 	and.w	r7, r3, #1
 800d1e0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800d1e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d1e8:	42a8      	cmp	r0, r5
 800d1ea:	d2f3      	bcs.n	800d1d4 <ai_dict_decompress_f32+0x28>
 800d1ec:	b33e      	cbz	r6, 800d23e <ai_dict_decompress_f32+0x92>
 800d1ee:	f100 0e08 	add.w	lr, r0, #8
 800d1f2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800d1f6:	eb01 0408 	add.w	r4, r1, r8
 800d1fa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d1fe:	f10e 0e08 	add.w	lr, lr, #8
 800d202:	091b      	lsrs	r3, r3, #4
 800d204:	4564      	cmp	r4, ip
 800d206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f84e 3c10 	str.w	r3, [lr, #-16]
 800d210:	f89c 3000 	ldrb.w	r3, [ip]
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800d222:	d1ea      	bne.n	800d1fa <ai_dict_decompress_f32+0x4e>
 800d224:	4431      	add	r1, r6
 800d226:	4448      	add	r0, r9
 800d228:	2f00      	cmp	r7, #0
 800d22a:	d0dd      	beq.n	800d1e8 <ai_dict_decompress_f32+0x3c>
 800d22c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d230:	091b      	lsrs	r3, r3, #4
 800d232:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f840 3b04 	str.w	r3, [r0], #4
 800d23c:	e7d4      	b.n	800d1e8 <ai_dict_decompress_f32+0x3c>
 800d23e:	2f00      	cmp	r7, #0
 800d240:	d1f4      	bne.n	800d22c <ai_dict_decompress_f32+0x80>
 800d242:	42a8      	cmp	r0, r5
 800d244:	d3fd      	bcc.n	800d242 <ai_dict_decompress_f32+0x96>
 800d246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d24a:	bf00      	nop

0800d24c <forward_conv2d>:
 800d24c:	6982      	ldr	r2, [r0, #24]
 800d24e:	8813      	ldrh	r3, [r2, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 810f 	beq.w	800d474 <forward_conv2d+0x228>
 800d256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25a:	ed2d 8b04 	vpush	{d8-d9}
 800d25e:	6852      	ldr	r2, [r2, #4]
 800d260:	b0a9      	sub	sp, #164	; 0xa4
 800d262:	4604      	mov	r4, r0
 800d264:	6851      	ldr	r1, [r2, #4]
 800d266:	b101      	cbz	r1, 800d26a <forward_conv2d+0x1e>
 800d268:	6809      	ldr	r1, [r1, #0]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	f000 8152 	beq.w	800d514 <forward_conv2d+0x2c8>
 800d270:	6915      	ldr	r5, [r2, #16]
 800d272:	b105      	cbz	r5, 800d276 <forward_conv2d+0x2a>
 800d274:	682d      	ldr	r5, [r5, #0]
 800d276:	2b02      	cmp	r3, #2
 800d278:	f000 80fe 	beq.w	800d478 <forward_conv2d+0x22c>
 800d27c:	69d3      	ldr	r3, [r2, #28]
 800d27e:	8b12      	ldrh	r2, [r2, #24]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 8138 	beq.w	800d4f6 <forward_conv2d+0x2aa>
 800d286:	2a01      	cmp	r2, #1
 800d288:	681e      	ldr	r6, [r3, #0]
 800d28a:	f240 813a 	bls.w	800d502 <forward_conv2d+0x2b6>
 800d28e:	685a      	ldr	r2, [r3, #4]
 800d290:	ee08 2a10 	vmov	s16, r2
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	68ca      	ldr	r2, [r1, #12]
 800d298:	6989      	ldr	r1, [r1, #24]
 800d29a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800d29e:	6889      	ldr	r1, [r1, #8]
 800d2a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d2a2:	ee09 1a10 	vmov	s18, r1
 800d2a6:	6851      	ldr	r1, [r2, #4]
 800d2a8:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800d2ac:	911b      	str	r1, [sp, #108]	; 0x6c
 800d2ae:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d2b2:	69b7      	ldr	r7, [r6, #24]
 800d2b4:	9118      	str	r1, [sp, #96]	; 0x60
 800d2b6:	68d1      	ldr	r1, [r2, #12]
 800d2b8:	6892      	ldr	r2, [r2, #8]
 800d2ba:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800d2be:	9223      	str	r2, [sp, #140]	; 0x8c
 800d2c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d2c2:	f8dc a008 	ldr.w	sl, [ip, #8]
 800d2c6:	9224      	str	r2, [sp, #144]	; 0x90
 800d2c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d2ca:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800d2ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2d0:	6802      	ldr	r2, [r0, #0]
 800d2d2:	9122      	str	r1, [sp, #136]	; 0x88
 800d2d4:	9211      	str	r2, [sp, #68]	; 0x44
 800d2d6:	6842      	ldr	r2, [r0, #4]
 800d2d8:	921e      	str	r2, [sp, #120]	; 0x78
 800d2da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d2dc:	9210      	str	r2, [sp, #64]	; 0x40
 800d2de:	f8de 2008 	ldr.w	r2, [lr, #8]
 800d2e2:	9219      	str	r2, [sp, #100]	; 0x64
 800d2e4:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d2e8:	921a      	str	r2, [sp, #104]	; 0x68
 800d2ea:	69e2      	ldr	r2, [r4, #28]
 800d2ec:	9225      	str	r2, [sp, #148]	; 0x94
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	ee08 2a90 	vmov	s17, r2
 800d2f4:	ee18 2a10 	vmov	r2, s16
 800d2f8:	b11a      	cbz	r2, 800d302 <forward_conv2d+0xb6>
 800d2fa:	6992      	ldr	r2, [r2, #24]
 800d2fc:	6892      	ldr	r2, [r2, #8]
 800d2fe:	ee08 2a10 	vmov	s16, r2
 800d302:	69aa      	ldr	r2, [r5, #24]
 800d304:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800d308:	6892      	ldr	r2, [r2, #8]
 800d30a:	9216      	str	r2, [sp, #88]	; 0x58
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 80df 	beq.w	800d4d0 <forward_conv2d+0x284>
 800d312:	699a      	ldr	r2, [r3, #24]
 800d314:	2a00      	cmp	r2, #0
 800d316:	f000 80e4 	beq.w	800d4e2 <forward_conv2d+0x296>
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d326:	9327      	str	r3, [sp, #156]	; 0x9c
 800d328:	f001 fab4 	bl	800e894 <ai_array_get_byte_size>
 800d32c:	69b7      	ldr	r7, [r6, #24]
 800d32e:	9013      	str	r0, [sp, #76]	; 0x4c
 800d330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d332:	9312      	str	r3, [sp, #72]	; 0x48
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 80c8 	beq.w	800d4ca <forward_conv2d+0x27e>
 800d33a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d33c:	fa1f f28b 	uxth.w	r2, fp
 800d340:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d344:	1e71      	subs	r1, r6, #1
 800d346:	3a01      	subs	r2, #1
 800d348:	3b01      	subs	r3, #1
 800d34a:	6838      	ldr	r0, [r7, #0]
 800d34c:	fb01 6202 	mla	r2, r1, r2, r6
 800d350:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d352:	921c      	str	r2, [sp, #112]	; 0x70
 800d354:	1e4a      	subs	r2, r1, #1
 800d356:	fb02 1303 	mla	r3, r2, r3, r1
 800d35a:	931d      	str	r3, [sp, #116]	; 0x74
 800d35c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d360:	2b04      	cmp	r3, #4
 800d362:	f000 808c 	beq.w	800d47e <forward_conv2d+0x232>
 800d366:	2b08      	cmp	r3, #8
 800d368:	f000 8089 	beq.w	800d47e <forward_conv2d+0x232>
 800d36c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d370:	9315      	str	r3, [sp, #84]	; 0x54
 800d372:	425b      	negs	r3, r3
 800d374:	9314      	str	r3, [sp, #80]	; 0x50
 800d376:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d076      	beq.n	800d46a <forward_conv2d+0x21e>
 800d37c:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800d380:	4644      	mov	r4, r8
 800d382:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800d386:	425b      	negs	r3, r3
 800d388:	921e      	str	r2, [sp, #120]	; 0x78
 800d38a:	fa0f f28b 	sxth.w	r2, fp
 800d38e:	9321      	str	r3, [sp, #132]	; 0x84
 800d390:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800d394:	2300      	movs	r3, #0
 800d396:	921f      	str	r2, [sp, #124]	; 0x7c
 800d398:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800d39c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d39e:	fb0a f30b 	mul.w	r3, sl, fp
 800d3a2:	9220      	str	r2, [sp, #128]	; 0x80
 800d3a4:	9326      	str	r3, [sp, #152]	; 0x98
 800d3a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d3a8:	ee19 1a10 	vmov	r1, s18
 800d3ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3ae:	920e      	str	r2, [sp, #56]	; 0x38
 800d3b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800d3b6:	920d      	str	r2, [sp, #52]	; 0x34
 800d3b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d3c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d3c4:	930a      	str	r3, [sp, #40]	; 0x28
 800d3c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d3c8:	9307      	str	r3, [sp, #28]
 800d3ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d3cc:	9306      	str	r3, [sp, #24]
 800d3ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3d0:	9305      	str	r3, [sp, #20]
 800d3d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d3d4:	e9cd a303 	strd	sl, r3, [sp, #12]
 800d3d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d3de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3e4:	4413      	add	r3, r2
 800d3e6:	bfa8      	it	ge
 800d3e8:	2200      	movge	r2, #0
 800d3ea:	9208      	str	r2, [sp, #32]
 800d3ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	bf28      	it	cs
 800d3f2:	4613      	movcs	r3, r2
 800d3f4:	ee18 2a90 	vmov	r2, s17
 800d3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3fa:	ee18 3a10 	vmov	r3, s16
 800d3fe:	f7ff f99f 	bl	800c740 <ai_conv2d_stripe_f32.constprop.0>
 800d402:	f1ba 0f00 	cmp.w	sl, #0
 800d406:	d020      	beq.n	800d44a <forward_conv2d+0x1fe>
 800d408:	2600      	movs	r6, #0
 800d40a:	464a      	mov	r2, r9
 800d40c:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800d410:	9610      	str	r6, [sp, #64]	; 0x40
 800d412:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d414:	4629      	mov	r1, r5
 800d416:	4628      	mov	r0, r5
 800d418:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d41a:	3301      	adds	r3, #1
 800d41c:	9211      	str	r2, [sp, #68]	; 0x44
 800d41e:	9310      	str	r3, [sp, #64]	; 0x40
 800d420:	69ab      	ldr	r3, [r5, #24]
 800d422:	609f      	str	r7, [r3, #8]
 800d424:	4623      	mov	r3, r4
 800d426:	444c      	add	r4, r9
 800d428:	47b0      	blx	r6
 800d42a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d42c:	445f      	add	r7, fp
 800d42e:	eba4 0308 	sub.w	r3, r4, r8
 800d432:	4293      	cmp	r3, r2
 800d434:	bfa8      	it	ge
 800d436:	4644      	movge	r4, r8
 800d438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d43a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d43c:	459a      	cmp	sl, r3
 800d43e:	d1e8      	bne.n	800d412 <forward_conv2d+0x1c6>
 800d440:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d442:	4691      	mov	r9, r2
 800d444:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d446:	4413      	add	r3, r2
 800d448:	9316      	str	r3, [sp, #88]	; 0x58
 800d44a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d44c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d44e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d450:	4413      	add	r3, r2
 800d452:	3101      	adds	r1, #1
 800d454:	9314      	str	r3, [sp, #80]	; 0x50
 800d456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d458:	9117      	str	r1, [sp, #92]	; 0x5c
 800d45a:	1a9b      	subs	r3, r3, r2
 800d45c:	9315      	str	r3, [sp, #84]	; 0x54
 800d45e:	69ab      	ldr	r3, [r5, #24]
 800d460:	68da      	ldr	r2, [r3, #12]
 800d462:	609a      	str	r2, [r3, #8]
 800d464:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d466:	428b      	cmp	r3, r1
 800d468:	d19d      	bne.n	800d3a6 <forward_conv2d+0x15a>
 800d46a:	b029      	add	sp, #164	; 0xa4
 800d46c:	ecbd 8b04 	vpop	{d8-d9}
 800d470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	deff      	udf	#255	; 0xff
 800d478:	2300      	movs	r3, #0
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	deff      	udf	#255	; 0xff
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	2a00      	cmp	r2, #0
 800d482:	f43f af73 	beq.w	800d36c <forward_conv2d+0x120>
 800d486:	69a3      	ldr	r3, [r4, #24]
 800d488:	8819      	ldrh	r1, [r3, #0]
 800d48a:	2903      	cmp	r1, #3
 800d48c:	d945      	bls.n	800d51a <forward_conv2d+0x2ce>
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d492:	2b00      	cmp	r3, #0
 800d494:	d039      	beq.n	800d50a <forward_conv2d+0x2be>
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d036      	beq.n	800d50a <forward_conv2d+0x2be>
 800d49c:	699c      	ldr	r4, [r3, #24]
 800d49e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d4a2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	4103      	asrs	r3, r0
 800d4aa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	9401      	str	r4, [sp, #4]
 800d4b2:	ee18 4a90 	vmov	r4, s17
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	bf18      	it	ne
 800d4ba:	4604      	movne	r4, r0
 800d4bc:	ee08 4a90 	vmov	s17, r4
 800d4c0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800d4c2:	9400      	str	r4, [sp, #0]
 800d4c4:	f7ff fe72 	bl	800d1ac <ai_dict_decompress_f32>
 800d4c8:	e750      	b.n	800d36c <forward_conv2d+0x120>
 800d4ca:	4b15      	ldr	r3, [pc, #84]	; (800d520 <forward_conv2d+0x2d4>)
 800d4cc:	9312      	str	r3, [sp, #72]	; 0x48
 800d4ce:	e734      	b.n	800d33a <forward_conv2d+0xee>
 800d4d0:	f1b8 0f00 	cmp.w	r8, #0
 800d4d4:	d00b      	beq.n	800d4ee <forward_conv2d+0x2a2>
 800d4d6:	9327      	str	r3, [sp, #156]	; 0x9c
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800d4de:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4e0:	e726      	b.n	800d330 <forward_conv2d+0xe4>
 800d4e2:	f1b8 0f00 	cmp.w	r8, #0
 800d4e6:	d001      	beq.n	800d4ec <forward_conv2d+0x2a0>
 800d4e8:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	9327      	str	r3, [sp, #156]	; 0x9c
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4f4:	e71c      	b.n	800d330 <forward_conv2d+0xe4>
 800d4f6:	2a01      	cmp	r2, #1
 800d4f8:	d90a      	bls.n	800d510 <forward_conv2d+0x2c4>
 800d4fa:	ee08 3a10 	vmov	s16, r3
 800d4fe:	461e      	mov	r6, r3
 800d500:	e6c9      	b.n	800d296 <forward_conv2d+0x4a>
 800d502:	2200      	movs	r2, #0
 800d504:	ee08 2a10 	vmov	s16, r2
 800d508:	e6c4      	b.n	800d294 <forward_conv2d+0x48>
 800d50a:	2300      	movs	r3, #0
 800d50c:	699b      	ldr	r3, [r3, #24]
 800d50e:	deff      	udf	#255	; 0xff
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	deff      	udf	#255	; 0xff
 800d514:	2300      	movs	r3, #0
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	deff      	udf	#255	; 0xff
 800d51a:	2300      	movs	r3, #0
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	deff      	udf	#255	; 0xff
 800d520:	0800c73d 	.word	0x0800c73d

0800d524 <forward_dense>:
 800d524:	6983      	ldr	r3, [r0, #24]
 800d526:	881a      	ldrh	r2, [r3, #0]
 800d528:	2a00      	cmp	r2, #0
 800d52a:	f000 80f0 	beq.w	800d70e <forward_dense+0x1ea>
 800d52e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d532:	ed2d 8b02 	vpush	{d8}
 800d536:	6858      	ldr	r0, [r3, #4]
 800d538:	b09b      	sub	sp, #108	; 0x6c
 800d53a:	6845      	ldr	r5, [r0, #4]
 800d53c:	b105      	cbz	r5, 800d540 <forward_dense+0x1c>
 800d53e:	682d      	ldr	r5, [r5, #0]
 800d540:	2a01      	cmp	r2, #1
 800d542:	f000 840a 	beq.w	800dd5a <forward_dense+0x836>
 800d546:	6906      	ldr	r6, [r0, #16]
 800d548:	b106      	cbz	r6, 800d54c <forward_dense+0x28>
 800d54a:	6836      	ldr	r6, [r6, #0]
 800d54c:	2a02      	cmp	r2, #2
 800d54e:	f000 80e0 	beq.w	800d712 <forward_dense+0x1ee>
 800d552:	69c3      	ldr	r3, [r0, #28]
 800d554:	930d      	str	r3, [sp, #52]	; 0x34
 800d556:	2b00      	cmp	r3, #0
 800d558:	f000 83f1 	beq.w	800dd3e <forward_dense+0x81a>
 800d55c:	4619      	mov	r1, r3
 800d55e:	8b03      	ldrh	r3, [r0, #24]
 800d560:	6809      	ldr	r1, [r1, #0]
 800d562:	2b01      	cmp	r3, #1
 800d564:	910f      	str	r1, [sp, #60]	; 0x3c
 800d566:	f240 83ec 	bls.w	800dd42 <forward_dense+0x81e>
 800d56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	930d      	str	r3, [sp, #52]	; 0x34
 800d570:	460b      	mov	r3, r1
 800d572:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800d576:	2a03      	cmp	r2, #3
 800d578:	68eb      	ldr	r3, [r5, #12]
 800d57a:	68f7      	ldr	r7, [r6, #12]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	687c      	ldr	r4, [r7, #4]
 800d580:	9317      	str	r3, [sp, #92]	; 0x5c
 800d582:	f8d8 3000 	ldr.w	r3, [r8]
 800d586:	4621      	mov	r1, r4
 800d588:	9419      	str	r4, [sp, #100]	; 0x64
 800d58a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800d58e:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800d592:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800d596:	fb01 f404 	mul.w	r4, r1, r4
 800d59a:	fa4e f10c 	asr.w	r1, lr, ip
 800d59e:	9116      	str	r1, [sp, #88]	; 0x58
 800d5a0:	f000 83d8 	beq.w	800dd54 <forward_dense+0x830>
 800d5a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d5a6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d5aa:	2a00      	cmp	r2, #0
 800d5ac:	f000 83c2 	beq.w	800dd34 <forward_dense+0x810>
 800d5b0:	6812      	ldr	r2, [r2, #0]
 800d5b2:	2a00      	cmp	r2, #0
 800d5b4:	f000 83be 	beq.w	800dd34 <forward_dense+0x810>
 800d5b8:	2b04      	cmp	r3, #4
 800d5ba:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800d5be:	f000 83a8 	beq.w	800dd12 <forward_dense+0x7ee>
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	f000 83a5 	beq.w	800dd12 <forward_dense+0x7ee>
 800d5c8:	f04f 0a00 	mov.w	sl, #0
 800d5cc:	69ab      	ldr	r3, [r5, #24]
 800d5ce:	fb07 f404 	mul.w	r4, r7, r4
 800d5d2:	69b2      	ldr	r2, [r6, #24]
 800d5d4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800d5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5da:	6892      	ldr	r2, [r2, #8]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800d5e2:	9206      	str	r2, [sp, #24]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	428a      	cmp	r2, r1
 800d5e8:	9110      	str	r1, [sp, #64]	; 0x40
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5ee:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800d5f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5f6:	900e      	str	r0, [sp, #56]	; 0x38
 800d5f8:	9303      	str	r3, [sp, #12]
 800d5fa:	f080 8380 	bcs.w	800dcfe <forward_dense+0x7da>
 800d5fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d600:	4654      	mov	r4, sl
 800d602:	4bb9      	ldr	r3, [pc, #740]	; (800d8e8 <forward_dense+0x3c4>)
 800d604:	46ca      	mov	sl, r9
 800d606:	08d0      	lsrs	r0, r2, #3
 800d608:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800d8ec <forward_dense+0x3c8>
 800d60c:	4413      	add	r3, r2
 800d60e:	9009      	str	r0, [sp, #36]	; 0x24
 800d610:	0099      	lsls	r1, r3, #2
 800d612:	f022 0301 	bic.w	r3, r2, #1
 800d616:	f002 0201 	and.w	r2, r2, #1
 800d61a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d61e:	9118      	str	r1, [sp, #96]	; 0x60
 800d620:	920a      	str	r2, [sp, #40]	; 0x28
 800d622:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800d626:	9305      	str	r3, [sp, #20]
 800d628:	f101 0320 	add.w	r3, r1, #32
 800d62c:	9207      	str	r2, [sp, #28]
 800d62e:	9311      	str	r3, [sp, #68]	; 0x44
 800d630:	444b      	add	r3, r9
 800d632:	469b      	mov	fp, r3
 800d634:	930b      	str	r3, [sp, #44]	; 0x2c
 800d636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d63e:	b10b      	cbz	r3, 800d644 <forward_dense+0x120>
 800d640:	699b      	ldr	r3, [r3, #24]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	2c00      	cmp	r4, #0
 800d646:	f000 834b 	beq.w	800dce0 <forward_dense+0x7bc>
 800d64a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d64c:	2904      	cmp	r1, #4
 800d64e:	f000 826a 	beq.w	800db26 <forward_dense+0x602>
 800d652:	9903      	ldr	r1, [sp, #12]
 800d654:	9806      	ldr	r0, [sp, #24]
 800d656:	4281      	cmp	r1, r0
 800d658:	f240 8356 	bls.w	800dd08 <forward_dense+0x7e4>
 800d65c:	4686      	mov	lr, r0
 800d65e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d660:	eb00 090a 	add.w	r9, r0, sl
 800d664:	0941      	lsrs	r1, r0, #5
 800d666:	f10a 0004 	add.w	r0, sl, #4
 800d66a:	f8cd 9020 	str.w	r9, [sp, #32]
 800d66e:	9012      	str	r0, [sp, #72]	; 0x48
 800d670:	1c48      	adds	r0, r1, #1
 800d672:	00c9      	lsls	r1, r1, #3
 800d674:	3110      	adds	r1, #16
 800d676:	9115      	str	r1, [sp, #84]	; 0x54
 800d678:	00c1      	lsls	r1, r0, #3
 800d67a:	9113      	str	r1, [sp, #76]	; 0x4c
 800d67c:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800d680:	9114      	str	r1, [sp, #80]	; 0x50
 800d682:	f1a9 0104 	sub.w	r1, r9, #4
 800d686:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800d68a:	910c      	str	r1, [sp, #48]	; 0x30
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 8128 	beq.w	800d8e2 <forward_dense+0x3be>
 800d692:	ecb3 5a01 	vldmia	r3!, {s10}
 800d696:	f1b9 0f07 	cmp.w	r9, #7
 800d69a:	d83d      	bhi.n	800d718 <forward_dense+0x1f4>
 800d69c:	45da      	cmp	sl, fp
 800d69e:	d211      	bcs.n	800d6c4 <forward_dense+0x1a0>
 800d6a0:	eddf 7a92 	vldr	s15, [pc, #584]	; 800d8ec <forward_dense+0x3c8>
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	4615      	mov	r5, r2
 800d6a8:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d6ac:	ecb0 7a01 	vldmia	r0!, {s14}
 800d6b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d6b4:	4558      	cmp	r0, fp
 800d6b6:	edd1 6a00 	vldr	s13, [r1]
 800d6ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d6be:	d3f3      	bcc.n	800d6a8 <forward_dense+0x184>
 800d6c0:	ee35 5a27 	vadd.f32	s10, s10, s15
 800d6c4:	9904      	ldr	r1, [sp, #16]
 800d6c6:	ecae 5a01 	vstmia	lr!, {s10}
 800d6ca:	440a      	add	r2, r1
 800d6cc:	9903      	ldr	r1, [sp, #12]
 800d6ce:	458e      	cmp	lr, r1
 800d6d0:	d3dc      	bcc.n	800d68c <forward_dense+0x168>
 800d6d2:	9a06      	ldr	r2, [sp, #24]
 800d6d4:	1a8b      	subs	r3, r1, r2
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	f023 0303 	bic.w	r3, r3, #3
 800d6dc:	3304      	adds	r3, #4
 800d6de:	18d3      	adds	r3, r2, r3
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	9306      	str	r3, [sp, #24]
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d6ea:	4413      	add	r3, r2
 800d6ec:	9a07      	ldr	r2, [sp, #28]
 800d6ee:	4281      	cmp	r1, r0
 800d6f0:	9303      	str	r3, [sp, #12]
 800d6f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6f4:	441a      	add	r2, r3
 800d6f6:	449b      	add	fp, r3
 800d6f8:	9207      	str	r2, [sp, #28]
 800d6fa:	9a05      	ldr	r2, [sp, #20]
 800d6fc:	441a      	add	r2, r3
 800d6fe:	9205      	str	r2, [sp, #20]
 800d700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d702:	4692      	mov	sl, r2
 800d704:	f080 82fb 	bcs.w	800dcfe <forward_dense+0x7da>
 800d708:	441a      	add	r2, r3
 800d70a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d70c:	e793      	b.n	800d636 <forward_dense+0x112>
 800d70e:	6853      	ldr	r3, [r2, #4]
 800d710:	deff      	udf	#255	; 0xff
 800d712:	2300      	movs	r3, #0
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	deff      	udf	#255	; 0xff
 800d718:	f002 0103 	and.w	r1, r2, #3
 800d71c:	2902      	cmp	r1, #2
 800d71e:	f000 81e6 	beq.w	800daee <forward_dense+0x5ca>
 800d722:	2903      	cmp	r1, #3
 800d724:	f000 80e4 	beq.w	800d8f0 <forward_dense+0x3cc>
 800d728:	2901      	cmp	r1, #1
 800d72a:	f000 81ef 	beq.w	800db0c <forward_dense+0x5e8>
 800d72e:	9908      	ldr	r1, [sp, #32]
 800d730:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800d8ec <forward_dense+0x3c8>
 800d734:	458a      	cmp	sl, r1
 800d736:	f200 82e9 	bhi.w	800dd0c <forward_dense+0x7e8>
 800d73a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d73c:	f102 0108 	add.w	r1, r2, #8
 800d740:	f10a 0020 	add.w	r0, sl, #32
 800d744:	18ae      	adds	r6, r5, r2
 800d746:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800d74a:	3108      	adds	r1, #8
 800d74c:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800d750:	3020      	adds	r0, #32
 800d752:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d756:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800d75a:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800d75e:	edd5 7a00 	vldr	s15, [r5]
 800d762:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800d766:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d76a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d76e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d772:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800d776:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800d77a:	edd5 2a00 	vldr	s5, [r5]
 800d77e:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800d782:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d786:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800d78a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d78e:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800d792:	ed95 3a00 	vldr	s6, [r5]
 800d796:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800d79a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d79e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7a2:	edd5 3a00 	vldr	s7, [r5]
 800d7a6:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800d7aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7ae:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d7b2:	ed95 4a00 	vldr	s8, [r5]
 800d7b6:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800d7ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7be:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d7c2:	edd5 4a00 	vldr	s9, [r5]
 800d7c6:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800d7ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7ce:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800d7d2:	edd5 5a00 	vldr	s11, [r5]
 800d7d6:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800d7da:	428e      	cmp	r6, r1
 800d7dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7e0:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d7e4:	ed95 6a00 	vldr	s12, [r5]
 800d7e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d7ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7f0:	d1a9      	bne.n	800d746 <forward_dense+0x222>
 800d7f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d7f4:	1850      	adds	r0, r2, r1
 800d7f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d7f8:	4559      	cmp	r1, fp
 800d7fa:	d26f      	bcs.n	800d8dc <forward_dense+0x3b8>
 800d7fc:	7805      	ldrb	r5, [r0, #0]
 800d7fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d802:	edd5 7a00 	vldr	s15, [r5]
 800d806:	460d      	mov	r5, r1
 800d808:	ecf5 6a01 	vldmia	r5!, {s13}
 800d80c:	45ab      	cmp	fp, r5
 800d80e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d812:	d963      	bls.n	800d8dc <forward_dense+0x3b8>
 800d814:	7845      	ldrb	r5, [r0, #1]
 800d816:	edd1 6a01 	vldr	s13, [r1, #4]
 800d81a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d81e:	edd5 7a00 	vldr	s15, [r5]
 800d822:	f101 0508 	add.w	r5, r1, #8
 800d826:	45ab      	cmp	fp, r5
 800d828:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d82c:	d956      	bls.n	800d8dc <forward_dense+0x3b8>
 800d82e:	7885      	ldrb	r5, [r0, #2]
 800d830:	edd1 6a02 	vldr	s13, [r1, #8]
 800d834:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d838:	edd5 7a00 	vldr	s15, [r5]
 800d83c:	f101 050c 	add.w	r5, r1, #12
 800d840:	45ab      	cmp	fp, r5
 800d842:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d846:	d949      	bls.n	800d8dc <forward_dense+0x3b8>
 800d848:	78c5      	ldrb	r5, [r0, #3]
 800d84a:	edd1 6a03 	vldr	s13, [r1, #12]
 800d84e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d852:	edd5 7a00 	vldr	s15, [r5]
 800d856:	f101 0510 	add.w	r5, r1, #16
 800d85a:	45ab      	cmp	fp, r5
 800d85c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d860:	d93c      	bls.n	800d8dc <forward_dense+0x3b8>
 800d862:	7905      	ldrb	r5, [r0, #4]
 800d864:	edd1 6a04 	vldr	s13, [r1, #16]
 800d868:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d86c:	edd5 7a00 	vldr	s15, [r5]
 800d870:	f101 0514 	add.w	r5, r1, #20
 800d874:	45ab      	cmp	fp, r5
 800d876:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d87a:	d92f      	bls.n	800d8dc <forward_dense+0x3b8>
 800d87c:	7945      	ldrb	r5, [r0, #5]
 800d87e:	edd1 6a05 	vldr	s13, [r1, #20]
 800d882:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d886:	edd5 7a00 	vldr	s15, [r5]
 800d88a:	f101 0518 	add.w	r5, r1, #24
 800d88e:	45ab      	cmp	fp, r5
 800d890:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d894:	d922      	bls.n	800d8dc <forward_dense+0x3b8>
 800d896:	7985      	ldrb	r5, [r0, #6]
 800d898:	edd1 6a06 	vldr	s13, [r1, #24]
 800d89c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8a0:	edd5 7a00 	vldr	s15, [r5]
 800d8a4:	f101 051c 	add.w	r5, r1, #28
 800d8a8:	45ab      	cmp	fp, r5
 800d8aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8ae:	d915      	bls.n	800d8dc <forward_dense+0x3b8>
 800d8b0:	79c5      	ldrb	r5, [r0, #7]
 800d8b2:	edd1 6a07 	vldr	s13, [r1, #28]
 800d8b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8ba:	edd5 7a00 	vldr	s15, [r5]
 800d8be:	f101 0520 	add.w	r5, r1, #32
 800d8c2:	45ab      	cmp	fp, r5
 800d8c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8c8:	d908      	bls.n	800d8dc <forward_dense+0x3b8>
 800d8ca:	edd1 7a08 	vldr	s15, [r1, #32]
 800d8ce:	7a01      	ldrb	r1, [r0, #8]
 800d8d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d8d4:	edd1 6a00 	vldr	s13, [r1]
 800d8d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d8dc:	ee35 5a07 	vadd.f32	s10, s10, s14
 800d8e0:	e6f0      	b.n	800d6c4 <forward_dense+0x1a0>
 800d8e2:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800d8ec <forward_dense+0x3c8>
 800d8e6:	e6d6      	b.n	800d696 <forward_dense+0x172>
 800d8e8:	3ffffff8 	.word	0x3ffffff8
 800d8ec:	00000000 	.word	0x00000000
 800d8f0:	eeb0 7a48 	vmov.f32	s14, s16
 800d8f4:	4650      	mov	r0, sl
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	468c      	mov	ip, r1
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800d900:	ecf6 7a01 	vldmia	r6!, {s15}
 800d904:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d908:	edd5 6a00 	vldr	s13, [r5]
 800d90c:	9d08      	ldr	r5, [sp, #32]
 800d90e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d912:	42ae      	cmp	r6, r5
 800d914:	d866      	bhi.n	800d9e4 <forward_dense+0x4c0>
 800d916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d918:	f101 0711 	add.w	r7, r1, #17
 800d91c:	3109      	adds	r1, #9
 800d91e:	eba5 0800 	sub.w	r8, r5, r0
 800d922:	3024      	adds	r0, #36	; 0x24
 800d924:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800d928:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800d92c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800d930:	3108      	adds	r1, #8
 800d932:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800d936:	3020      	adds	r0, #32
 800d938:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d93c:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800d940:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800d944:	edd5 7a00 	vldr	s15, [r5]
 800d948:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800d94c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d950:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d954:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d958:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800d95c:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800d960:	edd5 2a00 	vldr	s5, [r5]
 800d964:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800d968:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d96c:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800d970:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d974:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800d978:	ed95 3a00 	vldr	s6, [r5]
 800d97c:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800d980:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d984:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d988:	edd5 3a00 	vldr	s7, [r5]
 800d98c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800d990:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d994:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d998:	ed95 4a00 	vldr	s8, [r5]
 800d99c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800d9a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d9a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d9a8:	edd5 4a00 	vldr	s9, [r5]
 800d9ac:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800d9b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d9b4:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800d9b8:	edd5 5a00 	vldr	s11, [r5]
 800d9bc:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800d9c0:	428f      	cmp	r7, r1
 800d9c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d9c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d9ca:	ed95 6a00 	vldr	s12, [r5]
 800d9ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d9d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9d6:	d1a9      	bne.n	800d92c <forward_dense+0x408>
 800d9d8:	f108 0801 	add.w	r8, r8, #1
 800d9dc:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800d9e0:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800d9e4:	455e      	cmp	r6, fp
 800d9e6:	f4bf af79 	bcs.w	800d8dc <forward_dense+0x3b8>
 800d9ea:	f89c 1000 	ldrb.w	r1, [ip]
 800d9ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d9f2:	edd1 7a00 	vldr	s15, [r1]
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	ecf1 6a01 	vldmia	r1!, {s13}
 800d9fc:	458b      	cmp	fp, r1
 800d9fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da02:	f67f af6b 	bls.w	800d8dc <forward_dense+0x3b8>
 800da06:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800da0a:	edd6 6a01 	vldr	s13, [r6, #4]
 800da0e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da12:	edd1 7a00 	vldr	s15, [r1]
 800da16:	f106 0108 	add.w	r1, r6, #8
 800da1a:	458b      	cmp	fp, r1
 800da1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da20:	f67f af5c 	bls.w	800d8dc <forward_dense+0x3b8>
 800da24:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800da28:	edd6 6a02 	vldr	s13, [r6, #8]
 800da2c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da30:	edd1 7a00 	vldr	s15, [r1]
 800da34:	f106 010c 	add.w	r1, r6, #12
 800da38:	458b      	cmp	fp, r1
 800da3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da3e:	f67f af4d 	bls.w	800d8dc <forward_dense+0x3b8>
 800da42:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800da46:	edd6 6a03 	vldr	s13, [r6, #12]
 800da4a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da4e:	edd1 7a00 	vldr	s15, [r1]
 800da52:	f106 0110 	add.w	r1, r6, #16
 800da56:	458b      	cmp	fp, r1
 800da58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da5c:	f67f af3e 	bls.w	800d8dc <forward_dense+0x3b8>
 800da60:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800da64:	edd6 6a04 	vldr	s13, [r6, #16]
 800da68:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da6c:	edd1 7a00 	vldr	s15, [r1]
 800da70:	f106 0114 	add.w	r1, r6, #20
 800da74:	458b      	cmp	fp, r1
 800da76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da7a:	f67f af2f 	bls.w	800d8dc <forward_dense+0x3b8>
 800da7e:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800da82:	edd6 6a05 	vldr	s13, [r6, #20]
 800da86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da8a:	edd1 7a00 	vldr	s15, [r1]
 800da8e:	f106 0118 	add.w	r1, r6, #24
 800da92:	458b      	cmp	fp, r1
 800da94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da98:	f67f af20 	bls.w	800d8dc <forward_dense+0x3b8>
 800da9c:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800daa0:	edd6 6a06 	vldr	s13, [r6, #24]
 800daa4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800daa8:	edd1 7a00 	vldr	s15, [r1]
 800daac:	f106 011c 	add.w	r1, r6, #28
 800dab0:	458b      	cmp	fp, r1
 800dab2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dab6:	f67f af11 	bls.w	800d8dc <forward_dense+0x3b8>
 800daba:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800dabe:	edd6 6a07 	vldr	s13, [r6, #28]
 800dac2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dac6:	edd1 7a00 	vldr	s15, [r1]
 800daca:	f106 0120 	add.w	r1, r6, #32
 800dace:	458b      	cmp	fp, r1
 800dad0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dad4:	f67f af02 	bls.w	800d8dc <forward_dense+0x3b8>
 800dad8:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800dadc:	edd6 7a08 	vldr	s15, [r6, #32]
 800dae0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dae4:	edd1 6a00 	vldr	s13, [r1]
 800dae8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800daec:	e6f6      	b.n	800d8dc <forward_dense+0x3b8>
 800daee:	eeb0 7a48 	vmov.f32	s14, s16
 800daf2:	4650      	mov	r0, sl
 800daf4:	4611      	mov	r1, r2
 800daf6:	f811 5b01 	ldrb.w	r5, [r1], #1
 800dafa:	ecf0 7a01 	vldmia	r0!, {s15}
 800dafe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db02:	edd5 6a00 	vldr	s13, [r5]
 800db06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db0a:	e6f5      	b.n	800d8f8 <forward_dense+0x3d4>
 800db0c:	4611      	mov	r1, r2
 800db0e:	edda 7a00 	vldr	s15, [sl]
 800db12:	9812      	ldr	r0, [sp, #72]	; 0x48
 800db14:	f811 5b01 	ldrb.w	r5, [r1], #1
 800db18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db1c:	ed95 7a00 	vldr	s14, [r5]
 800db20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db24:	e7e7      	b.n	800daf6 <forward_dense+0x5d2>
 800db26:	9803      	ldr	r0, [sp, #12]
 800db28:	9906      	ldr	r1, [sp, #24]
 800db2a:	4288      	cmp	r0, r1
 800db2c:	f67f adda 	bls.w	800d6e4 <forward_dense+0x1c0>
 800db30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db32:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800db36:	468b      	mov	fp, r1
 800db38:	f100 0c01 	add.w	ip, r0, #1
 800db3c:	9805      	ldr	r0, [sp, #20]
 800db3e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800db42:	3801      	subs	r0, #1
 800db44:	9008      	str	r0, [sp, #32]
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 80bf 	beq.w	800dcca <forward_dense+0x7a6>
 800db4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db4e:	ecf3 2a01 	vldmia	r3!, {s5}
 800db52:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800d8ec <forward_dense+0x3c8>
 800db56:	2900      	cmp	r1, #0
 800db58:	f000 80bf 	beq.w	800dcda <forward_dense+0x7b6>
 800db5c:	1d10      	adds	r0, r2, #4
 800db5e:	f10a 0120 	add.w	r1, sl, #32
 800db62:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800db66:	3004      	adds	r0, #4
 800db68:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800db6c:	3120      	adds	r1, #32
 800db6e:	f007 0e0f 	and.w	lr, r7, #15
 800db72:	093f      	lsrs	r7, r7, #4
 800db74:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800db78:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800db7c:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800db80:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800db84:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800db88:	edde 7a00 	vldr	s15, [lr]
 800db8c:	ed97 3a00 	vldr	s6, [r7]
 800db90:	0937      	lsrs	r7, r6, #4
 800db92:	ee67 7a82 	vmul.f32	s15, s15, s4
 800db96:	f006 060f 	and.w	r6, r6, #15
 800db9a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800db9e:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800dba2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dba6:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800dbaa:	eee3 7a04 	vfma.f32	s15, s6, s8
 800dbae:	ed97 3a00 	vldr	s6, [r7]
 800dbb2:	ed96 4a00 	vldr	s8, [r6]
 800dbb6:	092e      	lsrs	r6, r5, #4
 800dbb8:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800dbbc:	f005 050f 	and.w	r5, r5, #15
 800dbc0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dbc4:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800dbc8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dbcc:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800dbd0:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800dbd4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dbd8:	eee4 7a05 	vfma.f32	s15, s8, s10
 800dbdc:	ed96 4a00 	vldr	s8, [r6]
 800dbe0:	ed95 5a00 	vldr	s10, [r5]
 800dbe4:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800dbe8:	4560      	cmp	r0, ip
 800dbea:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800dbee:	f005 050f 	and.w	r5, r5, #15
 800dbf2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dbf6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dbfa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dbfe:	eee5 7a06 	vfma.f32	s15, s10, s12
 800dc02:	ed96 5a00 	vldr	s10, [r6]
 800dc06:	ed95 6a00 	vldr	s12, [r5]
 800dc0a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800dc0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dc12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc16:	d1a4      	bne.n	800db62 <forward_dense+0x63e>
 800dc18:	f1ac 0804 	sub.w	r8, ip, #4
 800dc1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800dc20:	9905      	ldr	r1, [sp, #20]
 800dc22:	458e      	cmp	lr, r1
 800dc24:	d229      	bcs.n	800dc7a <forward_dense+0x756>
 800dc26:	9908      	ldr	r1, [sp, #32]
 800dc28:	f10e 0008 	add.w	r0, lr, #8
 800dc2c:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800dc30:	eba1 070e 	sub.w	r7, r1, lr
 800dc34:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800dc38:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800dc3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc40:	3008      	adds	r0, #8
 800dc42:	ed50 5a03 	vldr	s11, [r0, #-12]
 800dc46:	f001 050f 	and.w	r5, r1, #15
 800dc4a:	0909      	lsrs	r1, r1, #4
 800dc4c:	ed50 6a04 	vldr	s13, [r0, #-16]
 800dc50:	42b7      	cmp	r7, r6
 800dc52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc56:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dc5a:	edd5 7a00 	vldr	s15, [r5]
 800dc5e:	ed91 6a00 	vldr	s12, [r1]
 800dc62:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dc66:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dc6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc6e:	d1e5      	bne.n	800dc3c <forward_dense+0x718>
 800dc70:	f109 0901 	add.w	r9, r9, #1
 800dc74:	44c8      	add	r8, r9
 800dc76:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800dc7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc7c:	b1c1      	cbz	r1, 800dcb0 <forward_dense+0x78c>
 800dc7e:	f898 1000 	ldrb.w	r1, [r8]
 800dc82:	edde 7a00 	vldr	s15, [lr]
 800dc86:	0909      	lsrs	r1, r1, #4
 800dc88:	9804      	ldr	r0, [sp, #16]
 800dc8a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dc8e:	4402      	add	r2, r0
 800dc90:	4484      	add	ip, r0
 800dc92:	edd1 6a00 	vldr	s13, [r1]
 800dc96:	9903      	ldr	r1, [sp, #12]
 800dc98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dc9c:	ee72 2a87 	vadd.f32	s5, s5, s14
 800dca0:	eceb 2a01 	vstmia	fp!, {s5}
 800dca4:	4559      	cmp	r1, fp
 800dca6:	f63f af4e 	bhi.w	800db46 <forward_dense+0x622>
 800dcaa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800dcae:	e510      	b.n	800d6d2 <forward_dense+0x1ae>
 800dcb0:	9904      	ldr	r1, [sp, #16]
 800dcb2:	ee32 7a87 	vadd.f32	s14, s5, s14
 800dcb6:	440a      	add	r2, r1
 800dcb8:	448c      	add	ip, r1
 800dcba:	9903      	ldr	r1, [sp, #12]
 800dcbc:	ecab 7a01 	vstmia	fp!, {s14}
 800dcc0:	458b      	cmp	fp, r1
 800dcc2:	d2f2      	bcs.n	800dcaa <forward_dense+0x786>
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f47f af41 	bne.w	800db4c <forward_dense+0x628>
 800dcca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dccc:	eef0 2a48 	vmov.f32	s5, s16
 800dcd0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800dd60 <forward_dense+0x83c>
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	f47f af41 	bne.w	800db5c <forward_dense+0x638>
 800dcda:	46d6      	mov	lr, sl
 800dcdc:	4690      	mov	r8, r2
 800dcde:	e79f      	b.n	800dc20 <forward_dense+0x6fc>
 800dce0:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dce2:	4651      	mov	r1, sl
 800dce4:	9d06      	ldr	r5, [sp, #24]
 800dce6:	9001      	str	r0, [sp, #4]
 800dce8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dcea:	9000      	str	r0, [sp, #0]
 800dcec:	4628      	mov	r0, r5
 800dcee:	f000 fc21 	bl	800e534 <lite_dense_if32of32wf32>
 800dcf2:	462b      	mov	r3, r5
 800dcf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcf6:	4413      	add	r3, r2
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	9306      	str	r3, [sp, #24]
 800dcfc:	e4f2      	b.n	800d6e4 <forward_dense+0x1c0>
 800dcfe:	b01b      	add	sp, #108	; 0x6c
 800dd00:	ecbd 8b02 	vpop	{d8}
 800dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd08:	4601      	mov	r1, r0
 800dd0a:	e4eb      	b.n	800d6e4 <forward_dense+0x1c0>
 800dd0c:	4651      	mov	r1, sl
 800dd0e:	4610      	mov	r0, r2
 800dd10:	e572      	b.n	800d7f8 <forward_dense+0x2d4>
 800dd12:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800dd16:	f1b9 0f00 	cmp.w	r9, #0
 800dd1a:	d016      	beq.n	800dd4a <forward_dense+0x826>
 800dd1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dd20:	f000 fdb8 	bl	800e894 <ai_array_get_byte_size>
 800dd24:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800dd28:	4602      	mov	r2, r0
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	4650      	mov	r0, sl
 800dd2e:	f000 fe13 	bl	800e958 <memcpy>
 800dd32:	e44b      	b.n	800d5cc <forward_dense+0xa8>
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	d00a      	beq.n	800dd4e <forward_dense+0x82a>
 800dd38:	f04f 0900 	mov.w	r9, #0
 800dd3c:	e441      	b.n	800d5c2 <forward_dense+0x9e>
 800dd3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd40:	e417      	b.n	800d572 <forward_dense+0x4e>
 800dd42:	2300      	movs	r3, #0
 800dd44:	930d      	str	r3, [sp, #52]	; 0x34
 800dd46:	460b      	mov	r3, r1
 800dd48:	e413      	b.n	800d572 <forward_dense+0x4e>
 800dd4a:	46c2      	mov	sl, r8
 800dd4c:	e43e      	b.n	800d5cc <forward_dense+0xa8>
 800dd4e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800dd52:	e43b      	b.n	800d5cc <forward_dense+0xa8>
 800dd54:	2300      	movs	r3, #0
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	deff      	udf	#255	; 0xff
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	deff      	udf	#255	; 0xff
 800dd60:	00000000 	.word	0x00000000

0800dd64 <forward_mp>:
 800dd64:	6983      	ldr	r3, [r0, #24]
 800dd66:	881a      	ldrh	r2, [r3, #0]
 800dd68:	2a00      	cmp	r2, #0
 800dd6a:	f000 80bc 	beq.w	800dee6 <forward_mp+0x182>
 800dd6e:	6859      	ldr	r1, [r3, #4]
 800dd70:	684b      	ldr	r3, [r1, #4]
 800dd72:	b103      	cbz	r3, 800dd76 <forward_mp+0x12>
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2a01      	cmp	r2, #1
 800dd78:	f000 80ba 	beq.w	800def0 <forward_mp+0x18c>
 800dd7c:	690a      	ldr	r2, [r1, #16]
 800dd7e:	2a00      	cmp	r2, #0
 800dd80:	f000 80b9 	beq.w	800def6 <forward_mp+0x192>
 800dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd88:	6811      	ldr	r1, [r2, #0]
 800dd8a:	b093      	sub	sp, #76	; 0x4c
 800dd8c:	68ca      	ldr	r2, [r1, #12]
 800dd8e:	6989      	ldr	r1, [r1, #24]
 800dd90:	68d4      	ldr	r4, [r2, #12]
 800dd92:	6895      	ldr	r5, [r2, #8]
 800dd94:	688a      	ldr	r2, [r1, #8]
 800dd96:	68d9      	ldr	r1, [r3, #12]
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	9200      	str	r2, [sp, #0]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800dda0:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800dda4:	930e      	str	r3, [sp, #56]	; 0x38
 800dda6:	9408      	str	r4, [sp, #32]
 800dda8:	9504      	str	r5, [sp, #16]
 800ddaa:	e9d2 3600 	ldrd	r3, r6, [r2]
 800ddae:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800ddb2:	69c1      	ldr	r1, [r0, #28]
 800ddb4:	f1c3 0a00 	rsb	sl, r3, #0
 800ddb8:	960d      	str	r6, [sp, #52]	; 0x34
 800ddba:	9109      	str	r1, [sp, #36]	; 0x24
 800ddbc:	6a01      	ldr	r1, [r0, #32]
 800ddbe:	9705      	str	r7, [sp, #20]
 800ddc0:	910a      	str	r1, [sp, #40]	; 0x28
 800ddc2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ddc4:	910b      	str	r1, [sp, #44]	; 0x2c
 800ddc6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ddc8:	910c      	str	r1, [sp, #48]	; 0x30
 800ddca:	2c00      	cmp	r4, #0
 800ddcc:	f000 8088 	beq.w	800dee0 <forward_mp+0x17c>
 800ddd0:	441a      	add	r2, r3
 800ddd2:	9b05      	ldr	r3, [sp, #20]
 800ddd4:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800ddd8:	f04f 0b00 	mov.w	fp, #0
 800dddc:	fb09 f303 	mul.w	r3, r9, r3
 800dde0:	9201      	str	r2, [sp, #4]
 800dde2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800dde6:	4273      	negs	r3, r6
 800dde8:	9310      	str	r3, [sp, #64]	; 0x40
 800ddea:	fb05 f307 	mul.w	r3, r5, r7
 800ddee:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddf2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800ddf6:	9901      	ldr	r1, [sp, #4]
 800ddf8:	9307      	str	r3, [sp, #28]
 800ddfa:	428a      	cmp	r2, r1
 800ddfc:	bf94      	ite	ls
 800ddfe:	eb0a 0e02 	addls.w	lr, sl, r2
 800de02:	eb0a 0e01 	addhi.w	lr, sl, r1
 800de06:	9a04      	ldr	r2, [sp, #16]
 800de08:	2a00      	cmp	r2, #0
 800de0a:	d05f      	beq.n	800decc <forward_mp+0x168>
 800de0c:	9a05      	ldr	r2, [sp, #20]
 800de0e:	9d00      	ldr	r5, [sp, #0]
 800de10:	fb02 f303 	mul.w	r3, r2, r3
 800de14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de1c:	18d3      	adds	r3, r2, r3
 800de1e:	2200      	movs	r2, #0
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de24:	9206      	str	r2, [sp, #24]
 800de26:	2b00      	cmp	r3, #0
 800de28:	469b      	mov	fp, r3
 800de2a:	db5e      	blt.n	800deea <forward_mp+0x186>
 800de2c:	9a03      	ldr	r2, [sp, #12]
 800de2e:	18d6      	adds	r6, r2, r3
 800de30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de32:	9902      	ldr	r1, [sp, #8]
 800de34:	fb06 2607 	mla	r6, r6, r7, r2
 800de38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de3a:	428a      	cmp	r2, r1
 800de3c:	bf94      	ite	ls
 800de3e:	eb0b 0402 	addls.w	r4, fp, r2
 800de42:	eb0b 0401 	addhi.w	r4, fp, r1
 800de46:	1ae4      	subs	r4, r4, r3
 800de48:	f1b9 0f00 	cmp.w	r9, #0
 800de4c:	d008      	beq.n	800de60 <forward_mp+0xfc>
 800de4e:	4633      	mov	r3, r6
 800de50:	462a      	mov	r2, r5
 800de52:	19b9      	adds	r1, r7, r6
 800de54:	f853 0b04 	ldr.w	r0, [r3], #4
 800de58:	4299      	cmp	r1, r3
 800de5a:	f842 0b04 	str.w	r0, [r2], #4
 800de5e:	d1f9      	bne.n	800de54 <forward_mp+0xf0>
 800de60:	9b07      	ldr	r3, [sp, #28]
 800de62:	459e      	cmp	lr, r3
 800de64:	dd1f      	ble.n	800dea6 <forward_mp+0x142>
 800de66:	469c      	mov	ip, r3
 800de68:	fb07 6404 	mla	r4, r7, r4, r6
 800de6c:	42a6      	cmp	r6, r4
 800de6e:	d214      	bcs.n	800de9a <forward_mp+0x136>
 800de70:	f1b9 0f00 	cmp.w	r9, #0
 800de74:	d011      	beq.n	800de9a <forward_mp+0x136>
 800de76:	19f1      	adds	r1, r6, r7
 800de78:	4630      	mov	r0, r6
 800de7a:	4602      	mov	r2, r0
 800de7c:	462b      	mov	r3, r5
 800de7e:	ecf2 7a01 	vldmia	r2!, {s15}
 800de82:	ed93 7a00 	vldr	s14, [r3]
 800de86:	428a      	cmp	r2, r1
 800de88:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800de8c:	ece3 7a01 	vstmia	r3!, {s15}
 800de90:	d1f5      	bne.n	800de7e <forward_mp+0x11a>
 800de92:	4438      	add	r0, r7
 800de94:	4439      	add	r1, r7
 800de96:	42a0      	cmp	r0, r4
 800de98:	d3ef      	bcc.n	800de7a <forward_mp+0x116>
 800de9a:	f10c 0c01 	add.w	ip, ip, #1
 800de9e:	4446      	add	r6, r8
 800dea0:	4444      	add	r4, r8
 800dea2:	45e6      	cmp	lr, ip
 800dea4:	d1e2      	bne.n	800de6c <forward_mp+0x108>
 800dea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dea8:	443d      	add	r5, r7
 800deaa:	9802      	ldr	r0, [sp, #8]
 800deac:	9a06      	ldr	r2, [sp, #24]
 800deae:	eb01 030b 	add.w	r3, r1, fp
 800deb2:	1a41      	subs	r1, r0, r1
 800deb4:	3201      	adds	r2, #1
 800deb6:	9102      	str	r1, [sp, #8]
 800deb8:	9904      	ldr	r1, [sp, #16]
 800deba:	9206      	str	r2, [sp, #24]
 800debc:	4291      	cmp	r1, r2
 800debe:	d1b2      	bne.n	800de26 <forward_mp+0xc2>
 800dec0:	9b00      	ldr	r3, [sp, #0]
 800dec2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dec4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800dec8:	4413      	add	r3, r2
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dece:	f10b 0b01 	add.w	fp, fp, #1
 800ded2:	9a01      	ldr	r2, [sp, #4]
 800ded4:	449a      	add	sl, r3
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	9b08      	ldr	r3, [sp, #32]
 800dedc:	455b      	cmp	r3, fp
 800dede:	d187      	bne.n	800ddf0 <forward_mp+0x8c>
 800dee0:	b013      	add	sp, #76	; 0x4c
 800dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee6:	6853      	ldr	r3, [r2, #4]
 800dee8:	deff      	udf	#255	; 0xff
 800deea:	9e03      	ldr	r6, [sp, #12]
 800deec:	2300      	movs	r3, #0
 800deee:	e79f      	b.n	800de30 <forward_mp+0xcc>
 800def0:	2300      	movs	r3, #0
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	deff      	udf	#255	; 0xff
 800def6:	68d3      	ldr	r3, [r2, #12]
 800def8:	deff      	udf	#255	; 0xff
 800defa:	bf00      	nop

0800defc <nl_func_relu_array_f32>:
 800defc:	b410      	push	{r4}
 800defe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800df02:	698c      	ldr	r4, [r1, #24]
 800df04:	6981      	ldr	r1, [r0, #24]
 800df06:	4413      	add	r3, r2
 800df08:	68a0      	ldr	r0, [r4, #8]
 800df0a:	6889      	ldr	r1, [r1, #8]
 800df0c:	009a      	lsls	r2, r3, #2
 800df0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800df12:	4298      	cmp	r0, r3
 800df14:	d80f      	bhi.n	800df36 <nl_func_relu_array_f32+0x3a>
 800df16:	3204      	adds	r2, #4
 800df18:	3304      	adds	r3, #4
 800df1a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800df3c <nl_func_relu_array_f32+0x40>
 800df1e:	4411      	add	r1, r2
 800df20:	461a      	mov	r2, r3
 800df22:	ed73 7a01 	vldmdb	r3!, {s15}
 800df26:	3a08      	subs	r2, #8
 800df28:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800df2c:	ed61 7a01 	vstmdb	r1!, {s15}
 800df30:	68a0      	ldr	r0, [r4, #8]
 800df32:	4290      	cmp	r0, r2
 800df34:	d9f4      	bls.n	800df20 <nl_func_relu_array_f32+0x24>
 800df36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	00000000 	.word	0x00000000

0800df40 <forward_relu>:
 800df40:	6982      	ldr	r2, [r0, #24]
 800df42:	8813      	ldrh	r3, [r2, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d05b      	beq.n	800e000 <forward_relu+0xc0>
 800df48:	6851      	ldr	r1, [r2, #4]
 800df4a:	684a      	ldr	r2, [r1, #4]
 800df4c:	b102      	cbz	r2, 800df50 <forward_relu+0x10>
 800df4e:	6812      	ldr	r2, [r2, #0]
 800df50:	2b01      	cmp	r3, #1
 800df52:	f000 8123 	beq.w	800e19c <forward_relu+0x25c>
 800df56:	b470      	push	{r4, r5, r6}
 800df58:	690b      	ldr	r3, [r1, #16]
 800df5a:	b103      	cbz	r3, 800df5e <forward_relu+0x1e>
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	69c6      	ldr	r6, [r0, #28]
 800df60:	2e00      	cmp	r6, #0
 800df62:	f000 809e 	beq.w	800e0a2 <forward_relu+0x162>
 800df66:	6871      	ldr	r1, [r6, #4]
 800df68:	6998      	ldr	r0, [r3, #24]
 800df6a:	2901      	cmp	r1, #1
 800df6c:	f000 80c3 	beq.w	800e0f6 <forward_relu+0x1b6>
 800df70:	6893      	ldr	r3, [r2, #8]
 800df72:	6991      	ldr	r1, [r2, #24]
 800df74:	0a1b      	lsrs	r3, r3, #8
 800df76:	6880      	ldr	r0, [r0, #8]
 800df78:	688d      	ldr	r5, [r1, #8]
 800df7a:	f000 80f2 	beq.w	800e162 <forward_relu+0x222>
 800df7e:	68d4      	ldr	r4, [r2, #12]
 800df80:	2201      	movs	r2, #1
 800df82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df8a:	42a3      	cmp	r3, r4
 800df8c:	fb01 f202 	mul.w	r2, r1, r2
 800df90:	d1f9      	bne.n	800df86 <forward_relu+0x46>
 800df92:	68b3      	ldr	r3, [r6, #8]
 800df94:	ed93 7a02 	vldr	s14, [r3, #8]
 800df98:	edd3 6a00 	vldr	s13, [r3]
 800df9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dfa0:	ed93 6a01 	vldr	s12, [r3, #4]
 800dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa8:	d42c      	bmi.n	800e004 <forward_relu+0xc4>
 800dfaa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dfae:	4413      	add	r3, r2
 800dfb0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800dfb4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dfb8:	4295      	cmp	r5, r2
 800dfba:	d81f      	bhi.n	800dffc <forward_relu+0xbc>
 800dfbc:	3204      	adds	r2, #4
 800dfbe:	1d01      	adds	r1, r0, #4
 800dfc0:	e00d      	b.n	800dfde <forward_relu+0x9e>
 800dfc2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800dfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfca:	db03      	blt.n	800dfd4 <forward_relu+0x94>
 800dfcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dfd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dfd4:	3b08      	subs	r3, #8
 800dfd6:	ed61 7a01 	vstmdb	r1!, {s15}
 800dfda:	429d      	cmp	r5, r3
 800dfdc:	d80e      	bhi.n	800dffc <forward_relu+0xbc>
 800dfde:	4613      	mov	r3, r2
 800dfe0:	ed72 7a01 	vldmdb	r2!, {s15}
 800dfe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfec:	d9e9      	bls.n	800dfc2 <forward_relu+0x82>
 800dfee:	3b08      	subs	r3, #8
 800dff0:	eef0 7a47 	vmov.f32	s15, s14
 800dff4:	429d      	cmp	r5, r3
 800dff6:	ed61 7a01 	vstmdb	r1!, {s15}
 800dffa:	d9f0      	bls.n	800dfde <forward_relu+0x9e>
 800dffc:	bc70      	pop	{r4, r5, r6}
 800dffe:	4770      	bx	lr
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	deff      	udf	#255	; 0xff
 800e004:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e008:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800e00c:	4411      	add	r1, r2
 800e00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e012:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800e016:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e01a:	d11f      	bne.n	800e05c <forward_relu+0x11c>
 800e01c:	429d      	cmp	r5, r3
 800e01e:	d8ed      	bhi.n	800dffc <forward_relu+0xbc>
 800e020:	1b5d      	subs	r5, r3, r5
 800e022:	1d1a      	adds	r2, r3, #4
 800e024:	1d01      	adds	r1, r0, #4
 800e026:	2000      	movs	r0, #0
 800e028:	f025 0503 	bic.w	r5, r5, #3
 800e02c:	1b5b      	subs	r3, r3, r5
 800e02e:	ed72 7a01 	vldmdb	r2!, {s15}
 800e032:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03a:	dc0a      	bgt.n	800e052 <forward_relu+0x112>
 800e03c:	429a      	cmp	r2, r3
 800e03e:	f841 0d04 	str.w	r0, [r1, #-4]!
 800e042:	d0db      	beq.n	800dffc <forward_relu+0xbc>
 800e044:	ed72 7a01 	vldmdb	r2!, {s15}
 800e048:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e050:	ddf4      	ble.n	800e03c <forward_relu+0xfc>
 800e052:	429a      	cmp	r2, r3
 800e054:	ed61 7a01 	vstmdb	r1!, {s15}
 800e058:	d1e9      	bne.n	800e02e <forward_relu+0xee>
 800e05a:	e7cf      	b.n	800dffc <forward_relu+0xbc>
 800e05c:	429d      	cmp	r5, r3
 800e05e:	d8cd      	bhi.n	800dffc <forward_relu+0xbc>
 800e060:	1b5d      	subs	r5, r3, r5
 800e062:	1d1a      	adds	r2, r3, #4
 800e064:	1d01      	adds	r1, r0, #4
 800e066:	f025 0503 	bic.w	r5, r5, #3
 800e06a:	1b5b      	subs	r3, r3, r5
 800e06c:	ed72 7a01 	vldmdb	r2!, {s15}
 800e070:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e078:	db0e      	blt.n	800e098 <forward_relu+0x158>
 800e07a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e07e:	4293      	cmp	r3, r2
 800e080:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e084:	ed61 7a01 	vstmdb	r1!, {s15}
 800e088:	d0b8      	beq.n	800dffc <forward_relu+0xbc>
 800e08a:	ed72 7a01 	vldmdb	r2!, {s15}
 800e08e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e096:	daf0      	bge.n	800e07a <forward_relu+0x13a>
 800e098:	4293      	cmp	r3, r2
 800e09a:	ed61 7a01 	vstmdb	r1!, {s15}
 800e09e:	d1e5      	bne.n	800e06c <forward_relu+0x12c>
 800e0a0:	e7ac      	b.n	800dffc <forward_relu+0xbc>
 800e0a2:	6999      	ldr	r1, [r3, #24]
 800e0a4:	6893      	ldr	r3, [r2, #8]
 800e0a6:	6990      	ldr	r0, [r2, #24]
 800e0a8:	0a1b      	lsrs	r3, r3, #8
 800e0aa:	6889      	ldr	r1, [r1, #8]
 800e0ac:	6884      	ldr	r4, [r0, #8]
 800e0ae:	d06e      	beq.n	800e18e <forward_relu+0x24e>
 800e0b0:	68d5      	ldr	r5, [r2, #12]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e0b8:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e0bc:	429d      	cmp	r5, r3
 800e0be:	fb00 f202 	mul.w	r2, r0, r2
 800e0c2:	d1f9      	bne.n	800e0b8 <forward_relu+0x178>
 800e0c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e0c8:	4413      	add	r3, r2
 800e0ca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e0ce:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e0d2:	4294      	cmp	r4, r2
 800e0d4:	d892      	bhi.n	800dffc <forward_relu+0xbc>
 800e0d6:	3204      	adds	r2, #4
 800e0d8:	3104      	adds	r1, #4
 800e0da:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e1a4 <forward_relu+0x264>
 800e0de:	4613      	mov	r3, r2
 800e0e0:	ed72 7a01 	vldmdb	r2!, {s15}
 800e0e4:	3b08      	subs	r3, #8
 800e0e6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e0ea:	ed61 7a01 	vstmdb	r1!, {s15}
 800e0ee:	429c      	cmp	r4, r3
 800e0f0:	d9f5      	bls.n	800e0de <forward_relu+0x19e>
 800e0f2:	bc70      	pop	{r4, r5, r6}
 800e0f4:	4770      	bx	lr
 800e0f6:	6993      	ldr	r3, [r2, #24]
 800e0f8:	6880      	ldr	r0, [r0, #8]
 800e0fa:	689c      	ldr	r4, [r3, #8]
 800e0fc:	6893      	ldr	r3, [r2, #8]
 800e0fe:	0a1b      	lsrs	r3, r3, #8
 800e100:	d047      	beq.n	800e192 <forward_relu+0x252>
 800e102:	68d5      	ldr	r5, [r2, #12]
 800e104:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e108:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e10c:	42ab      	cmp	r3, r5
 800e10e:	fb02 f101 	mul.w	r1, r2, r1
 800e112:	d1f9      	bne.n	800e108 <forward_relu+0x1c8>
 800e114:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800e118:	68b3      	ldr	r3, [r6, #8]
 800e11a:	440a      	add	r2, r1
 800e11c:	ed93 7a00 	vldr	s14, [r3]
 800e120:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e124:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e128:	429c      	cmp	r4, r3
 800e12a:	f63f af67 	bhi.w	800dffc <forward_relu+0xbc>
 800e12e:	1d02      	adds	r2, r0, #4
 800e130:	3304      	adds	r3, #4
 800e132:	2000      	movs	r0, #0
 800e134:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e138:	1f19      	subs	r1, r3, #4
 800e13a:	3b08      	subs	r3, #8
 800e13c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e144:	d406      	bmi.n	800e154 <forward_relu+0x214>
 800e146:	429c      	cmp	r4, r3
 800e148:	f842 0d04 	str.w	r0, [r2, #-4]!
 800e14c:	f63f af56 	bhi.w	800dffc <forward_relu+0xbc>
 800e150:	460b      	mov	r3, r1
 800e152:	e7ef      	b.n	800e134 <forward_relu+0x1f4>
 800e154:	429c      	cmp	r4, r3
 800e156:	ed62 7a01 	vstmdb	r2!, {s15}
 800e15a:	f63f af4f 	bhi.w	800dffc <forward_relu+0xbc>
 800e15e:	460b      	mov	r3, r1
 800e160:	e7e8      	b.n	800e134 <forward_relu+0x1f4>
 800e162:	68b3      	ldr	r3, [r6, #8]
 800e164:	ed93 7a02 	vldr	s14, [r3, #8]
 800e168:	edd3 6a00 	vldr	s13, [r3]
 800e16c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e170:	ed93 6a01 	vldr	s12, [r3, #4]
 800e174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e178:	d401      	bmi.n	800e17e <forward_relu+0x23e>
 800e17a:	462a      	mov	r2, r5
 800e17c:	e71e      	b.n	800dfbc <forward_relu+0x7c>
 800e17e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e182:	462b      	mov	r3, r5
 800e184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e188:	f47f af6a 	bne.w	800e060 <forward_relu+0x120>
 800e18c:	e748      	b.n	800e020 <forward_relu+0xe0>
 800e18e:	4622      	mov	r2, r4
 800e190:	e7a1      	b.n	800e0d6 <forward_relu+0x196>
 800e192:	68b2      	ldr	r2, [r6, #8]
 800e194:	4623      	mov	r3, r4
 800e196:	ed92 7a00 	vldr	s14, [r2]
 800e19a:	e7c8      	b.n	800e12e <forward_relu+0x1ee>
 800e19c:	2300      	movs	r3, #0
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	deff      	udf	#255	; 0xff
 800e1a2:	bf00      	nop
 800e1a4:	00000000 	.word	0x00000000

0800e1a8 <forward_sm>:
 800e1a8:	6982      	ldr	r2, [r0, #24]
 800e1aa:	8813      	ldrh	r3, [r2, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d078      	beq.n	800e2a2 <forward_sm+0xfa>
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	ed2d 8b04 	vpush	{d8-d9}
 800e1b8:	6852      	ldr	r2, [r2, #4]
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	6854      	ldr	r4, [r2, #4]
 800e1be:	b104      	cbz	r4, 800e1c2 <forward_sm+0x1a>
 800e1c0:	6824      	ldr	r4, [r4, #0]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d072      	beq.n	800e2ac <forward_sm+0x104>
 800e1c6:	6913      	ldr	r3, [r2, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d072      	beq.n	800e2b2 <forward_sm+0x10a>
 800e1cc:	681e      	ldr	r6, [r3, #0]
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	68e0      	ldr	r0, [r4, #12]
 800e1d2:	68f2      	ldr	r2, [r6, #12]
 800e1d4:	0a1b      	lsrs	r3, r3, #8
 800e1d6:	6845      	ldr	r5, [r0, #4]
 800e1d8:	6857      	ldr	r7, [r2, #4]
 800e1da:	d064      	beq.n	800e2a6 <forward_sm+0xfe>
 800e1dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1e6:	4298      	cmp	r0, r3
 800e1e8:	fb01 f202 	mul.w	r2, r1, r2
 800e1ec:	d1f9      	bne.n	800e1e2 <forward_sm+0x3a>
 800e1ee:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e1f2:	69a2      	ldr	r2, [r4, #24]
 800e1f4:	69b3      	ldr	r3, [r6, #24]
 800e1f6:	6892      	ldr	r2, [r2, #8]
 800e1f8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e1fc:	eb02 0309 	add.w	r3, r2, r9
 800e200:	429a      	cmp	r2, r3
 800e202:	9301      	str	r3, [sp, #4]
 800e204:	d248      	bcs.n	800e298 <forward_sm+0xf0>
 800e206:	00bb      	lsls	r3, r7, #2
 800e208:	2d01      	cmp	r5, #1
 800e20a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800e20e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800e218:	463e      	mov	r6, r7
 800e21a:	ed92 8a00 	vldr	s16, [r2]
 800e21e:	9302      	str	r3, [sp, #8]
 800e220:	d937      	bls.n	800e292 <forward_sm+0xea>
 800e222:	1d13      	adds	r3, r2, #4
 800e224:	ecf3 7a01 	vldmia	r3!, {s15}
 800e228:	429e      	cmp	r6, r3
 800e22a:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800e22e:	d1f9      	bne.n	800e224 <forward_sm+0x7c>
 800e230:	4692      	mov	sl, r2
 800e232:	46c3      	mov	fp, r8
 800e234:	46c1      	mov	r9, r8
 800e236:	eddf 8a20 	vldr	s17, [pc, #128]	; 800e2b8 <forward_sm+0x110>
 800e23a:	2400      	movs	r4, #0
 800e23c:	ecba 0a01 	vldmia	sl!, {s0}
 800e240:	3401      	adds	r4, #1
 800e242:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e246:	f000 fbc5 	bl	800e9d4 <expf>
 800e24a:	42a5      	cmp	r5, r4
 800e24c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800e250:	eca9 0a01 	vstmia	r9!, {s0}
 800e254:	d8f2      	bhi.n	800e23c <forward_sm+0x94>
 800e256:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	d00b      	beq.n	800e278 <forward_sm+0xd0>
 800e260:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800e264:	2300      	movs	r3, #0
 800e266:	eddb 7a00 	vldr	s15, [fp]
 800e26a:	3301      	adds	r3, #1
 800e26c:	429d      	cmp	r5, r3
 800e26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e272:	eceb 7a01 	vstmia	fp!, {s15}
 800e276:	d8f6      	bhi.n	800e266 <forward_sm+0xbe>
 800e278:	9b03      	ldr	r3, [sp, #12]
 800e27a:	463a      	mov	r2, r7
 800e27c:	9901      	ldr	r1, [sp, #4]
 800e27e:	4498      	add	r8, r3
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	42b9      	cmp	r1, r7
 800e284:	441e      	add	r6, r3
 800e286:	d907      	bls.n	800e298 <forward_sm+0xf0>
 800e288:	2d01      	cmp	r5, #1
 800e28a:	441f      	add	r7, r3
 800e28c:	ed92 8a00 	vldr	s16, [r2]
 800e290:	d8c7      	bhi.n	800e222 <forward_sm+0x7a>
 800e292:	2d00      	cmp	r5, #0
 800e294:	d0f0      	beq.n	800e278 <forward_sm+0xd0>
 800e296:	e7cb      	b.n	800e230 <forward_sm+0x88>
 800e298:	b005      	add	sp, #20
 800e29a:	ecbd 8b04 	vpop	{d8-d9}
 800e29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	deff      	udf	#255	; 0xff
 800e2a6:	f04f 0904 	mov.w	r9, #4
 800e2aa:	e7a2      	b.n	800e1f2 <forward_sm+0x4a>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	deff      	udf	#255	; 0xff
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	deff      	udf	#255	; 0xff
 800e2b6:	bf00      	nop
 800e2b8:	00000000 	.word	0x00000000

0800e2bc <forward_bn>:
 800e2bc:	6982      	ldr	r2, [r0, #24]
 800e2be:	8813      	ldrh	r3, [r2, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d055      	beq.n	800e370 <forward_bn+0xb4>
 800e2c4:	6852      	ldr	r2, [r2, #4]
 800e2c6:	6850      	ldr	r0, [r2, #4]
 800e2c8:	b100      	cbz	r0, 800e2cc <forward_bn+0x10>
 800e2ca:	6800      	ldr	r0, [r0, #0]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	f000 809c 	beq.w	800e40a <forward_bn+0x14e>
 800e2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d6:	6915      	ldr	r5, [r2, #16]
 800e2d8:	b105      	cbz	r5, 800e2dc <forward_bn+0x20>
 800e2da:	682d      	ldr	r5, [r5, #0]
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	d049      	beq.n	800e374 <forward_bn+0xb8>
 800e2e0:	69d1      	ldr	r1, [r2, #28]
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	d049      	beq.n	800e37a <forward_bn+0xbe>
 800e2e6:	8b13      	ldrh	r3, [r2, #24]
 800e2e8:	f8d1 c000 	ldr.w	ip, [r1]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d945      	bls.n	800e37c <forward_bn+0xc0>
 800e2f0:	6883      	ldr	r3, [r0, #8]
 800e2f2:	684f      	ldr	r7, [r1, #4]
 800e2f4:	0a1b      	lsrs	r3, r3, #8
 800e2f6:	d06c      	beq.n	800e3d2 <forward_bn+0x116>
 800e2f8:	68c1      	ldr	r1, [r0, #12]
 800e2fa:	2401      	movs	r4, #1
 800e2fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e300:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e304:	428b      	cmp	r3, r1
 800e306:	fb02 f404 	mul.w	r4, r2, r4
 800e30a:	d1f9      	bne.n	800e300 <forward_bn+0x44>
 800e30c:	69aa      	ldr	r2, [r5, #24]
 800e30e:	6981      	ldr	r1, [r0, #24]
 800e310:	685d      	ldr	r5, [r3, #4]
 800e312:	6888      	ldr	r0, [r1, #8]
 800e314:	6896      	ldr	r6, [r2, #8]
 800e316:	b3b7      	cbz	r7, 800e386 <forward_bn+0xca>
 800e318:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e322:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e326:	b30c      	cbz	r4, 800e36c <forward_bn+0xb0>
 800e328:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800e32c:	f04f 0e00 	mov.w	lr, #0
 800e330:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800e334:	00bf      	lsls	r7, r7, #2
 800e336:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800e33a:	4672      	mov	r2, lr
 800e33c:	44ae      	add	lr, r5
 800e33e:	4596      	cmp	lr, r2
 800e340:	d911      	bls.n	800e366 <forward_bn+0xaa>
 800e342:	eb07 030c 	add.w	r3, r7, ip
 800e346:	4648      	mov	r0, r9
 800e348:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e34c:	4641      	mov	r1, r8
 800e34e:	ecf3 6a01 	vldmia	r3!, {s13}
 800e352:	ecb0 7a01 	vldmia	r0!, {s14}
 800e356:	ecf1 7a01 	vldmia	r1!, {s15}
 800e35a:	4563      	cmp	r3, ip
 800e35c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e360:	ece2 7a01 	vstmia	r2!, {s15}
 800e364:	d1f3      	bne.n	800e34e <forward_bn+0x92>
 800e366:	4574      	cmp	r4, lr
 800e368:	44d4      	add	ip, sl
 800e36a:	d8e6      	bhi.n	800e33a <forward_bn+0x7e>
 800e36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	deff      	udf	#255	; 0xff
 800e374:	2300      	movs	r3, #0
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	deff      	udf	#255	; 0xff
 800e37a:	468c      	mov	ip, r1
 800e37c:	6883      	ldr	r3, [r0, #8]
 800e37e:	0a1b      	lsrs	r3, r3, #8
 800e380:	d037      	beq.n	800e3f2 <forward_bn+0x136>
 800e382:	2700      	movs	r7, #0
 800e384:	e7b8      	b.n	800e2f8 <forward_bn+0x3c>
 800e386:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e38a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e38e:	2c00      	cmp	r4, #0
 800e390:	d0ec      	beq.n	800e36c <forward_bn+0xb0>
 800e392:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800e396:	46b6      	mov	lr, r6
 800e398:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800e39c:	f04f 0c00 	mov.w	ip, #0
 800e3a0:	00bf      	lsls	r7, r7, #2
 800e3a2:	00ae      	lsls	r6, r5, #2
 800e3a4:	4663      	mov	r3, ip
 800e3a6:	44ac      	add	ip, r5
 800e3a8:	4563      	cmp	r3, ip
 800e3aa:	d20c      	bcs.n	800e3c6 <forward_bn+0x10a>
 800e3ac:	19c3      	adds	r3, r0, r7
 800e3ae:	4641      	mov	r1, r8
 800e3b0:	4672      	mov	r2, lr
 800e3b2:	ecf3 7a01 	vldmia	r3!, {s15}
 800e3b6:	ecb1 7a01 	vldmia	r1!, {s14}
 800e3ba:	4298      	cmp	r0, r3
 800e3bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3c0:	ece2 7a01 	vstmia	r2!, {s15}
 800e3c4:	d1f5      	bne.n	800e3b2 <forward_bn+0xf6>
 800e3c6:	4564      	cmp	r4, ip
 800e3c8:	44b6      	add	lr, r6
 800e3ca:	4430      	add	r0, r6
 800e3cc:	d8ea      	bhi.n	800e3a4 <forward_bn+0xe8>
 800e3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d2:	68c1      	ldr	r1, [r0, #12]
 800e3d4:	69ab      	ldr	r3, [r5, #24]
 800e3d6:	6982      	ldr	r2, [r0, #24]
 800e3d8:	684d      	ldr	r5, [r1, #4]
 800e3da:	6890      	ldr	r0, [r2, #8]
 800e3dc:	689e      	ldr	r6, [r3, #8]
 800e3de:	b177      	cbz	r7, 800e3fe <forward_bn+0x142>
 800e3e0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e3e4:	2401      	movs	r4, #1
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e3ec:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e3f0:	e79a      	b.n	800e328 <forward_bn+0x6c>
 800e3f2:	68c1      	ldr	r1, [r0, #12]
 800e3f4:	69ab      	ldr	r3, [r5, #24]
 800e3f6:	6982      	ldr	r2, [r0, #24]
 800e3f8:	684d      	ldr	r5, [r1, #4]
 800e3fa:	6890      	ldr	r0, [r2, #8]
 800e3fc:	689e      	ldr	r6, [r3, #8]
 800e3fe:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e402:	2401      	movs	r4, #1
 800e404:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e408:	e7c3      	b.n	800e392 <forward_bn+0xd6>
 800e40a:	2300      	movs	r3, #0
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	deff      	udf	#255	; 0xff

0800e410 <ai_check_custom_types>:
 800e410:	b082      	sub	sp, #8
 800e412:	4b12      	ldr	r3, [pc, #72]	; (800e45c <ai_check_custom_types+0x4c>)
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	b118      	cbz	r0, 800e420 <ai_check_custom_types+0x10>
 800e418:	7803      	ldrb	r3, [r0, #0]
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	d002      	beq.n	800e424 <ai_check_custom_types+0x14>
 800e41e:	2000      	movs	r0, #0
 800e420:	b002      	add	sp, #8
 800e422:	4770      	bx	lr
 800e424:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e428:	4293      	cmp	r3, r2
 800e42a:	d004      	beq.n	800e436 <ai_check_custom_types+0x26>
 800e42c:	2001      	movs	r0, #1
 800e42e:	f080 0001 	eor.w	r0, r0, #1
 800e432:	b002      	add	sp, #8
 800e434:	4770      	bx	lr
 800e436:	7842      	ldrb	r2, [r0, #1]
 800e438:	3001      	adds	r0, #1
 800e43a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d1f4      	bne.n	800e42c <ai_check_custom_types+0x1c>
 800e442:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e446:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d1ee      	bne.n	800e42c <ai_check_custom_types+0x1c>
 800e44e:	7842      	ldrb	r2, [r0, #1]
 800e450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e454:	429a      	cmp	r2, r3
 800e456:	d1e9      	bne.n	800e42c <ai_check_custom_types+0x1c>
 800e458:	2000      	movs	r0, #0
 800e45a:	e7e8      	b.n	800e42e <ai_check_custom_types+0x1e>
 800e45c:	84048403 	.word	0x84048403

0800e460 <ai_layers_init_all>:
 800e460:	2100      	movs	r1, #0
 800e462:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e464:	b13b      	cbz	r3, 800e476 <ai_layers_init_all+0x16>
 800e466:	691a      	ldr	r2, [r3, #16]
 800e468:	3101      	adds	r1, #1
 800e46a:	60d8      	str	r0, [r3, #12]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	4613      	mov	r3, r2
 800e470:	d001      	beq.n	800e476 <ai_layers_init_all+0x16>
 800e472:	2a00      	cmp	r2, #0
 800e474:	d1f6      	bne.n	800e464 <ai_layers_init_all+0x4>
 800e476:	4608      	mov	r0, r1
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop

0800e47c <ai_layers_post_init_all>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	2500      	movs	r5, #0
 800e480:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e482:	b16c      	cbz	r4, 800e4a0 <ai_layers_post_init_all+0x24>
 800e484:	6863      	ldr	r3, [r4, #4]
 800e486:	07db      	lsls	r3, r3, #31
 800e488:	d504      	bpl.n	800e494 <ai_layers_post_init_all+0x18>
 800e48a:	6a23      	ldr	r3, [r4, #32]
 800e48c:	4620      	mov	r0, r4
 800e48e:	b10b      	cbz	r3, 800e494 <ai_layers_post_init_all+0x18>
 800e490:	3501      	adds	r5, #1
 800e492:	4798      	blx	r3
 800e494:	6923      	ldr	r3, [r4, #16]
 800e496:	42a3      	cmp	r3, r4
 800e498:	461c      	mov	r4, r3
 800e49a:	d001      	beq.n	800e4a0 <ai_layers_post_init_all+0x24>
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1f0      	bne.n	800e482 <ai_layers_post_init_all+0x6>
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}

0800e4a4 <ai_layers_forward_all>:
 800e4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	f1b8 0f00 	cmp.w	r8, #0
 800e4b2:	d02a      	beq.n	800e50a <ai_layers_forward_all+0x66>
 800e4b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e4b6:	6381      	str	r1, [r0, #56]	; 0x38
 800e4b8:	b319      	cbz	r1, 800e502 <ai_layers_forward_all+0x5e>
 800e4ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e4bc:	2001      	movs	r0, #1
 800e4be:	47c0      	blx	r8
 800e4c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e4c2:	b1f6      	cbz	r6, 800e502 <ai_layers_forward_all+0x5e>
 800e4c4:	2700      	movs	r7, #0
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e4ca:	2002      	movs	r0, #2
 800e4cc:	47c0      	blx	r8
 800e4ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	696b      	ldr	r3, [r5, #20]
 800e4d4:	4798      	blx	r3
 800e4d6:	692e      	ldr	r6, [r5, #16]
 800e4d8:	2003      	movs	r0, #3
 800e4da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e4dc:	42b5      	cmp	r5, r6
 800e4de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e4e0:	d007      	beq.n	800e4f2 <ai_layers_forward_all+0x4e>
 800e4e2:	47c0      	blx	r8
 800e4e4:	3701      	adds	r7, #1
 800e4e6:	63a6      	str	r6, [r4, #56]	; 0x38
 800e4e8:	2e00      	cmp	r6, #0
 800e4ea:	d1ec      	bne.n	800e4c6 <ai_layers_forward_all+0x22>
 800e4ec:	4638      	mov	r0, r7
 800e4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f2:	2003      	movs	r0, #3
 800e4f4:	3701      	adds	r7, #1
 800e4f6:	47c0      	blx	r8
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	63a3      	str	r3, [r4, #56]	; 0x38
 800e4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e502:	2700      	movs	r7, #0
 800e504:	4638      	mov	r0, r7
 800e506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e50c:	6385      	str	r5, [r0, #56]	; 0x38
 800e50e:	2d00      	cmp	r5, #0
 800e510:	d0f7      	beq.n	800e502 <ai_layers_forward_all+0x5e>
 800e512:	4647      	mov	r7, r8
 800e514:	696b      	ldr	r3, [r5, #20]
 800e516:	4628      	mov	r0, r5
 800e518:	4798      	blx	r3
 800e51a:	462b      	mov	r3, r5
 800e51c:	692d      	ldr	r5, [r5, #16]
 800e51e:	429d      	cmp	r5, r3
 800e520:	d004      	beq.n	800e52c <ai_layers_forward_all+0x88>
 800e522:	3701      	adds	r7, #1
 800e524:	63a5      	str	r5, [r4, #56]	; 0x38
 800e526:	2d00      	cmp	r5, #0
 800e528:	d1f4      	bne.n	800e514 <ai_layers_forward_all+0x70>
 800e52a:	e7df      	b.n	800e4ec <ai_layers_forward_all+0x48>
 800e52c:	2300      	movs	r3, #0
 800e52e:	3701      	adds	r7, #1
 800e530:	63a3      	str	r3, [r4, #56]	; 0x38
 800e532:	e7db      	b.n	800e4ec <ai_layers_forward_all+0x48>

0800e534 <lite_dense_if32of32wf32>:
 800e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e538:	ed2d 8b0c 	vpush	{d8-d13}
 800e53c:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800e540:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e544:	4287      	cmp	r7, r0
 800e546:	f240 8105 	bls.w	800e754 <lite_dense_if32of32wf32+0x220>
 800e54a:	f1a6 0810 	sub.w	r8, r6, #16
 800e54e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e552:	4605      	mov	r5, r0
 800e554:	f006 0b0f 	and.w	fp, r6, #15
 800e558:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e55c:	f108 0801 	add.w	r8, r8, #1
 800e560:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800e564:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e568:	2e0f      	cmp	r6, #15
 800e56a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800e780 <lite_dense_if32of32wf32+0x24c>
 800e56e:	f240 8102 	bls.w	800e776 <lite_dense_if32of32wf32+0x242>
 800e572:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e576:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e57a:	46b6      	mov	lr, r6
 800e57c:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800e580:	f1ae 0e10 	sub.w	lr, lr, #16
 800e584:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e588:	3440      	adds	r4, #64	; 0x40
 800e58a:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800e58e:	f1be 0f0f 	cmp.w	lr, #15
 800e592:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e596:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800e59a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e59e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e5a2:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800e5a6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e5aa:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800e5ae:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800e5b2:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800e5b6:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800e5ba:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800e5be:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800e5c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e5c6:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800e5ca:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800e5ce:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800e5d2:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800e5d6:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800e5da:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800e5de:	eeed 7a26 	vfma.f32	s15, s26, s13
 800e5e2:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800e5e6:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800e5ea:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800e5ee:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800e5f2:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800e5f6:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800e5fa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e5fe:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e602:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e606:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e60a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e60e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e612:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e616:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e61a:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e61e:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e622:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e626:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e62a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e62e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e632:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e636:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e63a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e63e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e642:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e646:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e64a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e64e:	d895      	bhi.n	800e57c <lite_dense_if32of32wf32+0x48>
 800e650:	eb02 0e0a 	add.w	lr, r2, sl
 800e654:	465c      	mov	r4, fp
 800e656:	46c4      	mov	ip, r8
 800e658:	2c00      	cmp	r4, #0
 800e65a:	d075      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e65c:	eddc 6a00 	vldr	s13, [ip]
 800e660:	2c01      	cmp	r4, #1
 800e662:	edde 7a00 	vldr	s15, [lr]
 800e666:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e66a:	d06d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e66c:	eddc 6a01 	vldr	s13, [ip, #4]
 800e670:	2c02      	cmp	r4, #2
 800e672:	edde 7a01 	vldr	s15, [lr, #4]
 800e676:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e67a:	d065      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e67c:	eddc 6a02 	vldr	s13, [ip, #8]
 800e680:	2c03      	cmp	r4, #3
 800e682:	edde 7a02 	vldr	s15, [lr, #8]
 800e686:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e68a:	d05d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e68c:	eddc 6a03 	vldr	s13, [ip, #12]
 800e690:	2c04      	cmp	r4, #4
 800e692:	edde 7a03 	vldr	s15, [lr, #12]
 800e696:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e69a:	d055      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e69c:	eddc 6a04 	vldr	s13, [ip, #16]
 800e6a0:	2c05      	cmp	r4, #5
 800e6a2:	edde 7a04 	vldr	s15, [lr, #16]
 800e6a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6aa:	d04d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e6ac:	eddc 6a05 	vldr	s13, [ip, #20]
 800e6b0:	2c06      	cmp	r4, #6
 800e6b2:	edde 7a05 	vldr	s15, [lr, #20]
 800e6b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6ba:	d045      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e6bc:	eddc 6a06 	vldr	s13, [ip, #24]
 800e6c0:	2c07      	cmp	r4, #7
 800e6c2:	edde 7a06 	vldr	s15, [lr, #24]
 800e6c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6ca:	d03d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e6cc:	eddc 6a07 	vldr	s13, [ip, #28]
 800e6d0:	2c08      	cmp	r4, #8
 800e6d2:	edde 7a07 	vldr	s15, [lr, #28]
 800e6d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6da:	d035      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e6dc:	eddc 6a08 	vldr	s13, [ip, #32]
 800e6e0:	2c09      	cmp	r4, #9
 800e6e2:	edde 7a08 	vldr	s15, [lr, #32]
 800e6e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6ea:	d02d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e6ec:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e6f0:	2c0a      	cmp	r4, #10
 800e6f2:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e6f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6fa:	d025      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e6fc:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e700:	2c0b      	cmp	r4, #11
 800e702:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e706:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e70a:	d01d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e70c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e710:	2c0c      	cmp	r4, #12
 800e712:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e716:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e71a:	d015      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e71c:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e720:	3c0d      	subs	r4, #13
 800e722:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e726:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e72a:	d00d      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e72c:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e730:	2c01      	cmp	r4, #1
 800e732:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e73a:	d005      	beq.n	800e748 <lite_dense_if32of32wf32+0x214>
 800e73c:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800e740:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800e744:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e748:	eca5 7a01 	vstmia	r5!, {s14}
 800e74c:	42af      	cmp	r7, r5
 800e74e:	444a      	add	r2, r9
 800e750:	f63f af0a 	bhi.w	800e568 <lite_dense_if32of32wf32+0x34>
 800e754:	b15b      	cbz	r3, 800e76e <lite_dense_if32of32wf32+0x23a>
 800e756:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e758:	b14a      	cbz	r2, 800e76e <lite_dense_if32of32wf32+0x23a>
 800e75a:	edd0 7a00 	vldr	s15, [r0]
 800e75e:	ecb3 7a01 	vldmia	r3!, {s14}
 800e762:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e766:	ece0 7a01 	vstmia	r0!, {s15}
 800e76a:	4287      	cmp	r7, r0
 800e76c:	d1f5      	bne.n	800e75a <lite_dense_if32of32wf32+0x226>
 800e76e:	ecbd 8b0c 	vpop	{d8-d13}
 800e772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e776:	4634      	mov	r4, r6
 800e778:	4696      	mov	lr, r2
 800e77a:	468c      	mov	ip, r1
 800e77c:	e76c      	b.n	800e658 <lite_dense_if32of32wf32+0x124>
 800e77e:	bf00      	nop
 800e780:	00000000 	.word	0x00000000

0800e784 <ai_version_get>:
 800e784:	0212      	lsls	r2, r2, #8
 800e786:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e78a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e78e:	4770      	bx	lr

0800e790 <get_tensor_byte_size>:
 800e790:	b430      	push	{r4, r5}
 800e792:	6985      	ldr	r5, [r0, #24]
 800e794:	68c4      	ldr	r4, [r0, #12]
 800e796:	6941      	ldr	r1, [r0, #20]
 800e798:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <get_tensor_byte_size+0x24>)
 800e79a:	6828      	ldr	r0, [r5, #0]
 800e79c:	4a06      	ldr	r2, [pc, #24]	; (800e7b8 <get_tensor_byte_size+0x28>)
 800e79e:	4003      	ands	r3, r0
 800e7a0:	68c9      	ldr	r1, [r1, #12]
 800e7a2:	68e0      	ldr	r0, [r4, #12]
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	fb01 f000 	mul.w	r0, r1, r0
 800e7aa:	d101      	bne.n	800e7b0 <get_tensor_byte_size+0x20>
 800e7ac:	3007      	adds	r0, #7
 800e7ae:	08c0      	lsrs	r0, r0, #3
 800e7b0:	bc30      	pop	{r4, r5}
 800e7b2:	4770      	bx	lr
 800e7b4:	017fffff 	.word	0x017fffff
 800e7b8:	000400c0 	.word	0x000400c0

0800e7bc <ai_array_to_buffer_fmt>:
 800e7bc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d050      	beq.n	800e866 <ai_array_to_buffer_fmt+0xaa>
 800e7c4:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800e7c8:	4b29      	ldr	r3, [pc, #164]	; (800e870 <ai_array_to_buffer_fmt+0xb4>)
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d00b      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e7ce:	dc1c      	bgt.n	800e80a <ai_array_to_buffer_fmt+0x4e>
 800e7d0:	4b28      	ldr	r3, [pc, #160]	; (800e874 <ai_array_to_buffer_fmt+0xb8>)
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d007      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e7d6:	dd0b      	ble.n	800e7f0 <ai_array_to_buffer_fmt+0x34>
 800e7d8:	4b27      	ldr	r3, [pc, #156]	; (800e878 <ai_array_to_buffer_fmt+0xbc>)
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d003      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e7de:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d131      	bne.n	800e84a <ai_array_to_buffer_fmt+0x8e>
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e7ec:	4318      	orrs	r0, r3
 800e7ee:	4770      	bx	lr
 800e7f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d0f6      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e7f8:	dd2c      	ble.n	800e854 <ai_array_to_buffer_fmt+0x98>
 800e7fa:	4b20      	ldr	r3, [pc, #128]	; (800e87c <ai_array_to_buffer_fmt+0xc0>)
 800e7fc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e800:	429a      	cmp	r2, r3
 800e802:	bf18      	it	ne
 800e804:	2340      	movne	r3, #64	; 0x40
 800e806:	4318      	orrs	r0, r3
 800e808:	4770      	bx	lr
 800e80a:	4b1d      	ldr	r3, [pc, #116]	; (800e880 <ai_array_to_buffer_fmt+0xc4>)
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d0ea      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e810:	dd0e      	ble.n	800e830 <ai_array_to_buffer_fmt+0x74>
 800e812:	4b1c      	ldr	r3, [pc, #112]	; (800e884 <ai_array_to_buffer_fmt+0xc8>)
 800e814:	429a      	cmp	r2, r3
 800e816:	d0e6      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e818:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d0e2      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e820:	4b19      	ldr	r3, [pc, #100]	; (800e888 <ai_array_to_buffer_fmt+0xcc>)
 800e822:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e826:	429a      	cmp	r2, r3
 800e828:	bf18      	it	ne
 800e82a:	2340      	movne	r3, #64	; 0x40
 800e82c:	4318      	orrs	r0, r3
 800e82e:	4770      	bx	lr
 800e830:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e834:	429a      	cmp	r2, r3
 800e836:	d0d6      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e838:	3307      	adds	r3, #7
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d0d3      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e83e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800e842:	429a      	cmp	r2, r3
 800e844:	bf18      	it	ne
 800e846:	2340      	movne	r3, #64	; 0x40
 800e848:	e7ce      	b.n	800e7e8 <ai_array_to_buffer_fmt+0x2c>
 800e84a:	4b10      	ldr	r3, [pc, #64]	; (800e88c <ai_array_to_buffer_fmt+0xd0>)
 800e84c:	429a      	cmp	r2, r3
 800e84e:	bf18      	it	ne
 800e850:	2340      	movne	r3, #64	; 0x40
 800e852:	e7c9      	b.n	800e7e8 <ai_array_to_buffer_fmt+0x2c>
 800e854:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e858:	429a      	cmp	r2, r3
 800e85a:	d0c4      	beq.n	800e7e6 <ai_array_to_buffer_fmt+0x2a>
 800e85c:	3380      	adds	r3, #128	; 0x80
 800e85e:	429a      	cmp	r2, r3
 800e860:	bf18      	it	ne
 800e862:	2340      	movne	r3, #64	; 0x40
 800e864:	e7c0      	b.n	800e7e8 <ai_array_to_buffer_fmt+0x2c>
 800e866:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <ai_array_to_buffer_fmt+0xd4>)
 800e868:	4003      	ands	r3, r0
 800e86a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e86e:	e7bb      	b.n	800e7e8 <ai_array_to_buffer_fmt+0x2c>
 800e870:	00840040 	.word	0x00840040
 800e874:	00040840 	.word	0x00040840
 800e878:	00041040 	.word	0x00041040
 800e87c:	00040447 	.word	0x00040447
 800e880:	00840840 	.word	0x00840840
 800e884:	00841040 	.word	0x00841040
 800e888:	0084084f 	.word	0x0084084f
 800e88c:	0004084f 	.word	0x0004084f
 800e890:	00803fff 	.word	0x00803fff

0800e894 <ai_array_get_byte_size>:
 800e894:	b319      	cbz	r1, 800e8de <ai_array_get_byte_size+0x4a>
 800e896:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e89a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800e89e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800e8a2:	11c0      	asrs	r0, r0, #7
 800e8a4:	fb03 f101 	mul.w	r1, r3, r1
 800e8a8:	2a04      	cmp	r2, #4
 800e8aa:	f101 0107 	add.w	r1, r1, #7
 800e8ae:	f021 0107 	bic.w	r1, r1, #7
 800e8b2:	fa21 f10c 	lsr.w	r1, r1, ip
 800e8b6:	d00b      	beq.n	800e8d0 <ai_array_get_byte_size+0x3c>
 800e8b8:	2a08      	cmp	r2, #8
 800e8ba:	d002      	beq.n	800e8c2 <ai_array_get_byte_size+0x2e>
 800e8bc:	3107      	adds	r1, #7
 800e8be:	08c8      	lsrs	r0, r1, #3
 800e8c0:	4770      	bx	lr
 800e8c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e8c6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800e8ca:	3107      	adds	r1, #7
 800e8cc:	08c8      	lsrs	r0, r1, #3
 800e8ce:	4770      	bx	lr
 800e8d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e8d4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800e8d8:	3107      	adds	r1, #7
 800e8da:	08c8      	lsrs	r0, r1, #3
 800e8dc:	4770      	bx	lr
 800e8de:	4608      	mov	r0, r1
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop

0800e8e4 <ai_array_get_data_byte_size>:
 800e8e4:	b161      	cbz	r1, 800e900 <ai_array_get_data_byte_size+0x1c>
 800e8e6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e8ea:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800e8ee:	fb03 f101 	mul.w	r1, r3, r1
 800e8f2:	1dc8      	adds	r0, r1, #7
 800e8f4:	f020 0007 	bic.w	r0, r0, #7
 800e8f8:	40d0      	lsrs	r0, r2
 800e8fa:	3007      	adds	r0, #7
 800e8fc:	08c0      	lsrs	r0, r0, #3
 800e8fe:	4770      	bx	lr
 800e900:	4608      	mov	r0, r1
 800e902:	4770      	bx	lr

0800e904 <__errno>:
 800e904:	4b01      	ldr	r3, [pc, #4]	; (800e90c <__errno+0x8>)
 800e906:	6818      	ldr	r0, [r3, #0]
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	200013b8 	.word	0x200013b8

0800e910 <__libc_init_array>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	4d0d      	ldr	r5, [pc, #52]	; (800e948 <__libc_init_array+0x38>)
 800e914:	4c0d      	ldr	r4, [pc, #52]	; (800e94c <__libc_init_array+0x3c>)
 800e916:	1b64      	subs	r4, r4, r5
 800e918:	10a4      	asrs	r4, r4, #2
 800e91a:	2600      	movs	r6, #0
 800e91c:	42a6      	cmp	r6, r4
 800e91e:	d109      	bne.n	800e934 <__libc_init_array+0x24>
 800e920:	4d0b      	ldr	r5, [pc, #44]	; (800e950 <__libc_init_array+0x40>)
 800e922:	4c0c      	ldr	r4, [pc, #48]	; (800e954 <__libc_init_array+0x44>)
 800e924:	f000 f8ca 	bl	800eabc <_init>
 800e928:	1b64      	subs	r4, r4, r5
 800e92a:	10a4      	asrs	r4, r4, #2
 800e92c:	2600      	movs	r6, #0
 800e92e:	42a6      	cmp	r6, r4
 800e930:	d105      	bne.n	800e93e <__libc_init_array+0x2e>
 800e932:	bd70      	pop	{r4, r5, r6, pc}
 800e934:	f855 3b04 	ldr.w	r3, [r5], #4
 800e938:	4798      	blx	r3
 800e93a:	3601      	adds	r6, #1
 800e93c:	e7ee      	b.n	800e91c <__libc_init_array+0xc>
 800e93e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e942:	4798      	blx	r3
 800e944:	3601      	adds	r6, #1
 800e946:	e7f2      	b.n	800e92e <__libc_init_array+0x1e>
 800e948:	0816d618 	.word	0x0816d618
 800e94c:	0816d618 	.word	0x0816d618
 800e950:	0816d618 	.word	0x0816d618
 800e954:	0816d61c 	.word	0x0816d61c

0800e958 <memcpy>:
 800e958:	440a      	add	r2, r1
 800e95a:	4291      	cmp	r1, r2
 800e95c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e960:	d100      	bne.n	800e964 <memcpy+0xc>
 800e962:	4770      	bx	lr
 800e964:	b510      	push	{r4, lr}
 800e966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e96a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e96e:	4291      	cmp	r1, r2
 800e970:	d1f9      	bne.n	800e966 <memcpy+0xe>
 800e972:	bd10      	pop	{r4, pc}

0800e974 <memset>:
 800e974:	4402      	add	r2, r0
 800e976:	4603      	mov	r3, r0
 800e978:	4293      	cmp	r3, r2
 800e97a:	d100      	bne.n	800e97e <memset+0xa>
 800e97c:	4770      	bx	lr
 800e97e:	f803 1b01 	strb.w	r1, [r3], #1
 800e982:	e7f9      	b.n	800e978 <memset+0x4>

0800e984 <with_errnof>:
 800e984:	b513      	push	{r0, r1, r4, lr}
 800e986:	4604      	mov	r4, r0
 800e988:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e98c:	f7ff ffba 	bl	800e904 <__errno>
 800e990:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e994:	6004      	str	r4, [r0, #0]
 800e996:	b002      	add	sp, #8
 800e998:	bd10      	pop	{r4, pc}

0800e99a <xflowf>:
 800e99a:	b130      	cbz	r0, 800e9aa <xflowf+0x10>
 800e99c:	eef1 7a40 	vneg.f32	s15, s0
 800e9a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e9a4:	2022      	movs	r0, #34	; 0x22
 800e9a6:	f7ff bfed 	b.w	800e984 <with_errnof>
 800e9aa:	eef0 7a40 	vmov.f32	s15, s0
 800e9ae:	e7f7      	b.n	800e9a0 <xflowf+0x6>

0800e9b0 <__math_uflowf>:
 800e9b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e9b8 <__math_uflowf+0x8>
 800e9b4:	f7ff bff1 	b.w	800e99a <xflowf>
 800e9b8:	10000000 	.word	0x10000000

0800e9bc <__math_may_uflowf>:
 800e9bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e9c4 <__math_may_uflowf+0x8>
 800e9c0:	f7ff bfeb 	b.w	800e99a <xflowf>
 800e9c4:	1a200000 	.word	0x1a200000

0800e9c8 <__math_oflowf>:
 800e9c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e9d0 <__math_oflowf+0x8>
 800e9cc:	f7ff bfe5 	b.w	800e99a <xflowf>
 800e9d0:	70000000 	.word	0x70000000

0800e9d4 <expf>:
 800e9d4:	ee10 2a10 	vmov	r2, s0
 800e9d8:	f240 412a 	movw	r1, #1066	; 0x42a
 800e9dc:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800e9e0:	428b      	cmp	r3, r1
 800e9e2:	b430      	push	{r4, r5}
 800e9e4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800e9e8:	d92a      	bls.n	800ea40 <expf+0x6c>
 800e9ea:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800e9ee:	d058      	beq.n	800eaa2 <expf+0xce>
 800e9f0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800e9f4:	d303      	bcc.n	800e9fe <expf+0x2a>
 800e9f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9fa:	bc30      	pop	{r4, r5}
 800e9fc:	4770      	bx	lr
 800e9fe:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800eaa8 <expf+0xd4>
 800ea02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ea06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0a:	dd03      	ble.n	800ea14 <expf+0x40>
 800ea0c:	bc30      	pop	{r4, r5}
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f7ff bfda 	b.w	800e9c8 <__math_oflowf>
 800ea14:	eddf 7a25 	vldr	s15, [pc, #148]	; 800eaac <expf+0xd8>
 800ea18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ea1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea20:	d503      	bpl.n	800ea2a <expf+0x56>
 800ea22:	bc30      	pop	{r4, r5}
 800ea24:	2000      	movs	r0, #0
 800ea26:	f7ff bfc3 	b.w	800e9b0 <__math_uflowf>
 800ea2a:	eddf 7a21 	vldr	s15, [pc, #132]	; 800eab0 <expf+0xdc>
 800ea2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ea32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea36:	d503      	bpl.n	800ea40 <expf+0x6c>
 800ea38:	bc30      	pop	{r4, r5}
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	f7ff bfbe 	b.w	800e9bc <__math_may_uflowf>
 800ea40:	4b1c      	ldr	r3, [pc, #112]	; (800eab4 <expf+0xe0>)
 800ea42:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ea46:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800ea4a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800ea4e:	eeb0 7b44 	vmov.f64	d7, d4
 800ea52:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea56:	ee17 0a10 	vmov	r0, s14
 800ea5a:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ea5e:	f000 021f 	and.w	r2, r0, #31
 800ea62:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ea66:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800ea6a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800ea6e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800ea72:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800ea76:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ea7a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800ea7e:	684d      	ldr	r5, [r1, #4]
 800ea80:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800ea84:	2100      	movs	r1, #0
 800ea86:	190a      	adds	r2, r1, r4
 800ea88:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800ea8c:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ea90:	ec43 2b17 	vmov	d7, r2, r3
 800ea94:	eea6 0b04 	vfma.f64	d0, d6, d4
 800ea98:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea9c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eaa0:	e7ab      	b.n	800e9fa <expf+0x26>
 800eaa2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800eab8 <expf+0xe4>
 800eaa6:	e7a8      	b.n	800e9fa <expf+0x26>
 800eaa8:	42b17217 	.word	0x42b17217
 800eaac:	c2cff1b4 	.word	0xc2cff1b4
 800eab0:	c2ce8ecf 	.word	0xc2ce8ecf
 800eab4:	0816d4c8 	.word	0x0816d4c8
 800eab8:	00000000 	.word	0x00000000

0800eabc <_init>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	bf00      	nop
 800eac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac2:	bc08      	pop	{r3}
 800eac4:	469e      	mov	lr, r3
 800eac6:	4770      	bx	lr

0800eac8 <_fini>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	bf00      	nop
 800eacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eace:	bc08      	pop	{r3}
 800ead0:	469e      	mov	lr, r3
 800ead2:	4770      	bx	lr
