
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800bef8  0800bef8  0001bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c07c  0800c07c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c084  0800c084  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00052e98  20000070  0800c0fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20052f08  0800c0fc  00022f08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea99  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6a  00000000  00000000  0003eb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000438a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00045018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034dd7  00000000  00000000  00046528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241e4  00000000  00000000  0007b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127d71  00000000  00000000  0009f4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c7254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ac  00000000  00000000  001c72a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bee0 	.word	0x0800bee0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800bee0 	.word	0x0800bee0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0x98>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_ADC1_Init+0x9c>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0x98>)
 80005fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x98>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_ADC1_Init+0xa0>)
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x98>)
 8000646:	f001 fa63 	bl	8001b10 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 fd62 	bl	8001118 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_ADC1_Init+0xa4>)
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x98>)
 8000666:	f001 fa97 	bl	8001b98 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000670:	f000 fd52 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000008c 	.word	0x2000008c
 8000680:	40012000 	.word	0x40012000
 8000684:	0f000001 	.word	0x0f000001
 8000688:	10000012 	.word	0x10000012

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_ADC_MspInit+0x38>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10b      	bne.n	80006b6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <MX_CRC_Init+0x40>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CRC_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CRC_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CRC_Init+0x3c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f6:	f001 fdb1 	bl	800225c <HAL_CRC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000700:	f000 fd0a 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000d4 	.word	0x200000d4
 800070c:	40023000 	.word	0x40023000

08000710 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_CRC_MspInit+0x38>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10b      	bne.n	800073a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023000 	.word	0x40023000
 800074c:	40023800 	.word	0x40023800

08000750 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000754:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000756:	4a64      	ldr	r2, [pc, #400]	; (80008e8 <MX_DFSDM1_Init+0x198>)
 8000758:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800075a:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000768:	2201      	movs	r2, #1
 800076a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000772:	4b5c      	ldr	r3, [pc, #368]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000778:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800077a:	2200      	movs	r2, #0
 800077c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800077e:	4b59      	ldr	r3, [pc, #356]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800078e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000792:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000794:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000796:	22b0      	movs	r2, #176	; 0xb0
 8000798:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800079c:	2201      	movs	r2, #1
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007a0:	4850      	ldr	r0, [pc, #320]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80007a2:	f001 ff05 	bl	80025b0 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007a8:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <MX_DFSDM1_Init+0x1a0>)
 80007aa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80007b8:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007d6:	4b45      	ldr	r3, [pc, #276]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007de:	4b43      	ldr	r3, [pc, #268]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e8:	22b0      	movs	r2, #176	; 0xb0
 80007ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80007ec:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80007f2:	483e      	ldr	r0, [pc, #248]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007f4:	f001 fedc 	bl	80025b0 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <MX_DFSDM1_Init+0x1a8>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000800:	2201      	movs	r2, #1
 8000802:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000804:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800080e:	2204      	movs	r2, #4
 8000810:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000824:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800082e:	2204      	movs	r2, #4
 8000830:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800083a:	2201      	movs	r2, #1
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800084c:	f001 fdf0 	bl	8002430 <HAL_DFSDM_ChannelInit>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000856:	f000 fc5f 	bl	8001118 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_DFSDM1_Init+0x1b0>)
 800085e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000862:	2201      	movs	r2, #1
 8000864:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000870:	2204      	movs	r2, #4
 8000872:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800088e:	2204      	movs	r2, #4
 8000890:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800089a:	220a      	movs	r2, #10
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008ac:	f001 fdc0 	bl	8002430 <HAL_DFSDM_ChannelInit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 80008b6:	f000 fc2f 	bl	8001118 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4911      	ldr	r1, [pc, #68]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c0:	f001 ff50 	bl	8002764 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 80008c4:	490f      	ldr	r1, [pc, #60]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c8:	f001 ff92 	bl	80027f0 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008cc:	2201      	movs	r2, #1
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008d2:	f001 ff47 	bl	8002764 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80008d6:	2101      	movs	r1, #1
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008da:	f001 ff89 	bl	80027f0 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000f8 	.word	0x200000f8
 80008e8:	40017500 	.word	0x40017500
 80008ec:	2000014c 	.word	0x2000014c
 80008f0:	40017580 	.word	0x40017580
 80008f4:	200001a0 	.word	0x200001a0
 80008f8:	40017400 	.word	0x40017400
 80008fc:	200001d8 	.word	0x200001d8
 8000900:	40017420 	.word	0x40017420
 8000904:	00010002 	.word	0x00010002

08000908 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000920:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d145      	bne.n	80009b4 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a61      	ldr	r2, [pc, #388]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800097a:	230a      	movs	r3, #10
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	484d      	ldr	r0, [pc, #308]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000986:	f002 fc85 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800098a:	2308      	movs	r3, #8
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800099a:	2303      	movs	r3, #3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 80009a6:	f002 fc75 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009b2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <HAL_DFSDM_FilterMspInit+0x1b8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d137      	bne.n	8000a2e <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c0:	4a41      	ldr	r2, [pc, #260]	; (8000ac8 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009c4:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009fe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a08:	f002 f89e 	bl	8002b48 <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000a12:	f000 fb81 	bl	8001118 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d137      	bne.n	8000aa8 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a3a:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a70:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a78:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a82:	f002 f861 	bl	8002b48 <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000a8c:	f000 fb44 	bl	8001118 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002d4 	.word	0x200002d4
 8000ab4:	200002d0 	.word	0x200002d0
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40017500 	.word	0x40017500
 8000ac4:	20000210 	.word	0x20000210
 8000ac8:	40026410 	.word	0x40026410
 8000acc:	40017580 	.word	0x40017580
 8000ad0:	20000270 	.word	0x20000270
 8000ad4:	40026488 	.word	0x40026488

08000ad8 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d145      	bne.n	8000b84 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b56:	f002 fb9d 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b76:	f002 fb8d 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b82:	6013      	str	r3, [r2, #0]
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200002d4 	.word	0x200002d4
 8000b90:	200002d0 	.word	0x200002d0
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_DMA_Init+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f001 fb15 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc4:	2038      	movs	r0, #56	; 0x38
 8000bc6:	f001 fb2e 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2039      	movs	r0, #57	; 0x39
 8000bd0:	f001 fb0d 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bd4:	2039      	movs	r0, #57	; 0x39
 8000bd6:	f001 fb26 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	203b      	movs	r0, #59	; 0x3b
 8000be0:	f001 fb05 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000be4:	203b      	movs	r0, #59	; 0x3b
 8000be6:	f001 fb1e 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2044      	movs	r0, #68	; 0x44
 8000bf0:	f001 fafd 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000bf4:	2044      	movs	r0, #68	; 0x44
 8000bf6:	f001 fb16 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2045      	movs	r0, #69	; 0x45
 8000c00:	f001 faf5 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c04:	2045      	movs	r0, #69	; 0x45
 8000c06:	f001 fb0e 	bl	8002226 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
 8000c44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	4826      	ldr	r0, [pc, #152]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d0e:	f002 fc85 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210b      	movs	r1, #11
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d18:	f002 fc80 	bl	800361c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <MX_GPIO_Init+0x198>)
 8000d34:	f002 faae 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d52:	f002 fa9f 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000d56:	230b      	movs	r3, #11
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d6e:	f002 fa91 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_GPIO_Init+0x19c>)
 8000d88:	f002 fa84 	bl	8003294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f001 fa2c 	bl	80021ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f001 fa45 	bl	8002226 <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40022400 	.word	0x40022400
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020400 	.word	0x40020400

08000db8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc2:	f3bf 8f6f 	isb	sy
}
 8000dc6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
}
 8000dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
}
 8000dda:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SCB_EnableICache+0x48>)
 8000de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
}
 8000e16:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0b5b      	lsrs	r3, r3, #13
 8000e24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e28:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e32:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e3c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e42:	4911      	ldr	r1, [pc, #68]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1ef      	bne.n	8000e34 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1e5      	bne.n	8000e2a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5e:	f3bf 8f4f 	dsb	sy
}
 8000e62:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e70:	f3bf 8f4f 	dsb	sy
}
 8000e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char file_name[35];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e92:	f7ff ff91 	bl	8000db8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e96:	f7ff ffb5 	bl	8000e04 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f000 fdb8 	bl	8001a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f899 	bl	8000fd4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ea2:	f000 f909 	bl	80010b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f7ff feb7 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f7ff fe77 	bl	8000b9c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000eae:	f7ff fc4f 	bl	8000750 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000eb2:	f000 f9bf 	bl	8001234 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000eb6:	f7ff fb95 	bl	80005e4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000eba:	f000 fccd 	bl	8001858 <MX_UART4_Init>
  MX_CRC_Init();
 8000ebe:	f7ff fc05 	bl	80006cc <MX_CRC_Init>
  MX_RTC_Init();
 8000ec2:	f000 f92f 	bl	8001124 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000ec6:	f000 fabf 	bl	8001448 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000eca:	f007 f827 	bl	8007f1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <main+0x128>)
 8000ed4:	4838      	ldr	r0, [pc, #224]	; (8000fb8 <main+0x12c>)
 8000ed6:	f001 fcbb 	bl	8002850 <HAL_DFSDM_FilterRegularStart_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <main+0x58>
    {
      Error_Handler();
 8000ee0:	f000 f91a 	bl	8001118 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee8:	4934      	ldr	r1, [pc, #208]	; (8000fbc <main+0x130>)
 8000eea:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <main+0x134>)
 8000eec:	f001 fcb0 	bl	8002850 <HAL_DFSDM_FilterRegularStart_DMA>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <main+0x6e>
    {
      Error_Handler();
 8000ef6:	f000 f90f 	bl	8001118 <Error_Handler>
    }


	SDInit();
 8000efa:	f00a f97f 	bl	800b1fc <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f04:	482f      	ldr	r0, [pc, #188]	; (8000fc4 <main+0x138>)
 8000f06:	f002 fb89 	bl	800361c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!recording);
 8000f0a:	bf00      	nop
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <main+0x13c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0fb      	beq.n	8000f0c <main+0x80>
	  HAL_Delay(250);
 8000f14:	20fa      	movs	r0, #250	; 0xfa
 8000f16:	f000 fdd7 	bl	8001ac8 <HAL_Delay>
	  recording = 1;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <main+0x13c>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
	  BufferCtl.fptr = 0;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <main+0x140>)
 8000f22:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 8000f26:	461a      	mov	r2, r3
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <main+0x140>)
 8000f30:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <main+0x138>)
 8000f42:	f002 fb6b 	bl	800361c <HAL_GPIO_WritePin>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8000f46:	e001      	b.n	8000f4c <main+0xc0>
	  {
		  checkMicrophone();
 8000f48:	f00a f86a 	bl	800b020 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <main+0x13c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <main+0xd6>
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <main+0x140>)
 8000f56:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 8000f5a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f2      	beq.n	8000f48 <main+0xbc>
	  }
	  HAL_Delay(250);
 8000f62:	20fa      	movs	r0, #250	; 0xfa
 8000f64:	f000 fdb0 	bl	8001ac8 <HAL_Delay>
	  recording = 0;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <main+0x13c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <main+0x138>)
 8000f76:	f002 fb51 	bl	800361c <HAL_GPIO_WritePin>

	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8000f7a:	4915      	ldr	r1, [pc, #84]	; (8000fd0 <main+0x144>)
 8000f7c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000f80:	f00a f9ba 	bl	800b2f8 <WavProcess_EncInit>
	  get_time_and_date_filename((char*)file_name);
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a f900 	bl	800b18c <get_time_and_date_filename>
	  createFile((char*)file_name);
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a f95e 	bl	800b250 <createFile>
	  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 8000f94:	212c      	movs	r1, #44	; 0x2c
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <main+0x144>)
 8000f98:	f00a f972 	bl	800b280 <writeToFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.fptr);
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <main+0x140>)
 8000f9e:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 8000fa2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4808      	ldr	r0, [pc, #32]	; (8000fcc <main+0x140>)
 8000faa:	f00a f969 	bl	800b280 <writeToFile>
	  SDclose();
 8000fae:	f00a f97b 	bl	800b2a8 <SDclose>
  {
 8000fb2:	e7aa      	b.n	8000f0a <main+0x7e>
 8000fb4:	200022dc 	.word	0x200022dc
 8000fb8:	2000014c 	.word	0x2000014c
 8000fbc:	200002dc 	.word	0x200002dc
 8000fc0:	200000f8 	.word	0x200000f8
 8000fc4:	40022000 	.word	0x40022000
 8000fc8:	200002d8 	.word	0x200002d8
 8000fcc:	20004cbc 	.word	0x20004cbc
 8000fd0:	20052ecc 	.word	0x20052ecc

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2234      	movs	r2, #52	; 0x34
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00a fb16 	bl	800b614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <SystemClock_Config+0xdc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <SystemClock_Config+0xdc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <SystemClock_Config+0xdc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xe0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <SystemClock_Config+0xe0>)
 8001016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <SystemClock_Config+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001028:	2309      	movs	r3, #9
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001040:	2319      	movs	r3, #25
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001044:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001048:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800104e:	2309      	movs	r3, #9
 8001050:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fb60 	bl	8003720 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001066:	f000 f857 	bl	8001118 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800106a:	f002 fb09 	bl	8003680 <HAL_PWREx_EnableOverDrive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001074:	f000 f850 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001084:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2107      	movs	r1, #7
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fdf0 	bl	8003c7c <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010a2:	f000 f839 	bl	8001118 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0a4      	sub	sp, #144	; 0x90
 80010bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2290      	movs	r2, #144	; 0x90
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00a faa5 	bl	800b614 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <PeriphCommonClock_Config+0x5c>)
 80010cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 80010ce:	f240 13ad 	movw	r3, #429	; 0x1ad
 80010d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80010d8:	2306      	movs	r3, #6
 80010da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 80010e0:	2306      	movs	r3, #6
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 80010ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 ffa3 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001108:	f000 f806 	bl	8001118 <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3790      	adds	r7, #144	; 0x90
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	18300000 	.word	0x18300000

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <MX_RTC_Init+0xac>)
 800113e:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <MX_RTC_Init+0xb0>)
 8001140:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_RTC_Init+0xac>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_RTC_Init+0xac>)
 800114a:	227f      	movs	r2, #127	; 0x7f
 800114c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_RTC_Init+0xac>)
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_RTC_Init+0xac>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_RTC_Init+0xac>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_RTC_Init+0xac>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <MX_RTC_Init+0xac>)
 8001168:	f003 fd08 	bl	8004b7c <HAL_RTC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001172:	f7ff ffd1 	bl	8001118 <Error_Handler>
			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
  }
  sTime.Hours = HOUR;
 8001176:	2314      	movs	r3, #20
 8001178:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 800117a:	2329      	movs	r3, #41	; 0x29
 800117c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_RTC_Init+0xac>)
 8001192:	f003 fd77 	bl	8004c84 <HAL_RTC_SetTime>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800119c:	f7ff ffbc 	bl	8001118 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011a0:	2301      	movs	r3, #1
 80011a2:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 80011a4:	2301      	movs	r3, #1
 80011a6:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 80011a8:	2323      	movs	r3, #35	; 0x23
 80011aa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 80011ac:	2323      	movs	r3, #35	; 0x23
 80011ae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_RTC_Init+0xac>)
 80011b8:	f003 fe5c 	bl	8004e74 <HAL_RTC_SetDate>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011c2:	f7ff ffa9 	bl	8001118 <Error_Handler>
  }
  return;
 80011c6:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200042ec 	.word	0x200042ec
 80011d4:	40002800 	.word	0x40002800

080011d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0a6      	sub	sp, #152	; 0x98
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2290      	movs	r2, #144	; 0x90
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00a fa13 	bl	800b614 <memset>
  if(rtcHandle->Instance==RTC)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_RTC_MspInit+0x54>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d114      	bne.n	8001222 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011f8:	2320      	movs	r3, #32
 80011fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4618      	mov	r0, r3
 8001208:	f002 ff1e 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001212:	f7ff ff81 	bl	8001118 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_RTC_MspInit+0x58>)
 8001218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <HAL_RTC_MspInit+0x58>)
 800121c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3798      	adds	r7, #152	; 0x98
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40002800 	.word	0x40002800
 8001230:	40023800 	.word	0x40023800

08001234 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800123a:	4a2b      	ldr	r2, [pc, #172]	; (80012e8 <MX_SAI2_Init+0xb4>)
 800123c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001252:	2200      	movs	r2, #0
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001258:	2200      	movs	r2, #0
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001268:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001272:	2201      	movs	r2, #1
 8001274:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_SAI2_Init+0xb8>)
 800127a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001290:	2200      	movs	r2, #0
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_SAI2_Init+0xb0>)
 8001296:	2220      	movs	r2, #32
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_SAI2_Init+0xb0>)
 800129c:	2210      	movs	r2, #16
 800129e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012b4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012ca:	2203      	movs	r2, #3
 80012cc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_SAI2_Init+0xb0>)
 80012d0:	f003 ff64 	bl	800519c <HAL_SAI_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80012da:	f7ff ff1d 	bl	8001118 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000430c 	.word	0x2000430c
 80012e8:	40015c24 	.word	0x40015c24
 80012ec:	0002ee00 	.word	0x0002ee00

080012f0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a4a      	ldr	r2, [pc, #296]	; (8001428 <HAL_SAI_MspInit+0x138>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	f040 808e 	bne.w	8001420 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_SAI_MspInit+0x13c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10b      	bne.n	8001324 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800130c:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_SAI_MspInit+0x140>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	4a47      	ldr	r2, [pc, #284]	; (8001430 <HAL_SAI_MspInit+0x140>)
 8001312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001316:	6453      	str	r3, [r2, #68]	; 0x44
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <HAL_SAI_MspInit+0x140>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8001324:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_SAI_MspInit+0x13c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_SAI_MspInit+0x13c>)
 800132c:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800133e:	230a      	movs	r3, #10
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4619      	mov	r1, r3
 8001348:	483a      	ldr	r0, [pc, #232]	; (8001434 <HAL_SAI_MspInit+0x144>)
 800134a:	f001 ffa3 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800134e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001352:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001360:	230a      	movs	r3, #10
 8001362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	4833      	ldr	r0, [pc, #204]	; (8001438 <HAL_SAI_MspInit+0x148>)
 800136c:	f001 ff92 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001370:	2301      	movs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001380:	230a      	movs	r3, #10
 8001382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <HAL_SAI_MspInit+0x14c>)
 800138c:	f001 ff82 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001390:	2304      	movs	r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 80013a0:	2308      	movs	r3, #8
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	4824      	ldr	r0, [pc, #144]	; (800143c <HAL_SAI_MspInit+0x14c>)
 80013ac:	f001 ff72 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_SAI_MspInit+0x154>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013b8:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 80013bc:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d8:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e0:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <HAL_SAI_MspInit+0x150>)
 80013fa:	f001 fba5 	bl	8002b48 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 8001404:	f7ff fe88 	bl	8001118 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_SAI_MspInit+0x150>)
 800140c:	671a      	str	r2, [r3, #112]	; 0x70
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_SAI_MspInit+0x150>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_SAI_MspInit+0x150>)
 8001418:	66da      	str	r2, [r3, #108]	; 0x6c
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_SAI_MspInit+0x150>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40015c24 	.word	0x40015c24
 800142c:	200043f0 	.word	0x200043f0
 8001430:	40023800 	.word	0x40023800
 8001434:	40021000 	.word	0x40021000
 8001438:	40021800 	.word	0x40021800
 800143c:	40020000 	.word	0x40020000
 8001440:	20004390 	.word	0x20004390
 8001444:	40026428 	.word	0x40026428

08001448 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <MX_SDMMC1_SD_Init+0x3c>)
 8001450:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <MX_SDMMC1_SD_Init+0x38>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	200043f4 	.word	0x200043f4
 8001484:	40012c00 	.word	0x40012c00

08001488 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0ae      	sub	sp, #184	; 0xb8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2290      	movs	r2, #144	; 0x90
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00a f8b3 	bl	800b614 <memset>
  if(sdHandle->Instance==SDMMC1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a74      	ldr	r2, [pc, #464]	; (8001684 <HAL_SD_MspInit+0x1fc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f040 80e0 	bne.w	800167a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80014ba:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80014be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fdb9 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80014dc:	f7ff fe1c 	bl	8001118 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014e0:	4b69      	ldr	r3, [pc, #420]	; (8001688 <HAL_SD_MspInit+0x200>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <HAL_SD_MspInit+0x200>)
 80014e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ea:	6453      	str	r3, [r2, #68]	; 0x44
 80014ec:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_SD_MspInit+0x200>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_SD_MspInit+0x200>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <HAL_SD_MspInit+0x200>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_SD_MspInit+0x200>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_SD_MspInit+0x200>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a5c      	ldr	r2, [pc, #368]	; (8001688 <HAL_SD_MspInit+0x200>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b5a      	ldr	r3, [pc, #360]	; (8001688 <HAL_SD_MspInit+0x200>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001528:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800152c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001542:	230c      	movs	r3, #12
 8001544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800154c:	4619      	mov	r1, r3
 800154e:	484f      	ldr	r0, [pc, #316]	; (800168c <HAL_SD_MspInit+0x204>)
 8001550:	f001 fea0 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001554:	2304      	movs	r3, #4
 8001556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800156c:	230c      	movs	r3, #12
 800156e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001572:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001576:	4619      	mov	r1, r3
 8001578:	4845      	ldr	r0, [pc, #276]	; (8001690 <HAL_SD_MspInit+0x208>)
 800157a:	f001 fe8b 	bl	8003294 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800157e:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HAL_SD_MspInit+0x20c>)
 8001580:	4a45      	ldr	r2, [pc, #276]	; (8001698 <HAL_SD_MspInit+0x210>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001584:	4b43      	ldr	r3, [pc, #268]	; (8001694 <HAL_SD_MspInit+0x20c>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_SD_MspInit+0x20c>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <HAL_SD_MspInit+0x20c>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001598:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_SD_MspInit+0x20c>)
 800159a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015a8:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015b2:	2220      	movs	r2, #32
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015be:	2204      	movs	r2, #4
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015c4:	2203      	movs	r2, #3
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80015d8:	482e      	ldr	r0, [pc, #184]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015da:	f001 fab5 	bl	8002b48 <HAL_DMA_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80015e4:	f7ff fd98 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
 80015ee:	4a29      	ldr	r2, [pc, #164]	; (8001694 <HAL_SD_MspInit+0x20c>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_SD_MspInit+0x214>)
 80015f6:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <HAL_SD_MspInit+0x218>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_SD_MspInit+0x214>)
 80015fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_SD_MspInit+0x214>)
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_SD_MspInit+0x214>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_SD_MspInit+0x214>)
 8001610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_SD_MspInit+0x214>)
 8001618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800161c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_SD_MspInit+0x214>)
 8001620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001624:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_SD_MspInit+0x214>)
 8001628:	2220      	movs	r2, #32
 800162a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_SD_MspInit+0x214>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_SD_MspInit+0x214>)
 8001634:	2204      	movs	r2, #4
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_SD_MspInit+0x214>)
 800163a:	2203      	movs	r2, #3
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_SD_MspInit+0x214>)
 8001640:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_SD_MspInit+0x214>)
 8001648:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <HAL_SD_MspInit+0x214>)
 8001650:	f001 fa7a 	bl	8002b48 <HAL_DMA_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800165a:	f7ff fd5d 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_SD_MspInit+0x214>)
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_SD_MspInit+0x214>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2031      	movs	r0, #49	; 0x31
 8001670:	f000 fdbd 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001674:	2031      	movs	r0, #49	; 0x31
 8001676:	f000 fdd6 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	37b8      	adds	r7, #184	; 0xb8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40023800 	.word	0x40023800
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	20004478 	.word	0x20004478
 8001698:	400264a0 	.word	0x400264a0
 800169c:	200044d8 	.word	0x200044d8
 80016a0:	40026458 	.word	0x40026458

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_MspInit+0x44>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_MspInit+0x44>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_MspInit+0x44>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_MspInit+0x44>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_MspInit+0x44>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MspInit+0x44>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f9a6 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 8001744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001748:	f001 ff82 	bl	8003650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <SDMMC1_IRQHandler+0x10>)
 8001756:	f004 f957 	bl	8005a08 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200043f4 	.word	0x200043f4

08001764 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA2_Stream0_IRQHandler+0x10>)
 800176a:	f001 fb1d 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000210 	.word	0x20000210

08001778 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA2_Stream1_IRQHandler+0x10>)
 800177e:	f001 fb13 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20004390 	.word	0x20004390

0800178c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA2_Stream3_IRQHandler+0x10>)
 8001792:	f001 fb09 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200044d8 	.word	0x200044d8

080017a0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA2_Stream5_IRQHandler+0x10>)
 80017a6:	f001 faff 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000270 	.word	0x20000270

080017b4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA2_Stream6_IRQHandler+0x10>)
 80017ba:	f001 faf5 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20004478 	.word	0x20004478

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f009 fed4 	bl	800b5a4 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20080000 	.word	0x20080000
 8001828:	00000800 	.word	0x00000800
 800182c:	20004538 	.word	0x20004538
 8001830:	20052f08 	.word	0x20052f08

08001834 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_UART4_Init+0x58>)
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_UART4_Init+0x5c>)
 8001860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_UART4_Init+0x58>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_UART4_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_UART4_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_UART4_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_UART4_Init+0x58>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_UART4_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_UART4_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_UART4_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_UART4_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_UART4_Init+0x58>)
 800189c:	f005 f95f 	bl	8006b5e <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80018a6:	f7ff fc37 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000453c 	.word	0x2000453c
 80018b4:	40004c00 	.word	0x40004c00

080018b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0ae      	sub	sp, #184	; 0xb8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2290      	movs	r2, #144	; 0x90
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f009 fe9b 	bl	800b614 <memset>
  if(uartHandle->Instance==UART4)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_UART_MspInit+0xf4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d15d      	bne.n	80019a4 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fba6 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001902:	f7ff fc09 	bl	8001118 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 800190c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_UART_MspInit+0xf8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800194e:	2301      	movs	r3, #1
 8001950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001966:	2308      	movs	r3, #8
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001970:	4619      	mov	r1, r3
 8001972:	4810      	ldr	r0, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0xfc>)
 8001974:	f001 fc8e 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001992:	2306      	movs	r3, #6
 8001994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_UART_MspInit+0x100>)
 80019a0:	f001 fc78 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80019a4:	bf00      	nop
 80019a6:	37b8      	adds	r7, #184	; 0xb8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40004c00 	.word	0x40004c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40020000 	.word	0x40020000

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d8:	4c0b      	ldr	r4, [pc, #44]	; (8001a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019e6:	f7ff ff25 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f009 fde1 	bl	800b5b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fa4d 	bl	8000e8c <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a00:	0800c08c 	.word	0x0800c08c
  ldr r2, =_sbss
 8001a04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a08:	20052f08 	.word	0x20052f08

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>

08001a0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a12:	2003      	movs	r0, #3
 8001a14:	f000 fbe0 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a18:	200f      	movs	r0, #15
 8001a1a:	f000 f805 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1e:	f7ff fe41 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fbfb 	bl	8002242 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	f000 fbc3 	bl	80021ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	200045c4 	.word	0x200045c4

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200045c4 	.word	0x200045c4

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e031      	b.n	8001b8a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fdac 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_ADC_Init+0x84>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f970 	bl	8001e44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7a:	e001      	b.n	8001b80 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	ffffeefd 	.word	0xffffeefd

08001b98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1c>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e136      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x28a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d93a      	bls.n	8001c3a <HAL_ADC_ConfigChannel+0xa2>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bcc:	d035      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68d9      	ldr	r1, [r3, #12]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	3b1e      	subs	r3, #30
 8001be4:	2207      	movs	r2, #7
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a8d      	ldr	r2, [pc, #564]	; (8001e30 <HAL_ADC_ConfigChannel+0x298>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68d9      	ldr	r1, [r3, #12]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	061a      	lsls	r2, r3, #24
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	e035      	b.n	8001c80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68d9      	ldr	r1, [r3, #12]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4403      	add	r3, r0
 8001c2c:	3b1e      	subs	r3, #30
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c38:	e022      	b.n	8001c80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6919      	ldr	r1, [r3, #16]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2207      	movs	r2, #7
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43da      	mvns	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6919      	ldr	r1, [r3, #16]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4403      	add	r3, r0
 8001c76:	409a      	lsls	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d824      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b05      	subs	r3, #5
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd0:	e04c      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d824      	bhi.n	8001d24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b23      	subs	r3, #35	; 0x23
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b23      	subs	r3, #35	; 0x23
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
 8001d22:	e023      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b41      	subs	r3, #65	; 0x41
 8001d36:	221f      	movs	r2, #31
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	400a      	ands	r2, r1
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b41      	subs	r3, #65	; 0x41
 8001d60:	fa00 f203 	lsl.w	r2, r0, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_ADC_ConfigChannel+0x29c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10a      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x1f4>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_ADC_ConfigChannel+0x29c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10f      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d10b      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001da8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001db4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_ADC_ConfigChannel+0x29c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d12b      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x280>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_ADC_ConfigChannel+0x298>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x23a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b11      	cmp	r3, #17
 8001dd0:	d122      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dd8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ddc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8001de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_ADC_ConfigChannel+0x298>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d111      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_ADC_ConfigChannel+0x2a4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_ADC_ConfigChannel+0x2a8>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9a      	lsrs	r2, r3, #18
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e0a:	e002      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	10000012 	.word	0x10000012
 8001e34:	40012000 	.word	0x40012000
 8001e38:	40012300 	.word	0x40012300
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	431bde83 	.word	0x431bde83

08001e44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e4c:	4b78      	ldr	r3, [pc, #480]	; (8002030 <ADC_Init+0x1ec>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a77      	ldr	r2, [pc, #476]	; (8002030 <ADC_Init+0x1ec>)
 8001e52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e58:	4b75      	ldr	r3, [pc, #468]	; (8002030 <ADC_Init+0x1ec>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4973      	ldr	r1, [pc, #460]	; (8002030 <ADC_Init+0x1ec>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	021a      	lsls	r2, r3, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	4a58      	ldr	r2, [pc, #352]	; (8002034 <ADC_Init+0x1f0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d022      	beq.n	8001f1e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e00f      	b.n	8001f3e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0202 	bic.w	r2, r2, #2
 8001f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	005a      	lsls	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	3b01      	subs	r3, #1
 8001f98:	035a      	lsls	r2, r3, #13
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	e007      	b.n	8001fb4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	051a      	lsls	r2, r3, #20
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6899      	ldr	r1, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff6:	025a      	lsls	r2, r3, #9
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	029a      	lsls	r2, r3, #10
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40012300 	.word	0x40012300
 8002034:	0f000001 	.word	0x0f000001

08002038 <__NVIC_SetPriorityGrouping>:
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <__NVIC_SetPriorityGrouping+0x40>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	4313      	orrs	r3, r2
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x40>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00
 800207c:	05fa0000 	.word	0x05fa0000

08002080 <__NVIC_GetPriorityGrouping>:
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e054      	b.n	8002318 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7f5b      	ldrb	r3, [r3, #29]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fa46 	bl	8000710 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	791b      	ldrb	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_CRC_Init+0xc4>)
 8002298:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0218 	bic.w	r2, r2, #24
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e00c      	b.n	80022c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	461a      	mov	r2, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f834 	bl	8002324 <HAL_CRCEx_Polynomial_Set>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e028      	b.n	8002318 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	795b      	ldrb	r3, [r3, #5]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	e004      	b.n	80022e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6912      	ldr	r2, [r2, #16]
 80022e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	04c11db7 	.word	0x04c11db7

08002324 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002334:	231f      	movs	r3, #31
 8002336:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002338:	bf00      	nop
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	613a      	str	r2, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d009      	beq.n	8002358 <HAL_CRCEx_Polynomial_Set+0x34>
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b18      	cmp	r3, #24
 800235c:	d846      	bhi.n	80023ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	080023f3 	.word	0x080023f3
 8002368:	080023ed 	.word	0x080023ed
 800236c:	080023ed 	.word	0x080023ed
 8002370:	080023ed 	.word	0x080023ed
 8002374:	080023ed 	.word	0x080023ed
 8002378:	080023ed 	.word	0x080023ed
 800237c:	080023ed 	.word	0x080023ed
 8002380:	080023ed 	.word	0x080023ed
 8002384:	080023e1 	.word	0x080023e1
 8002388:	080023ed 	.word	0x080023ed
 800238c:	080023ed 	.word	0x080023ed
 8002390:	080023ed 	.word	0x080023ed
 8002394:	080023ed 	.word	0x080023ed
 8002398:	080023ed 	.word	0x080023ed
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	080023ed 	.word	0x080023ed
 80023a4:	080023d5 	.word	0x080023d5
 80023a8:	080023ed 	.word	0x080023ed
 80023ac:	080023ed 	.word	0x080023ed
 80023b0:	080023ed 	.word	0x080023ed
 80023b4:	080023ed 	.word	0x080023ed
 80023b8:	080023ed 	.word	0x080023ed
 80023bc:	080023ed 	.word	0x080023ed
 80023c0:	080023ed 	.word	0x080023ed
 80023c4:	080023c9 	.word	0x080023c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d913      	bls.n	80023f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023d2:	e010      	b.n	80023f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b07      	cmp	r3, #7
 80023d8:	d90f      	bls.n	80023fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023de:	e00c      	b.n	80023fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	d90b      	bls.n	80023fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023ea:	e008      	b.n	80023fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
      break;
 80023f0:	e006      	b.n	8002400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023f2:	bf00      	nop
 80023f4:	e004      	b.n	8002400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023f6:	bf00      	nop
 80023f8:	e002      	b.n	8002400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023fa:	bf00      	nop
 80023fc:	e000      	b.n	8002400 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 0118 	bic.w	r1, r3, #24
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0ac      	b.n	800259c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fadc 	bl	8002a04 <DFSDM_GetChannelFromInstance>
 800244c:	4603      	mov	r3, r0
 800244e:	4a55      	ldr	r2, [pc, #340]	; (80025a4 <HAL_DFSDM_ChannelInit+0x174>)
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e09f      	b.n	800259c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe fb3b 	bl	8000ad8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002462:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <HAL_DFSDM_ChannelInit+0x178>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <HAL_DFSDM_ChannelInit+0x178>)
 800246a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 800246c:	4b4e      	ldr	r3, [pc, #312]	; (80025a8 <HAL_DFSDM_ChannelInit+0x178>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d125      	bne.n	80024c0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002474:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4c      	ldr	r2, [pc, #304]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 800247a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800247e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002480:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4948      	ldr	r1, [pc, #288]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a46      	ldr	r2, [pc, #280]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002494:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002498:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	791b      	ldrb	r3, [r3, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80024a2:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	493f      	ldr	r1, [pc, #252]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <HAL_DFSDM_ChannelInit+0x17c>)
 80024ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024be:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80024ce:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80024de:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80024e4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 020f 	bic.w	r2, r2, #15
 80024fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002524:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 0207 	and.w	r2, r2, #7
 8002550:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa3a 	bl	8002a04 <DFSDM_GetChannelFromInstance>
 8002590:	4602      	mov	r2, r0
 8002592:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_DFSDM_ChannelInit+0x174>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200045cc 	.word	0x200045cc
 80025a8:	200045c8 	.word	0x200045c8
 80025ac:	40017400 	.word	0x40017400

080025b0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0c6      	b.n	8002750 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_DFSDM_FilterInit+0x1a8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d109      	bne.n	80025e0 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d003      	beq.n	80025dc <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b7      	b.n	8002750 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe f985 	bl	8000908 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800260c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7a1b      	ldrb	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002636:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7a5b      	ldrb	r3, [r3, #9]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e007      	b.n	8002662 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_DFSDM_FilterInit+0x1ac>)
 800266e:	400b      	ands	r3, r1
 8002670:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d108      	bne.n	800268c <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7c1b      	ldrb	r3, [r3, #16]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0210 	orr.w	r2, r2, #16
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0210 	bic.w	r2, r2, #16
 80026b4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7c5b      	ldrb	r3, [r3, #17]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0220 	bic.w	r2, r2, #32
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6959      	ldr	r1, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_DFSDM_FilterInit+0x1b0>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6959      	ldr	r1, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	3b01      	subs	r3, #1
 8002700:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002702:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800270a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7c1a      	ldrb	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40017500 	.word	0x40017500
 800275c:	ffff80f7 	.word	0xffff80f7
 8002760:	1c00ff00 	.word	0x1c00ff00

08002764 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02c      	beq.n	80027d8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002784:	2bff      	cmp	r3, #255	; 0xff
 8002786:	d027      	beq.n	80027d8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002794:	400b      	ands	r3, r1
 8002796:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10d      	bne.n	80027ba <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e00a      	b.n	80027d0 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
 80027d6:	e001      	b.n	80027dc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	f8fbffff 	.word	0xf8fbffff

080027f0 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800280e:	2bff      	cmp	r3, #255	; 0xff
 8002810:	d016      	beq.n	8002840 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	b292      	uxth	r2, r2
 800281a:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f000 f8d2 	bl	80029c6 <DFSDM_GetInjChannelsNbr>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	e000      	b.n	800283a <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8002838:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6493      	str	r3, [r2, #72]	; 0x48
 800283e:	e001      	b.n	8002844 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
 8002870:	e066      	b.n	8002940 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002880:	d002      	beq.n	8002888 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
 8002886:	e05b      	b.n	8002940 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
 80028ac:	e048      	b.n	8002940 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c8:	d102      	bne.n	80028d0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
 80028ce:	e037      	b.n	8002940 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d004      	beq.n	80028e4 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d12b      	bne.n	800293c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80028f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fe:	d101      	bne.n	8002904 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8002902:	e000      	b.n	8002906 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8002904:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	331c      	adds	r3, #28
 8002916:	4619      	mov	r1, r3
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f000 f9c2 	bl	8002ca4 <HAL_DMA_Start_IT>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	22ff      	movs	r2, #255	; 0xff
 800292a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002932:	e005      	b.n	8002940 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f8b1 	bl	8002a9c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800293a:	e001      	b.n	8002940 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002940:	7dfb      	ldrb	r3, [r7, #23]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	08002989 	.word	0x08002989
 8002950:	080029a5 	.word	0x080029a5
 8002954:	0800296d 	.word	0x0800296d

08002958 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f008 fb18 	bl	800afb0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f008 fb26 	bl	800afe8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2203      	movs	r2, #3
 80029b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff ffcd 	bl	8002958 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80029d8:	e00a      	b.n	80029f0 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f1      	bne.n	80029da <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e02b      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <DFSDM_GetChannelFromInstance+0x80>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d102      	bne.n	8002a28 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e024      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <DFSDM_GetChannelFromInstance+0x84>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d102      	bne.n	8002a36 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a30:	2302      	movs	r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e01d      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <DFSDM_GetChannelFromInstance+0x88>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d102      	bne.n	8002a44 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e016      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e00f      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <DFSDM_GetChannelFromInstance+0x90>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d102      	bne.n	8002a60 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e008      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <DFSDM_GetChannelFromInstance+0x94>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002a68:	2306      	movs	r3, #6
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e001      	b.n	8002a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002a6e:	2307      	movs	r3, #7
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40017400 	.word	0x40017400
 8002a84:	40017420 	.word	0x40017420
 8002a88:	40017440 	.word	0x40017440
 8002a8c:	40017460 	.word	0x40017460
 8002a90:	40017480 	.word	0x40017480
 8002a94:	400174a0 	.word	0x400174a0
 8002a98:	400174c0 	.word	0x400174c0

08002a9c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e033      	b.n	8002b26 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002adc:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d116      	bne.n	8002b26 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0202 	orr.w	r2, r2, #2
 8002b0e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <DFSDM_RegConvStart+0x84>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	e000      	b.n	8002b22 <DFSDM_RegConvStart+0x86>
 8002b20:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <DFSDM_RegConvStart+0x98>
 8002b30:	2202      	movs	r2, #2
 8002b32:	e000      	b.n	8002b36 <DFSDM_RegConvStart+0x9a>
 8002b34:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7fe ffac 	bl	8001ab0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e099      	b.n	8002c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b84:	e00f      	b.n	8002ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b86:	f7fe ff93 	bl	8001ab0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d908      	bls.n	8002ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e078      	b.n	8002c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e8      	bne.n	8002b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_DMA_Init+0x158>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0307 	bic.w	r3, r3, #7
 8002c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d117      	bne.n	8002c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 faa5 	bl	800319c <DMA_CheckFifoParam>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c66:	2301      	movs	r3, #1
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa5c 	bl	8003130 <DMA_CalcBaseAndBitshift>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	223f      	movs	r2, #63	; 0x3f
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	e010803f 	.word	0xe010803f

08002ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Start_IT+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e048      	b.n	8002d5c <HAL_DMA_Start_IT+0xb8>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d137      	bne.n	8002d4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f9ee 	bl	80030d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	223f      	movs	r2, #63	; 0x3f
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0216 	orr.w	r2, r2, #22
 8002d12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d22:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0208 	orr.w	r2, r2, #8
 8002d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e005      	b.n	8002d5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00c      	b.n	8002d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002db4:	4b8e      	ldr	r3, [pc, #568]	; (8002ff0 <HAL_DMA_IRQHandler+0x248>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8e      	ldr	r2, [pc, #568]	; (8002ff4 <HAL_DMA_IRQHandler+0x24c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a9b      	lsrs	r3, r3, #10
 8002dc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2208      	movs	r2, #8
 8002e02:	409a      	lsls	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	f043 0202 	orr.w	r2, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d012      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	2210      	movs	r2, #16
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d043      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03c      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d024      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
 8002ed6:	e01f      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	e016      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0208 	bic.w	r2, r2, #8
 8002f06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 808f 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8087 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2220      	movs	r2, #32
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d136      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0216 	bic.w	r2, r2, #22
 8002f60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_DMA_IRQHandler+0x1da>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0208 	bic.w	r2, r2, #8
 8002f90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	223f      	movs	r2, #63	; 0x3f
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07e      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
        }
        return;
 8002fbe:	e079      	b.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d031      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	e02c      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e01e      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0210 	bic.w	r2, r2, #16
 8003026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2205      	movs	r2, #5
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3301      	adds	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d307      	bcc.n	8003090 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f2      	bne.n	8003074 <HAL_DMA_IRQHandler+0x2cc>
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003090:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030b4:	bf00      	nop
    }
  }
}
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d108      	bne.n	8003114 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003112:	e007      	b.n	8003124 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3b10      	subs	r3, #16
 8003140:	4a13      	ldr	r2, [pc, #76]	; (8003190 <DMA_CalcBaseAndBitshift+0x60>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <DMA_CalcBaseAndBitshift+0x64>)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d908      	bls.n	8003170 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <DMA_CalcBaseAndBitshift+0x68>)
 8003166:	4013      	ands	r3, r2
 8003168:	1d1a      	adds	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	659a      	str	r2, [r3, #88]	; 0x58
 800316e:	e006      	b.n	800317e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <DMA_CalcBaseAndBitshift+0x68>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	aaaaaaab 	.word	0xaaaaaaab
 8003194:	0800bf8c 	.word	0x0800bf8c
 8003198:	fffffc00 	.word	0xfffffc00

0800319c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11f      	bne.n	80031f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d856      	bhi.n	800326a <DMA_CheckFifoParam+0xce>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x28>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031e7 	.word	0x080031e7
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	0800326b 	.word	0x0800326b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d046      	beq.n	800326e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e4:	e043      	b.n	800326e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ee:	d140      	bne.n	8003272 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f4:	e03d      	b.n	8003272 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	d121      	bne.n	8003244 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d837      	bhi.n	8003276 <DMA_CheckFifoParam+0xda>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <DMA_CheckFifoParam+0x70>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800321d 	.word	0x0800321d
 8003210:	08003223 	.word	0x08003223
 8003214:	0800321d 	.word	0x0800321d
 8003218:	08003235 	.word	0x08003235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e030      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d025      	beq.n	800327a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003232:	e022      	b.n	800327a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800323c:	d11f      	bne.n	800327e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003242:	e01c      	b.n	800327e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d903      	bls.n	8003252 <DMA_CheckFifoParam+0xb6>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d003      	beq.n	8003258 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003250:	e018      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      break;
 8003256:	e015      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e00b      	b.n	8003282 <DMA_CheckFifoParam+0xe6>
      break;
 800326a:	bf00      	nop
 800326c:	e00a      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 800326e:	bf00      	nop
 8003270:	e008      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 8003272:	bf00      	nop
 8003274:	e006      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;   
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
    }
  } 
  
  return status; 
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e175      	b.n	80035a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032b4:	2201      	movs	r2, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	f040 8164 	bne.w	800359a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d005      	beq.n	80032ea <HAL_GPIO_Init+0x56>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d130      	bne.n	800334c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 0201 	and.w	r2, r3, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d017      	beq.n	8003388 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d123      	bne.n	80033dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	69b9      	ldr	r1, [r7, #24]
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80be 	beq.w	800359a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <HAL_GPIO_Init+0x324>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_GPIO_Init+0x324>)
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <HAL_GPIO_Init+0x324>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003436:	4a61      	ldr	r2, [pc, #388]	; (80035bc <HAL_GPIO_Init+0x328>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_GPIO_Init+0x32c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d037      	beq.n	80034d2 <HAL_GPIO_Init+0x23e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <HAL_GPIO_Init+0x330>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_GPIO_Init+0x23a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a56      	ldr	r2, [pc, #344]	; (80035c8 <HAL_GPIO_Init+0x334>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <HAL_GPIO_Init+0x236>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a55      	ldr	r2, [pc, #340]	; (80035cc <HAL_GPIO_Init+0x338>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d025      	beq.n	80034c6 <HAL_GPIO_Init+0x232>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a54      	ldr	r2, [pc, #336]	; (80035d0 <HAL_GPIO_Init+0x33c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01f      	beq.n	80034c2 <HAL_GPIO_Init+0x22e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a53      	ldr	r2, [pc, #332]	; (80035d4 <HAL_GPIO_Init+0x340>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x22a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_GPIO_Init+0x344>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x226>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a51      	ldr	r2, [pc, #324]	; (80035dc <HAL_GPIO_Init+0x348>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x222>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a50      	ldr	r2, [pc, #320]	; (80035e0 <HAL_GPIO_Init+0x34c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x21e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4f      	ldr	r2, [pc, #316]	; (80035e4 <HAL_GPIO_Init+0x350>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x21a>
 80034aa:	2309      	movs	r3, #9
 80034ac:	e012      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034ae:	230a      	movs	r3, #10
 80034b0:	e010      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034b2:	2308      	movs	r3, #8
 80034b4:	e00e      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034b6:	2307      	movs	r3, #7
 80034b8:	e00c      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034ba:	2306      	movs	r3, #6
 80034bc:	e00a      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034be:	2305      	movs	r3, #5
 80034c0:	e008      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034c2:	2304      	movs	r3, #4
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e004      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_GPIO_Init+0x240>
 80034d2:	2300      	movs	r3, #0
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f002 0203 	and.w	r2, r2, #3
 80034da:	0092      	lsls	r2, r2, #2
 80034dc:	4093      	lsls	r3, r2
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034e4:	4935      	ldr	r1, [pc, #212]	; (80035bc <HAL_GPIO_Init+0x328>)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_GPIO_Init+0x354>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <HAL_GPIO_Init+0x354>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_GPIO_Init+0x354>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003540:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <HAL_GPIO_Init+0x354>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_GPIO_Init+0x354>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800356a:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <HAL_GPIO_Init+0x354>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_GPIO_Init+0x354>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_GPIO_Init+0x354>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	f67f ae86 	bls.w	80032b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40013800 	.word	0x40013800
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020800 	.word	0x40020800
 80035cc:	40020c00 	.word	0x40020c00
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40021400 	.word	0x40021400
 80035d8:	40021800 	.word	0x40021800
 80035dc:	40021c00 	.word	0x40021c00
 80035e0:	40022000 	.word	0x40022000
 80035e4:	40022400 	.word	0x40022400
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e001      	b.n	800360e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
 8003628:	4613      	mov	r3, r2
 800362a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003638:	e003      	b.n	8003642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	041a      	lsls	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	619a      	str	r2, [r3, #24]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	4618      	mov	r0, r3
 8003670:	f007 fe24 	bl	800b2bc <HAL_GPIO_EXTI_Callback>
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4b23      	ldr	r3, [pc, #140]	; (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ae:	f7fe f9ff 	bl	8001ab0 <HAL_GetTick>
 80036b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b4:	e009      	b.n	80036ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b6:	f7fe f9fb 	bl	8001ab0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c4:	d901      	bls.n	80036ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e022      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d1ee      	bne.n	80036b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0f      	ldr	r2, [pc, #60]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e4:	f7fe f9e4 	bl	8001ab0 <HAL_GetTick>
 80036e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ea:	e009      	b.n	8003700 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036ec:	f7fe f9e0 	bl	8001ab0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fa:	d901      	bls.n	8003700 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e007      	b.n	8003710 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800370c:	d1ee      	bne.n	80036ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000

08003720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e29b      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003744:	4b96      	ldr	r3, [pc, #600]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00c      	beq.n	800376a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003750:	4b93      	ldr	r3, [pc, #588]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_OscConfig+0x62>
 800375c:	4b90      	ldr	r3, [pc, #576]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	4b8d      	ldr	r3, [pc, #564]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d06c      	beq.n	8003850 <HAL_RCC_OscConfig+0x130>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d168      	bne.n	8003850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e275      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x7a>
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a83      	ldr	r2, [pc, #524]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	e02e      	b.n	80037f8 <HAL_RCC_OscConfig+0xd8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x9c>
 80037a2:	4b7f      	ldr	r3, [pc, #508]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7e      	ldr	r2, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7b      	ldr	r2, [pc, #492]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xd8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xd8>
 80037e0:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6b      	ldr	r2, [pc, #428]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe f956 	bl	8001ab0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe f952 	bl	8001ab0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e229      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe f942 	bl	8001ab0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe f93e 	bl	8001ab0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e215      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x110>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d069      	beq.n	8003932 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b4d      	ldr	r3, [pc, #308]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x190>
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x17a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1e9      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	493d      	ldr	r1, [pc, #244]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e040      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d023      	beq.n	8003900 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a38      	ldr	r2, [pc, #224]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe f8f4 	bl	8001ab0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe f8f0 	bl	8001ab0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4929      	ldr	r1, [pc, #164]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
 80038fe:	e018      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe f8d0 	bl	8001ab0 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fe f8cc 	bl	8001ab0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1a3      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d038      	beq.n	80039b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe f8ad 	bl	8001ab0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe f8a9 	bl	8001ab0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e180      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x23a>
 8003978:	e01a      	b.n	80039b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_RCC_OscConfig+0x280>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe f893 	bl	8001ab0 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe f88f 	bl	8001ab0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d903      	bls.n	80039a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e166      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
 80039a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	4b92      	ldr	r3, [pc, #584]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ee      	bne.n	800398e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a4 	beq.w	8003b06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039be:	4b8c      	ldr	r3, [pc, #560]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	4a88      	ldr	r2, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40
 80039d6:	4b86      	ldr	r3, [pc, #536]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e2:	2301      	movs	r3, #1
 80039e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e6:	4b83      	ldr	r3, [pc, #524]	; (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039f2:	4b80      	ldr	r3, [pc, #512]	; (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7f      	ldr	r2, [pc, #508]	; (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fe:	f7fe f857 	bl	8001ab0 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a06:	f7fe f853 	bl	8001ab0 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	; 0x64
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e12a      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x4d4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x31a>
 8003a2c:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	e02d      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x33c>
 8003a42:	4b6b      	ldr	r3, [pc, #428]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a6a      	ldr	r2, [pc, #424]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	4b68      	ldr	r3, [pc, #416]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a67      	ldr	r2, [pc, #412]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5a:	e01c      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCC_OscConfig+0x35e>
 8003a64:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a61      	ldr	r2, [pc, #388]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a5e      	ldr	r2, [pc, #376]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a5b      	ldr	r2, [pc, #364]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d015      	beq.n	8003aca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe f807 	bl	8001ab0 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe f803 	bl	8001ab0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0d8      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ee      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x386>
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd fff1 	bl	8001ab0 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd ffed 	bl	8001ab0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0c2      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80ae 	beq.w	8003c6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d06d      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d14b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b24:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a31      	ldr	r2, [pc, #196]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd ffbe 	bl	8001ab0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd ffba 	bl	8001ab0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e091      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	491b      	ldr	r1, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd ff8c 	bl	8001ab0 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd ff88 	bl	8001ab0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e05f      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x47c>
 8003bba:	e057      	b.n	8003c6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd ff72 	bl	8001ab0 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd ff6e 	bl	8001ab0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4b0>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x54c>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCC_OscConfig+0x558>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d030      	beq.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d129      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d122      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d119      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	3b01      	subs	r3, #1
 8003c42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d0      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 020f 	bic.w	r2, r3, #15
 8003caa:	4965      	ldr	r1, [pc, #404]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b8      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494d      	ldr	r1, [pc, #308]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d040      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e073      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4936      	ldr	r1, [pc, #216]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fd fe9e 	bl	8001ab0 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fd fe9a 	bl	8001ab0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e053      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	4922      	ldr	r1, [pc, #136]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4916      	ldr	r1, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490e      	ldr	r1, [pc, #56]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x1cc>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1d0>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fd fdfa 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023c00 	.word	0x40023c00
 8003e44:	40023800 	.word	0x40023800
 8003e48:	0800bf74 	.word	0x0800bf74
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	20000004 	.word	0x20000004

08003e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b090      	sub	sp, #64	; 0x40
 8003e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e60:	2300      	movs	r3, #0
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e64:	2300      	movs	r3, #0
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e6c:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x40>
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	f200 80a1 	bhi.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x34>
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e86:	e09b      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e8c:	e09b      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8e:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e92:	e098      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e94:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e9e:	4b4d      	ldr	r3, [pc, #308]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec0:	fb03 f201 	mul.w	r2, r3, r1
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	fb00 f303 	mul.w	r3, r0, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	4a43      	ldr	r2, [pc, #268]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ece:	fba0 1202 	umull	r1, r2, r0, r2
 8003ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eda:	4413      	add	r3, r2
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003eee:	f7fc f9f7 	bl	80002e0 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efa:	e053      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4b35      	ldr	r3, [pc, #212]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	2200      	movs	r2, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	617a      	str	r2, [r7, #20]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f0e:	f04f 0b00 	mov.w	fp, #0
 8003f12:	4652      	mov	r2, sl
 8003f14:	465b      	mov	r3, fp
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	0159      	lsls	r1, r3, #5
 8003f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f24:	0150      	lsls	r0, r2, #5
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f46:	ebb2 0408 	subs.w	r4, r2, r8
 8003f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	00eb      	lsls	r3, r5, #3
 8003f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5c:	00e2      	lsls	r2, r4, #3
 8003f5e:	4614      	mov	r4, r2
 8003f60:	461d      	mov	r5, r3
 8003f62:	eb14 030a 	adds.w	r3, r4, sl
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	eb45 030b 	adc.w	r3, r5, fp
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	028b      	lsls	r3, r1, #10
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f84:	4621      	mov	r1, r4
 8003f86:	028a      	lsls	r2, r1, #10
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	60fa      	str	r2, [r7, #12]
 8003f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f98:	f7fc f9a2 	bl	80002e0 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3740      	adds	r7, #64	; 0x40
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	017d7840 	.word	0x017d7840

08003fe0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	0800bf84 	.word	0x0800bf84

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0b5b      	lsrs	r3, r3, #13
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	0800bf84 	.word	0x0800bf84

08004048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d012      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004070:	4b69      	ldr	r3, [pc, #420]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a68      	ldr	r2, [pc, #416]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800407a:	6093      	str	r3, [r2, #8]
 800407c:	4b66      	ldr	r3, [pc, #408]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	4964      	ldr	r1, [pc, #400]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d017      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a2:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	4959      	ldr	r1, [pc, #356]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d017      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040de:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	494a      	ldr	r1, [pc, #296]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040fc:	d101      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 808b 	beq.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	4a39      	ldr	r2, [pc, #228]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004136:	6413      	str	r3, [r2, #64]	; 0x40
 8004138:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004144:	4b35      	ldr	r3, [pc, #212]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a34      	ldr	r2, [pc, #208]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fd fcae 	bl	8001ab0 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004158:	f7fd fcaa 	bl	8001ab0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e38f      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004176:	4b28      	ldr	r3, [pc, #160]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d035      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d02e      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d114      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd fc72 	bl	8001ab0 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd fc6e 	bl	8001ab0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e351      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ee      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041fe:	d111      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800420e:	400b      	ands	r3, r1
 8004210:	4901      	ldr	r1, [pc, #4]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
 8004216:	e00b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004218:	40023800 	.word	0x40023800
 800421c:	40007000 	.word	0x40007000
 8004220:	0ffffcff 	.word	0x0ffffcff
 8004224:	4bac      	ldr	r3, [pc, #688]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4aab      	ldr	r2, [pc, #684]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800422e:	6093      	str	r3, [r2, #8]
 8004230:	4ba9      	ldr	r3, [pc, #676]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423c:	49a6      	ldr	r1, [pc, #664]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	4313      	orrs	r3, r2
 8004240:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800424e:	4ba2      	ldr	r3, [pc, #648]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	4aa0      	ldr	r2, [pc, #640]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800425e:	4b9e      	ldr	r3, [pc, #632]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004260:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	499b      	ldr	r1, [pc, #620]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427c:	4b96      	ldr	r3, [pc, #600]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428a:	4993      	ldr	r1, [pc, #588]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429e:	4b8e      	ldr	r3, [pc, #568]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ac:	498a      	ldr	r1, [pc, #552]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c0:	4b85      	ldr	r3, [pc, #532]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ce:	4982      	ldr	r1, [pc, #520]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e2:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4979      	ldr	r1, [pc, #484]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004304:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	4971      	ldr	r1, [pc, #452]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004326:	4b6c      	ldr	r3, [pc, #432]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f023 020c 	bic.w	r2, r3, #12
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004334:	4968      	ldr	r1, [pc, #416]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004348:	4b63      	ldr	r3, [pc, #396]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	4960      	ldr	r1, [pc, #384]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800436a:	4b5b      	ldr	r3, [pc, #364]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004370:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	4957      	ldr	r1, [pc, #348]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800438c:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	494f      	ldr	r1, [pc, #316]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043ae:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4946      	ldr	r1, [pc, #280]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043d0:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	493e      	ldr	r1, [pc, #248]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043f2:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	4935      	ldr	r1, [pc, #212]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004422:	492d      	ldr	r1, [pc, #180]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d011      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004444:	4924      	ldr	r1, [pc, #144]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004454:	d101      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004456:	2301      	movs	r3, #1
 8004458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004476:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	4914      	ldr	r1, [pc, #80]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a8:	490b      	ldr	r1, [pc, #44]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00f      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	4902      	ldr	r1, [pc, #8]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e8:	4b8a      	ldr	r3, [pc, #552]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	4986      	ldr	r1, [pc, #536]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800450e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004512:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451c:	497d      	ldr	r1, [pc, #500]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d006      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80d6 	beq.w	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004538:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004544:	f7fd fab4 	bl	8001ab0 <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800454c:	f7fd fab0 	bl	8001ab0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e195      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800455e:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d021      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11d      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800458c:	4b61      	ldr	r3, [pc, #388]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	0e1b      	lsrs	r3, r3, #24
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	4958      	ldr	r1, [pc, #352]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e4:	d129      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045e6:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045f4:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	0f1b      	lsrs	r3, r3, #28
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	019a      	lsls	r2, r3, #6
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	061b      	lsls	r3, r3, #24
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	493e      	ldr	r1, [pc, #248]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004622:	4b3c      	ldr	r3, [pc, #240]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004628:	f023 021f 	bic.w	r2, r3, #31
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	3b01      	subs	r3, #1
 8004632:	4938      	ldr	r1, [pc, #224]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004646:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464c:	0e1b      	lsrs	r3, r3, #24
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	0f1b      	lsrs	r3, r3, #28
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	019a      	lsls	r2, r3, #6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	061b      	lsls	r3, r3, #24
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	071b      	lsls	r3, r3, #28
 800467a:	4926      	ldr	r1, [pc, #152]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	019a      	lsls	r2, r3, #6
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	491a      	ldr	r1, [pc, #104]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b2:	4b18      	ldr	r3, [pc, #96]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a17      	ldr	r2, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046be:	f7fd f9f7 	bl	8001ab0 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fd f9f3 	bl	8001ab0 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	; 0x64
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0d8      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	f040 80ce 	bne.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd f9da 	bl	8001ab0 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046fe:	e00b      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004700:	f7fd f9d6 	bl	8001ab0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d904      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0bb      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004718:	4b5e      	ldr	r3, [pc, #376]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004724:	d0ec      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004742:	2b00      	cmp	r3, #0
 8004744:	d02e      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d12a      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800474e:	4b51      	ldr	r3, [pc, #324]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800475c:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	0f1b      	lsrs	r3, r3, #28
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	019a      	lsls	r2, r3, #6
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	4944      	ldr	r1, [pc, #272]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800478a:	4b42      	ldr	r3, [pc, #264]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	493d      	ldr	r1, [pc, #244]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d022      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b8:	d11d      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047c8:	4b32      	ldr	r3, [pc, #200]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	0f1b      	lsrs	r3, r3, #28
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4929      	ldr	r1, [pc, #164]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d028      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	019a      	lsls	r2, r3, #6
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	431a      	orrs	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	4917      	ldr	r1, [pc, #92]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4911      	ldr	r1, [pc, #68]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004860:	f7fd f926 	bl	8001ab0 <HAL_GetTick>
 8004864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004868:	f7fd f922 	bl	8001ab0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e007      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004886:	d1ef      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048b6:	f040 80a3 	bne.w	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80048ba:	4ba8      	ldr	r3, [pc, #672]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d0:	f000 808a 	beq.w	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048da:	f200 8093 	bhi.w	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e4:	d07d      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ec:	f200 808a 	bhi.w	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fc:	d039      	beq.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80048fe:	e081      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004900:	4b96      	ldr	r3, [pc, #600]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d108      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800490c:	4b93      	ldr	r3, [pc, #588]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004914:	4a92      	ldr	r2, [pc, #584]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e007      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800491e:	4b8f      	ldr	r3, [pc, #572]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004926:	4a8f      	ldr	r2, [pc, #572]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800492e:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	0e1b      	lsrs	r3, r3, #24
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800493c:	4b87      	ldr	r3, [pc, #540]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	fb03 f202 	mul.w	r2, r3, r2
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004956:	4b81      	ldr	r3, [pc, #516]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	617b      	str	r3, [r7, #20]
        break;
 8004970:	e049      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004972:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800497e:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004986:	4a76      	ldr	r2, [pc, #472]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e007      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004990:	4b72      	ldr	r3, [pc, #456]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004998:	4a72      	ldr	r2, [pc, #456]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80049a0:	4b6e      	ldr	r3, [pc, #440]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	0e1b      	lsrs	r3, r3, #24
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80049ae:	4b6b      	ldr	r3, [pc, #428]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	099b      	lsrs	r3, r3, #6
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	fb03 f202 	mul.w	r2, r3, r2
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80049c8:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e011      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80049e2:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80049e4:	617b      	str	r3, [r7, #20]
        break;
 80049e6:	e00e      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049e8:	4b5c      	ldr	r3, [pc, #368]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80049f4:	4b5a      	ldr	r3, [pc, #360]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80049f6:	617b      	str	r3, [r7, #20]
        break;
 80049f8:	e005      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80049fa:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049fc:	617b      	str	r3, [r7, #20]
        break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004a04:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0c:	f040 80a3 	bne.w	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004a10:	4b52      	ldr	r3, [pc, #328]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a16:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004a1e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a26:	f000 808a 	beq.w	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a30:	f200 809c 	bhi.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a3a:	d07d      	beq.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a42:	f200 8093 	bhi.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a52:	d039      	beq.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004a54:	e08a      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6a:	4a3d      	ldr	r2, [pc, #244]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e007      	b.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004a74:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7c:	4a39      	ldr	r2, [pc, #228]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	0e1b      	lsrs	r3, r3, #24
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004a92:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	099b      	lsrs	r3, r3, #6
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	fb03 f202 	mul.w	r2, r3, r2
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
        break;
 8004ac6:	e052      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d108      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004adc:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e007      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004af6:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004b04:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
        break;
 8004b36:	e01a      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004b3a:	617b      	str	r3, [r7, #20]
        break;
 8004b3c:	e017      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b4c:	617b      	str	r3, [r7, #20]
        break;
 8004b4e:	e00e      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b52:	617b      	str	r3, [r7, #20]
        break;
 8004b54:	e00b      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8004b56:	bf00      	nop
 8004b58:	e009      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	00f42400 	.word	0x00f42400
 8004b64:	017d7840 	.word	0x017d7840
 8004b68:	00bb8000 	.word	0x00bb8000
        break;
 8004b6c:	bf00      	nop

  return frequency;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e071      	b.n	8004c76 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7f5b      	ldrb	r3, [r3, #29]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fb18 	bl	80011d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d053      	beq.n	8004c64 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	22ca      	movs	r2, #202	; 0xca
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2253      	movs	r2, #83	; 0x53
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fa4d 	bl	800506c <RTC_EnterInitMode>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d12a      	bne.n	8004c32 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6899      	ldr	r1, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <HAL_RTC_Init+0x104>)
 8004be8:	400b      	ands	r3, r1
 8004bea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68d2      	ldr	r2, [r2, #12]
 8004c12:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6919      	ldr	r1, [r3, #16]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	041a      	lsls	r2, r3, #16
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa56 	bl	80050da <RTC_ExitInitMode>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d110      	bne.n	8004c5a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0208 	bic.w	r2, r2, #8
 8004c46:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
 8004c62:	e001      	b.n	8004c68 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	ff8fffbf 	.word	0xff8fffbf

08004c84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	7f1b      	ldrb	r3, [r3, #28]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RTC_SetTime+0x1c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e085      	b.n	8004dac <HAL_RTC_SetTime+0x128>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d126      	bne.n	8004d00 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa2a 	bl	8005124 <RTC_ByteToBcd2>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fa23 	bl	8005124 <RTC_ByteToBcd2>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ce2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	789b      	ldrb	r3, [r3, #2]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fa1b 	bl	8005124 <RTC_ByteToBcd2>
 8004cee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cf0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	78db      	ldrb	r3, [r3, #3]
 8004cf8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e018      	b.n	8004d32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2200      	movs	r2, #0
 8004d12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d20:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	78db      	ldrb	r3, [r3, #3]
 8004d2c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	22ca      	movs	r2, #202	; 0xca
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2253      	movs	r2, #83	; 0x53
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f992 	bl	800506c <RTC_EnterInitMode>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11e      	bne.n	8004d90 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <HAL_RTC_SetTime+0x130>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f9a7 	bl	80050da <RTC_ExitInitMode>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	22ff      	movs	r2, #255	; 0xff
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	771a      	strb	r2, [r3, #28]

  return status;
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd90      	pop	{r4, r7, pc}
 8004db4:	007f7f7f 	.word	0x007f7f7f

08004db8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <HAL_RTC_GetTime+0xb8>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	0d9b      	lsrs	r3, r3, #22
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d11a      	bne.n	8004e66 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f993 	bl	8005160 <RTC_Bcd2ToByte>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f98a 	bl	8005160 <RTC_Bcd2ToByte>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	789b      	ldrb	r3, [r3, #2]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f981 	bl	8005160 <RTC_Bcd2ToByte>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	461a      	mov	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	007f7f7f 	.word	0x007f7f7f

08004e74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	7f1b      	ldrb	r3, [r3, #28]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_RTC_SetDate+0x1c>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e06f      	b.n	8004f70 <HAL_RTC_SetDate+0xfc>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_RTC_SetDate+0x4c>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	f023 0310 	bic.w	r3, r3, #16
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	330a      	adds	r3, #10
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11c      	bne.n	8004f00 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f92a 	bl	8005124 <RTC_ByteToBcd2>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f923 	bl	8005124 <RTC_ByteToBcd2>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ee2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	789b      	ldrb	r3, [r3, #2]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f91b 	bl	8005124 <RTC_ByteToBcd2>
 8004eee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ef0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e00e      	b.n	8004f1e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	78db      	ldrb	r3, [r3, #3]
 8004f04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f0c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	22ca      	movs	r2, #202	; 0xca
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2253      	movs	r2, #83	; 0x53
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f89c 	bl	800506c <RTC_EnterInitMode>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	6979      	ldr	r1, [r7, #20]
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RTC_SetDate+0x104>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f8c5 	bl	80050da <RTC_ExitInitMode>
 8004f50:	4603      	mov	r3, r0
 8004f52:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	771a      	strb	r2, [r3, #28]

  return status;
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd90      	pop	{r4, r7, pc}
 8004f78:	00ffff3f 	.word	0x00ffff3f

08004f7c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <HAL_RTC_GetDate+0x9c>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	0b5b      	lsrs	r3, r3, #13
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d11a      	bne.n	800500c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f8c0 	bl	8005160 <RTC_Bcd2ToByte>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f8b7 	bl	8005160 <RTC_Bcd2ToByte>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	789b      	ldrb	r3, [r3, #2]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f8ae 	bl	8005160 <RTC_Bcd2ToByte>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	00ffff3f 	.word	0x00ffff3f

0800501c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005036:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005038:	f7fc fd3a 	bl	8001ab0 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800503e:	e009      	b.n	8005054 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005040:	f7fc fd36 	bl	8001ab0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800504e:	d901      	bls.n	8005054 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e007      	b.n	8005064 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0ee      	beq.n	8005040 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d122      	bne.n	80050d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005098:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509a:	f7fc fd09 	bl	8001ab0 <HAL_GetTick>
 800509e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80050a0:	e00c      	b.n	80050bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050a2:	f7fc fd05 	bl	8001ab0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b0:	d904      	bls.n	80050bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <RTC_EnterInitMode+0x64>
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d1e8      	bne.n	80050a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff89 	bl	800501c <HAL_RTC_WaitForSynchro>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2204      	movs	r2, #4
 8005114:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800511a:	7bfb      	ldrb	r3, [r7, #15]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005132:	e005      	b.n	8005140 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	3b0a      	subs	r3, #10
 800513e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	2b09      	cmp	r3, #9
 8005144:	d8f6      	bhi.n	8005134 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	b2da      	uxtb	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	4313      	orrs	r3, r2
 8005152:	b2db      	uxtb	r3, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	b2db      	uxtb	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4413      	add	r3, r2
 800518e:	b2db      	uxtb	r3, r3
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e156      	b.n	8005468 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fc f88e 	bl	80012f0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f95b 	bl	8005498 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d00c      	beq.n	8005204 <HAL_SAI_Init+0x68>
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d80d      	bhi.n	800520a <HAL_SAI_Init+0x6e>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SAI_Init+0x5c>
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d003      	beq.n	80051fe <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80051f6:	e008      	b.n	800520a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
      break;
 80051fc:	e006      	b.n	800520c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80051fe:	2310      	movs	r3, #16
 8005200:	61fb      	str	r3, [r7, #28]
      break;
 8005202:	e003      	b.n	800520c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005204:	2320      	movs	r3, #32
 8005206:	61fb      	str	r3, [r7, #28]
      break;
 8005208:	e000      	b.n	800520c <HAL_SAI_Init+0x70>
      break;
 800520a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d81e      	bhi.n	8005252 <HAL_SAI_Init+0xb6>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <HAL_SAI_Init+0x80>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	0800522d 	.word	0x0800522d
 8005220:	08005233 	.word	0x08005233
 8005224:	0800523b 	.word	0x0800523b
 8005228:	08005243 	.word	0x08005243
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005230:	e010      	b.n	8005254 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005236:	617b      	str	r3, [r7, #20]
    }
    break;
 8005238:	e00c      	b.n	8005254 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800523a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800523e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005240:	e008      	b.n	8005254 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005246:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005250:	e000      	b.n	8005254 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005252:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a85      	ldr	r2, [pc, #532]	; (8005470 <HAL_SAI_Init+0x2d4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_SAI_Init+0xcc>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a84      	ldr	r2, [pc, #528]	; (8005474 <HAL_SAI_Init+0x2d8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d103      	bne.n	8005270 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005268:	4a83      	ldr	r2, [pc, #524]	; (8005478 <HAL_SAI_Init+0x2dc>)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e002      	b.n	8005276 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005270:	4a82      	ldr	r2, [pc, #520]	; (800547c <HAL_SAI_Init+0x2e0>)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d04c      	beq.n	8005318 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a7a      	ldr	r2, [pc, #488]	; (8005470 <HAL_SAI_Init+0x2d4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_SAI_Init+0xfa>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a78      	ldr	r2, [pc, #480]	; (8005474 <HAL_SAI_Init+0x2d8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d104      	bne.n	80052a0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005296:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800529a:	f7ff fafd 	bl	8004898 <HAL_RCCEx_GetPeriphCLKFreq>
 800529e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a76      	ldr	r2, [pc, #472]	; (8005480 <HAL_SAI_Init+0x2e4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_SAI_Init+0x118>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a75      	ldr	r2, [pc, #468]	; (8005484 <HAL_SAI_Init+0x2e8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d104      	bne.n	80052be <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80052b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80052b8:	f7ff faee 	bl	8004898 <HAL_RCCEx_GetPeriphCLKFreq>
 80052bc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	461a      	mov	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	025b      	lsls	r3, r3, #9
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a6b      	ldr	r2, [pc, #428]	; (8005488 <HAL_SAI_Init+0x2ec>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	08da      	lsrs	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	4b68      	ldr	r3, [pc, #416]	; (8005488 <HAL_SAI_Init+0x2ec>)
 80052e8:	fba3 2301 	umull	r2, r3, r3, r1
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	1aca      	subs	r2, r1, r3
 80052f8:	2a08      	cmp	r2, #8
 80052fa:	d904      	bls.n	8005306 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	2b04      	cmp	r3, #4
 800530c:	d104      	bne.n	8005318 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	085a      	lsrs	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_SAI_Init+0x18c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d109      	bne.n	800533c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_SAI_Init+0x198>
 8005330:	2300      	movs	r3, #0
 8005332:	e001      	b.n	8005338 <HAL_SAI_Init+0x19c>
 8005334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e008      	b.n	800534e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d102      	bne.n	800534a <HAL_SAI_Init+0x1ae>
 8005344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005348:	e000      	b.n	800534c <HAL_SAI_Init+0x1b0>
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b4c      	ldr	r3, [pc, #304]	; (800548c <HAL_SAI_Init+0x2f0>)
 800535a:	400b      	ands	r3, r1
 800535c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005372:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	431a      	orrs	r2, r3
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005386:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005392:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	051b      	lsls	r3, r3, #20
 800539a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b38      	ldr	r3, [pc, #224]	; (8005490 <HAL_SAI_Init+0x2f4>)
 80053b0:	400b      	ands	r3, r1
 80053b2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <HAL_SAI_Init+0x2f8>)
 80053de:	400b      	ands	r3, r1
 80053e0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80053f2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80053f8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80053fe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	3b01      	subs	r3, #1
 8005406:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005408:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68d9      	ldr	r1, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005420:	400b      	ands	r3, r1
 8005422:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68d9      	ldr	r1, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	3b01      	subs	r3, #1
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40015804 	.word	0x40015804
 8005474:	40015824 	.word	0x40015824
 8005478:	40015800 	.word	0x40015800
 800547c:	40015c00 	.word	0x40015c00
 8005480:	40015c04 	.word	0x40015c04
 8005484:	40015c24 	.word	0x40015c24
 8005488:	cccccccd 	.word	0xcccccccd
 800548c:	ff05c010 	.word	0xff05c010
 8005490:	ffff1ff0 	.word	0xffff1ff0
 8005494:	fff88000 	.word	0xfff88000

08005498 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <SAI_Disable+0x68>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a17      	ldr	r2, [pc, #92]	; (8005504 <SAI_Disable+0x6c>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0b1b      	lsrs	r3, r3, #12
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1e5a      	subs	r2, r3, #1
 80054c8:	60fa      	str	r2, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	72fb      	strb	r3, [r7, #11]
      break;
 80054e2:	e006      	b.n	80054f2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e8      	bne.n	80054c4 <SAI_Disable+0x2c>

  return status;
 80054f2:	7afb      	ldrb	r3, [r7, #11]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	20000000 	.word	0x20000000
 8005504:	95cbec1b 	.word	0x95cbec1b

08005508 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e022      	b.n	8005560 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb ffab 	bl	8001488 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f814 	bl	8005568 <HAL_SD_InitCard>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e00a      	b.n	8005560 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b08e      	sub	sp, #56	; 0x38
 800556c:	af04      	add	r7, sp, #16
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005584:	2376      	movs	r3, #118	; 0x76
 8005586:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681d      	ldr	r5, [r3, #0]
 800558c:	466c      	mov	r4, sp
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055a0:	4628      	mov	r0, r5
 80055a2:	f001 ff45 	bl	8007430 <SDMMC_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80055ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e059      	b.n	800566c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 ff79 	bl	80074c4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80055e2:	2002      	movs	r0, #2
 80055e4:	f7fc fa70 	bl	8001ac8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fff3 	bl	80065d4 <SD_PowerON>
 80055ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e02e      	b.n	800566c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 ff12 	bl	8006438 <SD_InitCard>
 8005614:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e01b      	b.n	800566c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800563c:	4618      	mov	r0, r3
 800563e:	f001 ffd3 	bl	80075e8 <SDMMC_CmdBlockLength>
 8005642:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00f      	beq.n	800566a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_SD_InitCard+0x10c>)
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3728      	adds	r7, #40	; 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bdb0      	pop	{r4, r5, r7, pc}
 8005674:	004005ff 	.word	0x004005ff

08005678 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d107      	bne.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0c3      	b.n	8005828 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 80bc 	bne.w	8005826 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80056b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056be:	429a      	cmp	r2, r3
 80056c0:	d907      	bls.n	80056d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e0aa      	b.n	8005828 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2203      	movs	r2, #3
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80056f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	4a4e      	ldr	r2, [pc, #312]	; (8005830 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	4a4d      	ldr	r2, [pc, #308]	; (8005834 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005700:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2200      	movs	r2, #0
 8005708:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3380      	adds	r3, #128	; 0x80
 8005738:	4619      	mov	r1, r3
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	025b      	lsls	r3, r3, #9
 8005740:	089b      	lsrs	r3, r3, #2
 8005742:	f7fd faaf 	bl	8002ca4 <HAL_DMA_Start_IT>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800575a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a35      	ldr	r2, [pc, #212]	; (8005838 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e055      	b.n	8005828 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0208 	orr.w	r2, r2, #8
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	025b      	lsls	r3, r3, #9
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800579e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	025b      	lsls	r3, r3, #9
 80057a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80057a6:	2390      	movs	r3, #144	; 0x90
 80057a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80057aa:	2302      	movs	r3, #2
 80057ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f107 0210 	add.w	r2, r7, #16
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fee5 	bl	8007590 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d90a      	bls.n	80057e2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2282      	movs	r2, #130	; 0x82
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 ff49 	bl	8007670 <SDMMC_CmdReadMultiBlock>
 80057de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80057e0:	e009      	b.n	80057f6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2281      	movs	r2, #129	; 0x81
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 ff1c 	bl	800762c <SDMMC_CmdReadSingleBlock>
 80057f4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d012      	beq.n	8005822 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0d      	ldr	r2, [pc, #52]	; (8005838 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	431a      	orrs	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e002      	b.n	8005828 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3730      	adds	r7, #48	; 0x30
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	08006247 	.word	0x08006247
 8005834:	080062b9 	.word	0x080062b9
 8005838:	004005ff 	.word	0x004005ff

0800583c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0c6      	b.n	80059f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 80bf 	bne.w	80059f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	429a      	cmp	r2, r3
 8005884:	d907      	bls.n	8005896 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0ad      	b.n	80059f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2203      	movs	r2, #3
 800589a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 021a 	orr.w	r2, r2, #26
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	4a50      	ldr	r2, [pc, #320]	; (80059fc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	4a4f      	ldr	r2, [pc, #316]	; (8005a00 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80058c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	2200      	movs	r2, #0
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d002      	beq.n	80058dc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	025b      	lsls	r3, r3, #9
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d90a      	bls.n	80058f8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	22a0      	movs	r2, #160	; 0xa0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 ff02 	bl	80076f8 <SDMMC_CmdWriteMultiBlock>
 80058f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80058f6:	e009      	b.n	800590c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2290      	movs	r2, #144	; 0x90
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005904:	4618      	mov	r0, r3
 8005906:	f001 fed5 	bl	80076b4 <SDMMC_CmdWriteSingleBlock>
 800590a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d012      	beq.n	8005938 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3b      	ldr	r2, [pc, #236]	; (8005a04 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	431a      	orrs	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e05c      	b.n	80059f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0208 	orr.w	r2, r2, #8
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	2240      	movs	r2, #64	; 0x40
 800594e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3380      	adds	r3, #128	; 0x80
 8005978:	461a      	mov	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	025b      	lsls	r3, r3, #9
 800597e:	089b      	lsrs	r3, r3, #2
 8005980:	f7fd f990 	bl	8002ca4 <HAL_DMA_Start_IT>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01a      	beq.n	80059c0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 021a 	bic.w	r2, r2, #26
 8005998:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e018      	b.n	80059f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	025b      	lsls	r3, r3, #9
 80059ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80059cc:	2390      	movs	r3, #144	; 0x90
 80059ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80059d8:	2301      	movs	r3, #1
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f107 0210 	add.w	r2, r7, #16
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fdd2 	bl	8007590 <SDMMC_ConfigData>

      return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3730      	adds	r7, #48	; 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	0800621d 	.word	0x0800621d
 8005a00:	080062b9 	.word	0x080062b9
 8005a04:	004005ff 	.word	0x004005ff

08005a08 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_SD_IRQHandler+0x2e>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 ffef 	bl	8006a12 <SD_Read_IT>
 8005a34:	e15a      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 808d 	beq.w	8005b60 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b9a      	ldr	r3, [pc, #616]	; (8005cc4 <HAL_SD_IRQHandler+0x2bc>)
 8005a5c:	400b      	ands	r3, r1
 8005a5e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d039      	beq.n	8005aee <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <HAL_SD_IRQHandler+0x86>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d011      	beq.n	8005ab2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fe52 	bl	800773c <SDMMC_CmdStopTransfer>
 8005a98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f921 	bl	8005cf4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f240 523a 	movw	r2, #1338	; 0x53a
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <HAL_SD_IRQHandler+0xd6>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 fac2 	bl	8008068 <HAL_SD_RxCpltCallback>
 8005ae4:	e102      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 fab4 	bl	8008054 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005aec:	e0fe      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80f9 	beq.w	8005cec <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d011      	beq.n	8005b28 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 fe17 	bl	800773c <SDMMC_CmdStopTransfer>
 8005b0e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f8e6 	bl	8005cf4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 80dc 	bne.w	8005cec <HAL_SD_IRQHandler+0x2e4>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 80d6 	bne.w	8005cec <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0208 	bic.w	r2, r2, #8
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f002 fa7b 	bl	8008054 <HAL_SD_TxCpltCallback>
}
 8005b5e:	e0c5      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_SD_IRQHandler+0x178>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 ff9b 	bl	8006ab4 <SD_Write_IT>
 8005b7e:	e0b5      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80ae 	beq.w	8005cec <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f043 0202 	orr.w	r2, r3, #2
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	f043 0208 	orr.w	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f043 0210 	orr.w	r2, r3, #16
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005c10:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 fd90 	bl	800773c <SDMMC_CmdStopTransfer>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f857 	bl	8005cf4 <HAL_SD_ErrorCallback>
}
 8005c46:	e051      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04c      	beq.n	8005cec <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_SD_IRQHandler+0x25e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <HAL_SD_IRQHandler+0x2c0>)
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fd f876 	bl	8002d64 <HAL_DMA_Abort_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d036      	beq.n	8005cec <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fb6a 	bl	800635c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c88:	e030      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_SD_IRQHandler+0x296>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <HAL_SD_IRQHandler+0x2c4>)
 8005ca4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fd f85a 	bl	8002d64 <HAL_DMA_Abort_IT>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01a      	beq.n	8005cec <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fb85 	bl	80063ca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005cc0:	e014      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
 8005cc2:	bf00      	nop
 8005cc4:	ffff3ec5 	.word	0xffff3ec5
 8005cc8:	0800635d 	.word	0x0800635d
 8005ccc:	080063cb 	.word	0x080063cb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f002 f9ab 	bl	8008040 <HAL_SD_AbortCallback>
}
 8005cea:	e7ff      	b.n	8005cec <HAL_SD_IRQHandler+0x2e4>
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d16:	0f9b      	lsrs	r3, r3, #30
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d22:	0e9b      	lsrs	r3, r3, #26
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d34:	0e1b      	lsrs	r3, r3, #24
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d68:	0d1b      	lsrs	r3, r3, #20
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d86:	0bdb      	lsrs	r3, r3, #15
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	0b9b      	lsrs	r3, r3, #14
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005daa:	0b5b      	lsrs	r3, r3, #13
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dbc:	0b1b      	lsrs	r3, r3, #12
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d163      	bne.n	8005ea0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ddc:	009a      	lsls	r2, r3, #2
 8005dde:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005de2:	4013      	ands	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005de8:	0f92      	lsrs	r2, r2, #30
 8005dea:	431a      	orrs	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	0edb      	lsrs	r3, r3, #27
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e06:	0e1b      	lsrs	r3, r3, #24
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	0d5b      	lsrs	r3, r3, #21
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2a:	0c9b      	lsrs	r3, r3, #18
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	0bdb      	lsrs	r3, r3, #15
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	7e1b      	ldrb	r3, [r3, #24]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	3302      	adds	r3, #2
 8005e60:	2201      	movs	r2, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e6a:	fb03 f202 	mul.w	r2, r3, r2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	7a1b      	ldrb	r3, [r3, #8]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e8c:	0a52      	lsrs	r2, r2, #9
 8005e8e:	fb03 f202 	mul.w	r2, r3, r2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e9e:	e031      	b.n	8005f04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d11d      	bne.n	8005ee4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	0c1b      	lsrs	r3, r3, #16
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	029a      	lsls	r2, r3, #10
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ee2:	e00f      	b.n	8005f04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a58      	ldr	r2, [pc, #352]	; (800604c <HAL_SD_GetCardCSD+0x344>)
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e09d      	b.n	8006040 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f08:	0b9b      	lsrs	r3, r3, #14
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	0fdb      	lsrs	r3, r3, #31
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	0f5b      	lsrs	r3, r3, #29
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	0e9b      	lsrs	r3, r3, #26
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	0d9b      	lsrs	r3, r3, #22
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	0d5b      	lsrs	r3, r3, #21
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	0bdb      	lsrs	r3, r3, #15
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	0b9b      	lsrs	r3, r3, #14
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	0b5b      	lsrs	r3, r3, #13
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	0b1b      	lsrs	r3, r3, #12
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	0a9b      	lsrs	r3, r3, #10
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	b2da      	uxtb	r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	0a1b      	lsrs	r3, r3, #8
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	b2da      	uxtb	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	004005ff 	.word	0x004005ff

08006050 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	b08e      	sub	sp, #56	; 0x38
 80060ac:	af04      	add	r7, sp, #16
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2203      	movs	r2, #3
 80060bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d02e      	beq.n	8006126 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	d106      	bne.n	80060de <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	639a      	str	r2, [r3, #56]	; 0x38
 80060dc:	e029      	b.n	8006132 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d10a      	bne.n	80060fc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fb2a 	bl	8006740 <SD_WideBus_Enable>
 80060ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
 80060fa:	e01a      	b.n	8006132 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fb67 	bl	80067d6 <SD_WideBus_Disable>
 8006108:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
 8006116:	e00c      	b.n	8006132 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
 8006124:	e005      	b.n	8006132 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006150:	e01f      	b.n	8006192 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681d      	ldr	r5, [r3, #0]
 8006178:	466c      	mov	r4, sp
 800617a:	f107 0314 	add.w	r3, r7, #20
 800617e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006186:	f107 0308 	add.w	r3, r7, #8
 800618a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800618c:	4628      	mov	r0, r5
 800618e:	f001 f94f 	bl	8007430 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fa24 	bl	80075e8 <SDMMC_CmdBlockLength>
 80061a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80061ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bdb0      	pop	{r4, r5, r7, pc}
 80061d6:	bf00      	nop
 80061d8:	004005ff 	.word	0x004005ff

080061dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80061e8:	f107 030c 	add.w	r3, r7, #12
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa7e 	bl	80066f0 <SD_SendStatus>
 80061f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0a5b      	lsrs	r3, r3, #9
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006212:	693b      	ldr	r3, [r7, #16]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006238:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	2b82      	cmp	r3, #130	; 0x82
 800625a:	d111      	bne.n	8006280 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fa6b 	bl	800773c <SDMMC_CmdStopTransfer>
 8006266:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	431a      	orrs	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fd3a 	bl	8005cf4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0208 	bic.w	r2, r2, #8
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f240 523a 	movw	r2, #1338	; 0x53a
 8006298:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f001 fedd 	bl	8008068 <HAL_SD_RxCpltCallback>
#endif
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fc fef8 	bl	80030bc <HAL_DMA_GetError>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d03e      	beq.n	8006350 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d002      	beq.n	80062ee <SD_DMAError+0x36>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d12d      	bne.n	800634a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a19      	ldr	r2, [pc, #100]	; (8006358 <SD_DMAError+0xa0>)
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006304:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f7ff ff62 	bl	80061dc <HAL_SD_GetCardState>
 8006318:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b06      	cmp	r3, #6
 800631e:	d002      	beq.n	8006326 <SD_DMAError+0x6e>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d10a      	bne.n	800633c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fa06 	bl	800773c <SDMMC_CmdStopTransfer>
 8006330:	4602      	mov	r2, r0
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	431a      	orrs	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800634a:	6978      	ldr	r0, [r7, #20]
 800634c:	f7ff fcd2 	bl	8005cf4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006350:	bf00      	nop
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	004005ff 	.word	0x004005ff

0800635c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006372:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff ff31 	bl	80061dc <HAL_SD_GetCardState>
 800637a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b06      	cmp	r3, #6
 800638e:	d002      	beq.n	8006396 <SD_DMATxAbort+0x3a>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b05      	cmp	r3, #5
 8006394:	d10a      	bne.n	80063ac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f001 f9ce 	bl	800773c <SDMMC_CmdStopTransfer>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f001 fe43 	bl	8008040 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80063ba:	e002      	b.n	80063c2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff fc99 	bl	8005cf4 <HAL_SD_ErrorCallback>
}
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff fefa 	bl	80061dc <HAL_SD_GetCardState>
 80063e8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b06      	cmp	r3, #6
 80063fc:	d002      	beq.n	8006404 <SD_DMARxAbort+0x3a>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b05      	cmp	r3, #5
 8006402:	d10a      	bne.n	800641a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f997 	bl	800773c <SDMMC_CmdStopTransfer>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f001 fe0c 	bl	8008040 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006428:	e002      	b.n	8006430 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff fc62 	bl	8005cf4 <HAL_SD_ErrorCallback>
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006438:	b5b0      	push	{r4, r5, r7, lr}
 800643a:	b094      	sub	sp, #80	; 0x50
 800643c:	af04      	add	r7, sp, #16
 800643e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006440:	2301      	movs	r3, #1
 8006442:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f849 	bl	80074e0 <SDMMC_GetPowerState>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006454:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006458:	e0b8      	b.n	80065cc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	2b03      	cmp	r3, #3
 8006460:	d02f      	beq.n	80064c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f001 fa73 	bl	8007952 <SDMMC_CmdSendCID>
 800646c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <SD_InitCard+0x40>
    {
      return errorstate;
 8006474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006476:	e0a9      	b.n	80065cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2100      	movs	r1, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f001 f873 	bl	800756a <SDMMC_GetResponse>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2104      	movs	r1, #4
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f86a 	bl	800756a <SDMMC_GetResponse>
 8006496:	4602      	mov	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2108      	movs	r1, #8
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 f861 	bl	800756a <SDMMC_GetResponse>
 80064a8:	4602      	mov	r2, r0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	210c      	movs	r1, #12
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 f858 	bl	800756a <SDMMC_GetResponse>
 80064ba:	4602      	mov	r2, r0
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d00d      	beq.n	80064e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f107 020e 	add.w	r2, r7, #14
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fa79 	bl	80079cc <SDMMC_CmdSetRelAdd>
 80064da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	e072      	b.n	80065cc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d036      	beq.n	800655c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80064ee:	89fb      	ldrh	r3, [r7, #14]
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f001 fa43 	bl	800798e <SDMMC_CmdSendCSD>
 8006508:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800650a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006512:	e05b      	b.n	80065cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f825 	bl	800756a <SDMMC_GetResponse>
 8006520:	4602      	mov	r2, r0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2104      	movs	r1, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f001 f81c 	bl	800756a <SDMMC_GetResponse>
 8006532:	4602      	mov	r2, r0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2108      	movs	r1, #8
 800653e:	4618      	mov	r0, r3
 8006540:	f001 f813 	bl	800756a <SDMMC_GetResponse>
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	210c      	movs	r1, #12
 8006550:	4618      	mov	r0, r3
 8006552:	f001 f80a 	bl	800756a <SDMMC_GetResponse>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2104      	movs	r1, #4
 8006562:	4618      	mov	r0, r3
 8006564:	f001 f801 	bl	800756a <SDMMC_GetResponse>
 8006568:	4603      	mov	r3, r0
 800656a:	0d1a      	lsrs	r2, r3, #20
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006570:	f107 0310 	add.w	r3, r7, #16
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fbc6 	bl	8005d08 <HAL_SD_GetCardCSD>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006586:	e021      	b.n	80065cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	2200      	movs	r2, #0
 8006594:	461c      	mov	r4, r3
 8006596:	4615      	mov	r5, r2
 8006598:	4622      	mov	r2, r4
 800659a:	462b      	mov	r3, r5
 800659c:	4608      	mov	r0, r1
 800659e:	f001 f8ef 	bl	8007780 <SDMMC_CmdSelDesel>
 80065a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <SD_InitCard+0x176>
  {
    return errorstate;
 80065aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ac:	e00e      	b.n	80065cc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	466c      	mov	r4, sp
 80065b6:	f103 0210 	add.w	r2, r3, #16
 80065ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80065bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065c0:	3304      	adds	r3, #4
 80065c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 ff33 	bl	8007430 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3740      	adds	r7, #64	; 0x40
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bdb0      	pop	{r4, r5, r7, pc}

080065d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 f8ea 	bl	80077c6 <SDMMC_CmdGoIdleState>
 80065f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	e072      	b.n	80066e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f001 f8fd 	bl	8007802 <SDMMC_CmdOperCond>
 8006608:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f001 f8d3 	bl	80077c6 <SDMMC_CmdGoIdleState>
 8006620:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	e05b      	b.n	80066e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006636:	2b01      	cmp	r3, #1
 8006638:	d137      	bne.n	80066aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f001 f8fd 	bl	8007840 <SDMMC_CmdAppCommand>
 8006646:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d02d      	beq.n	80066aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800664e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006652:	e047      	b.n	80066e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f001 f8f0 	bl	8007840 <SDMMC_CmdAppCommand>
 8006660:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <SD_PowerON+0x98>
    {
      return errorstate;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	e03b      	b.n	80066e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	491e      	ldr	r1, [pc, #120]	; (80066ec <SD_PowerON+0x118>)
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f906 	bl	8007884 <SDMMC_CmdAppOperCommand>
 8006678:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006684:	e02e      	b.n	80066e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff6c 	bl	800756a <SDMMC_GetResponse>
 8006692:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	0fdb      	lsrs	r3, r3, #31
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <SD_PowerON+0xcc>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <SD_PowerON+0xce>
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]

    count++;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d802      	bhi.n	80066ba <SD_PowerON+0xe6>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0cc      	beq.n	8006654 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d902      	bls.n	80066ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80066c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066c8:	e00c      	b.n	80066e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
 80066da:	e002      	b.n	80066e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	c1100000 	.word	0xc1100000

080066f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006704:	e018      	b.n	8006738 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f001 f97b 	bl	8007a0e <SDMMC_CmdSendStatus>
 8006718:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	e009      	b.n	8006738 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2100      	movs	r1, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f000 ff1d 	bl	800756a <SDMMC_GetResponse>
 8006730:	4602      	mov	r2, r0
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f000 ff07 	bl	800756a <SDMMC_GetResponse>
 800675c:	4603      	mov	r3, r0
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006766:	d102      	bne.n	800676e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800676c:	e02f      	b.n	80067ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800676e:	f107 030c 	add.w	r3, r7, #12
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f879 	bl	800686c <SD_FindSCR>
 800677a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	e023      	b.n	80067ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01c      	beq.n	80067ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f001 f84f 	bl	8007840 <SDMMC_CmdAppCommand>
 80067a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	e00f      	b.n	80067ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2102      	movs	r1, #2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 f889 	bl	80078cc <SDMMC_CmdBusWidth>
 80067ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	e003      	b.n	80067ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e001      	b.n	80067ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 febc 	bl	800756a <SDMMC_GetResponse>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067fc:	d102      	bne.n	8006804 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80067fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006802:	e02f      	b.n	8006864 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006804:	f107 030c 	add.w	r3, r7, #12
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f82e 	bl	800686c <SD_FindSCR>
 8006810:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	e023      	b.n	8006864 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01c      	beq.n	8006860 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f001 f804 	bl	8007840 <SDMMC_CmdAppCommand>
 8006838:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	e00f      	b.n	8006864 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f83e 	bl	80078cc <SDMMC_CmdBusWidth>
 8006850:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e003      	b.n	8006864 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800685c:	2300      	movs	r3, #0
 800685e:	e001      	b.n	8006864 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006860:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b08f      	sub	sp, #60	; 0x3c
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006876:	f7fb f91b 	bl	8001ab0 <HAL_GetTick>
 800687a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2108      	movs	r1, #8
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fea8 	bl	80075e8 <SDMMC_CmdBlockLength>
 8006898:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	e0b2      	b.n	8006a0a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ac:	041b      	lsls	r3, r3, #16
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f000 ffc5 	bl	8007840 <SDMMC_CmdAppCommand>
 80068b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	e0a3      	b.n	8006a0a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80068c8:	2308      	movs	r3, #8
 80068ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80068cc:	2330      	movs	r3, #48	; 0x30
 80068ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80068d0:	2302      	movs	r3, #2
 80068d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80068d8:	2301      	movs	r3, #1
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f107 0210 	add.w	r2, r7, #16
 80068e4:	4611      	mov	r1, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fe52 	bl	8007590 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f80d 	bl	8007910 <SDMMC_CmdSendSCR>
 80068f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d02a      	beq.n	8006954 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	e083      	b.n	8006a0a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00f      	beq.n	8006930 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	f107 0208 	add.w	r2, r7, #8
 800691c:	18d4      	adds	r4, r2, r3
 800691e:	4608      	mov	r0, r1
 8006920:	f000 fdb2 	bl	8007488 <SDMMC_ReadFIFO>
 8006924:	4603      	mov	r3, r0
 8006926:	6023      	str	r3, [r4, #0]
      index++;
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	3301      	adds	r3, #1
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	e006      	b.n	800693e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800693e:	f7fb f8b7 	bl	8001ab0 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694c:	d102      	bne.n	8006954 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800694e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006952:	e05a      	b.n	8006a0a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0cf      	beq.n	8006902 <SD_FindSCR+0x96>
 8006962:	e000      	b.n	8006966 <SD_FindSCR+0xfa>
      break;
 8006964:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2208      	movs	r2, #8
 800697a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800697c:	2308      	movs	r3, #8
 800697e:	e044      	b.n	8006a0a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2202      	movs	r2, #2
 8006994:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006996:	2302      	movs	r3, #2
 8006998:	e037      	b.n	8006a0a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2220      	movs	r2, #32
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80069b0:	2320      	movs	r3, #32
 80069b2:	e02a      	b.n	8006a0a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	061a      	lsls	r2, r3, #24
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80069d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	0e1b      	lsrs	r3, r3, #24
 80069da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	601a      	str	r2, [r3, #0]
    scr++;
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	3304      	adds	r3, #4
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	061a      	lsls	r2, r3, #24
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80069fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	0e1b      	lsrs	r3, r3, #24
 8006a02:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	373c      	adds	r7, #60	; 0x3c
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd90      	pop	{r4, r7, pc}

08006a12 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b086      	sub	sp, #24
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d03f      	beq.n	8006aac <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e033      	b.n	8006a9a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fd26 	bl	8007488 <SDMMC_ReadFIFO>
 8006a3c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	0a1b      	lsrs	r3, r3, #8
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	0e1b      	lsrs	r3, r3, #24
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b07      	cmp	r3, #7
 8006a9e:	d9c8      	bls.n	8006a32 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006aac:	bf00      	nop
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d043      	beq.n	8006b56 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e037      	b.n	8006b44 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	041a      	lsls	r2, r3, #16
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	061a      	lsls	r2, r3, #24
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f107 0208 	add.w	r2, r7, #8
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fcb2 	bl	80074a2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	3301      	adds	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b07      	cmp	r3, #7
 8006b48:	d9c4      	bls.n	8006ad4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006b56:	bf00      	nop
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e040      	b.n	8006bf2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fa fe99 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2224      	movs	r2, #36	; 0x24
 8006b8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f82d 	bl	8006bfc <UART_SetConfig>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e022      	b.n	8006bf2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa85 	bl	80070c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0201 	orr.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fb0c 	bl	8007208 <UART_CheckIdleState>
 8006bf0:	4603      	mov	r3, r0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4ba6      	ldr	r3, [pc, #664]	; (8006ec0 <UART_SetConfig+0x2c4>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	6979      	ldr	r1, [r7, #20]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a94      	ldr	r2, [pc, #592]	; (8006ec4 <UART_SetConfig+0x2c8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d120      	bne.n	8006cba <UART_SetConfig+0xbe>
 8006c78:	4b93      	ldr	r3, [pc, #588]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d816      	bhi.n	8006cb4 <UART_SetConfig+0xb8>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x90>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006ca9 	.word	0x08006ca9
 8006c94:	08006ca3 	.word	0x08006ca3
 8006c98:	08006caf 	.word	0x08006caf
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e150      	b.n	8006f44 <UART_SetConfig+0x348>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e14d      	b.n	8006f44 <UART_SetConfig+0x348>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e14a      	b.n	8006f44 <UART_SetConfig+0x348>
 8006cae:	2308      	movs	r3, #8
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e147      	b.n	8006f44 <UART_SetConfig+0x348>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e144      	b.n	8006f44 <UART_SetConfig+0x348>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a83      	ldr	r2, [pc, #524]	; (8006ecc <UART_SetConfig+0x2d0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d132      	bne.n	8006d2a <UART_SetConfig+0x12e>
 8006cc4:	4b80      	ldr	r3, [pc, #512]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cca:	f003 030c 	and.w	r3, r3, #12
 8006cce:	2b0c      	cmp	r3, #12
 8006cd0:	d828      	bhi.n	8006d24 <UART_SetConfig+0x128>
 8006cd2:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <UART_SetConfig+0xdc>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006d0d 	.word	0x08006d0d
 8006cdc:	08006d25 	.word	0x08006d25
 8006ce0:	08006d25 	.word	0x08006d25
 8006ce4:	08006d25 	.word	0x08006d25
 8006ce8:	08006d19 	.word	0x08006d19
 8006cec:	08006d25 	.word	0x08006d25
 8006cf0:	08006d25 	.word	0x08006d25
 8006cf4:	08006d25 	.word	0x08006d25
 8006cf8:	08006d13 	.word	0x08006d13
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d25 	.word	0x08006d25
 8006d08:	08006d1f 	.word	0x08006d1f
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e118      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d12:	2302      	movs	r3, #2
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e115      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e112      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d1e:	2308      	movs	r3, #8
 8006d20:	77fb      	strb	r3, [r7, #31]
 8006d22:	e10f      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d24:	2310      	movs	r3, #16
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e10c      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a68      	ldr	r2, [pc, #416]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d120      	bne.n	8006d76 <UART_SetConfig+0x17a>
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	d013      	beq.n	8006d6a <UART_SetConfig+0x16e>
 8006d42:	2b30      	cmp	r3, #48	; 0x30
 8006d44:	d814      	bhi.n	8006d70 <UART_SetConfig+0x174>
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d009      	beq.n	8006d5e <UART_SetConfig+0x162>
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d810      	bhi.n	8006d70 <UART_SetConfig+0x174>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <UART_SetConfig+0x15c>
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d006      	beq.n	8006d64 <UART_SetConfig+0x168>
 8006d56:	e00b      	b.n	8006d70 <UART_SetConfig+0x174>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e0f2      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e0ef      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d64:	2304      	movs	r3, #4
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e0ec      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e0e9      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d70:	2310      	movs	r3, #16
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e0e6      	b.n	8006f44 <UART_SetConfig+0x348>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a56      	ldr	r2, [pc, #344]	; (8006ed4 <UART_SetConfig+0x2d8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d120      	bne.n	8006dc2 <UART_SetConfig+0x1c6>
 8006d80:	4b51      	ldr	r3, [pc, #324]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d8c:	d013      	beq.n	8006db6 <UART_SetConfig+0x1ba>
 8006d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d90:	d814      	bhi.n	8006dbc <UART_SetConfig+0x1c0>
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d009      	beq.n	8006daa <UART_SetConfig+0x1ae>
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d810      	bhi.n	8006dbc <UART_SetConfig+0x1c0>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <UART_SetConfig+0x1a8>
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d006      	beq.n	8006db0 <UART_SetConfig+0x1b4>
 8006da2:	e00b      	b.n	8006dbc <UART_SetConfig+0x1c0>
 8006da4:	2300      	movs	r3, #0
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e0cc      	b.n	8006f44 <UART_SetConfig+0x348>
 8006daa:	2302      	movs	r3, #2
 8006dac:	77fb      	strb	r3, [r7, #31]
 8006dae:	e0c9      	b.n	8006f44 <UART_SetConfig+0x348>
 8006db0:	2304      	movs	r3, #4
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e0c6      	b.n	8006f44 <UART_SetConfig+0x348>
 8006db6:	2308      	movs	r3, #8
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e0c3      	b.n	8006f44 <UART_SetConfig+0x348>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e0c0      	b.n	8006f44 <UART_SetConfig+0x348>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a44      	ldr	r2, [pc, #272]	; (8006ed8 <UART_SetConfig+0x2dc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d125      	bne.n	8006e18 <UART_SetConfig+0x21c>
 8006dcc:	4b3e      	ldr	r3, [pc, #248]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dda:	d017      	beq.n	8006e0c <UART_SetConfig+0x210>
 8006ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de0:	d817      	bhi.n	8006e12 <UART_SetConfig+0x216>
 8006de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de6:	d00b      	beq.n	8006e00 <UART_SetConfig+0x204>
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d811      	bhi.n	8006e12 <UART_SetConfig+0x216>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <UART_SetConfig+0x1fe>
 8006df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df6:	d006      	beq.n	8006e06 <UART_SetConfig+0x20a>
 8006df8:	e00b      	b.n	8006e12 <UART_SetConfig+0x216>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e0a1      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e00:	2302      	movs	r3, #2
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e09e      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e06:	2304      	movs	r3, #4
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e09b      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e098      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e12:	2310      	movs	r3, #16
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	e095      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a2f      	ldr	r2, [pc, #188]	; (8006edc <UART_SetConfig+0x2e0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d125      	bne.n	8006e6e <UART_SetConfig+0x272>
 8006e22:	4b29      	ldr	r3, [pc, #164]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e30:	d017      	beq.n	8006e62 <UART_SetConfig+0x266>
 8006e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e36:	d817      	bhi.n	8006e68 <UART_SetConfig+0x26c>
 8006e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3c:	d00b      	beq.n	8006e56 <UART_SetConfig+0x25a>
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e42:	d811      	bhi.n	8006e68 <UART_SetConfig+0x26c>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <UART_SetConfig+0x254>
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4c:	d006      	beq.n	8006e5c <UART_SetConfig+0x260>
 8006e4e:	e00b      	b.n	8006e68 <UART_SetConfig+0x26c>
 8006e50:	2301      	movs	r3, #1
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e076      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e56:	2302      	movs	r3, #2
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e073      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e070      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e62:	2308      	movs	r3, #8
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e06d      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e06a      	b.n	8006f44 <UART_SetConfig+0x348>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <UART_SetConfig+0x2e4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d138      	bne.n	8006eea <UART_SetConfig+0x2ee>
 8006e78:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e86:	d017      	beq.n	8006eb8 <UART_SetConfig+0x2bc>
 8006e88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e8c:	d82a      	bhi.n	8006ee4 <UART_SetConfig+0x2e8>
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e92:	d00b      	beq.n	8006eac <UART_SetConfig+0x2b0>
 8006e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e98:	d824      	bhi.n	8006ee4 <UART_SetConfig+0x2e8>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <UART_SetConfig+0x2aa>
 8006e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea2:	d006      	beq.n	8006eb2 <UART_SetConfig+0x2b6>
 8006ea4:	e01e      	b.n	8006ee4 <UART_SetConfig+0x2e8>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	77fb      	strb	r3, [r7, #31]
 8006eaa:	e04b      	b.n	8006f44 <UART_SetConfig+0x348>
 8006eac:	2302      	movs	r3, #2
 8006eae:	77fb      	strb	r3, [r7, #31]
 8006eb0:	e048      	b.n	8006f44 <UART_SetConfig+0x348>
 8006eb2:	2304      	movs	r3, #4
 8006eb4:	77fb      	strb	r3, [r7, #31]
 8006eb6:	e045      	b.n	8006f44 <UART_SetConfig+0x348>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e042      	b.n	8006f44 <UART_SetConfig+0x348>
 8006ebe:	bf00      	nop
 8006ec0:	efff69f3 	.word	0xefff69f3
 8006ec4:	40011000 	.word	0x40011000
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	40004400 	.word	0x40004400
 8006ed0:	40004800 	.word	0x40004800
 8006ed4:	40004c00 	.word	0x40004c00
 8006ed8:	40005000 	.word	0x40005000
 8006edc:	40011400 	.word	0x40011400
 8006ee0:	40007800 	.word	0x40007800
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	e02c      	b.n	8006f44 <UART_SetConfig+0x348>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a72      	ldr	r2, [pc, #456]	; (80070b8 <UART_SetConfig+0x4bc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d125      	bne.n	8006f40 <UART_SetConfig+0x344>
 8006ef4:	4b71      	ldr	r3, [pc, #452]	; (80070bc <UART_SetConfig+0x4c0>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006efe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f02:	d017      	beq.n	8006f34 <UART_SetConfig+0x338>
 8006f04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f08:	d817      	bhi.n	8006f3a <UART_SetConfig+0x33e>
 8006f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0e:	d00b      	beq.n	8006f28 <UART_SetConfig+0x32c>
 8006f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f14:	d811      	bhi.n	8006f3a <UART_SetConfig+0x33e>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <UART_SetConfig+0x326>
 8006f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1e:	d006      	beq.n	8006f2e <UART_SetConfig+0x332>
 8006f20:	e00b      	b.n	8006f3a <UART_SetConfig+0x33e>
 8006f22:	2300      	movs	r3, #0
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e00d      	b.n	8006f44 <UART_SetConfig+0x348>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e00a      	b.n	8006f44 <UART_SetConfig+0x348>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	77fb      	strb	r3, [r7, #31]
 8006f32:	e007      	b.n	8006f44 <UART_SetConfig+0x348>
 8006f34:	2308      	movs	r3, #8
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e004      	b.n	8006f44 <UART_SetConfig+0x348>
 8006f3a:	2310      	movs	r3, #16
 8006f3c:	77fb      	strb	r3, [r7, #31]
 8006f3e:	e001      	b.n	8006f44 <UART_SetConfig+0x348>
 8006f40:	2310      	movs	r3, #16
 8006f42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4c:	d15b      	bne.n	8007006 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006f4e:	7ffb      	ldrb	r3, [r7, #31]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d828      	bhi.n	8006fa6 <UART_SetConfig+0x3aa>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x360>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	08006fa7 	.word	0x08006fa7
 8006f6c:	08006f97 	.word	0x08006f97
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006fa7 	.word	0x08006fa7
 8006f78:	08006fa7 	.word	0x08006fa7
 8006f7c:	08006f9f 	.word	0x08006f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f80:	f7fd f83a 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8006f84:	61b8      	str	r0, [r7, #24]
        break;
 8006f86:	e013      	b.n	8006fb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f88:	f7fd f84a 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8006f8c:	61b8      	str	r0, [r7, #24]
        break;
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f90:	4b4b      	ldr	r3, [pc, #300]	; (80070c0 <UART_SetConfig+0x4c4>)
 8006f92:	61bb      	str	r3, [r7, #24]
        break;
 8006f94:	e00c      	b.n	8006fb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f96:	f7fc ff5d 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006f9a:	61b8      	str	r0, [r7, #24]
        break;
 8006f9c:	e008      	b.n	8006fb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa2:	61bb      	str	r3, [r7, #24]
        break;
 8006fa4:	e004      	b.n	8006fb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	77bb      	strb	r3, [r7, #30]
        break;
 8006fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d074      	beq.n	80070a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	005a      	lsls	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b0f      	cmp	r3, #15
 8006fd0:	d916      	bls.n	8007000 <UART_SetConfig+0x404>
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd8:	d212      	bcs.n	8007000 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f023 030f 	bic.w	r3, r3, #15
 8006fe2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	89fa      	ldrh	r2, [r7, #14]
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	e04f      	b.n	80070a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	77bb      	strb	r3, [r7, #30]
 8007004:	e04c      	b.n	80070a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007006:	7ffb      	ldrb	r3, [r7, #31]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d828      	bhi.n	800705e <UART_SetConfig+0x462>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x418>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007039 	.word	0x08007039
 8007018:	08007041 	.word	0x08007041
 800701c:	08007049 	.word	0x08007049
 8007020:	0800705f 	.word	0x0800705f
 8007024:	0800704f 	.word	0x0800704f
 8007028:	0800705f 	.word	0x0800705f
 800702c:	0800705f 	.word	0x0800705f
 8007030:	0800705f 	.word	0x0800705f
 8007034:	08007057 	.word	0x08007057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007038:	f7fc ffde 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 800703c:	61b8      	str	r0, [r7, #24]
        break;
 800703e:	e013      	b.n	8007068 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007040:	f7fc ffee 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8007044:	61b8      	str	r0, [r7, #24]
        break;
 8007046:	e00f      	b.n	8007068 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007048:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <UART_SetConfig+0x4c4>)
 800704a:	61bb      	str	r3, [r7, #24]
        break;
 800704c:	e00c      	b.n	8007068 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800704e:	f7fc ff01 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8007052:	61b8      	str	r0, [r7, #24]
        break;
 8007054:	e008      	b.n	8007068 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705a:	61bb      	str	r3, [r7, #24]
        break;
 800705c:	e004      	b.n	8007068 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	77bb      	strb	r3, [r7, #30]
        break;
 8007066:	bf00      	nop
    }

    if (pclk != 0U)
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d018      	beq.n	80070a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	085a      	lsrs	r2, r3, #1
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	441a      	add	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d909      	bls.n	800709c <UART_SetConfig+0x4a0>
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708e:	d205      	bcs.n	800709c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	e001      	b.n	80070a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80070ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3720      	adds	r7, #32
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40007c00 	.word	0x40007c00
 80070bc:	40023800 	.word	0x40023800
 80070c0:	00f42400 	.word	0x00f42400

080070c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01a      	beq.n	80071da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c2:	d10a      	bne.n	80071da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  }
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af02      	add	r7, sp, #8
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007218:	f7fa fc4a 	bl	8001ab0 <HAL_GetTick>
 800721c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b08      	cmp	r3, #8
 800722a:	d10e      	bne.n	800724a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f831 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e027      	b.n	800729a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b04      	cmp	r3, #4
 8007256:	d10e      	bne.n	8007276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f81b 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e011      	b.n	800729a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b09c      	sub	sp, #112	; 0x70
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b2:	e0a7      	b.n	8007404 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ba:	f000 80a3 	beq.w	8007404 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fa fbf7 	bl	8001ab0 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80072ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d13f      	bne.n	8007354 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072e8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	663b      	str	r3, [r7, #96]	; 0x60
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007326:	64ba      	str	r2, [r7, #72]	; 0x48
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800732c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e068      	b.n	8007426 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d050      	beq.n	8007404 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007370:	d148      	bne.n	8007404 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800737a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
 800739c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e6      	bne.n	800737c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	613b      	str	r3, [r7, #16]
   return(result);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073ce:	623a      	str	r2, [r7, #32]
 80073d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	69f9      	ldr	r1, [r7, #28]
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	61bb      	str	r3, [r7, #24]
   return(result);
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e5      	bne.n	80073ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e010      	b.n	8007426 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4013      	ands	r3, r2
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	429a      	cmp	r2, r3
 8007412:	bf0c      	ite	eq
 8007414:	2301      	moveq	r3, #1
 8007416:	2300      	movne	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	429a      	cmp	r2, r3
 8007420:	f43f af48 	beq.w	80072b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3770      	adds	r7, #112	; 0x70
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007430:	b084      	sub	sp, #16
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	f107 001c 	add.w	r0, r7, #28
 800743e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007446:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007448:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800744a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800744e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007452:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007456:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800745a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <SDMMC_Init+0x54>)
 8007468:	4013      	ands	r3, r2
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	b004      	add	sp, #16
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	ffff8100 	.word	0xffff8100

08007488 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2203      	movs	r2, #3
 80074d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0303 	and.w	r3, r3, #3
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800751a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007520:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007526:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <SDMMC_SendCommand+0x50>)
 8007534:	4013      	ands	r3, r2
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	fffff000 	.word	0xfffff000

08007550 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	b2db      	uxtb	r3, r3
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3314      	adds	r3, #20
 8007578:	461a      	mov	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	4413      	add	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
}  
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80075bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80075c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80075da:	2300      	movs	r3, #0

}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80075f6:	2310      	movs	r3, #16
 80075f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007608:	f107 0308 	add.w	r3, r7, #8
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff ff74 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007614:	f241 3288 	movw	r2, #5000	; 0x1388
 8007618:	2110      	movs	r1, #16
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa1a 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007622:	69fb      	ldr	r3, [r7, #28]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800763a:	2311      	movs	r3, #17
 800763c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800763e:	2340      	movs	r3, #64	; 0x40
 8007640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ff52 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007658:	f241 3288 	movw	r2, #5000	; 0x1388
 800765c:	2111      	movs	r1, #17
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9f8 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007666:	69fb      	ldr	r3, [r7, #28]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800767e:	2312      	movs	r3, #18
 8007680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007682:	2340      	movs	r3, #64	; 0x40
 8007684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800768a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800768e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007690:	f107 0308 	add.w	r3, r7, #8
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff30 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800769c:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a0:	2112      	movs	r1, #18
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f9d6 	bl	8007a54 <SDMMC_GetCmdResp1>
 80076a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076aa:	69fb      	ldr	r3, [r7, #28]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80076c2:	2318      	movs	r3, #24
 80076c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076d4:	f107 0308 	add.w	r3, r7, #8
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff ff0e 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80076e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e4:	2118      	movs	r1, #24
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9b4 	bl	8007a54 <SDMMC_GetCmdResp1>
 80076ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ee:	69fb      	ldr	r3, [r7, #28]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007706:	2319      	movs	r3, #25
 8007708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800770a:	2340      	movs	r3, #64	; 0x40
 800770c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007718:	f107 0308 	add.w	r3, r7, #8
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff feec 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007724:	f241 3288 	movw	r2, #5000	; 0x1388
 8007728:	2119      	movs	r1, #25
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f992 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007732:	69fb      	ldr	r3, [r7, #28]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007748:	230c      	movs	r3, #12
 800774a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800775a:	f107 0308 	add.w	r3, r7, #8
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fecb 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007766:	4a05      	ldr	r2, [pc, #20]	; (800777c <SDMMC_CmdStopTransfer+0x40>)
 8007768:	210c      	movs	r1, #12
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f972 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007772:	69fb      	ldr	r3, [r7, #28]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	05f5e100 	.word	0x05f5e100

08007780 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007790:	2307      	movs	r3, #7
 8007792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007794:	2340      	movs	r3, #64	; 0x40
 8007796:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800779c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a2:	f107 0310 	add.w	r3, r7, #16
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff fea7 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	2107      	movs	r1, #7
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f94d 	bl	8007a54 <SDMMC_GetCmdResp1>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3728      	adds	r7, #40	; 0x28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fe86 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb67 	bl	8007ec4 <SDMMC_GetCmdError>
 80077f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077f8:	69fb      	ldr	r3, [r7, #28]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b088      	sub	sp, #32
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800780a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800780e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007810:	2308      	movs	r3, #8
 8007812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800781c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff fe67 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fafa 	bl	8007e28 <SDMMC_GetCmdResp7>
 8007834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007836:	69fb      	ldr	r3, [r7, #28]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800784e:	2337      	movs	r3, #55	; 0x37
 8007850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800785a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800785e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007860:	f107 0308 	add.w	r3, r7, #8
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff fe48 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800786c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007870:	2137      	movs	r1, #55	; 0x37
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8ee 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800787a:	69fb      	ldr	r3, [r7, #28]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <SDMMC_CmdAppOperCommand+0x44>)
 8007892:	4313      	orrs	r3, r2
 8007894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007896:	2329      	movs	r3, #41	; 0x29
 8007898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078a8:	f107 0308 	add.w	r3, r7, #8
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff fe24 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa03 	bl	8007cc0 <SDMMC_GetCmdResp3>
 80078ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078bc:	69fb      	ldr	r3, [r7, #28]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	80100000 	.word	0x80100000

080078cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80078da:	2306      	movs	r3, #6
 80078dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078ec:	f107 0308 	add.w	r3, r7, #8
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff fe02 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80078f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fc:	2106      	movs	r1, #6
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8a8 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007906:	69fb      	ldr	r3, [r7, #28]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800791c:	2333      	movs	r3, #51	; 0x33
 800791e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007920:	2340      	movs	r3, #64	; 0x40
 8007922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800792e:	f107 0308 	add.w	r3, r7, #8
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff fde1 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800793a:	f241 3288 	movw	r2, #5000	; 0x1388
 800793e:	2133      	movs	r1, #51	; 0x33
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f887 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007946:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007948:	69fb      	ldr	r3, [r7, #28]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b088      	sub	sp, #32
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800795e:	2302      	movs	r3, #2
 8007960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007962:	23c0      	movs	r3, #192	; 0xc0
 8007964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800796a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fdc0 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f957 	bl	8007c30 <SDMMC_GetCmdResp2>
 8007982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007984:	69fb      	ldr	r3, [r7, #28]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b088      	sub	sp, #32
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800799c:	2309      	movs	r3, #9
 800799e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80079a0:	23c0      	movs	r3, #192	; 0xc0
 80079a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fda1 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f938 	bl	8007c30 <SDMMC_GetCmdResp2>
 80079c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c2:	69fb      	ldr	r3, [r7, #28]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80079da:	2303      	movs	r3, #3
 80079dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ec:	f107 0308 	add.w	r3, r7, #8
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fd82 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	2103      	movs	r1, #3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f99d 	bl	8007d3c <SDMMC_GetCmdResp6>
 8007a02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a04:	69fb      	ldr	r3, [r7, #28]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b088      	sub	sp, #32
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007a1c:	230d      	movs	r3, #13
 8007a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a2e:	f107 0308 	add.w	r3, r7, #8
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fd61 	bl	80074fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3e:	210d      	movs	r1, #13
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f807 	bl	8007a54 <SDMMC_GetCmdResp1>
 8007a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a48:	69fb      	ldr	r3, [r7, #28]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a62:	4b70      	ldr	r3, [pc, #448]	; (8007c24 <SDMMC_GetCmdResp1+0x1d0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a70      	ldr	r2, [pc, #448]	; (8007c28 <SDMMC_GetCmdResp1+0x1d4>)
 8007a68:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6c:	0a5a      	lsrs	r2, r3, #9
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	fb02 f303 	mul.w	r3, r2, r3
 8007a74:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	1e5a      	subs	r2, r3, #1
 8007a7a:	61fa      	str	r2, [r7, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a84:	e0c9      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0ef      	beq.n	8007a76 <SDMMC_GetCmdResp1+0x22>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1ea      	bne.n	8007a76 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	e0b1      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0a6      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	22c5      	movs	r2, #197	; 0xc5
 8007ad0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fd3c 	bl	8007550 <SDMMC_GetCommandResponse>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	7afb      	ldrb	r3, [r7, #11]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d001      	beq.n	8007ae6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e099      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fd3e 	bl	800756a <SDMMC_GetResponse>
 8007aee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4b4e      	ldr	r3, [pc, #312]	; (8007c2c <SDMMC_GetCmdResp1+0x1d8>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e08d      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da02      	bge.n	8007b0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b08:	e087      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007b14:	2340      	movs	r3, #64	; 0x40
 8007b16:	e080      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007b22:	2380      	movs	r3, #128	; 0x80
 8007b24:	e079      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b34:	e071      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b44:	e069      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b54:	e061      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b64:	e059      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b74:	e051      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b84:	e049      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b94:	e041      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba4:	e039      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bb4:	e031      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007bc4:	e029      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bd4:	e021      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007be0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007be4:	e019      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007bf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007bf4:	e011      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007c00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c04:	e009      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007c10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c14:	e001      	b.n	8007c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000000 	.word	0x20000000
 8007c28:	10624dd3 	.word	0x10624dd3
 8007c2c:	fdffe008 	.word	0xfdffe008

08007c30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c38:	4b1f      	ldr	r3, [pc, #124]	; (8007cb8 <SDMMC_GetCmdResp2+0x88>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <SDMMC_GetCmdResp2+0x8c>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	0a5b      	lsrs	r3, r3, #9
 8007c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c48:	fb02 f303 	mul.w	r3, r2, r3
 8007c4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1e5a      	subs	r2, r3, #1
 8007c52:	60fa      	str	r2, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c5c:	e026      	b.n	8007cac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0ef      	beq.n	8007c4e <SDMMC_GetCmdResp2+0x1e>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1ea      	bne.n	8007c4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d004      	beq.n	8007c8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2204      	movs	r2, #4
 8007c88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c8a:	2304      	movs	r3, #4
 8007c8c:	e00e      	b.n	8007cac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e003      	b.n	8007cac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	22c5      	movs	r2, #197	; 0xc5
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	10624dd3 	.word	0x10624dd3

08007cc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <SDMMC_GetCmdResp3+0x74>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1a      	ldr	r2, [pc, #104]	; (8007d38 <SDMMC_GetCmdResp3+0x78>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	0a5b      	lsrs	r3, r3, #9
 8007cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	60fa      	str	r2, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ce8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cec:	e01b      	b.n	8007d26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0ef      	beq.n	8007cde <SDMMC_GetCmdResp3+0x1e>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1ea      	bne.n	8007cde <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2204      	movs	r2, #4
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d1a:	2304      	movs	r3, #4
 8007d1c:	e003      	b.n	8007d26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	22c5      	movs	r2, #197	; 0xc5
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000000 	.word	0x20000000
 8007d38:	10624dd3 	.word	0x10624dd3

08007d3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	460b      	mov	r3, r1
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d4a:	4b35      	ldr	r3, [pc, #212]	; (8007e20 <SDMMC_GetCmdResp6+0xe4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a35      	ldr	r2, [pc, #212]	; (8007e24 <SDMMC_GetCmdResp6+0xe8>)
 8007d50:	fba2 2303 	umull	r2, r3, r2, r3
 8007d54:	0a5b      	lsrs	r3, r3, #9
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	fb02 f303 	mul.w	r3, r2, r3
 8007d5e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	1e5a      	subs	r2, r3, #1
 8007d64:	61fa      	str	r2, [r7, #28]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d6e:	e052      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d0ef      	beq.n	8007d60 <SDMMC_GetCmdResp6+0x24>
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1ea      	bne.n	8007d60 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	e03a      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e02f      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff fbca 	bl	8007550 <SDMMC_GetCommandResponse>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d001      	beq.n	8007dca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e025      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	22c5      	movs	r2, #197	; 0xc5
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff fbc9 	bl	800756a <SDMMC_GetResponse>
 8007dd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d106      	bne.n	8007df2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	e011      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e00:	e009      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e10:	e001      	b.n	8007e16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000000 	.word	0x20000000
 8007e24:	10624dd3 	.word	0x10624dd3

08007e28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e30:	4b22      	ldr	r3, [pc, #136]	; (8007ebc <SDMMC_GetCmdResp7+0x94>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a22      	ldr	r2, [pc, #136]	; (8007ec0 <SDMMC_GetCmdResp7+0x98>)
 8007e36:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3a:	0a5b      	lsrs	r3, r3, #9
 8007e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e40:	fb02 f303 	mul.w	r3, r2, r3
 8007e44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1e5a      	subs	r2, r3, #1
 8007e4a:	60fa      	str	r2, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d102      	bne.n	8007e56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e54:	e02c      	b.n	8007eb0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0ef      	beq.n	8007e46 <SDMMC_GetCmdResp7+0x1e>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1ea      	bne.n	8007e46 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e82:	2304      	movs	r3, #4
 8007e84:	e014      	b.n	8007eb0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e009      	b.n	8007eb0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2240      	movs	r2, #64	; 0x40
 8007eac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007eae:	2300      	movs	r3, #0
  
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20000000 	.word	0x20000000
 8007ec0:	10624dd3 	.word	0x10624dd3

08007ec4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ecc:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <SDMMC_GetCmdError+0x50>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a11      	ldr	r2, [pc, #68]	; (8007f18 <SDMMC_GetCmdError+0x54>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	0a5b      	lsrs	r3, r3, #9
 8007ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1e5a      	subs	r2, r3, #1
 8007ee6:	60fa      	str	r2, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ef0:	e009      	b.n	8007f06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f1      	beq.n	8007ee2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	22c5      	movs	r2, #197	; 0xc5
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000000 	.word	0x20000000
 8007f18:	10624dd3 	.word	0x10624dd3

08007f1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007f20:	4904      	ldr	r1, [pc, #16]	; (8007f34 <MX_FATFS_Init+0x18>)
 8007f22:	4805      	ldr	r0, [pc, #20]	; (8007f38 <MX_FATFS_Init+0x1c>)
 8007f24:	f003 f834 	bl	800af90 <FATFS_LinkDriver>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <MX_FATFS_Init+0x20>)
 8007f2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f30:	bf00      	nop
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	200045f0 	.word	0x200045f0
 8007f38:	0800bf94 	.word	0x0800bf94
 8007f3c:	200045ec 	.word	0x200045ec

08007f40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007f5a:	f000 f896 	bl	800808a <BSP_SD_IsDetected>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d001      	beq.n	8007f68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007f64:	2302      	movs	r3, #2
 8007f66:	e012      	b.n	8007f8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007f68:	480b      	ldr	r0, [pc, #44]	; (8007f98 <BSP_SD_Init+0x48>)
 8007f6a:	f7fd facd 	bl	8005508 <HAL_SD_Init>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f7c:	4806      	ldr	r0, [pc, #24]	; (8007f98 <BSP_SD_Init+0x48>)
 8007f7e:	f7fe f893 	bl	80060a8 <HAL_SD_ConfigWideBusOperation>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200043f4 	.word	0x200043f4

08007f9c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	68f9      	ldr	r1, [r7, #12]
 8007fb2:	4806      	ldr	r0, [pc, #24]	; (8007fcc <BSP_SD_ReadBlocks_DMA+0x30>)
 8007fb4:	f7fd fb60 	bl	8005678 <HAL_SD_ReadBlocks_DMA>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	200043f4 	.word	0x200043f4

08007fd0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	4806      	ldr	r0, [pc, #24]	; (8008000 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007fe8:	f7fd fc28 	bl	800583c <HAL_SD_WriteBlocks_DMA>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200043f4 	.word	0x200043f4

08008004 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008008:	4805      	ldr	r0, [pc, #20]	; (8008020 <BSP_SD_GetCardState+0x1c>)
 800800a:	f7fe f8e7 	bl	80061dc <HAL_SD_GetCardState>
 800800e:	4603      	mov	r3, r0
 8008010:	2b04      	cmp	r3, #4
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
}
 800801a:	4618      	mov	r0, r3
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	200043f4 	.word	0x200043f4

08008024 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4803      	ldr	r0, [pc, #12]	; (800803c <BSP_SD_GetCardInfo+0x18>)
 8008030:	f7fe f80e 	bl	8006050 <HAL_SD_GetCardInfo>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200043f4 	.word	0x200043f4

08008040 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008048:	f000 f818 	bl	800807c <BSP_SD_AbortCallback>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800805c:	f000 f9a8 	bl	80083b0 <BSP_SD_WriteCpltCallback>
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008070:	f000 f9aa 	bl	80083c8 <BSP_SD_ReadCpltCallback>
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0

}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008090:	2301      	movs	r3, #1
 8008092:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008094:	f000 f80c 	bl	80080b0 <BSP_PlatformIsDetected>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800809e:	2300      	movs	r3, #0
 80080a0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	b2db      	uxtb	r3, r3
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80080b6:	2301      	movs	r3, #1
 80080b8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80080ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080be:	4806      	ldr	r0, [pc, #24]	; (80080d8 <BSP_PlatformIsDetected+0x28>)
 80080c0:	f7fb fa94 	bl	80035ec <HAL_GPIO_ReadPin>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80080ca:	2300      	movs	r3, #0
 80080cc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80080ce:	79fb      	ldrb	r3, [r7, #7]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40020400 	.word	0x40020400

080080dc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80080e4:	f7f9 fce4 	bl	8001ab0 <HAL_GetTick>
 80080e8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80080ea:	e006      	b.n	80080fa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80080ec:	f7ff ff8a 	bl	8008004 <BSP_SD_GetCardState>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e009      	b.n	800810e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80080fa:	f7f9 fcd9 	bl	8001ab0 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	429a      	cmp	r2, r3
 8008108:	d8f0      	bhi.n	80080ec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800810a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008122:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <SD_CheckStatus+0x38>)
 8008124:	2201      	movs	r2, #1
 8008126:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008128:	f7ff ff6c 	bl	8008004 <BSP_SD_GetCardState>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d107      	bne.n	8008142 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008132:	4b07      	ldr	r3, [pc, #28]	; (8008150 <SD_CheckStatus+0x38>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	b2da      	uxtb	r2, r3
 800813e:	4b04      	ldr	r3, [pc, #16]	; (8008150 <SD_CheckStatus+0x38>)
 8008140:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008142:	4b03      	ldr	r3, [pc, #12]	; (8008150 <SD_CheckStatus+0x38>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b2db      	uxtb	r3, r3
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000009 	.word	0x20000009

08008154 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800815e:	f7ff fef7 	bl	8007f50 <BSP_SD_Init>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d107      	bne.n	8008178 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ffd4 	bl	8008118 <SD_CheckStatus>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <SD_initialize+0x34>)
 8008176:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008178:	4b03      	ldr	r3, [pc, #12]	; (8008188 <SD_initialize+0x34>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b2db      	uxtb	r3, r3
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000009 	.word	0x20000009

0800818c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff ffbd 	bl	8008118 <SD_CheckStatus>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80081bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80081c0:	f7ff ff8c 	bl	80080dc <SD_CheckStatusWithTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da01      	bge.n	80081ce <SD_read+0x26>
  {
    return res;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	e03b      	b.n	8008246 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f7ff fee2 	bl	8007f9c <BSP_SD_ReadBlocks_DMA>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d132      	bne.n	8008244 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80081de:	4b1c      	ldr	r3, [pc, #112]	; (8008250 <SD_read+0xa8>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80081e4:	f7f9 fc64 	bl	8001ab0 <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80081ea:	bf00      	nop
 80081ec:	4b18      	ldr	r3, [pc, #96]	; (8008250 <SD_read+0xa8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d108      	bne.n	8008206 <SD_read+0x5e>
 80081f4:	f7f9 fc5c 	bl	8001ab0 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8008202:	4293      	cmp	r3, r2
 8008204:	d9f2      	bls.n	80081ec <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008206:	4b12      	ldr	r3, [pc, #72]	; (8008250 <SD_read+0xa8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
 8008212:	e017      	b.n	8008244 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <SD_read+0xa8>)
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800821a:	f7f9 fc49 	bl	8001ab0 <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008220:	e007      	b.n	8008232 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008222:	f7ff feef 	bl	8008004 <BSP_SD_GetCardState>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <SD_read+0x8a>
          {
            res = RES_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008230:	e008      	b.n	8008244 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008232:	f7f9 fc3d 	bl	8001ab0 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008240:	4293      	cmp	r3, r2
 8008242:	d9ee      	bls.n	8008222 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20004a58 	.word	0x20004a58

08008254 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008268:	4b24      	ldr	r3, [pc, #144]	; (80082fc <SD_write+0xa8>)
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800826e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008272:	f7ff ff33 	bl	80080dc <SD_CheckStatusWithTimeout>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	da01      	bge.n	8008280 <SD_write+0x2c>
  {
    return res;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	e038      	b.n	80082f2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	68b8      	ldr	r0, [r7, #8]
 8008286:	f7ff fea3 	bl	8007fd0 <BSP_SD_WriteBlocks_DMA>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d12f      	bne.n	80082f0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008290:	f7f9 fc0e 	bl	8001ab0 <HAL_GetTick>
 8008294:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008296:	bf00      	nop
 8008298:	4b18      	ldr	r3, [pc, #96]	; (80082fc <SD_write+0xa8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <SD_write+0x5e>
 80082a0:	f7f9 fc06 	bl	8001ab0 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d9f2      	bls.n	8008298 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <SD_write+0xa8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
 80082be:	e017      	b.n	80082f0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80082c0:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <SD_write+0xa8>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80082c6:	f7f9 fbf3 	bl	8001ab0 <HAL_GetTick>
 80082ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80082cc:	e007      	b.n	80082de <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80082ce:	f7ff fe99 	bl	8008004 <BSP_SD_GetCardState>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <SD_write+0x8a>
          {
            res = RES_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	75fb      	strb	r3, [r7, #23]
            break;
 80082dc:	e008      	b.n	80082f0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80082de:	f7f9 fbe7 	bl	8001ab0 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d9ee      	bls.n	80082ce <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20004a54 	.word	0x20004a54

08008300 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08c      	sub	sp, #48	; 0x30
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	603a      	str	r2, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
 800830c:	460b      	mov	r3, r1
 800830e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008316:	4b25      	ldr	r3, [pc, #148]	; (80083ac <SD_ioctl+0xac>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <SD_ioctl+0x28>
 8008324:	2303      	movs	r3, #3
 8008326:	e03c      	b.n	80083a2 <SD_ioctl+0xa2>

  switch (cmd)
 8008328:	79bb      	ldrb	r3, [r7, #6]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d834      	bhi.n	8008398 <SD_ioctl+0x98>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <SD_ioctl+0x34>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008345 	.word	0x08008345
 8008338:	0800834d 	.word	0x0800834d
 800833c:	08008365 	.word	0x08008365
 8008340:	0800837f 	.word	0x0800837f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800834a:	e028      	b.n	800839e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fe67 	bl	8008024 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008362:	e01c      	b.n	800839e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fe5b 	bl	8008024 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	b29a      	uxth	r2, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800837c:	e00f      	b.n	800839e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800837e:	f107 030c 	add.w	r3, r7, #12
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fe4e 	bl	8008024 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	0a5a      	lsrs	r2, r3, #9
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008396:	e002      	b.n	800839e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008398:	2304      	movs	r3, #4
 800839a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800839e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3730      	adds	r7, #48	; 0x30
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000009 	.word	0x20000009

080083b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80083b4:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <BSP_SD_WriteCpltCallback+0x14>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20004a54 	.word	0x20004a54

080083c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80083cc:	4b03      	ldr	r3, [pc, #12]	; (80083dc <BSP_SD_ReadCpltCallback+0x14>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20004a58 	.word	0x20004a58

080083e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	4a08      	ldr	r2, [pc, #32]	; (8008410 <disk_status+0x30>)
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	79fa      	ldrb	r2, [r7, #7]
 80083f8:	4905      	ldr	r1, [pc, #20]	; (8008410 <disk_status+0x30>)
 80083fa:	440a      	add	r2, r1
 80083fc:	7a12      	ldrb	r2, [r2, #8]
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20004a84 	.word	0x20004a84

08008414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	4a0d      	ldr	r2, [pc, #52]	; (800845c <disk_initialize+0x48>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d111      	bne.n	8008450 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	4a0b      	ldr	r2, [pc, #44]	; (800845c <disk_initialize+0x48>)
 8008430:	2101      	movs	r1, #1
 8008432:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	4a09      	ldr	r2, [pc, #36]	; (800845c <disk_initialize+0x48>)
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	79fa      	ldrb	r2, [r7, #7]
 8008442:	4906      	ldr	r1, [pc, #24]	; (800845c <disk_initialize+0x48>)
 8008444:	440a      	add	r2, r1
 8008446:	7a12      	ldrb	r2, [r2, #8]
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20004a84 	.word	0x20004a84

08008460 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4a0a      	ldr	r2, [pc, #40]	; (800849c <disk_read+0x3c>)
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	689c      	ldr	r4, [r3, #8]
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4a07      	ldr	r2, [pc, #28]	; (800849c <disk_read+0x3c>)
 8008480:	4413      	add	r3, r2
 8008482:	7a18      	ldrb	r0, [r3, #8]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	47a0      	blx	r4
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	20004a84 	.word	0x20004a84

080084a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084a0:	b590      	push	{r4, r7, lr}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <disk_write+0x3c>)
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	68dc      	ldr	r4, [r3, #12]
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4a07      	ldr	r2, [pc, #28]	; (80084dc <disk_write+0x3c>)
 80084c0:	4413      	add	r3, r2
 80084c2:	7a18      	ldrb	r0, [r3, #8]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	47a0      	blx	r4
 80084cc:	4603      	mov	r3, r0
 80084ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd90      	pop	{r4, r7, pc}
 80084da:	bf00      	nop
 80084dc:	20004a84 	.word	0x20004a84

080084e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	603a      	str	r2, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
 80084ec:	460b      	mov	r3, r1
 80084ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	4a09      	ldr	r2, [pc, #36]	; (8008518 <disk_ioctl+0x38>)
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	79fa      	ldrb	r2, [r7, #7]
 80084fe:	4906      	ldr	r1, [pc, #24]	; (8008518 <disk_ioctl+0x38>)
 8008500:	440a      	add	r2, r1
 8008502:	7a10      	ldrb	r0, [r2, #8]
 8008504:	79b9      	ldrb	r1, [r7, #6]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4798      	blx	r3
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
  return res;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20004a84 	.word	0x20004a84

0800851c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3301      	adds	r3, #1
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800852c:	89fb      	ldrh	r3, [r7, #14]
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	b21a      	sxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b21b      	sxth	r3, r3
 8008538:	4313      	orrs	r3, r2
 800853a:	b21b      	sxth	r3, r3
 800853c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800853e:	89fb      	ldrh	r3, [r7, #14]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3303      	adds	r3, #3
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	3202      	adds	r2, #2
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	021b      	lsls	r3, r3, #8
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	3201      	adds	r2, #1
 8008572:	7812      	ldrb	r2, [r2, #0]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
	return rv;
 8008584:	68fb      	ldr	r3, [r7, #12]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	887a      	ldrh	r2, [r7, #2]
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	701a      	strb	r2, [r3, #0]
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	887a      	ldrh	r2, [r7, #2]
 80085b8:	b2d2      	uxtb	r2, r2
 80085ba:	701a      	strb	r2, [r3, #0]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	0a1b      	lsrs	r3, r3, #8
 8008606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	701a      	strb	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00d      	beq.n	8008656 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	1c53      	adds	r3, r2, #1
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	1c59      	adds	r1, r3, #1
 8008644:	6179      	str	r1, [r7, #20]
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3b01      	subs	r3, #1
 800864e:	607b      	str	r3, [r7, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1f1      	bne.n	800863a <mem_cpy+0x1a>
	}
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008662:	b480      	push	{r7}
 8008664:	b087      	sub	sp, #28
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	617a      	str	r2, [r7, #20]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3b01      	subs	r3, #1
 8008682:	607b      	str	r3, [r7, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f3      	bne.n	8008672 <mem_set+0x10>
}
 800868a:	bf00      	nop
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	61fa      	str	r2, [r7, #28]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	61ba      	str	r2, [r7, #24]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	1acb      	subs	r3, r1, r3
 80086c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <mem_cmp+0x40>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0eb      	beq.n	80086b0 <mem_cmp+0x18>

	return r;
 80086d8:	697b      	ldr	r3, [r7, #20]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3724      	adds	r7, #36	; 0x24
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80086f0:	e002      	b.n	80086f8 <chk_chr+0x12>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3301      	adds	r3, #1
 80086f6:	607b      	str	r3, [r7, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <chk_chr+0x26>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	4293      	cmp	r3, r2
 800870a:	d1f2      	bne.n	80086f2 <chk_chr+0xc>
	return *str;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	781b      	ldrb	r3, [r3, #0]
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e029      	b.n	8008784 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008730:	4a27      	ldr	r2, [pc, #156]	; (80087d0 <chk_lock+0xb4>)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	4413      	add	r3, r2
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d01d      	beq.n	800877a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800873e:	4a24      	ldr	r2, [pc, #144]	; (80087d0 <chk_lock+0xb4>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	4413      	add	r3, r2
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d116      	bne.n	800877e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008750:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <chk_lock+0xb4>)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008760:	429a      	cmp	r2, r3
 8008762:	d10c      	bne.n	800877e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008764:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <chk_lock+0xb4>)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	4413      	add	r3, r2
 800876c:	3308      	adds	r3, #8
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008774:	429a      	cmp	r2, r3
 8008776:	d102      	bne.n	800877e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008778:	e007      	b.n	800878a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800877a:	2301      	movs	r3, #1
 800877c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d9d2      	bls.n	8008730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d109      	bne.n	80087a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d102      	bne.n	800879c <chk_lock+0x80>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d101      	bne.n	80087a0 <chk_lock+0x84>
 800879c:	2300      	movs	r3, #0
 800879e:	e010      	b.n	80087c2 <chk_lock+0xa6>
 80087a0:	2312      	movs	r3, #18
 80087a2:	e00e      	b.n	80087c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d108      	bne.n	80087bc <chk_lock+0xa0>
 80087aa:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <chk_lock+0xb4>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	4413      	add	r3, r2
 80087b2:	330c      	adds	r3, #12
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ba:	d101      	bne.n	80087c0 <chk_lock+0xa4>
 80087bc:	2310      	movs	r3, #16
 80087be:	e000      	b.n	80087c2 <chk_lock+0xa6>
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20004a64 	.word	0x20004a64

080087d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087da:	2300      	movs	r3, #0
 80087dc:	607b      	str	r3, [r7, #4]
 80087de:	e002      	b.n	80087e6 <enq_lock+0x12>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3301      	adds	r3, #1
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d806      	bhi.n	80087fa <enq_lock+0x26>
 80087ec:	4a09      	ldr	r2, [pc, #36]	; (8008814 <enq_lock+0x40>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	4413      	add	r3, r2
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f2      	bne.n	80087e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	b2db      	uxtb	r3, r3
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20004a64 	.word	0x20004a64

08008818 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	e01f      	b.n	8008868 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008828:	4a41      	ldr	r2, [pc, #260]	; (8008930 <inc_lock+0x118>)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	4413      	add	r3, r2
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d113      	bne.n	8008862 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800883a:	4a3d      	ldr	r2, [pc, #244]	; (8008930 <inc_lock+0x118>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	4413      	add	r3, r2
 8008842:	3304      	adds	r3, #4
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800884a:	429a      	cmp	r2, r3
 800884c:	d109      	bne.n	8008862 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800884e:	4a38      	ldr	r2, [pc, #224]	; (8008930 <inc_lock+0x118>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	4413      	add	r3, r2
 8008856:	3308      	adds	r3, #8
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800885e:	429a      	cmp	r2, r3
 8008860:	d006      	beq.n	8008870 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d9dc      	bls.n	8008828 <inc_lock+0x10>
 800886e:	e000      	b.n	8008872 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008870:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b02      	cmp	r3, #2
 8008876:	d132      	bne.n	80088de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	e002      	b.n	8008884 <inc_lock+0x6c>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d806      	bhi.n	8008898 <inc_lock+0x80>
 800888a:	4a29      	ldr	r2, [pc, #164]	; (8008930 <inc_lock+0x118>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	4413      	add	r3, r2
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f2      	bne.n	800887e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d101      	bne.n	80088a2 <inc_lock+0x8a>
 800889e:	2300      	movs	r3, #0
 80088a0:	e040      	b.n	8008924 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4922      	ldr	r1, [pc, #136]	; (8008930 <inc_lock+0x118>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	440b      	add	r3, r1
 80088ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	491e      	ldr	r1, [pc, #120]	; (8008930 <inc_lock+0x118>)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	440b      	add	r3, r1
 80088bc:	3304      	adds	r3, #4
 80088be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695a      	ldr	r2, [r3, #20]
 80088c4:	491a      	ldr	r1, [pc, #104]	; (8008930 <inc_lock+0x118>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	440b      	add	r3, r1
 80088cc:	3308      	adds	r3, #8
 80088ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80088d0:	4a17      	ldr	r2, [pc, #92]	; (8008930 <inc_lock+0x118>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	4413      	add	r3, r2
 80088d8:	330c      	adds	r3, #12
 80088da:	2200      	movs	r2, #0
 80088dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d009      	beq.n	80088f8 <inc_lock+0xe0>
 80088e4:	4a12      	ldr	r2, [pc, #72]	; (8008930 <inc_lock+0x118>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	4413      	add	r3, r2
 80088ec:	330c      	adds	r3, #12
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <inc_lock+0xe0>
 80088f4:	2300      	movs	r3, #0
 80088f6:	e015      	b.n	8008924 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d108      	bne.n	8008910 <inc_lock+0xf8>
 80088fe:	4a0c      	ldr	r2, [pc, #48]	; (8008930 <inc_lock+0x118>)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	4413      	add	r3, r2
 8008906:	330c      	adds	r3, #12
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	e001      	b.n	8008914 <inc_lock+0xfc>
 8008910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008914:	4906      	ldr	r1, [pc, #24]	; (8008930 <inc_lock+0x118>)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	440b      	add	r3, r1
 800891c:	330c      	adds	r3, #12
 800891e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3301      	adds	r3, #1
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20004a64 	.word	0x20004a64

08008934 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3b01      	subs	r3, #1
 8008940:	607b      	str	r3, [r7, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d825      	bhi.n	8008994 <dec_lock+0x60>
		n = Files[i].ctr;
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <dec_lock+0x74>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	4413      	add	r3, r2
 8008950:	330c      	adds	r3, #12
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008956:	89fb      	ldrh	r3, [r7, #14]
 8008958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895c:	d101      	bne.n	8008962 <dec_lock+0x2e>
 800895e:	2300      	movs	r3, #0
 8008960:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008962:	89fb      	ldrh	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <dec_lock+0x3a>
 8008968:	89fb      	ldrh	r3, [r7, #14]
 800896a:	3b01      	subs	r3, #1
 800896c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800896e:	4a0e      	ldr	r2, [pc, #56]	; (80089a8 <dec_lock+0x74>)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	4413      	add	r3, r2
 8008976:	330c      	adds	r3, #12
 8008978:	89fa      	ldrh	r2, [r7, #14]
 800897a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800897c:	89fb      	ldrh	r3, [r7, #14]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <dec_lock+0x5a>
 8008982:	4a09      	ldr	r2, [pc, #36]	; (80089a8 <dec_lock+0x74>)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	4413      	add	r3, r2
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	737b      	strb	r3, [r7, #13]
 8008992:	e001      	b.n	8008998 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008994:	2302      	movs	r3, #2
 8008996:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008998:	7b7b      	ldrb	r3, [r7, #13]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	20004a64 	.word	0x20004a64

080089ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e010      	b.n	80089dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80089ba:	4a0d      	ldr	r2, [pc, #52]	; (80089f0 <clear_lock+0x44>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	4413      	add	r3, r2
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d105      	bne.n	80089d6 <clear_lock+0x2a>
 80089ca:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <clear_lock+0x44>)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	4413      	add	r3, r2
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3301      	adds	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d9eb      	bls.n	80089ba <clear_lock+0xe>
	}
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20004a64 	.word	0x20004a64

080089f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	78db      	ldrb	r3, [r3, #3]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d034      	beq.n	8008a72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7858      	ldrb	r0, [r3, #1]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a18:	2301      	movs	r3, #1
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	f7ff fd40 	bl	80084a0 <disk_write>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	e022      	b.n	8008a72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	1ad2      	subs	r2, r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d217      	bcs.n	8008a72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	789b      	ldrb	r3, [r3, #2]
 8008a46:	613b      	str	r3, [r7, #16]
 8008a48:	e010      	b.n	8008a6c <sync_window+0x78>
					wsect += fs->fsize;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4413      	add	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7858      	ldrb	r0, [r3, #1]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a5e:	2301      	movs	r3, #1
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	f7ff fd1d 	bl	80084a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d8eb      	bhi.n	8008a4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d01b      	beq.n	8008acc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ffad 	bl	80089f4 <sync_window>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d113      	bne.n	8008acc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	7858      	ldrb	r0, [r3, #1]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aae:	2301      	movs	r3, #1
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	f7ff fcd5 	bl	8008460 <disk_read>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ac0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff ff87 	bl	80089f4 <sync_window>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d158      	bne.n	8008ba2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d148      	bne.n	8008b8a <sync_fs+0xb2>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d144      	bne.n	8008b8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3330      	adds	r3, #48	; 0x30
 8008b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff fda9 	bl	8008662 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3330      	adds	r3, #48	; 0x30
 8008b14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fd38 	bl	8008592 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3330      	adds	r3, #48	; 0x30
 8008b26:	4921      	ldr	r1, [pc, #132]	; (8008bac <sync_fs+0xd4>)
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fd4d 	bl	80085c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3330      	adds	r3, #48	; 0x30
 8008b32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b36:	491e      	ldr	r1, [pc, #120]	; (8008bb0 <sync_fs+0xd8>)
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff fd45 	bl	80085c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3330      	adds	r3, #48	; 0x30
 8008b42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f7ff fd3b 	bl	80085c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3330      	adds	r3, #48	; 0x30
 8008b56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f7ff fd31 	bl	80085c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7858      	ldrb	r0, [r3, #1]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f7ff fc8e 	bl	80084a0 <disk_write>
			fs->fsi_flag = 0;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff fca4 	bl	80084e0 <disk_ioctl>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <sync_fs+0xca>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	41615252 	.word	0x41615252
 8008bb0:	61417272 	.word	0x61417272

08008bb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	3b02      	subs	r3, #2
 8008bc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	3b02      	subs	r3, #2
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d301      	bcc.n	8008bd4 <clust2sect+0x20>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e008      	b.n	8008be6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	895b      	ldrh	r3, [r3, #10]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	fb03 f202 	mul.w	r2, r3, r2
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	4413      	add	r3, r2
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d904      	bls.n	8008c12 <get_fat+0x20>
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d302      	bcc.n	8008c18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c12:	2301      	movs	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e08f      	b.n	8008d38 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d062      	beq.n	8008cec <get_fat+0xfa>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	dc7c      	bgt.n	8008d24 <get_fat+0x132>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d002      	beq.n	8008c34 <get_fat+0x42>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d042      	beq.n	8008cb8 <get_fat+0xc6>
 8008c32:	e077      	b.n	8008d24 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6a1a      	ldr	r2, [r3, #32]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	0a5b      	lsrs	r3, r3, #9
 8008c4a:	4413      	add	r3, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6938      	ldr	r0, [r7, #16]
 8008c50:	f7ff ff14 	bl	8008a7c <move_window>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d167      	bne.n	8008d2a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	60fa      	str	r2, [r7, #12]
 8008c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4413      	add	r3, r2
 8008c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6a1a      	ldr	r2, [r3, #32]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	0a5b      	lsrs	r3, r3, #9
 8008c76:	4413      	add	r3, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6938      	ldr	r0, [r7, #16]
 8008c7c:	f7ff fefe 	bl	8008a7c <move_window>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d153      	bne.n	8008d2e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	461a      	mov	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <get_fat+0xbc>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	e002      	b.n	8008cb4 <get_fat+0xc2>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cb4:	617b      	str	r3, [r7, #20]
			break;
 8008cb6:	e03f      	b.n	8008d38 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6a1a      	ldr	r2, [r3, #32]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	0a1b      	lsrs	r3, r3, #8
 8008cc0:	4413      	add	r3, r2
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6938      	ldr	r0, [r7, #16]
 8008cc6:	f7ff fed9 	bl	8008a7c <move_window>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d130      	bne.n	8008d32 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008cde:	4413      	add	r3, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fc1b 	bl	800851c <ld_word>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	617b      	str	r3, [r7, #20]
			break;
 8008cea:	e025      	b.n	8008d38 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	6a1a      	ldr	r2, [r3, #32]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	09db      	lsrs	r3, r3, #7
 8008cf4:	4413      	add	r3, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6938      	ldr	r0, [r7, #16]
 8008cfa:	f7ff febf 	bl	8008a7c <move_window>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d118      	bne.n	8008d36 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008d12:	4413      	add	r3, r2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fc19 	bl	800854c <ld_dword>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d20:	617b      	str	r3, [r7, #20]
			break;
 8008d22:	e009      	b.n	8008d38 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d24:	2301      	movs	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	e006      	b.n	8008d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d2a:	bf00      	nop
 8008d2c:	e004      	b.n	8008d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d2e:	bf00      	nop
 8008d30:	e002      	b.n	8008d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d32:	bf00      	nop
 8008d34:	e000      	b.n	8008d38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d36:	bf00      	nop
		}
	}

	return val;
 8008d38:	697b      	ldr	r3, [r7, #20]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d42:	b590      	push	{r4, r7, lr}
 8008d44:	b089      	sub	sp, #36	; 0x24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	f240 80d2 	bls.w	8008efe <put_fat+0x1bc>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	f080 80cc 	bcs.w	8008efe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	f000 8096 	beq.w	8008e9c <put_fat+0x15a>
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	f300 80cd 	bgt.w	8008f10 <put_fat+0x1ce>
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d002      	beq.n	8008d80 <put_fat+0x3e>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d06e      	beq.n	8008e5c <put_fat+0x11a>
 8008d7e:	e0c7      	b.n	8008f10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	61bb      	str	r3, [r7, #24]
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	085b      	lsrs	r3, r3, #1
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a1a      	ldr	r2, [r3, #32]
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	0a5b      	lsrs	r3, r3, #9
 8008d96:	4413      	add	r3, r2
 8008d98:	4619      	mov	r1, r3
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff fe6e 	bl	8008a7c <move_window>
 8008da0:	4603      	mov	r3, r0
 8008da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008da4:	7ffb      	ldrb	r3, [r7, #31]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f040 80ab 	bne.w	8008f02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	1c59      	adds	r1, r3, #1
 8008db6:	61b9      	str	r1, [r7, #24]
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	4413      	add	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00d      	beq.n	8008de6 <put_fat+0xa4>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b25b      	sxtb	r3, r3
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	b25a      	sxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	b25b      	sxtb	r3, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	e001      	b.n	8008dea <put_fat+0xa8>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	0a5b      	lsrs	r3, r3, #9
 8008dfc:	4413      	add	r3, r2
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff fe3b 	bl	8008a7c <move_window>
 8008e06:	4603      	mov	r3, r0
 8008e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e0a:	7ffb      	ldrb	r3, [r7, #31]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d17a      	bne.n	8008f06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1c:	4413      	add	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <put_fat+0xf0>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	091b      	lsrs	r3, r3, #4
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	e00e      	b.n	8008e50 <put_fat+0x10e>
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	f023 030f 	bic.w	r3, r3, #15
 8008e3c:	b25a      	sxtb	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	b25b      	sxtb	r3, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	b25b      	sxtb	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	70da      	strb	r2, [r3, #3]
			break;
 8008e5a:	e059      	b.n	8008f10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a1a      	ldr	r2, [r3, #32]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	4413      	add	r3, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff fe07 	bl	8008a7c <move_window>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e72:	7ffb      	ldrb	r3, [r7, #31]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d148      	bne.n	8008f0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008e86:	4413      	add	r3, r2
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff fb7f 	bl	8008592 <st_word>
			fs->wflag = 1;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	70da      	strb	r2, [r3, #3]
			break;
 8008e9a:	e039      	b.n	8008f10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a1a      	ldr	r2, [r3, #32]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	09db      	lsrs	r3, r3, #7
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff fde7 	bl	8008a7c <move_window>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eb2:	7ffb      	ldrb	r3, [r7, #31]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d12a      	bne.n	8008f0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008ecc:	4413      	add	r3, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff fb3c 	bl	800854c <ld_dword>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008eda:	4323      	orrs	r3, r4
 8008edc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008eec:	4413      	add	r3, r2
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fb69 	bl	80085c8 <st_dword>
			fs->wflag = 1;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	70da      	strb	r2, [r3, #3]
			break;
 8008efc:	e008      	b.n	8008f10 <put_fat+0x1ce>
		}
	}
 8008efe:	bf00      	nop
 8008f00:	e006      	b.n	8008f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008f02:	bf00      	nop
 8008f04:	e004      	b.n	8008f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008f06:	bf00      	nop
 8008f08:	e002      	b.n	8008f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008f0a:	bf00      	nop
 8008f0c:	e000      	b.n	8008f10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008f0e:	bf00      	nop
	return res;
 8008f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3724      	adds	r7, #36	; 0x24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd90      	pop	{r4, r7, pc}

08008f1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b088      	sub	sp, #32
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d904      	bls.n	8008f40 <remove_chain+0x26>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d301      	bcc.n	8008f44 <remove_chain+0x2a>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e04b      	b.n	8008fdc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	69b8      	ldr	r0, [r7, #24]
 8008f52:	f7ff fef6 	bl	8008d42 <put_fat>
 8008f56:	4603      	mov	r3, r0
 8008f58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f5a:	7ffb      	ldrb	r3, [r7, #31]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <remove_chain+0x4a>
 8008f60:	7ffb      	ldrb	r3, [r7, #31]
 8008f62:	e03b      	b.n	8008fdc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fe43 	bl	8008bf2 <get_fat>
 8008f6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d031      	beq.n	8008fd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <remove_chain+0x64>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e02e      	b.n	8008fdc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f84:	d101      	bne.n	8008f8a <remove_chain+0x70>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e028      	b.n	8008fdc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	69b8      	ldr	r0, [r7, #24]
 8008f90:	f7ff fed7 	bl	8008d42 <put_fat>
 8008f94:	4603      	mov	r3, r0
 8008f96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008f98:	7ffb      	ldrb	r3, [r7, #31]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <remove_chain+0x88>
 8008f9e:	7ffb      	ldrb	r3, [r7, #31]
 8008fa0:	e01c      	b.n	8008fdc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	3b02      	subs	r3, #2
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d20b      	bcs.n	8008fc8 <remove_chain+0xae>
			fs->free_clst++;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	791b      	ldrb	r3, [r3, #4]
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d3c6      	bcc.n	8008f64 <remove_chain+0x4a>
 8008fd6:	e000      	b.n	8008fda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008fd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3720      	adds	r7, #32
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10d      	bne.n	8009016 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <create_chain+0x2c>
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	429a      	cmp	r2, r3
 800900e:	d31b      	bcc.n	8009048 <create_chain+0x64>
 8009010:	2301      	movs	r3, #1
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e018      	b.n	8009048 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fdea 	bl	8008bf2 <get_fat>
 800901e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d801      	bhi.n	800902a <create_chain+0x46>
 8009026:	2301      	movs	r3, #1
 8009028:	e070      	b.n	800910c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009030:	d101      	bne.n	8009036 <create_chain+0x52>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	e06a      	b.n	800910c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d201      	bcs.n	8009044 <create_chain+0x60>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	e063      	b.n	800910c <create_chain+0x128>
		scl = clst;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	3301      	adds	r3, #1
 8009050:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	429a      	cmp	r2, r3
 800905a:	d307      	bcc.n	800906c <create_chain+0x88>
				ncl = 2;
 800905c:	2302      	movs	r3, #2
 800905e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	429a      	cmp	r2, r3
 8009066:	d901      	bls.n	800906c <create_chain+0x88>
 8009068:	2300      	movs	r3, #0
 800906a:	e04f      	b.n	800910c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800906c:	69f9      	ldr	r1, [r7, #28]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fdbf 	bl	8008bf2 <get_fat>
 8009074:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00e      	beq.n	800909a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d003      	beq.n	800908a <create_chain+0xa6>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009088:	d101      	bne.n	800908e <create_chain+0xaa>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	e03e      	b.n	800910c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	429a      	cmp	r2, r3
 8009094:	d1da      	bne.n	800904c <create_chain+0x68>
 8009096:	2300      	movs	r3, #0
 8009098:	e038      	b.n	800910c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800909a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800909c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090a0:	69f9      	ldr	r1, [r7, #28]
 80090a2:	6938      	ldr	r0, [r7, #16]
 80090a4:	f7ff fe4d 	bl	8008d42 <put_fat>
 80090a8:	4603      	mov	r3, r0
 80090aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <create_chain+0xe2>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d006      	beq.n	80090c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090b8:	69fa      	ldr	r2, [r7, #28]
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6938      	ldr	r0, [r7, #16]
 80090be:	f7ff fe40 	bl	8008d42 <put_fat>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d116      	bne.n	80090fa <create_chain+0x116>
		fs->last_clst = ncl;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	691a      	ldr	r2, [r3, #16]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	3b02      	subs	r3, #2
 80090dc:	429a      	cmp	r2, r3
 80090de:	d804      	bhi.n	80090ea <create_chain+0x106>
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	1e5a      	subs	r2, r3, #1
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	791b      	ldrb	r3, [r3, #4]
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	711a      	strb	r2, [r3, #4]
 80090f8:	e007      	b.n	800910a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d102      	bne.n	8009106 <create_chain+0x122>
 8009100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009104:	e000      	b.n	8009108 <create_chain+0x124>
 8009106:	2301      	movs	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800910a:	69fb      	ldr	r3, [r7, #28]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	3304      	adds	r3, #4
 800912a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	0a5b      	lsrs	r3, r3, #9
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	8952      	ldrh	r2, [r2, #10]
 8009134:	fbb3 f3f2 	udiv	r3, r3, r2
 8009138:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	1d1a      	adds	r2, r3, #4
 800913e:	613a      	str	r2, [r7, #16]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <clmt_clust+0x3a>
 800914a:	2300      	movs	r3, #0
 800914c:	e010      	b.n	8009170 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	429a      	cmp	r2, r3
 8009154:	d307      	bcc.n	8009166 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	3304      	adds	r3, #4
 8009162:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009164:	e7e9      	b.n	800913a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009166:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	4413      	add	r3, r2
}
 8009170:	4618      	mov	r0, r3
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009192:	d204      	bcs.n	800919e <dir_sdi+0x22>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	f003 031f 	and.w	r3, r3, #31
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800919e:	2302      	movs	r3, #2
 80091a0:	e063      	b.n	800926a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d106      	bne.n	80091c2 <dir_sdi+0x46>
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d902      	bls.n	80091c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10c      	bne.n	80091e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	8912      	ldrh	r2, [r2, #8]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d301      	bcc.n	80091d8 <dir_sdi+0x5c>
 80091d4:	2302      	movs	r3, #2
 80091d6:	e048      	b.n	800926a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	61da      	str	r2, [r3, #28]
 80091e0:	e029      	b.n	8009236 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	895b      	ldrh	r3, [r3, #10]
 80091e6:	025b      	lsls	r3, r3, #9
 80091e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80091ea:	e019      	b.n	8009220 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6979      	ldr	r1, [r7, #20]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff fcfe 	bl	8008bf2 <get_fat>
 80091f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fe:	d101      	bne.n	8009204 <dir_sdi+0x88>
 8009200:	2301      	movs	r3, #1
 8009202:	e032      	b.n	800926a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d904      	bls.n	8009214 <dir_sdi+0x98>
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	429a      	cmp	r2, r3
 8009212:	d301      	bcc.n	8009218 <dir_sdi+0x9c>
 8009214:	2302      	movs	r3, #2
 8009216:	e028      	b.n	800926a <dir_sdi+0xee>
			ofs -= csz;
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	429a      	cmp	r2, r3
 8009226:	d2e1      	bcs.n	80091ec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009228:	6979      	ldr	r1, [r7, #20]
 800922a:	6938      	ldr	r0, [r7, #16]
 800922c:	f7ff fcc2 	bl	8008bb4 <clust2sect>
 8009230:	4602      	mov	r2, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <dir_sdi+0xcc>
 8009244:	2302      	movs	r3, #2
 8009246:	e010      	b.n	800926a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	0a5b      	lsrs	r3, r3, #9
 8009250:	441a      	add	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009262:	441a      	add	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b086      	sub	sp, #24
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	3320      	adds	r3, #32
 8009288:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <dir_next+0x28>
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009298:	d301      	bcc.n	800929e <dir_next+0x2c>
 800929a:	2304      	movs	r3, #4
 800929c:	e0aa      	b.n	80093f4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f040 8098 	bne.w	80093da <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	8912      	ldrh	r2, [r2, #8]
 80092c4:	4293      	cmp	r3, r2
 80092c6:	f0c0 8088 	bcc.w	80093da <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	61da      	str	r2, [r3, #28]
 80092d0:	2304      	movs	r3, #4
 80092d2:	e08f      	b.n	80093f4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	0a5b      	lsrs	r3, r3, #9
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	8952      	ldrh	r2, [r2, #10]
 80092dc:	3a01      	subs	r2, #1
 80092de:	4013      	ands	r3, r2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d17a      	bne.n	80093da <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	4619      	mov	r1, r3
 80092ec:	4610      	mov	r0, r2
 80092ee:	f7ff fc80 	bl	8008bf2 <get_fat>
 80092f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d801      	bhi.n	80092fe <dir_next+0x8c>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e07a      	b.n	80093f4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009304:	d101      	bne.n	800930a <dir_next+0x98>
 8009306:	2301      	movs	r3, #1
 8009308:	e074      	b.n	80093f4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	429a      	cmp	r2, r3
 8009312:	d358      	bcc.n	80093c6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	61da      	str	r2, [r3, #28]
 8009320:	2304      	movs	r3, #4
 8009322:	e067      	b.n	80093f4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	4619      	mov	r1, r3
 800932c:	4610      	mov	r0, r2
 800932e:	f7ff fe59 	bl	8008fe4 <create_chain>
 8009332:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <dir_next+0xcc>
 800933a:	2307      	movs	r3, #7
 800933c:	e05a      	b.n	80093f4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <dir_next+0xd6>
 8009344:	2302      	movs	r3, #2
 8009346:	e055      	b.n	80093f4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800934e:	d101      	bne.n	8009354 <dir_next+0xe2>
 8009350:	2301      	movs	r3, #1
 8009352:	e04f      	b.n	80093f4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7ff fb4d 	bl	80089f4 <sync_window>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <dir_next+0xf2>
 8009360:	2301      	movs	r3, #1
 8009362:	e047      	b.n	80093f4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3330      	adds	r3, #48	; 0x30
 8009368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800936c:	2100      	movs	r1, #0
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff f977 	bl	8008662 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009374:	2300      	movs	r3, #0
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	6979      	ldr	r1, [r7, #20]
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fc1a 	bl	8008bb4 <clust2sect>
 8009380:	4602      	mov	r2, r0
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	62da      	str	r2, [r3, #44]	; 0x2c
 8009386:	e012      	b.n	80093ae <dir_next+0x13c>
						fs->wflag = 1;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff fb30 	bl	80089f4 <sync_window>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <dir_next+0x12c>
 800939a:	2301      	movs	r3, #1
 800939c:	e02a      	b.n	80093f4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	3301      	adds	r3, #1
 80093a2:	613b      	str	r3, [r7, #16]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	895b      	ldrh	r3, [r3, #10]
 80093b2:	461a      	mov	r2, r3
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d3e6      	bcc.n	8009388 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad2      	subs	r2, r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80093cc:	6979      	ldr	r1, [r7, #20]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7ff fbf0 	bl	8008bb4 <clust2sect>
 80093d4:	4602      	mov	r2, r0
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ec:	441a      	add	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800940c:	2100      	movs	r1, #0
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff feb4 	bl	800917c <dir_sdi>
 8009414:	4603      	mov	r3, r0
 8009416:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d12b      	bne.n	8009476 <dir_alloc+0x7a>
		n = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fb27 	bl	8008a7c <move_window>
 800942e:	4603      	mov	r3, r0
 8009430:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11d      	bne.n	8009474 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2be5      	cmp	r3, #229	; 0xe5
 8009440:	d004      	beq.n	800944c <dir_alloc+0x50>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d107      	bne.n	800945c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	3301      	adds	r3, #1
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d102      	bne.n	8009460 <dir_alloc+0x64>
 800945a:	e00c      	b.n	8009476 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009460:	2101      	movs	r1, #1
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff ff05 	bl	8009272 <dir_next>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0d7      	beq.n	8009422 <dir_alloc+0x26>
 8009472:	e000      	b.n	8009476 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009474:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b04      	cmp	r3, #4
 800947a:	d101      	bne.n	8009480 <dir_alloc+0x84>
 800947c:	2307      	movs	r3, #7
 800947e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	331a      	adds	r3, #26
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff f83f 	bl	800851c <ld_word>
 800949e:	4603      	mov	r3, r0
 80094a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d109      	bne.n	80094be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	3314      	adds	r3, #20
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f834 	bl	800851c <ld_word>
 80094b4:	4603      	mov	r3, r0
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80094be:	68fb      	ldr	r3, [r7, #12]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	331a      	adds	r3, #26
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	b292      	uxth	r2, r2
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff f857 	bl	8008592 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d109      	bne.n	8009500 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f103 0214 	add.w	r2, r3, #20
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	0c1b      	lsrs	r3, r3, #16
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7ff f849 	bl	8008592 <st_word>
	}
}
 8009500:	bf00      	nop
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009516:	2100      	movs	r1, #0
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7ff fe2f 	bl	800917c <dir_sdi>
 800951e:	4603      	mov	r3, r0
 8009520:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <dir_find+0x24>
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	e03e      	b.n	80095aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	4619      	mov	r1, r3
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f7ff faa2 	bl	8008a7c <move_window>
 8009538:	4603      	mov	r3, r0
 800953a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d12f      	bne.n	80095a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d102      	bne.n	8009556 <dir_find+0x4e>
 8009550:	2304      	movs	r3, #4
 8009552:	75fb      	strb	r3, [r7, #23]
 8009554:	e028      	b.n	80095a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	330b      	adds	r3, #11
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009562:	b2da      	uxtb	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	330b      	adds	r3, #11
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10a      	bne.n	800958e <dir_find+0x86>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a18      	ldr	r0, [r3, #32]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3324      	adds	r3, #36	; 0x24
 8009580:	220b      	movs	r2, #11
 8009582:	4619      	mov	r1, r3
 8009584:	f7ff f888 	bl	8008698 <mem_cmp>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00b      	beq.n	80095a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800958e:	2100      	movs	r1, #0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fe6e 	bl	8009272 <dir_next>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0c5      	beq.n	800952c <dir_find+0x24>
 80095a0:	e002      	b.n	80095a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095a6:	bf00      	nop

	return res;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80095c0:	2101      	movs	r1, #1
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff ff1a 	bl	80093fc <dir_alloc>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11c      	bne.n	800960c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	4619      	mov	r1, r3
 80095d8:	68b8      	ldr	r0, [r7, #8]
 80095da:	f7ff fa4f 	bl	8008a7c <move_window>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d111      	bne.n	800960c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	2220      	movs	r2, #32
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff f836 	bl	8008662 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a18      	ldr	r0, [r3, #32]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3324      	adds	r3, #36	; 0x24
 80095fe:	220b      	movs	r2, #11
 8009600:	4619      	mov	r1, r3
 8009602:	f7ff f80d 	bl	8008620 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2201      	movs	r2, #1
 800960a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3324      	adds	r3, #36	; 0x24
 800962c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800962e:	220b      	movs	r2, #11
 8009630:	2120      	movs	r1, #32
 8009632:	68b8      	ldr	r0, [r7, #8]
 8009634:	f7ff f815 	bl	8008662 <mem_set>
	si = i = 0; ni = 8;
 8009638:	2300      	movs	r3, #0
 800963a:	613b      	str	r3, [r7, #16]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	2308      	movs	r3, #8
 8009642:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	61fa      	str	r2, [r7, #28]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009652:	7efb      	ldrb	r3, [r7, #27]
 8009654:	2b20      	cmp	r3, #32
 8009656:	d94e      	bls.n	80096f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009658:	7efb      	ldrb	r3, [r7, #27]
 800965a:	2b2f      	cmp	r3, #47	; 0x2f
 800965c:	d006      	beq.n	800966c <create_name+0x54>
 800965e:	7efb      	ldrb	r3, [r7, #27]
 8009660:	2b5c      	cmp	r3, #92	; 0x5c
 8009662:	d110      	bne.n	8009686 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009664:	e002      	b.n	800966c <create_name+0x54>
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	3301      	adds	r3, #1
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b2f      	cmp	r3, #47	; 0x2f
 8009676:	d0f6      	beq.n	8009666 <create_name+0x4e>
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b5c      	cmp	r3, #92	; 0x5c
 8009682:	d0f0      	beq.n	8009666 <create_name+0x4e>
			break;
 8009684:	e038      	b.n	80096f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009686:	7efb      	ldrb	r3, [r7, #27]
 8009688:	2b2e      	cmp	r3, #46	; 0x2e
 800968a:	d003      	beq.n	8009694 <create_name+0x7c>
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	429a      	cmp	r2, r3
 8009692:	d30c      	bcc.n	80096ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b0b      	cmp	r3, #11
 8009698:	d002      	beq.n	80096a0 <create_name+0x88>
 800969a:	7efb      	ldrb	r3, [r7, #27]
 800969c:	2b2e      	cmp	r3, #46	; 0x2e
 800969e:	d001      	beq.n	80096a4 <create_name+0x8c>
 80096a0:	2306      	movs	r3, #6
 80096a2:	e044      	b.n	800972e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80096a4:	2308      	movs	r3, #8
 80096a6:	613b      	str	r3, [r7, #16]
 80096a8:	230b      	movs	r3, #11
 80096aa:	617b      	str	r3, [r7, #20]
			continue;
 80096ac:	e022      	b.n	80096f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80096ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da04      	bge.n	80096c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80096b6:	7efb      	ldrb	r3, [r7, #27]
 80096b8:	3b80      	subs	r3, #128	; 0x80
 80096ba:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <create_name+0x120>)
 80096bc:	5cd3      	ldrb	r3, [r2, r3]
 80096be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80096c0:	7efb      	ldrb	r3, [r7, #27]
 80096c2:	4619      	mov	r1, r3
 80096c4:	481d      	ldr	r0, [pc, #116]	; (800973c <create_name+0x124>)
 80096c6:	f7ff f80e 	bl	80086e6 <chk_chr>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <create_name+0xbc>
 80096d0:	2306      	movs	r3, #6
 80096d2:	e02c      	b.n	800972e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80096d4:	7efb      	ldrb	r3, [r7, #27]
 80096d6:	2b60      	cmp	r3, #96	; 0x60
 80096d8:	d905      	bls.n	80096e6 <create_name+0xce>
 80096da:	7efb      	ldrb	r3, [r7, #27]
 80096dc:	2b7a      	cmp	r3, #122	; 0x7a
 80096de:	d802      	bhi.n	80096e6 <create_name+0xce>
 80096e0:	7efb      	ldrb	r3, [r7, #27]
 80096e2:	3b20      	subs	r3, #32
 80096e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	613a      	str	r2, [r7, #16]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	4413      	add	r3, r2
 80096f0:	7efa      	ldrb	r2, [r7, #27]
 80096f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80096f4:	e7a6      	b.n	8009644 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80096f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	441a      	add	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <create_name+0xf4>
 8009708:	2306      	movs	r3, #6
 800970a:	e010      	b.n	800972e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2be5      	cmp	r3, #229	; 0xe5
 8009712:	d102      	bne.n	800971a <create_name+0x102>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2205      	movs	r2, #5
 8009718:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800971a:	7efb      	ldrb	r3, [r7, #27]
 800971c:	2b20      	cmp	r3, #32
 800971e:	d801      	bhi.n	8009724 <create_name+0x10c>
 8009720:	2204      	movs	r2, #4
 8009722:	e000      	b.n	8009726 <create_name+0x10e>
 8009724:	2200      	movs	r2, #0
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	330b      	adds	r3, #11
 800972a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800972c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800972e:	4618      	mov	r0, r3
 8009730:	3720      	adds	r7, #32
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	0800bfa8 	.word	0x0800bfa8
 800973c:	0800bef8 	.word	0x0800bef8

08009740 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009754:	e002      	b.n	800975c <follow_path+0x1c>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b2f      	cmp	r3, #47	; 0x2f
 8009762:	d0f8      	beq.n	8009756 <follow_path+0x16>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b5c      	cmp	r3, #92	; 0x5c
 800976a:	d0f4      	beq.n	8009756 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2200      	movs	r2, #0
 8009770:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b1f      	cmp	r3, #31
 8009778:	d80a      	bhi.n	8009790 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2280      	movs	r2, #128	; 0x80
 800977e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009782:	2100      	movs	r1, #0
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fcf9 	bl	800917c <dir_sdi>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]
 800978e:	e043      	b.n	8009818 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009790:	463b      	mov	r3, r7
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff ff3f 	bl	8009618 <create_name>
 800979a:	4603      	mov	r3, r0
 800979c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d134      	bne.n	800980e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff feaf 	bl	8009508 <dir_find>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80097b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d127      	bne.n	8009812 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d122      	bne.n	8009812 <follow_path+0xd2>
 80097cc:	2305      	movs	r3, #5
 80097ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80097d0:	e01f      	b.n	8009812 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097d2:	7afb      	ldrb	r3, [r7, #11]
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d11c      	bne.n	8009816 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	799b      	ldrb	r3, [r3, #6]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80097e8:	2305      	movs	r3, #5
 80097ea:	75fb      	strb	r3, [r7, #23]
 80097ec:	e014      	b.n	8009818 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fc:	4413      	add	r3, r2
 80097fe:	4619      	mov	r1, r3
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f7ff fe42 	bl	800948a <ld_clust>
 8009806:	4602      	mov	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800980c:	e7c0      	b.n	8009790 <follow_path+0x50>
			if (res != FR_OK) break;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <follow_path+0xd8>
				break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009816:	bf00      	nop
			}
		}
	}

	return res;
 8009818:	7dfb      	ldrb	r3, [r7, #23]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009822:	b480      	push	{r7}
 8009824:	b087      	sub	sp, #28
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800982a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800982e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d031      	beq.n	800989c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	e002      	b.n	8009846 <get_ldnumber+0x24>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	3301      	adds	r3, #1
 8009844:	617b      	str	r3, [r7, #20]
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b20      	cmp	r3, #32
 800984c:	d903      	bls.n	8009856 <get_ldnumber+0x34>
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b3a      	cmp	r3, #58	; 0x3a
 8009854:	d1f4      	bne.n	8009840 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b3a      	cmp	r3, #58	; 0x3a
 800985c:	d11c      	bne.n	8009898 <get_ldnumber+0x76>
			tp = *path;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	60fa      	str	r2, [r7, #12]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	3b30      	subs	r3, #48	; 0x30
 800986e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2b09      	cmp	r3, #9
 8009874:	d80e      	bhi.n	8009894 <get_ldnumber+0x72>
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	429a      	cmp	r2, r3
 800987c:	d10a      	bne.n	8009894 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d107      	bne.n	8009894 <get_ldnumber+0x72>
					vol = (int)i;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	3301      	adds	r3, #1
 800988c:	617b      	str	r3, [r7, #20]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	e002      	b.n	800989e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800989c:	693b      	ldr	r3, [r7, #16]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
	...

080098ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	70da      	strb	r2, [r3, #3]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff f8d8 	bl	8008a7c <move_window>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <check_fs+0x2a>
 80098d2:	2304      	movs	r3, #4
 80098d4:	e038      	b.n	8009948 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3330      	adds	r3, #48	; 0x30
 80098da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fe1c 	bl	800851c <ld_word>
 80098e4:	4603      	mov	r3, r0
 80098e6:	461a      	mov	r2, r3
 80098e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d001      	beq.n	80098f4 <check_fs+0x48>
 80098f0:	2303      	movs	r3, #3
 80098f2:	e029      	b.n	8009948 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098fa:	2be9      	cmp	r3, #233	; 0xe9
 80098fc:	d009      	beq.n	8009912 <check_fs+0x66>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009904:	2beb      	cmp	r3, #235	; 0xeb
 8009906:	d11e      	bne.n	8009946 <check_fs+0x9a>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800990e:	2b90      	cmp	r3, #144	; 0x90
 8009910:	d119      	bne.n	8009946 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3330      	adds	r3, #48	; 0x30
 8009916:	3336      	adds	r3, #54	; 0x36
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fe17 	bl	800854c <ld_dword>
 800991e:	4603      	mov	r3, r0
 8009920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009924:	4a0a      	ldr	r2, [pc, #40]	; (8009950 <check_fs+0xa4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d101      	bne.n	800992e <check_fs+0x82>
 800992a:	2300      	movs	r3, #0
 800992c:	e00c      	b.n	8009948 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3330      	adds	r3, #48	; 0x30
 8009932:	3352      	adds	r3, #82	; 0x52
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fe09 	bl	800854c <ld_dword>
 800993a:	4603      	mov	r3, r0
 800993c:	4a05      	ldr	r2, [pc, #20]	; (8009954 <check_fs+0xa8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <check_fs+0x9a>
 8009942:	2300      	movs	r3, #0
 8009944:	e000      	b.n	8009948 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009946:	2302      	movs	r3, #2
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	00544146 	.word	0x00544146
 8009954:	33544146 	.word	0x33544146

08009958 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b096      	sub	sp, #88	; 0x58
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ff58 	bl	8009822 <get_ldnumber>
 8009972:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	da01      	bge.n	800997e <find_volume+0x26>
 800997a:	230b      	movs	r3, #11
 800997c:	e22d      	b.n	8009dda <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800997e:	4aa1      	ldr	r2, [pc, #644]	; (8009c04 <find_volume+0x2ac>)
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009986:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <find_volume+0x3a>
 800998e:	230c      	movs	r3, #12
 8009990:	e223      	b.n	8009dda <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009996:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	f023 0301 	bic.w	r3, r3, #1
 800999e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01a      	beq.n	80099de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fd17 	bl	80083e0 <disk_status>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80099b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10c      	bne.n	80099de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d007      	beq.n	80099da <find_volume+0x82>
 80099ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099ce:	f003 0304 	and.w	r3, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80099d6:	230a      	movs	r3, #10
 80099d8:	e1ff      	b.n	8009dda <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80099da:	2300      	movs	r3, #0
 80099dc:	e1fd      	b.n	8009dda <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80099e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fd0f 	bl	8008414 <disk_initialize>
 80099f6:	4603      	mov	r3, r0
 80099f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80099fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e1e6      	b.n	8009dda <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <find_volume+0xca>
 8009a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009a1e:	230a      	movs	r3, #10
 8009a20:	e1db      	b.n	8009dda <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a2a:	f7ff ff3f 	bl	80098ac <check_fs>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d149      	bne.n	8009ad0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a40:	e01e      	b.n	8009a80 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4a:	011b      	lsls	r3, r3, #4
 8009a4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009a50:	4413      	add	r3, r2
 8009a52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	3304      	adds	r3, #4
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d006      	beq.n	8009a6c <find_volume+0x114>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	3308      	adds	r3, #8
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fd72 	bl	800854c <ld_dword>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	e000      	b.n	8009a6e <find_volume+0x116>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	3358      	adds	r3, #88	; 0x58
 8009a74:	443b      	add	r3, r7
 8009a76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d9dd      	bls.n	8009a42 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a86:	2300      	movs	r3, #0
 8009a88:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <find_volume+0x13e>
 8009a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a92:	3b01      	subs	r3, #1
 8009a94:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	3358      	adds	r3, #88	; 0x58
 8009a9c:	443b      	add	r3, r7
 8009a9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009aa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d005      	beq.n	8009ab6 <find_volume+0x15e>
 8009aaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009aae:	f7ff fefd 	bl	80098ac <check_fs>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	e000      	b.n	8009ab8 <find_volume+0x160>
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d905      	bls.n	8009ad0 <find_volume+0x178>
 8009ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8009aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d9e2      	bls.n	8009a96 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d101      	bne.n	8009adc <find_volume+0x184>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e17e      	b.n	8009dda <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d901      	bls.n	8009ae8 <find_volume+0x190>
 8009ae4:	230d      	movs	r3, #13
 8009ae6:	e178      	b.n	8009dda <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	3330      	adds	r3, #48	; 0x30
 8009aec:	330b      	adds	r3, #11
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fd14 	bl	800851c <ld_word>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009afa:	d001      	beq.n	8009b00 <find_volume+0x1a8>
 8009afc:	230d      	movs	r3, #13
 8009afe:	e16c      	b.n	8009dda <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	3330      	adds	r3, #48	; 0x30
 8009b04:	3316      	adds	r3, #22
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fd08 	bl	800851c <ld_word>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <find_volume+0x1cc>
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	3330      	adds	r3, #48	; 0x30
 8009b1a:	3324      	adds	r3, #36	; 0x24
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fd15 	bl	800854c <ld_dword>
 8009b22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b28:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	789b      	ldrb	r3, [r3, #2]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d005      	beq.n	8009b48 <find_volume+0x1f0>
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3e:	789b      	ldrb	r3, [r3, #2]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d001      	beq.n	8009b48 <find_volume+0x1f0>
 8009b44:	230d      	movs	r3, #13
 8009b46:	e148      	b.n	8009dda <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	789b      	ldrb	r3, [r3, #2]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b50:	fb02 f303 	mul.w	r3, r2, r3
 8009b54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	895b      	ldrh	r3, [r3, #10]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d008      	beq.n	8009b7c <find_volume+0x224>
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6c:	895b      	ldrh	r3, [r3, #10]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	895b      	ldrh	r3, [r3, #10]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	4013      	ands	r3, r2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <find_volume+0x228>
 8009b7c:	230d      	movs	r3, #13
 8009b7e:	e12c      	b.n	8009dda <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	3330      	adds	r3, #48	; 0x30
 8009b84:	3311      	adds	r3, #17
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fcc8 	bl	800851c <ld_word>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	891b      	ldrh	r3, [r3, #8]
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <find_volume+0x24e>
 8009ba2:	230d      	movs	r3, #13
 8009ba4:	e119      	b.n	8009dda <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba8:	3330      	adds	r3, #48	; 0x30
 8009baa:	3313      	adds	r3, #19
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fcb5 	bl	800851c <ld_word>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <find_volume+0x272>
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	3330      	adds	r3, #48	; 0x30
 8009bc0:	3320      	adds	r3, #32
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe fcc2 	bl	800854c <ld_dword>
 8009bc8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bcc:	3330      	adds	r3, #48	; 0x30
 8009bce:	330e      	adds	r3, #14
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe fca3 	bl	800851c <ld_word>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <find_volume+0x28c>
 8009be0:	230d      	movs	r3, #13
 8009be2:	e0fa      	b.n	8009dda <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009be4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be8:	4413      	add	r3, r2
 8009bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bec:	8912      	ldrh	r2, [r2, #8]
 8009bee:	0912      	lsrs	r2, r2, #4
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d204      	bcs.n	8009c08 <find_volume+0x2b0>
 8009bfe:	230d      	movs	r3, #13
 8009c00:	e0eb      	b.n	8009dda <find_volume+0x482>
 8009c02:	bf00      	nop
 8009c04:	20004a5c 	.word	0x20004a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c10:	8952      	ldrh	r2, [r2, #10]
 8009c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <find_volume+0x2ca>
 8009c1e:	230d      	movs	r3, #13
 8009c20:	e0db      	b.n	8009dda <find_volume+0x482>
		fmt = FS_FAT32;
 8009c22:	2303      	movs	r3, #3
 8009c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d802      	bhi.n	8009c38 <find_volume+0x2e0>
 8009c32:	2302      	movs	r3, #2
 8009c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d802      	bhi.n	8009c48 <find_volume+0x2f0>
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	1c9a      	adds	r2, r3, #2
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c54:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009c56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c5a:	441a      	add	r2, r3
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	441a      	add	r2, r3
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d11e      	bne.n	8009cb0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	3330      	adds	r3, #48	; 0x30
 8009c76:	332a      	adds	r3, #42	; 0x2a
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fc4f 	bl	800851c <ld_word>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <find_volume+0x330>
 8009c84:	230d      	movs	r3, #13
 8009c86:	e0a8      	b.n	8009dda <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	891b      	ldrh	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <find_volume+0x33c>
 8009c90:	230d      	movs	r3, #13
 8009c92:	e0a2      	b.n	8009dda <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	3330      	adds	r3, #48	; 0x30
 8009c98:	332c      	adds	r3, #44	; 0x2c
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fc56 	bl	800854c <ld_dword>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	647b      	str	r3, [r7, #68]	; 0x44
 8009cae:	e01f      	b.n	8009cf0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	891b      	ldrh	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <find_volume+0x364>
 8009cb8:	230d      	movs	r3, #13
 8009cba:	e08e      	b.n	8009dda <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbe:	6a1a      	ldr	r2, [r3, #32]
 8009cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc2:	441a      	add	r2, r3
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d103      	bne.n	8009cd8 <find_volume+0x380>
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	e00a      	b.n	8009cee <find_volume+0x396>
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	695a      	ldr	r2, [r3, #20]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	005b      	lsls	r3, r3, #1
 8009ce0:	4413      	add	r3, r2
 8009ce2:	085a      	lsrs	r2, r3, #1
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009cee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009cfa:	0a5b      	lsrs	r3, r3, #9
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d201      	bcs.n	8009d04 <find_volume+0x3ac>
 8009d00:	230d      	movs	r3, #13
 8009d02:	e06a      	b.n	8009dda <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d0a:	611a      	str	r2, [r3, #16]
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	2280      	movs	r2, #128	; 0x80
 8009d18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009d1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d149      	bne.n	8009db6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d24:	3330      	adds	r3, #48	; 0x30
 8009d26:	3330      	adds	r3, #48	; 0x30
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe fbf7 	bl	800851c <ld_word>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d140      	bne.n	8009db6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d36:	3301      	adds	r3, #1
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d3c:	f7fe fe9e 	bl	8008a7c <move_window>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d137      	bne.n	8009db6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	2200      	movs	r2, #0
 8009d4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	3330      	adds	r3, #48	; 0x30
 8009d50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fbe1 	bl	800851c <ld_word>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d127      	bne.n	8009db6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	3330      	adds	r3, #48	; 0x30
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fbee 	bl	800854c <ld_dword>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4a1c      	ldr	r2, [pc, #112]	; (8009de4 <find_volume+0x48c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d11e      	bne.n	8009db6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	3330      	adds	r3, #48	; 0x30
 8009d7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fe fbe3 	bl	800854c <ld_dword>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <find_volume+0x490>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d113      	bne.n	8009db6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	3330      	adds	r3, #48	; 0x30
 8009d92:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fbd8 	bl	800854c <ld_dword>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da4:	3330      	adds	r3, #48	; 0x30
 8009da6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fbce 	bl	800854c <ld_dword>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009dbc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <find_volume+0x494>)
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	4b09      	ldr	r3, [pc, #36]	; (8009dec <find_volume+0x494>)
 8009dc8:	801a      	strh	r2, [r3, #0]
 8009dca:	4b08      	ldr	r3, [pc, #32]	; (8009dec <find_volume+0x494>)
 8009dcc:	881a      	ldrh	r2, [r3, #0]
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009dd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dd4:	f7fe fdea 	bl	80089ac <clear_lock>
#endif
	return FR_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3758      	adds	r7, #88	; 0x58
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	41615252 	.word	0x41615252
 8009de8:	61417272 	.word	0x61417272
 8009dec:	20004a60 	.word	0x20004a60

08009df0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009dfa:	2309      	movs	r3, #9
 8009dfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01c      	beq.n	8009e3e <validate+0x4e>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d018      	beq.n	8009e3e <validate+0x4e>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d013      	beq.n	8009e3e <validate+0x4e>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	889a      	ldrh	r2, [r3, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d10c      	bne.n	8009e3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fad8 	bl	80083e0 <disk_status>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <validate+0x4e>
			res = FR_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d102      	bne.n	8009e4a <validate+0x5a>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	e000      	b.n	8009e4c <validate+0x5c>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	6013      	str	r3, [r2, #0]
	return res;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e6e:	f107 0310 	add.w	r3, r7, #16
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fcd5 	bl	8009822 <get_ldnumber>
 8009e78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	da01      	bge.n	8009e84 <f_mount+0x28>
 8009e80:	230b      	movs	r3, #11
 8009e82:	e02b      	b.n	8009edc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009e84:	4a17      	ldr	r2, [pc, #92]	; (8009ee4 <f_mount+0x88>)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009e94:	69b8      	ldr	r0, [r7, #24]
 8009e96:	f7fe fd89 	bl	80089ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	490d      	ldr	r1, [pc, #52]	; (8009ee4 <f_mount+0x88>)
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <f_mount+0x66>
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d001      	beq.n	8009ec6 <f_mount+0x6a>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e00a      	b.n	8009edc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ec6:	f107 010c 	add.w	r1, r7, #12
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	2200      	movs	r2, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fd41 	bl	8009958 <find_volume>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3720      	adds	r7, #32
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20004a5c 	.word	0x20004a5c

08009ee8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b098      	sub	sp, #96	; 0x60
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <f_open+0x18>
 8009efc:	2309      	movs	r3, #9
 8009efe:	e1ad      	b.n	800a25c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009f08:	79fa      	ldrb	r2, [r7, #7]
 8009f0a:	f107 0110 	add.w	r1, r7, #16
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fd20 	bl	8009958 <find_volume>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f040 8191 	bne.w	800a24a <f_open+0x362>
		dj.obj.fs = fs;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	f107 0314 	add.w	r3, r7, #20
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fc03 	bl	8009740 <follow_path>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009f48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da03      	bge.n	8009f5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f52:	2306      	movs	r3, #6
 8009f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f58:	e011      	b.n	8009f7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf14      	ite	ne
 8009f64:	2301      	movne	r3, #1
 8009f66:	2300      	moveq	r3, #0
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fbd2 	bl	800871c <chk_lock>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	f003 031c 	and.w	r3, r3, #28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d07f      	beq.n	800a088 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d017      	beq.n	8009fc0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d10e      	bne.n	8009fb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f98:	f7fe fc1c 	bl	80087d4 <enq_lock>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <f_open+0xc8>
 8009fa2:	f107 0314 	add.w	r3, r7, #20
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fb03 	bl	80095b2 <dir_register>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e000      	b.n	8009fb2 <f_open+0xca>
 8009fb0:	2312      	movs	r3, #18
 8009fb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	f043 0308 	orr.w	r3, r3, #8
 8009fbc:	71fb      	strb	r3, [r7, #7]
 8009fbe:	e010      	b.n	8009fe2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009fc0:	7ebb      	ldrb	r3, [r7, #26]
 8009fc2:	f003 0311 	and.w	r3, r3, #17
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <f_open+0xea>
					res = FR_DENIED;
 8009fca:	2307      	movs	r3, #7
 8009fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009fd0:	e007      	b.n	8009fe2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <f_open+0xfa>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d168      	bne.n	800a0bc <f_open+0x1d4>
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d063      	beq.n	800a0bc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009ff4:	f7fd ffa4 	bl	8007f40 <get_fattime>
 8009ff8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	330e      	adds	r3, #14
 8009ffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fae1 	bl	80085c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	3316      	adds	r3, #22
 800a00a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fadb 	bl	80085c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a014:	330b      	adds	r3, #11
 800a016:	2220      	movs	r2, #32
 800a018:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff fa32 	bl	800948a <ld_clust>
 800a026:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a02c:	2200      	movs	r2, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff fa4a 	bl	80094c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	331c      	adds	r3, #28
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fac4 	bl	80085c8 <st_dword>
					fs->wflag = 1;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2201      	movs	r2, #1
 800a044:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d037      	beq.n	800a0bc <f_open+0x1d4>
						dw = fs->winsect;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a052:	f107 0314 	add.w	r3, r7, #20
 800a056:	2200      	movs	r2, #0
 800a058:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe ff5d 	bl	8008f1a <remove_chain>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d126      	bne.n	800a0bc <f_open+0x1d4>
							res = move_window(fs, dw);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fd02 	bl	8008a7c <move_window>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a082:	3a01      	subs	r2, #1
 800a084:	60da      	str	r2, [r3, #12]
 800a086:	e019      	b.n	800a0bc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d115      	bne.n	800a0bc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a090:	7ebb      	ldrb	r3, [r7, #26]
 800a092:	f003 0310 	and.w	r3, r3, #16
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a09a:	2304      	movs	r3, #4
 800a09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a0a0:	e00c      	b.n	800a0bc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	f003 0302 	and.w	r3, r3, #2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d007      	beq.n	800a0bc <f_open+0x1d4>
 800a0ac:	7ebb      	ldrb	r3, [r7, #26]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <f_open+0x1d4>
						res = FR_DENIED;
 800a0b6:	2307      	movs	r3, #7
 800a0b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d128      	bne.n	800a116 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a0de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bf14      	ite	ne
 800a0ee:	2301      	movne	r3, #1
 800a0f0:	2300      	moveq	r3, #0
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f107 0314 	add.w	r3, r7, #20
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe fb8b 	bl	8008818 <inc_lock>
 800a102:	4602      	mov	r2, r0
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <f_open+0x22e>
 800a110:	2302      	movs	r3, #2
 800a112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f040 8095 	bne.w	800a24a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff f9af 	bl	800948a <ld_clust>
 800a12c:	4602      	mov	r2, r0
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a134:	331c      	adds	r3, #28
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe fa08 	bl	800854c <ld_dword>
 800a13c:	4602      	mov	r2, r0
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	88da      	ldrh	r2, [r3, #6]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	79fa      	ldrb	r2, [r7, #7]
 800a15a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3330      	adds	r3, #48	; 0x30
 800a172:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a176:	2100      	movs	r1, #0
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe fa72 	bl	8008662 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	f003 0320 	and.w	r3, r3, #32
 800a184:	2b00      	cmp	r3, #0
 800a186:	d060      	beq.n	800a24a <f_open+0x362>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d05c      	beq.n	800a24a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	895b      	ldrh	r3, [r3, #10]
 800a19c:	025b      	lsls	r3, r3, #9
 800a19e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a1ac:	e016      	b.n	800a1dc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fd1d 	bl	8008bf2 <get_fat>
 800a1b8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a1ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d802      	bhi.n	800a1c6 <f_open+0x2de>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a1c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1cc:	d102      	bne.n	800a1d4 <f_open+0x2ec>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	657b      	str	r3, [r7, #84]	; 0x54
 800a1dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <f_open+0x304>
 800a1e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d8e0      	bhi.n	800a1ae <f_open+0x2c6>
				}
				fp->clust = clst;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a1f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d127      	bne.n	800a24a <f_open+0x362>
 800a1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a200:	2b00      	cmp	r3, #0
 800a202:	d022      	beq.n	800a24a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe fcd3 	bl	8008bb4 <clust2sect>
 800a20e:	6478      	str	r0, [r7, #68]	; 0x44
 800a210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <f_open+0x336>
						res = FR_INT_ERR;
 800a216:	2302      	movs	r3, #2
 800a218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a21c:	e015      	b.n	800a24a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a220:	0a5a      	lsrs	r2, r3, #9
 800a222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a224:	441a      	add	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	7858      	ldrb	r0, [r3, #1]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a1a      	ldr	r2, [r3, #32]
 800a238:	2301      	movs	r3, #1
 800a23a:	f7fe f911 	bl	8008460 <disk_read>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <f_open+0x362>
 800a244:	2301      	movs	r3, #1
 800a246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a24a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <f_open+0x370>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3760      	adds	r7, #96	; 0x60
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b08c      	sub	sp, #48	; 0x30
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f107 0210 	add.w	r2, r7, #16
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff fdb3 	bl	8009df0 <validate>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a294:	2b00      	cmp	r3, #0
 800a296:	d107      	bne.n	800a2a8 <f_write+0x44>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	7d5b      	ldrb	r3, [r3, #21]
 800a29c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a2a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <f_write+0x4a>
 800a2a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2ac:	e14b      	b.n	800a546 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	7d1b      	ldrb	r3, [r3, #20]
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <f_write+0x5a>
 800a2ba:	2307      	movs	r3, #7
 800a2bc:	e143      	b.n	800a546 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	699a      	ldr	r2, [r3, #24]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	441a      	add	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	f080 812d 	bcs.w	800a52a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	43db      	mvns	r3, r3
 800a2d6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a2d8:	e127      	b.n	800a52a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 80e3 	bne.w	800a4ae <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	0a5b      	lsrs	r3, r3, #9
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	8952      	ldrh	r2, [r2, #10]
 800a2f2:	3a01      	subs	r2, #1
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d143      	bne.n	800a386 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10c      	bne.n	800a320 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d11a      	bne.n	800a348 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2100      	movs	r1, #0
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe fe64 	bl	8008fe4 <create_chain>
 800a31c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a31e:	e013      	b.n	800a348 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d007      	beq.n	800a338 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	4619      	mov	r1, r3
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fe fef0 	bl	8009114 <clmt_clust>
 800a334:	62b8      	str	r0, [r7, #40]	; 0x28
 800a336:	e007      	b.n	800a348 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7fe fe4f 	bl	8008fe4 <create_chain>
 800a346:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80f2 	beq.w	800a534 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	2b01      	cmp	r3, #1
 800a354:	d104      	bne.n	800a360 <f_write+0xfc>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2202      	movs	r2, #2
 800a35a:	755a      	strb	r2, [r3, #21]
 800a35c:	2302      	movs	r3, #2
 800a35e:	e0f2      	b.n	800a546 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a366:	d104      	bne.n	800a372 <f_write+0x10e>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2201      	movs	r2, #1
 800a36c:	755a      	strb	r2, [r3, #21]
 800a36e:	2301      	movs	r3, #1
 800a370:	e0e9      	b.n	800a546 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a376:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <f_write+0x122>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a384:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	7d1b      	ldrb	r3, [r3, #20]
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da18      	bge.n	800a3c2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	7858      	ldrb	r0, [r3, #1]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6a1a      	ldr	r2, [r3, #32]
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f7fe f87e 	bl	80084a0 <disk_write>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <f_write+0x150>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	755a      	strb	r2, [r3, #21]
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e0c8      	b.n	800a546 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	7d1b      	ldrb	r3, [r3, #20]
 800a3b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f7fe fbf2 	bl	8008bb4 <clust2sect>
 800a3d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <f_write+0x17e>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	755a      	strb	r2, [r3, #21]
 800a3de:	2302      	movs	r3, #2
 800a3e0:	e0b1      	b.n	800a546 <f_write+0x2e2>
			sect += csect;
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	0a5b      	lsrs	r3, r3, #9
 800a3ee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d03c      	beq.n	800a470 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	8952      	ldrh	r2, [r2, #10]
 800a400:	4293      	cmp	r3, r2
 800a402:	d905      	bls.n	800a410 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	895b      	ldrh	r3, [r3, #10]
 800a408:	461a      	mov	r2, r3
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	7858      	ldrb	r0, [r3, #1]
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	69f9      	ldr	r1, [r7, #28]
 800a41a:	f7fe f841 	bl	80084a0 <disk_write>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <f_write+0x1ca>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	755a      	strb	r2, [r3, #21]
 800a42a:	2301      	movs	r3, #1
 800a42c:	e08b      	b.n	800a546 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	6a3a      	ldr	r2, [r7, #32]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d915      	bls.n	800a468 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a1a      	ldr	r2, [r3, #32]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	025b      	lsls	r3, r3, #9
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	4413      	add	r3, r2
 800a450:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a454:	4619      	mov	r1, r3
 800a456:	f7fe f8e3 	bl	8008620 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	7d1b      	ldrb	r3, [r3, #20]
 800a45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a462:	b2da      	uxtb	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	025b      	lsls	r3, r3, #9
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a46e:	e03f      	b.n	800a4f0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	429a      	cmp	r2, r3
 800a478:	d016      	beq.n	800a4a8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	699a      	ldr	r2, [r3, #24]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a482:	429a      	cmp	r2, r3
 800a484:	d210      	bcs.n	800a4a8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	7858      	ldrb	r0, [r3, #1]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a490:	2301      	movs	r3, #1
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	f7fd ffe4 	bl	8008460 <disk_read>
 800a498:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	755a      	strb	r2, [r3, #21]
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e04e      	b.n	800a546 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d901      	bls.n	800a4c8 <f_write+0x264>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	4413      	add	r3, r2
 800a4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4da:	69f9      	ldr	r1, [r7, #28]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe f89f 	bl	8008620 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	7d1b      	ldrb	r3, [r3, #20]
 800a4e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61fb      	str	r3, [r7, #28]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	699a      	ldr	r2, [r3, #24]
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	441a      	add	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	619a      	str	r2, [r3, #24]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	bf38      	it	cc
 800a510:	461a      	movcc	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	60da      	str	r2, [r3, #12]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	441a      	add	r2, r3
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f47f aed4 	bne.w	800a2da <f_write+0x76>
 800a532:	e000      	b.n	800a536 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a534:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7d1b      	ldrb	r3, [r3, #20]
 800a53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3730      	adds	r7, #48	; 0x30
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b086      	sub	sp, #24
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f107 0208 	add.w	r2, r7, #8
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fc46 	bl	8009df0 <validate>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d168      	bne.n	800a640 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	7d1b      	ldrb	r3, [r3, #20]
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d062      	beq.n	800a640 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7d1b      	ldrb	r3, [r3, #20]
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	da15      	bge.n	800a5b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	7858      	ldrb	r0, [r3, #1]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1a      	ldr	r2, [r3, #32]
 800a592:	2301      	movs	r3, #1
 800a594:	f7fd ff84 	bl	80084a0 <disk_write>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <f_sync+0x54>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e04f      	b.n	800a642 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7d1b      	ldrb	r3, [r3, #20]
 800a5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a5b0:	f7fd fcc6 	bl	8007f40 <get_fattime>
 800a5b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7fe fa5c 	bl	8008a7c <move_window>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d138      	bne.n	800a640 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	330b      	adds	r3, #11
 800a5d8:	781a      	ldrb	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	330b      	adds	r3, #11
 800a5de:	f042 0220 	orr.w	r2, r2, #32
 800a5e2:	b2d2      	uxtb	r2, r2
 800a5e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	68f9      	ldr	r1, [r7, #12]
 800a5f2:	f7fe ff69 	bl	80094c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f103 021c 	add.w	r2, r3, #28
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f7fd ffe0 	bl	80085c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3316      	adds	r3, #22
 800a60c:	6939      	ldr	r1, [r7, #16]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd ffda 	bl	80085c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3312      	adds	r3, #18
 800a618:	2100      	movs	r1, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fd ffb9 	bl	8008592 <st_word>
					fs->wflag = 1;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2201      	movs	r2, #1
 800a624:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe fa55 	bl	8008ad8 <sync_fs>
 800a62e:	4603      	mov	r3, r0
 800a630:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7d1b      	ldrb	r3, [r3, #20]
 800a636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a640:	7dfb      	ldrb	r3, [r7, #23]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff ff7b 	bl	800a54e <f_sync>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d118      	bne.n	800a694 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f107 0208 	add.w	r2, r7, #8
 800a668:	4611      	mov	r1, r2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fbc0 	bl	8009df0 <validate>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10c      	bne.n	800a694 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe f958 	bl	8008934 <dec_lock>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b09d      	sub	sp, #116	; 0x74
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	607a      	str	r2, [r7, #4]
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6b8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a6ba:	f107 030c 	add.w	r3, r7, #12
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff f8af 	bl	8009822 <get_ldnumber>
 800a6c4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da02      	bge.n	800a6d2 <f_mkfs+0x32>
 800a6cc:	230b      	movs	r3, #11
 800a6ce:	f000 bc0d 	b.w	800aeec <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a6d2:	4a94      	ldr	r2, [pc, #592]	; (800a924 <f_mkfs+0x284>)
 800a6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d005      	beq.n	800a6ea <f_mkfs+0x4a>
 800a6de:	4a91      	ldr	r2, [pc, #580]	; (800a924 <f_mkfs+0x284>)
 800a6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a6f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd fe8a 	bl	8008414 <disk_initialize>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a706:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <f_mkfs+0x76>
 800a712:	2303      	movs	r3, #3
 800a714:	e3ea      	b.n	800aeec <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a716:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <f_mkfs+0x86>
 800a722:	230a      	movs	r3, #10
 800a724:	e3e2      	b.n	800aeec <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a726:	f107 0214 	add.w	r2, r7, #20
 800a72a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a72e:	2103      	movs	r1, #3
 800a730:	4618      	mov	r0, r3
 800a732:	f7fd fed5 	bl	80084e0 <disk_ioctl>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10c      	bne.n	800a756 <f_mkfs+0xb6>
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d009      	beq.n	800a756 <f_mkfs+0xb6>
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a748:	d805      	bhi.n	800a756 <f_mkfs+0xb6>
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	1e5a      	subs	r2, r3, #1
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	4013      	ands	r3, r2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <f_mkfs+0xba>
 800a756:	2301      	movs	r3, #1
 800a758:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a75a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a75e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <f_mkfs+0xce>
 800a766:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d309      	bcc.n	800a782 <f_mkfs+0xe2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a774:	d805      	bhi.n	800a782 <f_mkfs+0xe2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	1e5a      	subs	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4013      	ands	r3, r2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <f_mkfs+0xe6>
 800a782:	2313      	movs	r3, #19
 800a784:	e3b2      	b.n	800aeec <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a786:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a794:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a7a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a4:	fb02 f303 	mul.w	r3, r2, r3
 800a7a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <f_mkfs+0x114>
 800a7b0:	230e      	movs	r3, #14
 800a7b2:	e39b      	b.n	800aeec <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a7b4:	f107 0210 	add.w	r2, r7, #16
 800a7b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a7bc:	2101      	movs	r1, #1
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fd fe8e 	bl	80084e0 <disk_ioctl>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <f_mkfs+0x12e>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e38e      	b.n	800aeec <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	f003 0308 	and.w	r3, r3, #8
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <f_mkfs+0x13c>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	e000      	b.n	800a7de <f_mkfs+0x13e>
 800a7dc:	233f      	movs	r3, #63	; 0x3f
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d901      	bls.n	800a7ec <f_mkfs+0x14c>
 800a7e8:	230e      	movs	r3, #14
 800a7ea:	e37f      	b.n	800aeec <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7f8:	d801      	bhi.n	800a7fe <f_mkfs+0x15e>
 800a7fa:	230e      	movs	r3, #14
 800a7fc:	e376      	b.n	800aeec <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b80      	cmp	r3, #128	; 0x80
 800a802:	d901      	bls.n	800a808 <f_mkfs+0x168>
 800a804:	2313      	movs	r3, #19
 800a806:	e371      	b.n	800aeec <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a808:	7afb      	ldrb	r3, [r7, #11]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00d      	beq.n	800a82e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d004      	beq.n	800a826 <f_mkfs+0x186>
 800a81c:	7afb      	ldrb	r3, [r7, #11]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a826:	2303      	movs	r3, #3
 800a828:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a82c:	e009      	b.n	800a842 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a82e:	7afb      	ldrb	r3, [r7, #11]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <f_mkfs+0x19c>
 800a838:	2313      	movs	r3, #19
 800a83a:	e357      	b.n	800aeec <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a83c:	2302      	movs	r3, #2
 800a83e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a846:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d13c      	bne.n	800a8c8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a850:	2b00      	cmp	r3, #0
 800a852:	d11b      	bne.n	800a88c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	0c5b      	lsrs	r3, r3, #17
 800a858:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a85a:	2300      	movs	r3, #0
 800a85c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a85e:	2301      	movs	r3, #1
 800a860:	653b      	str	r3, [r7, #80]	; 0x50
 800a862:	e005      	b.n	800a870 <f_mkfs+0x1d0>
 800a864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a866:	3301      	adds	r3, #1
 800a868:	64bb      	str	r3, [r7, #72]	; 0x48
 800a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	653b      	str	r3, [r7, #80]	; 0x50
 800a870:	4a2d      	ldr	r2, [pc, #180]	; (800a928 <f_mkfs+0x288>)
 800a872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <f_mkfs+0x1ec>
 800a87c:	4a2a      	ldr	r2, [pc, #168]	; (800a928 <f_mkfs+0x288>)
 800a87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a884:	461a      	mov	r2, r3
 800a886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a888:	4293      	cmp	r3, r2
 800a88a:	d2eb      	bcs.n	800a864 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a890:	fbb2 f3f3 	udiv	r3, r2, r3
 800a894:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	3302      	adds	r3, #2
 800a89a:	009a      	lsls	r2, r3, #2
 800a89c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a89e:	4413      	add	r3, r2
 800a8a0:	1e5a      	subs	r2, r3, #1
 800a8a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a8aa:	2320      	movs	r3, #32
 800a8ac:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d903      	bls.n	800a8c4 <f_mkfs+0x224>
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <f_mkfs+0x28c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d952      	bls.n	800a96a <f_mkfs+0x2ca>
 800a8c4:	230e      	movs	r3, #14
 800a8c6:	e311      	b.n	800aeec <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d11b      	bne.n	800a906 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	0b1b      	lsrs	r3, r3, #12
 800a8d2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8d8:	2301      	movs	r3, #1
 800a8da:	653b      	str	r3, [r7, #80]	; 0x50
 800a8dc:	e005      	b.n	800a8ea <f_mkfs+0x24a>
 800a8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	653b      	str	r3, [r7, #80]	; 0x50
 800a8ea:	4a11      	ldr	r2, [pc, #68]	; (800a930 <f_mkfs+0x290>)
 800a8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d007      	beq.n	800a906 <f_mkfs+0x266>
 800a8f6:	4a0e      	ldr	r2, [pc, #56]	; (800a930 <f_mkfs+0x290>)
 800a8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a902:	4293      	cmp	r3, r2
 800a904:	d2eb      	bcs.n	800a8de <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a90e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a916:	4293      	cmp	r3, r2
 800a918:	d90c      	bls.n	800a934 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	3302      	adds	r3, #2
 800a91e:	005b      	lsls	r3, r3, #1
 800a920:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a922:	e012      	b.n	800a94a <f_mkfs+0x2aa>
 800a924:	20004a5c 	.word	0x20004a5c
 800a928:	0800c028 	.word	0x0800c028
 800a92c:	0ffffff5 	.word	0x0ffffff5
 800a930:	0800c038 	.word	0x0800c038
				} else {
					fmt = FS_FAT12;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a93a:	6a3a      	ldr	r2, [r7, #32]
 800a93c:	4613      	mov	r3, r2
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	4413      	add	r3, r2
 800a942:	3301      	adds	r3, #1
 800a944:	085b      	lsrs	r3, r3, #1
 800a946:	3303      	adds	r3, #3
 800a948:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a94a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a94c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a94e:	4413      	add	r3, r2
 800a950:	1e5a      	subs	r2, r3, #1
 800a952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a954:	fbb2 f3f3 	udiv	r3, r2, r3
 800a958:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a95a:	2301      	movs	r3, #1
 800a95c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a964:	fbb2 f3f3 	udiv	r3, r2, r3
 800a968:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a96e:	4413      	add	r3, r2
 800a970:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a976:	fb03 f202 	mul.w	r2, r3, r2
 800a97a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a97c:	4413      	add	r3, r2
 800a97e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a980:	4413      	add	r3, r2
 800a982:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	4413      	add	r3, r2
 800a98a:	1e5a      	subs	r2, r3, #1
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	425b      	negs	r3, r3
 800a990:	401a      	ands	r2, r3
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a998:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d108      	bne.n	800a9b2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a9a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9a4:	4413      	add	r3, r2
 800a9a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9ac:	4413      	add	r3, r2
 800a9ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9b0:	e006      	b.n	800a9c0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a9b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9bc:	4413      	add	r3, r2
 800a9be:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c2:	011a      	lsls	r2, r3, #4
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	441a      	add	r2, r3
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	1ad2      	subs	r2, r2, r3
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d901      	bls.n	800a9d6 <f_mkfs+0x336>
 800a9d2:	230e      	movs	r3, #14
 800a9d4:	e28a      	b.n	800aeec <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9da:	1ad2      	subs	r2, r2, r3
 800a9dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9e0:	fb01 f303 	mul.w	r3, r1, r3
 800a9e4:	1ad2      	subs	r2, r2, r3
 800a9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e8:	1ad2      	subs	r2, r2, r3
 800a9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a9f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d10f      	bne.n	800aa1a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d80a      	bhi.n	800aa1a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d105      	bne.n	800aa16 <f_mkfs+0x376>
 800aa0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	607b      	str	r3, [r7, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d144      	bne.n	800aaa0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800aa16:	230e      	movs	r3, #14
 800aa18:	e268      	b.n	800aeec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800aa1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d133      	bne.n	800aa8a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d91e      	bls.n	800aa6a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d107      	bne.n	800aa42 <f_mkfs+0x3a2>
 800aa32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d803      	bhi.n	800aa42 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800aa3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	607b      	str	r3, [r7, #4]
 800aa40:	e033      	b.n	800aaaa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aa52:	e02a      	b.n	800aaaa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <f_mkfs+0x3c6>
 800aa5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	607b      	str	r3, [r7, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b80      	cmp	r3, #128	; 0x80
 800aa64:	d91e      	bls.n	800aaa4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800aa66:	230e      	movs	r3, #14
 800aa68:	e240      	b.n	800aeec <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d80a      	bhi.n	800aa8a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d105      	bne.n	800aa86 <f_mkfs+0x3e6>
 800aa7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	607b      	str	r3, [r7, #4]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d910      	bls.n	800aaa8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800aa86:	230e      	movs	r3, #14
 800aa88:	e230      	b.n	800aeec <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800aa8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d10c      	bne.n	800aaac <f_mkfs+0x40c>
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d907      	bls.n	800aaac <f_mkfs+0x40c>
 800aa9c:	230e      	movs	r3, #14
 800aa9e:	e225      	b.n	800aeec <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800aaa0:	bf00      	nop
 800aaa2:	e6ce      	b.n	800a842 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aaa4:	bf00      	nop
 800aaa6:	e6cc      	b.n	800a842 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800aaa8:	bf00      	nop
			pau = au;
 800aaaa:	e6ca      	b.n	800a842 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800aaac:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800aaae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aab0:	461a      	mov	r2, r3
 800aab2:	2100      	movs	r1, #0
 800aab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aab6:	f7fd fdd4 	bl	8008662 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800aaba:	220b      	movs	r2, #11
 800aabc:	49b2      	ldr	r1, [pc, #712]	; (800ad88 <f_mkfs+0x6e8>)
 800aabe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aac0:	f7fd fdae 	bl	8008620 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	330b      	adds	r3, #11
 800aac8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aaca:	4611      	mov	r1, r2
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fd fd60 	bl	8008592 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	330d      	adds	r3, #13
 800aad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aad8:	b2d2      	uxtb	r2, r2
 800aada:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	330e      	adds	r3, #14
 800aae0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aae2:	b292      	uxth	r2, r2
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fd fd53 	bl	8008592 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	3310      	adds	r3, #16
 800aaf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	f103 0211 	add.w	r2, r3, #17
 800aafc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d002      	beq.n	800ab0a <f_mkfs+0x46a>
 800ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	e000      	b.n	800ab0c <f_mkfs+0x46c>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fd fd3f 	bl	8008592 <st_word>
		if (sz_vol < 0x10000) {
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab1a:	d208      	bcs.n	800ab2e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	3313      	adds	r3, #19
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	b292      	uxth	r2, r2
 800ab24:	4611      	mov	r1, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fd fd33 	bl	8008592 <st_word>
 800ab2c:	e006      	b.n	800ab3c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	3320      	adds	r3, #32
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	4611      	mov	r1, r2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fd fd46 	bl	80085c8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	3315      	adds	r3, #21
 800ab40:	22f8      	movs	r2, #248	; 0xf8
 800ab42:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	3318      	adds	r3, #24
 800ab48:	213f      	movs	r1, #63	; 0x3f
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fd fd21 	bl	8008592 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	331a      	adds	r3, #26
 800ab54:	21ff      	movs	r1, #255	; 0xff
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fd fd1b 	bl	8008592 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	331c      	adds	r3, #28
 800ab60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fd fd30 	bl	80085c8 <st_dword>
		if (fmt == FS_FAT32) {
 800ab68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d131      	bne.n	800abd4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ab76:	f7fd f9e3 	bl	8007f40 <get_fattime>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7fd fd22 	bl	80085c8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	3324      	adds	r3, #36	; 0x24
 800ab88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fd fd1c 	bl	80085c8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	332c      	adds	r3, #44	; 0x2c
 800ab94:	2102      	movs	r1, #2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fd fd16 	bl	80085c8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3330      	adds	r3, #48	; 0x30
 800aba0:	2101      	movs	r1, #1
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fd fcf5 	bl	8008592 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	3332      	adds	r3, #50	; 0x32
 800abac:	2106      	movs	r1, #6
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fd fcef 	bl	8008592 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	3340      	adds	r3, #64	; 0x40
 800abb8:	2280      	movs	r2, #128	; 0x80
 800abba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	3342      	adds	r3, #66	; 0x42
 800abc0:	2229      	movs	r2, #41	; 0x29
 800abc2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	3347      	adds	r3, #71	; 0x47
 800abc8:	2213      	movs	r2, #19
 800abca:	4970      	ldr	r1, [pc, #448]	; (800ad8c <f_mkfs+0x6ec>)
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd fd27 	bl	8008620 <mem_cpy>
 800abd2:	e020      	b.n	800ac16 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800abda:	f7fd f9b1 	bl	8007f40 <get_fattime>
 800abde:	4603      	mov	r3, r0
 800abe0:	4619      	mov	r1, r3
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7fd fcf0 	bl	80085c8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800abe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abea:	3316      	adds	r3, #22
 800abec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abee:	b292      	uxth	r2, r2
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fd fccd 	bl	8008592 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	3324      	adds	r3, #36	; 0x24
 800abfc:	2280      	movs	r2, #128	; 0x80
 800abfe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	3326      	adds	r3, #38	; 0x26
 800ac04:	2229      	movs	r2, #41	; 0x29
 800ac06:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	332b      	adds	r3, #43	; 0x2b
 800ac0c:	2213      	movs	r2, #19
 800ac0e:	4960      	ldr	r1, [pc, #384]	; (800ad90 <f_mkfs+0x6f0>)
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fd fd05 	bl	8008620 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fd fcb6 	bl	8008592 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800ac26:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac30:	f7fd fc36 	bl	80084a0 <disk_write>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <f_mkfs+0x59e>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e156      	b.n	800aeec <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800ac3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d140      	bne.n	800acc8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	1d9a      	adds	r2, r3, #6
 800ac4a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ac4e:	2301      	movs	r3, #1
 800ac50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac52:	f7fd fc25 	bl	80084a0 <disk_write>
			mem_set(buf, 0, ss);
 800ac56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac58:	461a      	mov	r2, r3
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5e:	f7fd fd00 	bl	8008662 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ac62:	494c      	ldr	r1, [pc, #304]	; (800ad94 <f_mkfs+0x6f4>)
 800ac64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac66:	f7fd fcaf 	bl	80085c8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac70:	4949      	ldr	r1, [pc, #292]	; (800ad98 <f_mkfs+0x6f8>)
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fd fca8 	bl	80085c8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4619      	mov	r1, r3
 800ac84:	4610      	mov	r0, r2
 800ac86:	f7fd fc9f 	bl	80085c8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ac90:	2102      	movs	r1, #2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fd fc98 	bl	80085c8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac9e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fd fc75 	bl	8008592 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	1dda      	adds	r2, r3, #7
 800acac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800acb0:	2301      	movs	r3, #1
 800acb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acb4:	f7fd fbf4 	bl	80084a0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800acc0:	2301      	movs	r3, #1
 800acc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acc4:	f7fd fbec 	bl	80084a0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800acc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acca:	2100      	movs	r1, #0
 800accc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acce:	f7fd fcc8 	bl	8008662 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800acd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acd4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800acd6:	2300      	movs	r3, #0
 800acd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acda:	e04b      	b.n	800ad74 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800acdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d113      	bne.n	800ad0c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ace4:	f06f 0107 	mvn.w	r1, #7
 800ace8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acea:	f7fd fc6d 	bl	80085c8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	3304      	adds	r3, #4
 800acf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fd fc66 	bl	80085c8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	3308      	adds	r3, #8
 800ad00:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fd fc5f 	bl	80085c8 <st_dword>
 800ad0a:	e00b      	b.n	800ad24 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800ad0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <f_mkfs+0x678>
 800ad14:	4b21      	ldr	r3, [pc, #132]	; (800ad9c <f_mkfs+0x6fc>)
 800ad16:	e001      	b.n	800ad1c <f_mkfs+0x67c>
 800ad18:	f06f 0307 	mvn.w	r3, #7
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad20:	f7fd fc52 	bl	80085c8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ad24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad26:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ad28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	bf28      	it	cs
 800ad30:	4613      	movcs	r3, r2
 800ad32:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ad34:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ad38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad3e:	f7fd fbaf 	bl	80084a0 <disk_write>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <f_mkfs+0x6ac>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0cf      	b.n	800aeec <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ad4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad4e:	461a      	mov	r2, r3
 800ad50:	2100      	movs	r1, #0
 800ad52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad54:	f7fd fc85 	bl	8008662 <mem_set>
				sect += n; nsect -= n;
 800ad58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad5c:	4413      	add	r3, r2
 800ad5e:	667b      	str	r3, [r7, #100]	; 0x64
 800ad60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ad68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1dc      	bne.n	800ad28 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ad6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad70:	3301      	adds	r3, #1
 800ad72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d3af      	bcc.n	800acdc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ad7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	d10d      	bne.n	800ada0 <f_mkfs+0x700>
 800ad84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad86:	e00c      	b.n	800ada2 <f_mkfs+0x702>
 800ad88:	0800bf08 	.word	0x0800bf08
 800ad8c:	0800bf14 	.word	0x0800bf14
 800ad90:	0800bf28 	.word	0x0800bf28
 800ad94:	41615252 	.word	0x41615252
 800ad98:	61417272 	.word	0x61417272
 800ad9c:	00fffff8 	.word	0x00fffff8
 800ada0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ada4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	4293      	cmp	r3, r2
 800adaa:	bf28      	it	cs
 800adac:	4613      	movcs	r3, r2
 800adae:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800adb0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800adb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800adb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adba:	f7fd fb71 	bl	80084a0 <disk_write>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <f_mkfs+0x728>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e091      	b.n	800aeec <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800adc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800adca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adcc:	4413      	add	r3, r2
 800adce:	667b      	str	r3, [r7, #100]	; 0x64
 800add0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800add2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800add8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e2      	bne.n	800ada4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800adde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d103      	bne.n	800adee <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800ade6:	230c      	movs	r3, #12
 800ade8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800adec:	e010      	b.n	800ae10 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adf4:	d303      	bcc.n	800adfe <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800adf6:	2306      	movs	r3, #6
 800adf8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800adfc:	e008      	b.n	800ae10 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800adfe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d101      	bne.n	800ae0a <f_mkfs+0x76a>
 800ae06:	2304      	movs	r3, #4
 800ae08:	e000      	b.n	800ae0c <f_mkfs+0x76c>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	f003 0308 	and.w	r3, r3, #8
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d15b      	bne.n	800aed2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ae1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2100      	movs	r1, #0
 800ae20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae22:	f7fd fc1e 	bl	8008662 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae2c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fd fbae 	bl	8008592 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae3c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	3301      	adds	r3, #1
 800ae48:	2201      	movs	r2, #1
 800ae4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	3302      	adds	r3, #2
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	3303      	adds	r3, #3
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ae64:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	441a      	add	r2, r3
 800ae6c:	4b21      	ldr	r3, [pc, #132]	; (800aef4 <f_mkfs+0x854>)
 800ae6e:	fba3 1302 	umull	r1, r3, r3, r2
 800ae72:	1ad2      	subs	r2, r2, r3
 800ae74:	0852      	lsrs	r2, r2, #1
 800ae76:	4413      	add	r3, r2
 800ae78:	0b5b      	lsrs	r3, r3, #13
 800ae7a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	3305      	adds	r3, #5
 800ae80:	22fe      	movs	r2, #254	; 0xfe
 800ae82:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ae84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae86:	089b      	lsrs	r3, r3, #2
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	3306      	adds	r3, #6
 800ae8e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	3307      	adds	r3, #7
 800ae9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	3308      	adds	r3, #8
 800aea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fb8e 	bl	80085c8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	330c      	adds	r3, #12
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd fb87 	bl	80085c8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800aeba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aebe:	2301      	movs	r3, #1
 800aec0:	2200      	movs	r2, #0
 800aec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aec4:	f7fd faec 	bl	80084a0 <disk_write>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <f_mkfs+0x832>
 800aece:	2301      	movs	r3, #1
 800aed0:	e00c      	b.n	800aeec <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800aed2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aed6:	2200      	movs	r2, #0
 800aed8:	2100      	movs	r1, #0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fd fb00 	bl	80084e0 <disk_ioctl>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <f_mkfs+0x84a>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <f_mkfs+0x84c>

	return FR_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3774      	adds	r7, #116	; 0x74
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd90      	pop	{r4, r7, pc}
 800aef4:	0515565b 	.word	0x0515565b

0800aef8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af06:	2301      	movs	r3, #1
 800af08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af0e:	4b1f      	ldr	r3, [pc, #124]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af10:	7a5b      	ldrb	r3, [r3, #9]
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d131      	bne.n	800af7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af18:	4b1c      	ldr	r3, [pc, #112]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af1a:	7a5b      	ldrb	r3, [r3, #9]
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	461a      	mov	r2, r3
 800af20:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af22:	2100      	movs	r1, #0
 800af24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af26:	4b19      	ldr	r3, [pc, #100]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af28:	7a5b      	ldrb	r3, [r3, #9]
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	4a17      	ldr	r2, [pc, #92]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af36:	4b15      	ldr	r3, [pc, #84]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af38:	7a5b      	ldrb	r3, [r3, #9]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af40:	4413      	add	r3, r2
 800af42:	79fa      	ldrb	r2, [r7, #7]
 800af44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af46:	4b11      	ldr	r3, [pc, #68]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af48:	7a5b      	ldrb	r3, [r3, #9]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	b2d1      	uxtb	r1, r2
 800af50:	4a0e      	ldr	r2, [pc, #56]	; (800af8c <FATFS_LinkDriverEx+0x94>)
 800af52:	7251      	strb	r1, [r2, #9]
 800af54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af56:	7dbb      	ldrb	r3, [r7, #22]
 800af58:	3330      	adds	r3, #48	; 0x30
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	3301      	adds	r3, #1
 800af64:	223a      	movs	r2, #58	; 0x3a
 800af66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3302      	adds	r3, #2
 800af6c:	222f      	movs	r2, #47	; 0x2f
 800af6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	3303      	adds	r3, #3
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	371c      	adds	r7, #28
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20004a84 	.word	0x20004a84

0800af90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800af9a:	2200      	movs	r2, #0
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ffaa 	bl	800aef8 <FATFS_LinkDriverEx>
 800afa4:	4603      	mov	r3, r0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a08      	ldr	r2, [pc, #32]	; (800afdc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d103      	bne.n	800afc8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800afc2:	2201      	movs	r2, #1
 800afc4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800afc6:	e002      	b.n	800afce <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800afc8:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800afca:	2201      	movs	r2, #1
 800afcc:	601a      	str	r2, [r3, #0]
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	200000f8 	.word	0x200000f8
 800afe0:	200042dc 	.word	0x200042dc
 800afe4:	200042e4 	.word	0x200042e4

0800afe8 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a08      	ldr	r2, [pc, #32]	; (800b014 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d103      	bne.n	800b000 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800aff8:	4b07      	ldr	r3, [pc, #28]	; (800b018 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800affa:	2201      	movs	r2, #1
 800affc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800affe:	e002      	b.n	800b006 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800b000:	4b06      	ldr	r3, [pc, #24]	; (800b01c <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800b002:	2201      	movs	r2, #1
 800b004:	601a      	str	r2, [r3, #0]
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	200000f8 	.word	0x200000f8
 800b018:	200042e0 	.word	0x200042e0
 800b01c:	200042e8 	.word	0x200042e8

0800b020 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800b026:	4b52      	ldr	r3, [pc, #328]	; (800b170 <checkMicrophone+0x150>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d14a      	bne.n	800b0c4 <checkMicrophone+0xa4>
 800b02e:	4b51      	ldr	r3, [pc, #324]	; (800b174 <checkMicrophone+0x154>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d146      	bne.n	800b0c4 <checkMicrophone+0xa4>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800b036:	2300      	movs	r3, #0
 800b038:	607b      	str	r3, [r7, #4]
 800b03a:	e039      	b.n	800b0b0 <checkMicrophone+0x90>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b03c:	4b4e      	ldr	r3, [pc, #312]	; (800b178 <checkMicrophone+0x158>)
 800b03e:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b042:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800b046:	2b01      	cmp	r3, #1
 800b048:	d028      	beq.n	800b09c <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b04a:	4a4c      	ldr	r2, [pc, #304]	; (800b17c <checkMicrophone+0x15c>)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b052:	121b      	asrs	r3, r3, #8
 800b054:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b058:	db0b      	blt.n	800b072 <checkMicrophone+0x52>
 800b05a:	4a48      	ldr	r2, [pc, #288]	; (800b17c <checkMicrophone+0x15c>)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b062:	121b      	asrs	r3, r3, #8
 800b064:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b068:	4293      	cmp	r3, r2
 800b06a:	bfa8      	it	ge
 800b06c:	4613      	movge	r3, r2
 800b06e:	b29a      	uxth	r2, r3
 800b070:	e001      	b.n	800b076 <checkMicrophone+0x56>
 800b072:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b076:	4b40      	ldr	r3, [pc, #256]	; (800b178 <checkMicrophone+0x158>)
 800b078:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b07c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b080:	493d      	ldr	r1, [pc, #244]	; (800b178 <checkMicrophone+0x158>)
 800b082:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b086:	4b3c      	ldr	r3, [pc, #240]	; (800b178 <checkMicrophone+0x158>)
 800b088:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b08c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b090:	3301      	adds	r3, #1
 800b092:	4a39      	ldr	r2, [pc, #228]	; (800b178 <checkMicrophone+0x158>)
 800b094:	f502 229c 	add.w	r2, r2, #319488	; 0x4e000
 800b098:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b09c:	4b36      	ldr	r3, [pc, #216]	; (800b178 <checkMicrophone+0x158>)
 800b09e:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b0a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b0a6:	4a36      	ldr	r2, [pc, #216]	; (800b180 <checkMicrophone+0x160>)
 800b0a8:	4293      	cmp	r3, r2
		for(int i = 0; i < 1024; i++)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	607b      	str	r3, [r7, #4]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b6:	dbc1      	blt.n	800b03c <checkMicrophone+0x1c>
				Error_Handler();
			}
			PlaybackStarted = 1;*/
		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800b0b8:	4b2d      	ldr	r3, [pc, #180]	; (800b170 <checkMicrophone+0x150>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800b0be:	4b2d      	ldr	r3, [pc, #180]	; (800b174 <checkMicrophone+0x154>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800b0c4:	4b2f      	ldr	r3, [pc, #188]	; (800b184 <checkMicrophone+0x164>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d14b      	bne.n	800b164 <checkMicrophone+0x144>
 800b0cc:	4b2e      	ldr	r3, [pc, #184]	; (800b188 <checkMicrophone+0x168>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d147      	bne.n	800b164 <checkMicrophone+0x144>
	{
		for(int i = 1024; i < 2048; i++)
 800b0d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	e039      	b.n	800b150 <checkMicrophone+0x130>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b0dc:	4b26      	ldr	r3, [pc, #152]	; (800b178 <checkMicrophone+0x158>)
 800b0de:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b0e2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d028      	beq.n	800b13c <checkMicrophone+0x11c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b0ea:	4a24      	ldr	r2, [pc, #144]	; (800b17c <checkMicrophone+0x15c>)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0f2:	121b      	asrs	r3, r3, #8
 800b0f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b0f8:	db0b      	blt.n	800b112 <checkMicrophone+0xf2>
 800b0fa:	4a20      	ldr	r2, [pc, #128]	; (800b17c <checkMicrophone+0x15c>)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b102:	121b      	asrs	r3, r3, #8
 800b104:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b108:	4293      	cmp	r3, r2
 800b10a:	bfa8      	it	ge
 800b10c:	4613      	movge	r3, r2
 800b10e:	b29a      	uxth	r2, r3
 800b110:	e001      	b.n	800b116 <checkMicrophone+0xf6>
 800b112:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b116:	4b18      	ldr	r3, [pc, #96]	; (800b178 <checkMicrophone+0x158>)
 800b118:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b11c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b120:	4915      	ldr	r1, [pc, #84]	; (800b178 <checkMicrophone+0x158>)
 800b122:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b126:	4b14      	ldr	r3, [pc, #80]	; (800b178 <checkMicrophone+0x158>)
 800b128:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b12c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b130:	3301      	adds	r3, #1
 800b132:	4a11      	ldr	r2, [pc, #68]	; (800b178 <checkMicrophone+0x158>)
 800b134:	f502 229c 	add.w	r2, r2, #319488	; 0x4e000
 800b138:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b13c:	4b0e      	ldr	r3, [pc, #56]	; (800b178 <checkMicrophone+0x158>)
 800b13e:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b142:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b146:	4a0e      	ldr	r2, [pc, #56]	; (800b180 <checkMicrophone+0x160>)
 800b148:	4293      	cmp	r3, r2
		for(int i = 1024; i < 2048; i++)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	3301      	adds	r3, #1
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b156:	dbc1      	blt.n	800b0dc <checkMicrophone+0xbc>
			{
				BufferCtl.wr_state!= BUFFER_FULL;
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800b158:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <checkMicrophone+0x164>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800b15e:	4b0a      	ldr	r3, [pc, #40]	; (800b188 <checkMicrophone+0x168>)
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
	}
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	200042dc 	.word	0x200042dc
 800b174:	200042e4 	.word	0x200042e4
 800b178:	20004cbc 	.word	0x20004cbc
 800b17c:	200002dc 	.word	0x200002dc
 800b180:	000270ff 	.word	0x000270ff
 800b184:	200042e0 	.word	0x200042e0
 800b188:	200042e8 	.word	0x200042e8

0800b18c <get_time_and_date_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_and_date_filename( char* name)
	{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08c      	sub	sp, #48	; 0x30
 800b190:	af02      	add	r7, sp, #8
 800b192:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800b194:	2364      	movs	r3, #100	; 0x64
 800b196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b19a:	236d      	movs	r3, #109	; 0x6d
 800b19c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b1a0:	2379      	movs	r3, #121	; 0x79
 800b1a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b1a6:	2368      	movs	r3, #104	; 0x68
 800b1a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800b1ac:	236d      	movs	r3, #109	; 0x6d
 800b1ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1b2:	2373      	movs	r3, #115	; 0x73
 800b1b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800b1b8:	f107 030c 	add.w	r3, r7, #12
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4619      	mov	r1, r3
 800b1c0:	480c      	ldr	r0, [pc, #48]	; (800b1f4 <get_time_and_date_filename+0x68>)
 800b1c2:	f7f9 fdf9 	bl	8004db8 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800b1c6:	f107 0308 	add.w	r3, r7, #8
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	4809      	ldr	r0, [pc, #36]	; (800b1f4 <get_time_and_date_filename+0x68>)
 800b1d0:	f7f9 fed4 	bl	8004f7c <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d.wav", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800b1d4:	7b3b      	ldrb	r3, [r7, #12]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	7b7b      	ldrb	r3, [r7, #13]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4905      	ldr	r1, [pc, #20]	; (800b1f8 <get_time_and_date_filename+0x6c>)
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fb0d 	bl	800b804 <siprintf>
	 return name;
 800b1ea:	687b      	ldr	r3, [r7, #4]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3728      	adds	r7, #40	; 0x28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	200042ec 	.word	0x200042ec
 800b1f8:	0800bf60 	.word	0x0800bf60

0800b1fc <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800b202:	2200      	movs	r2, #0
 800b204:	490f      	ldr	r1, [pc, #60]	; (800b244 <SDInit+0x48>)
 800b206:	4810      	ldr	r0, [pc, #64]	; (800b248 <SDInit+0x4c>)
 800b208:	f7fe fe28 	bl	8009e5c <f_mount>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <SDInit+0x1c>
	      {
	          Error_Handler();
 800b212:	f7f5 ff81 	bl	8001118 <Error_Handler>
 800b216:	e010      	b.n	800b23a <SDInit+0x3e>
	      }
	      else
	      {
	    	  //creates an FAT/exFAT volume on the logical drive
	    	  int val = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 800b218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <SDInit+0x50>)
 800b220:	2200      	movs	r2, #0
 800b222:	2107      	movs	r1, #7
 800b224:	4807      	ldr	r0, [pc, #28]	; (800b244 <SDInit+0x48>)
 800b226:	f7ff fa3b 	bl	800a6a0 <f_mkfs>
 800b22a:	4603      	mov	r3, r0
 800b22c:	607b      	str	r3, [r7, #4]
	          if(val != FR_OK)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <SDInit+0x3e>
	          {
	        	  return -1;
 800b234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b238:	e000      	b.n	800b23c <SDInit+0x40>
	          }
	      }
	return 0;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	200045f0 	.word	0x200045f0
 800b248:	200045f4 	.word	0x200045f4
 800b24c:	20004a90 	.word	0x20004a90

0800b250 <createFile>:

int createFile(char* file_name)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800b258:	220a      	movs	r2, #10
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	4807      	ldr	r0, [pc, #28]	; (800b27c <createFile+0x2c>)
 800b25e:	f7fe fe43 	bl	8009ee8 <f_open>
 800b262:	4603      	mov	r3, r0
 800b264:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <createFile+0x22>
	  {
		  return -1;
 800b26c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b270:	e000      	b.n	800b274 <createFile+0x24>
	  }
	  return 0;
 800b272:	2300      	movs	r3, #0

}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20004824 	.word	0x20004824

0800b280 <writeToFile>:
int writeToFile(char* text, int size)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	f107 030c 	add.w	r3, r7, #12
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	4804      	ldr	r0, [pc, #16]	; (800b2a4 <writeToFile+0x24>)
 800b294:	f7fe ffe6 	bl	800a264 <f_write>
	return byteswritten;
 800b298:	68fb      	ldr	r3, [r7, #12]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20004824 	.word	0x20004824

0800b2a8 <SDclose>:
int SDclose()
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800b2ac:	4802      	ldr	r0, [pc, #8]	; (800b2b8 <SDclose+0x10>)
 800b2ae:	f7ff f9cc 	bl	800a64a <f_close>
	return 0;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20004824 	.word	0x20004824

0800b2bc <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2cc:	d10a      	bne.n	800b2e4 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800b2ce:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	bf0c      	ite	eq
 800b2d6:	2301      	moveq	r3, #1
 800b2d8:	2300      	movne	r3, #0
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	461a      	mov	r2, r3
 800b2de:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800b2e0:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800b2e2:	e000      	b.n	800b2e6 <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800b2e4:	bf00      	nop
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	200002d8 	.word	0x200002d8

0800b2f8 <WavProcess_EncInit>:
AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b304:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b308:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800b30a:	4b1a      	ldr	r3, [pc, #104]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b30c:	2201      	movs	r2, #1
 800b30e:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800b310:	4b18      	ldr	r3, [pc, #96]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b312:	2210      	movs	r2, #16
 800b314:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800b316:	4b17      	ldr	r3, [pc, #92]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b318:	4a17      	ldr	r2, [pc, #92]	; (800b378 <WavProcess_EncInit+0x80>)
 800b31a:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800b31c:	4b15      	ldr	r3, [pc, #84]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b31e:	222c      	movs	r2, #44	; 0x2c
 800b320:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b322:	4b14      	ldr	r3, [pc, #80]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b324:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800b326:	4a13      	ldr	r2, [pc, #76]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b328:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800b32a:	08d2      	lsrs	r2, r2, #3
 800b32c:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800b332:	4a10      	ldr	r2, [pc, #64]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b334:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800b336:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b33a:	4a0e      	ldr	r2, [pc, #56]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b33c:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b340:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b344:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b346:	08db      	lsrs	r3, r3, #3
 800b348:	b29b      	uxth	r3, r3
 800b34a:	fb12 f303 	smulbb	r3, r2, r3
 800b34e:	b29a      	uxth	r2, r3
 800b350:	4b08      	ldr	r3, [pc, #32]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b352:	841a      	strh	r2, [r3, #32]

  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800b354:	4a09      	ldr	r2, [pc, #36]	; (800b37c <WavProcess_EncInit+0x84>)
 800b356:	4907      	ldr	r1, [pc, #28]	; (800b374 <WavProcess_EncInit+0x7c>)
 800b358:	6838      	ldr	r0, [r7, #0]
 800b35a:	f000 f811 	bl	800b380 <WavProcess_HeaderInit>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <WavProcess_EncInit+0x70>
  {
    return 1;
 800b364:	2301      	movs	r3, #1
 800b366:	e000      	b.n	800b36a <WavProcess_EncInit+0x72>
  }
  return 0;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20004c90 	.word	0x20004c90
 800b378:	001d4c00 	.word	0x001d4c00
 800b37c:	20004cbc 	.word	0x20004cbc

0800b380 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2252      	movs	r2, #82	; 0x52
 800b390:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3301      	adds	r3, #1
 800b396:	2249      	movs	r2, #73	; 0x49
 800b398:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3302      	adds	r3, #2
 800b39e:	2246      	movs	r2, #70	; 0x46
 800b3a0:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3303      	adds	r3, #3
 800b3a6:	2246      	movs	r2, #70	; 0x46
 800b3a8:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->fptr);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b3b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->fptr >> 8);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b3c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3c6:	0a1a      	lsrs	r2, r3, #8
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3305      	adds	r3, #5
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->fptr >> 16);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b3d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3da:	0c1a      	lsrs	r2, r3, #16
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3306      	adds	r3, #6
 800b3e0:	b2d2      	uxtb	r2, r2
 800b3e2:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->fptr >> 24);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b3ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3ee:	0e1a      	lsrs	r2, r3, #24
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	3307      	adds	r3, #7
 800b3f4:	b2d2      	uxtb	r2, r2
 800b3f6:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	2257      	movs	r2, #87	; 0x57
 800b3fe:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	3309      	adds	r3, #9
 800b404:	2241      	movs	r2, #65	; 0x41
 800b406:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	330a      	adds	r3, #10
 800b40c:	2256      	movs	r2, #86	; 0x56
 800b40e:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	330b      	adds	r3, #11
 800b414:	2245      	movs	r2, #69	; 0x45
 800b416:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	330c      	adds	r3, #12
 800b41c:	2266      	movs	r2, #102	; 0x66
 800b41e:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	330d      	adds	r3, #13
 800b424:	226d      	movs	r2, #109	; 0x6d
 800b426:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	330e      	adds	r3, #14
 800b42c:	2274      	movs	r2, #116	; 0x74
 800b42e:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	330f      	adds	r3, #15
 800b434:	2220      	movs	r2, #32
 800b436:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3310      	adds	r3, #16
 800b43c:	2210      	movs	r2, #16
 800b43e:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3311      	adds	r3, #17
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3312      	adds	r3, #18
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3313      	adds	r3, #19
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3314      	adds	r3, #20
 800b45c:	2201      	movs	r2, #1
 800b45e:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3315      	adds	r3, #21
 800b464:	2200      	movs	r2, #0
 800b466:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	8ada      	ldrh	r2, [r3, #22]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3316      	adds	r3, #22
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3317      	adds	r3, #23
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	699a      	ldr	r2, [r3, #24]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3318      	adds	r3, #24
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	0a1a      	lsrs	r2, r3, #8
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3319      	adds	r3, #25
 800b492:	b2d2      	uxtb	r2, r2
 800b494:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	0c1a      	lsrs	r2, r3, #16
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	331a      	adds	r3, #26
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	0e1a      	lsrs	r2, r3, #24
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	331b      	adds	r3, #27
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	69da      	ldr	r2, [r3, #28]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	331c      	adds	r3, #28
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	0a1a      	lsrs	r2, r3, #8
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	331d      	adds	r3, #29
 800b4c8:	b2d2      	uxtb	r2, r2
 800b4ca:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	0c1a      	lsrs	r2, r3, #16
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	331e      	adds	r3, #30
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	0e1a      	lsrs	r2, r3, #24
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	331f      	adds	r3, #31
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	8c1a      	ldrh	r2, [r3, #32]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3320      	adds	r3, #32
 800b4f0:	b2d2      	uxtb	r2, r2
 800b4f2:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	3321      	adds	r3, #33	; 0x21
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3322      	adds	r3, #34	; 0x22
 800b504:	b2d2      	uxtb	r2, r2
 800b506:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3323      	adds	r3, #35	; 0x23
 800b50c:	2200      	movs	r2, #0
 800b50e:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3324      	adds	r3, #36	; 0x24
 800b514:	2264      	movs	r2, #100	; 0x64
 800b516:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3325      	adds	r3, #37	; 0x25
 800b51c:	2261      	movs	r2, #97	; 0x61
 800b51e:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3326      	adds	r3, #38	; 0x26
 800b524:	2274      	movs	r2, #116	; 0x74
 800b526:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3327      	adds	r3, #39	; 0x27
 800b52c:	2261      	movs	r2, #97	; 0x61
 800b52e:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->fptr -=44;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b536:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b53a:	3b2c      	subs	r3, #44	; 0x2c
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	f502 229c 	add.w	r2, r2, #319488	; 0x4e000
 800b542:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
  pHeader[40] = (uint8_t)(BufferCtl->fptr);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b54c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3328      	adds	r3, #40	; 0x28
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->fptr >> 8);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b55e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b562:	0a1a      	lsrs	r2, r3, #8
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3329      	adds	r3, #41	; 0x29
 800b568:	b2d2      	uxtb	r2, r2
 800b56a:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->fptr >> 16);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b572:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b576:	0c1a      	lsrs	r2, r3, #16
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	332a      	adds	r3, #42	; 0x2a
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->fptr >> 24);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 800b586:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b58a:	0e1a      	lsrs	r2, r3, #24
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	332b      	adds	r3, #43	; 0x2b
 800b590:	b2d2      	uxtb	r2, r2
 800b592:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <__errno>:
 800b5a4:	4b01      	ldr	r3, [pc, #4]	; (800b5ac <__errno+0x8>)
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	2000000c 	.word	0x2000000c

0800b5b0 <__libc_init_array>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	4d0d      	ldr	r5, [pc, #52]	; (800b5e8 <__libc_init_array+0x38>)
 800b5b4:	4c0d      	ldr	r4, [pc, #52]	; (800b5ec <__libc_init_array+0x3c>)
 800b5b6:	1b64      	subs	r4, r4, r5
 800b5b8:	10a4      	asrs	r4, r4, #2
 800b5ba:	2600      	movs	r6, #0
 800b5bc:	42a6      	cmp	r6, r4
 800b5be:	d109      	bne.n	800b5d4 <__libc_init_array+0x24>
 800b5c0:	4d0b      	ldr	r5, [pc, #44]	; (800b5f0 <__libc_init_array+0x40>)
 800b5c2:	4c0c      	ldr	r4, [pc, #48]	; (800b5f4 <__libc_init_array+0x44>)
 800b5c4:	f000 fc8c 	bl	800bee0 <_init>
 800b5c8:	1b64      	subs	r4, r4, r5
 800b5ca:	10a4      	asrs	r4, r4, #2
 800b5cc:	2600      	movs	r6, #0
 800b5ce:	42a6      	cmp	r6, r4
 800b5d0:	d105      	bne.n	800b5de <__libc_init_array+0x2e>
 800b5d2:	bd70      	pop	{r4, r5, r6, pc}
 800b5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d8:	4798      	blx	r3
 800b5da:	3601      	adds	r6, #1
 800b5dc:	e7ee      	b.n	800b5bc <__libc_init_array+0xc>
 800b5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e2:	4798      	blx	r3
 800b5e4:	3601      	adds	r6, #1
 800b5e6:	e7f2      	b.n	800b5ce <__libc_init_array+0x1e>
 800b5e8:	0800c084 	.word	0x0800c084
 800b5ec:	0800c084 	.word	0x0800c084
 800b5f0:	0800c084 	.word	0x0800c084
 800b5f4:	0800c088 	.word	0x0800c088

0800b5f8 <memcpy>:
 800b5f8:	440a      	add	r2, r1
 800b5fa:	4291      	cmp	r1, r2
 800b5fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b600:	d100      	bne.n	800b604 <memcpy+0xc>
 800b602:	4770      	bx	lr
 800b604:	b510      	push	{r4, lr}
 800b606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b60a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b60e:	4291      	cmp	r1, r2
 800b610:	d1f9      	bne.n	800b606 <memcpy+0xe>
 800b612:	bd10      	pop	{r4, pc}

0800b614 <memset>:
 800b614:	4402      	add	r2, r0
 800b616:	4603      	mov	r3, r0
 800b618:	4293      	cmp	r3, r2
 800b61a:	d100      	bne.n	800b61e <memset+0xa>
 800b61c:	4770      	bx	lr
 800b61e:	f803 1b01 	strb.w	r1, [r3], #1
 800b622:	e7f9      	b.n	800b618 <memset+0x4>

0800b624 <_free_r>:
 800b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b626:	2900      	cmp	r1, #0
 800b628:	d044      	beq.n	800b6b4 <_free_r+0x90>
 800b62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62e:	9001      	str	r0, [sp, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f1a1 0404 	sub.w	r4, r1, #4
 800b636:	bfb8      	it	lt
 800b638:	18e4      	addlt	r4, r4, r3
 800b63a:	f000 f903 	bl	800b844 <__malloc_lock>
 800b63e:	4a1e      	ldr	r2, [pc, #120]	; (800b6b8 <_free_r+0x94>)
 800b640:	9801      	ldr	r0, [sp, #4]
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	b933      	cbnz	r3, 800b654 <_free_r+0x30>
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b650:	f000 b8fe 	b.w	800b850 <__malloc_unlock>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d908      	bls.n	800b66a <_free_r+0x46>
 800b658:	6825      	ldr	r5, [r4, #0]
 800b65a:	1961      	adds	r1, r4, r5
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf01      	itttt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	1949      	addeq	r1, r1, r5
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	e7ed      	b.n	800b646 <_free_r+0x22>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x50>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x46>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1855      	adds	r5, r2, r1
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x70>
 800b67c:	6824      	ldr	r4, [r4, #0]
 800b67e:	4421      	add	r1, r4
 800b680:	1854      	adds	r4, r2, r1
 800b682:	42a3      	cmp	r3, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1e0      	bne.n	800b64a <_free_r+0x26>
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	4421      	add	r1, r4
 800b690:	6011      	str	r1, [r2, #0]
 800b692:	e7da      	b.n	800b64a <_free_r+0x26>
 800b694:	d902      	bls.n	800b69c <_free_r+0x78>
 800b696:	230c      	movs	r3, #12
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	e7d6      	b.n	800b64a <_free_r+0x26>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7ca      	b.n	800b64a <_free_r+0x26>
 800b6b4:	b003      	add	sp, #12
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	20052ef8 	.word	0x20052ef8

0800b6bc <sbrk_aligned>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4e0e      	ldr	r6, [pc, #56]	; (800b6f8 <sbrk_aligned+0x3c>)
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	6831      	ldr	r1, [r6, #0]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b911      	cbnz	r1, 800b6ce <sbrk_aligned+0x12>
 800b6c8:	f000 f88c 	bl	800b7e4 <_sbrk_r>
 800b6cc:	6030      	str	r0, [r6, #0]
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f000 f887 	bl	800b7e4 <_sbrk_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d00a      	beq.n	800b6f0 <sbrk_aligned+0x34>
 800b6da:	1cc4      	adds	r4, r0, #3
 800b6dc:	f024 0403 	bic.w	r4, r4, #3
 800b6e0:	42a0      	cmp	r0, r4
 800b6e2:	d007      	beq.n	800b6f4 <sbrk_aligned+0x38>
 800b6e4:	1a21      	subs	r1, r4, r0
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f87c 	bl	800b7e4 <_sbrk_r>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d101      	bne.n	800b6f4 <sbrk_aligned+0x38>
 800b6f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	20052efc 	.word	0x20052efc

0800b6fc <_malloc_r>:
 800b6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b700:	1ccd      	adds	r5, r1, #3
 800b702:	f025 0503 	bic.w	r5, r5, #3
 800b706:	3508      	adds	r5, #8
 800b708:	2d0c      	cmp	r5, #12
 800b70a:	bf38      	it	cc
 800b70c:	250c      	movcc	r5, #12
 800b70e:	2d00      	cmp	r5, #0
 800b710:	4607      	mov	r7, r0
 800b712:	db01      	blt.n	800b718 <_malloc_r+0x1c>
 800b714:	42a9      	cmp	r1, r5
 800b716:	d905      	bls.n	800b724 <_malloc_r+0x28>
 800b718:	230c      	movs	r3, #12
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	2600      	movs	r6, #0
 800b71e:	4630      	mov	r0, r6
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	4e2e      	ldr	r6, [pc, #184]	; (800b7e0 <_malloc_r+0xe4>)
 800b726:	f000 f88d 	bl	800b844 <__malloc_lock>
 800b72a:	6833      	ldr	r3, [r6, #0]
 800b72c:	461c      	mov	r4, r3
 800b72e:	bb34      	cbnz	r4, 800b77e <_malloc_r+0x82>
 800b730:	4629      	mov	r1, r5
 800b732:	4638      	mov	r0, r7
 800b734:	f7ff ffc2 	bl	800b6bc <sbrk_aligned>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	4604      	mov	r4, r0
 800b73c:	d14d      	bne.n	800b7da <_malloc_r+0xde>
 800b73e:	6834      	ldr	r4, [r6, #0]
 800b740:	4626      	mov	r6, r4
 800b742:	2e00      	cmp	r6, #0
 800b744:	d140      	bne.n	800b7c8 <_malloc_r+0xcc>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	4631      	mov	r1, r6
 800b74a:	4638      	mov	r0, r7
 800b74c:	eb04 0803 	add.w	r8, r4, r3
 800b750:	f000 f848 	bl	800b7e4 <_sbrk_r>
 800b754:	4580      	cmp	r8, r0
 800b756:	d13a      	bne.n	800b7ce <_malloc_r+0xd2>
 800b758:	6821      	ldr	r1, [r4, #0]
 800b75a:	3503      	adds	r5, #3
 800b75c:	1a6d      	subs	r5, r5, r1
 800b75e:	f025 0503 	bic.w	r5, r5, #3
 800b762:	3508      	adds	r5, #8
 800b764:	2d0c      	cmp	r5, #12
 800b766:	bf38      	it	cc
 800b768:	250c      	movcc	r5, #12
 800b76a:	4629      	mov	r1, r5
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff ffa5 	bl	800b6bc <sbrk_aligned>
 800b772:	3001      	adds	r0, #1
 800b774:	d02b      	beq.n	800b7ce <_malloc_r+0xd2>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	442b      	add	r3, r5
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	e00e      	b.n	800b79c <_malloc_r+0xa0>
 800b77e:	6822      	ldr	r2, [r4, #0]
 800b780:	1b52      	subs	r2, r2, r5
 800b782:	d41e      	bmi.n	800b7c2 <_malloc_r+0xc6>
 800b784:	2a0b      	cmp	r2, #11
 800b786:	d916      	bls.n	800b7b6 <_malloc_r+0xba>
 800b788:	1961      	adds	r1, r4, r5
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	6025      	str	r5, [r4, #0]
 800b78e:	bf18      	it	ne
 800b790:	6059      	strne	r1, [r3, #4]
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	bf08      	it	eq
 800b796:	6031      	streq	r1, [r6, #0]
 800b798:	5162      	str	r2, [r4, r5]
 800b79a:	604b      	str	r3, [r1, #4]
 800b79c:	4638      	mov	r0, r7
 800b79e:	f104 060b 	add.w	r6, r4, #11
 800b7a2:	f000 f855 	bl	800b850 <__malloc_unlock>
 800b7a6:	f026 0607 	bic.w	r6, r6, #7
 800b7aa:	1d23      	adds	r3, r4, #4
 800b7ac:	1af2      	subs	r2, r6, r3
 800b7ae:	d0b6      	beq.n	800b71e <_malloc_r+0x22>
 800b7b0:	1b9b      	subs	r3, r3, r6
 800b7b2:	50a3      	str	r3, [r4, r2]
 800b7b4:	e7b3      	b.n	800b71e <_malloc_r+0x22>
 800b7b6:	6862      	ldr	r2, [r4, #4]
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	bf0c      	ite	eq
 800b7bc:	6032      	streq	r2, [r6, #0]
 800b7be:	605a      	strne	r2, [r3, #4]
 800b7c0:	e7ec      	b.n	800b79c <_malloc_r+0xa0>
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	6864      	ldr	r4, [r4, #4]
 800b7c6:	e7b2      	b.n	800b72e <_malloc_r+0x32>
 800b7c8:	4634      	mov	r4, r6
 800b7ca:	6876      	ldr	r6, [r6, #4]
 800b7cc:	e7b9      	b.n	800b742 <_malloc_r+0x46>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	603b      	str	r3, [r7, #0]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f000 f83c 	bl	800b850 <__malloc_unlock>
 800b7d8:	e7a1      	b.n	800b71e <_malloc_r+0x22>
 800b7da:	6025      	str	r5, [r4, #0]
 800b7dc:	e7de      	b.n	800b79c <_malloc_r+0xa0>
 800b7de:	bf00      	nop
 800b7e0:	20052ef8 	.word	0x20052ef8

0800b7e4 <_sbrk_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	; (800b800 <_sbrk_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f5 ffea 	bl	80017c8 <_sbrk>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_sbrk_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_sbrk_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	20052f00 	.word	0x20052f00

0800b804 <siprintf>:
 800b804:	b40e      	push	{r1, r2, r3}
 800b806:	b500      	push	{lr}
 800b808:	b09c      	sub	sp, #112	; 0x70
 800b80a:	ab1d      	add	r3, sp, #116	; 0x74
 800b80c:	9002      	str	r0, [sp, #8]
 800b80e:	9006      	str	r0, [sp, #24]
 800b810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b814:	4809      	ldr	r0, [pc, #36]	; (800b83c <siprintf+0x38>)
 800b816:	9107      	str	r1, [sp, #28]
 800b818:	9104      	str	r1, [sp, #16]
 800b81a:	4909      	ldr	r1, [pc, #36]	; (800b840 <siprintf+0x3c>)
 800b81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b820:	9105      	str	r1, [sp, #20]
 800b822:	6800      	ldr	r0, [r0, #0]
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	a902      	add	r1, sp, #8
 800b828:	f000 f8a2 	bl	800b970 <_svfiprintf_r>
 800b82c:	9b02      	ldr	r3, [sp, #8]
 800b82e:	2200      	movs	r2, #0
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	b01c      	add	sp, #112	; 0x70
 800b834:	f85d eb04 	ldr.w	lr, [sp], #4
 800b838:	b003      	add	sp, #12
 800b83a:	4770      	bx	lr
 800b83c:	2000000c 	.word	0x2000000c
 800b840:	ffff0208 	.word	0xffff0208

0800b844 <__malloc_lock>:
 800b844:	4801      	ldr	r0, [pc, #4]	; (800b84c <__malloc_lock+0x8>)
 800b846:	f000 bb27 	b.w	800be98 <__retarget_lock_acquire_recursive>
 800b84a:	bf00      	nop
 800b84c:	20052f04 	.word	0x20052f04

0800b850 <__malloc_unlock>:
 800b850:	4801      	ldr	r0, [pc, #4]	; (800b858 <__malloc_unlock+0x8>)
 800b852:	f000 bb22 	b.w	800be9a <__retarget_lock_release_recursive>
 800b856:	bf00      	nop
 800b858:	20052f04 	.word	0x20052f04

0800b85c <_realloc_r>:
 800b85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b860:	4680      	mov	r8, r0
 800b862:	4614      	mov	r4, r2
 800b864:	460e      	mov	r6, r1
 800b866:	b921      	cbnz	r1, 800b872 <_realloc_r+0x16>
 800b868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86c:	4611      	mov	r1, r2
 800b86e:	f7ff bf45 	b.w	800b6fc <_malloc_r>
 800b872:	b92a      	cbnz	r2, 800b880 <_realloc_r+0x24>
 800b874:	f7ff fed6 	bl	800b624 <_free_r>
 800b878:	4625      	mov	r5, r4
 800b87a:	4628      	mov	r0, r5
 800b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b880:	f000 fb26 	bl	800bed0 <_malloc_usable_size_r>
 800b884:	4284      	cmp	r4, r0
 800b886:	4607      	mov	r7, r0
 800b888:	d802      	bhi.n	800b890 <_realloc_r+0x34>
 800b88a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b88e:	d812      	bhi.n	800b8b6 <_realloc_r+0x5a>
 800b890:	4621      	mov	r1, r4
 800b892:	4640      	mov	r0, r8
 800b894:	f7ff ff32 	bl	800b6fc <_malloc_r>
 800b898:	4605      	mov	r5, r0
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d0ed      	beq.n	800b87a <_realloc_r+0x1e>
 800b89e:	42bc      	cmp	r4, r7
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	bf28      	it	cs
 800b8a6:	463a      	movcs	r2, r7
 800b8a8:	f7ff fea6 	bl	800b5f8 <memcpy>
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7ff feb8 	bl	800b624 <_free_r>
 800b8b4:	e7e1      	b.n	800b87a <_realloc_r+0x1e>
 800b8b6:	4635      	mov	r5, r6
 800b8b8:	e7df      	b.n	800b87a <_realloc_r+0x1e>

0800b8ba <__ssputs_r>:
 800b8ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8be:	688e      	ldr	r6, [r1, #8]
 800b8c0:	429e      	cmp	r6, r3
 800b8c2:	4682      	mov	sl, r0
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	4690      	mov	r8, r2
 800b8c8:	461f      	mov	r7, r3
 800b8ca:	d838      	bhi.n	800b93e <__ssputs_r+0x84>
 800b8cc:	898a      	ldrh	r2, [r1, #12]
 800b8ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8d2:	d032      	beq.n	800b93a <__ssputs_r+0x80>
 800b8d4:	6825      	ldr	r5, [r4, #0]
 800b8d6:	6909      	ldr	r1, [r1, #16]
 800b8d8:	eba5 0901 	sub.w	r9, r5, r1
 800b8dc:	6965      	ldr	r5, [r4, #20]
 800b8de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	444b      	add	r3, r9
 800b8ea:	106d      	asrs	r5, r5, #1
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	bf38      	it	cc
 800b8f0:	461d      	movcc	r5, r3
 800b8f2:	0553      	lsls	r3, r2, #21
 800b8f4:	d531      	bpl.n	800b95a <__ssputs_r+0xa0>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	f7ff ff00 	bl	800b6fc <_malloc_r>
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	b950      	cbnz	r0, 800b916 <__ssputs_r+0x5c>
 800b900:	230c      	movs	r3, #12
 800b902:	f8ca 3000 	str.w	r3, [sl]
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	6921      	ldr	r1, [r4, #16]
 800b918:	464a      	mov	r2, r9
 800b91a:	f7ff fe6d 	bl	800b5f8 <memcpy>
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	6126      	str	r6, [r4, #16]
 800b92c:	6165      	str	r5, [r4, #20]
 800b92e:	444e      	add	r6, r9
 800b930:	eba5 0509 	sub.w	r5, r5, r9
 800b934:	6026      	str	r6, [r4, #0]
 800b936:	60a5      	str	r5, [r4, #8]
 800b938:	463e      	mov	r6, r7
 800b93a:	42be      	cmp	r6, r7
 800b93c:	d900      	bls.n	800b940 <__ssputs_r+0x86>
 800b93e:	463e      	mov	r6, r7
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	4632      	mov	r2, r6
 800b944:	4641      	mov	r1, r8
 800b946:	f000 faa9 	bl	800be9c <memmove>
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	1b9b      	subs	r3, r3, r6
 800b94e:	60a3      	str	r3, [r4, #8]
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	4433      	add	r3, r6
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	2000      	movs	r0, #0
 800b958:	e7db      	b.n	800b912 <__ssputs_r+0x58>
 800b95a:	462a      	mov	r2, r5
 800b95c:	f7ff ff7e 	bl	800b85c <_realloc_r>
 800b960:	4606      	mov	r6, r0
 800b962:	2800      	cmp	r0, #0
 800b964:	d1e1      	bne.n	800b92a <__ssputs_r+0x70>
 800b966:	6921      	ldr	r1, [r4, #16]
 800b968:	4650      	mov	r0, sl
 800b96a:	f7ff fe5b 	bl	800b624 <_free_r>
 800b96e:	e7c7      	b.n	800b900 <__ssputs_r+0x46>

0800b970 <_svfiprintf_r>:
 800b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	4698      	mov	r8, r3
 800b976:	898b      	ldrh	r3, [r1, #12]
 800b978:	061b      	lsls	r3, r3, #24
 800b97a:	b09d      	sub	sp, #116	; 0x74
 800b97c:	4607      	mov	r7, r0
 800b97e:	460d      	mov	r5, r1
 800b980:	4614      	mov	r4, r2
 800b982:	d50e      	bpl.n	800b9a2 <_svfiprintf_r+0x32>
 800b984:	690b      	ldr	r3, [r1, #16]
 800b986:	b963      	cbnz	r3, 800b9a2 <_svfiprintf_r+0x32>
 800b988:	2140      	movs	r1, #64	; 0x40
 800b98a:	f7ff feb7 	bl	800b6fc <_malloc_r>
 800b98e:	6028      	str	r0, [r5, #0]
 800b990:	6128      	str	r0, [r5, #16]
 800b992:	b920      	cbnz	r0, 800b99e <_svfiprintf_r+0x2e>
 800b994:	230c      	movs	r3, #12
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b99c:	e0d1      	b.n	800bb42 <_svfiprintf_r+0x1d2>
 800b99e:	2340      	movs	r3, #64	; 0x40
 800b9a0:	616b      	str	r3, [r5, #20]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a6:	2320      	movs	r3, #32
 800b9a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9b0:	2330      	movs	r3, #48	; 0x30
 800b9b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb5c <_svfiprintf_r+0x1ec>
 800b9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9ba:	f04f 0901 	mov.w	r9, #1
 800b9be:	4623      	mov	r3, r4
 800b9c0:	469a      	mov	sl, r3
 800b9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c6:	b10a      	cbz	r2, 800b9cc <_svfiprintf_r+0x5c>
 800b9c8:	2a25      	cmp	r2, #37	; 0x25
 800b9ca:	d1f9      	bne.n	800b9c0 <_svfiprintf_r+0x50>
 800b9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b9d0:	d00b      	beq.n	800b9ea <_svfiprintf_r+0x7a>
 800b9d2:	465b      	mov	r3, fp
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f7ff ff6e 	bl	800b8ba <__ssputs_r>
 800b9de:	3001      	adds	r0, #1
 800b9e0:	f000 80aa 	beq.w	800bb38 <_svfiprintf_r+0x1c8>
 800b9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e6:	445a      	add	r2, fp
 800b9e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80a2 	beq.w	800bb38 <_svfiprintf_r+0x1c8>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9fe:	f10a 0a01 	add.w	sl, sl, #1
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	9307      	str	r3, [sp, #28]
 800ba06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba0c:	4654      	mov	r4, sl
 800ba0e:	2205      	movs	r2, #5
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	4851      	ldr	r0, [pc, #324]	; (800bb5c <_svfiprintf_r+0x1ec>)
 800ba16:	f7f4 fc13 	bl	8000240 <memchr>
 800ba1a:	9a04      	ldr	r2, [sp, #16]
 800ba1c:	b9d8      	cbnz	r0, 800ba56 <_svfiprintf_r+0xe6>
 800ba1e:	06d0      	lsls	r0, r2, #27
 800ba20:	bf44      	itt	mi
 800ba22:	2320      	movmi	r3, #32
 800ba24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba28:	0711      	lsls	r1, r2, #28
 800ba2a:	bf44      	itt	mi
 800ba2c:	232b      	movmi	r3, #43	; 0x2b
 800ba2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba32:	f89a 3000 	ldrb.w	r3, [sl]
 800ba36:	2b2a      	cmp	r3, #42	; 0x2a
 800ba38:	d015      	beq.n	800ba66 <_svfiprintf_r+0xf6>
 800ba3a:	9a07      	ldr	r2, [sp, #28]
 800ba3c:	4654      	mov	r4, sl
 800ba3e:	2000      	movs	r0, #0
 800ba40:	f04f 0c0a 	mov.w	ip, #10
 800ba44:	4621      	mov	r1, r4
 800ba46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba4a:	3b30      	subs	r3, #48	; 0x30
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d94e      	bls.n	800baee <_svfiprintf_r+0x17e>
 800ba50:	b1b0      	cbz	r0, 800ba80 <_svfiprintf_r+0x110>
 800ba52:	9207      	str	r2, [sp, #28]
 800ba54:	e014      	b.n	800ba80 <_svfiprintf_r+0x110>
 800ba56:	eba0 0308 	sub.w	r3, r0, r8
 800ba5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	9304      	str	r3, [sp, #16]
 800ba62:	46a2      	mov	sl, r4
 800ba64:	e7d2      	b.n	800ba0c <_svfiprintf_r+0x9c>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	1d19      	adds	r1, r3, #4
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	9103      	str	r1, [sp, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfbb      	ittet	lt
 800ba72:	425b      	neglt	r3, r3
 800ba74:	f042 0202 	orrlt.w	r2, r2, #2
 800ba78:	9307      	strge	r3, [sp, #28]
 800ba7a:	9307      	strlt	r3, [sp, #28]
 800ba7c:	bfb8      	it	lt
 800ba7e:	9204      	strlt	r2, [sp, #16]
 800ba80:	7823      	ldrb	r3, [r4, #0]
 800ba82:	2b2e      	cmp	r3, #46	; 0x2e
 800ba84:	d10c      	bne.n	800baa0 <_svfiprintf_r+0x130>
 800ba86:	7863      	ldrb	r3, [r4, #1]
 800ba88:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8a:	d135      	bne.n	800baf8 <_svfiprintf_r+0x188>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	1d1a      	adds	r2, r3, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	9203      	str	r2, [sp, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	bfb8      	it	lt
 800ba98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba9c:	3402      	adds	r4, #2
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb6c <_svfiprintf_r+0x1fc>
 800baa4:	7821      	ldrb	r1, [r4, #0]
 800baa6:	2203      	movs	r2, #3
 800baa8:	4650      	mov	r0, sl
 800baaa:	f7f4 fbc9 	bl	8000240 <memchr>
 800baae:	b140      	cbz	r0, 800bac2 <_svfiprintf_r+0x152>
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	eba0 000a 	sub.w	r0, r0, sl
 800bab6:	fa03 f000 	lsl.w	r0, r3, r0
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	4303      	orrs	r3, r0
 800babe:	3401      	adds	r4, #1
 800bac0:	9304      	str	r3, [sp, #16]
 800bac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac6:	4826      	ldr	r0, [pc, #152]	; (800bb60 <_svfiprintf_r+0x1f0>)
 800bac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bacc:	2206      	movs	r2, #6
 800bace:	f7f4 fbb7 	bl	8000240 <memchr>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d038      	beq.n	800bb48 <_svfiprintf_r+0x1d8>
 800bad6:	4b23      	ldr	r3, [pc, #140]	; (800bb64 <_svfiprintf_r+0x1f4>)
 800bad8:	bb1b      	cbnz	r3, 800bb22 <_svfiprintf_r+0x1b2>
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	3307      	adds	r3, #7
 800bade:	f023 0307 	bic.w	r3, r3, #7
 800bae2:	3308      	adds	r3, #8
 800bae4:	9303      	str	r3, [sp, #12]
 800bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae8:	4433      	add	r3, r6
 800baea:	9309      	str	r3, [sp, #36]	; 0x24
 800baec:	e767      	b.n	800b9be <_svfiprintf_r+0x4e>
 800baee:	fb0c 3202 	mla	r2, ip, r2, r3
 800baf2:	460c      	mov	r4, r1
 800baf4:	2001      	movs	r0, #1
 800baf6:	e7a5      	b.n	800ba44 <_svfiprintf_r+0xd4>
 800baf8:	2300      	movs	r3, #0
 800bafa:	3401      	adds	r4, #1
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	4619      	mov	r1, r3
 800bb00:	f04f 0c0a 	mov.w	ip, #10
 800bb04:	4620      	mov	r0, r4
 800bb06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb0a:	3a30      	subs	r2, #48	; 0x30
 800bb0c:	2a09      	cmp	r2, #9
 800bb0e:	d903      	bls.n	800bb18 <_svfiprintf_r+0x1a8>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d0c5      	beq.n	800baa0 <_svfiprintf_r+0x130>
 800bb14:	9105      	str	r1, [sp, #20]
 800bb16:	e7c3      	b.n	800baa0 <_svfiprintf_r+0x130>
 800bb18:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e7f0      	b.n	800bb04 <_svfiprintf_r+0x194>
 800bb22:	ab03      	add	r3, sp, #12
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	462a      	mov	r2, r5
 800bb28:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <_svfiprintf_r+0x1f8>)
 800bb2a:	a904      	add	r1, sp, #16
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f3af 8000 	nop.w
 800bb32:	1c42      	adds	r2, r0, #1
 800bb34:	4606      	mov	r6, r0
 800bb36:	d1d6      	bne.n	800bae6 <_svfiprintf_r+0x176>
 800bb38:	89ab      	ldrh	r3, [r5, #12]
 800bb3a:	065b      	lsls	r3, r3, #25
 800bb3c:	f53f af2c 	bmi.w	800b998 <_svfiprintf_r+0x28>
 800bb40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb42:	b01d      	add	sp, #116	; 0x74
 800bb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb48:	ab03      	add	r3, sp, #12
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <_svfiprintf_r+0x1f8>)
 800bb50:	a904      	add	r1, sp, #16
 800bb52:	4638      	mov	r0, r7
 800bb54:	f000 f87a 	bl	800bc4c <_printf_i>
 800bb58:	e7eb      	b.n	800bb32 <_svfiprintf_r+0x1c2>
 800bb5a:	bf00      	nop
 800bb5c:	0800c046 	.word	0x0800c046
 800bb60:	0800c050 	.word	0x0800c050
 800bb64:	00000000 	.word	0x00000000
 800bb68:	0800b8bb 	.word	0x0800b8bb
 800bb6c:	0800c04c 	.word	0x0800c04c

0800bb70 <_printf_common>:
 800bb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb74:	4616      	mov	r6, r2
 800bb76:	4699      	mov	r9, r3
 800bb78:	688a      	ldr	r2, [r1, #8]
 800bb7a:	690b      	ldr	r3, [r1, #16]
 800bb7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	bfb8      	it	lt
 800bb84:	4613      	movlt	r3, r2
 800bb86:	6033      	str	r3, [r6, #0]
 800bb88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	460c      	mov	r4, r1
 800bb90:	b10a      	cbz	r2, 800bb96 <_printf_common+0x26>
 800bb92:	3301      	adds	r3, #1
 800bb94:	6033      	str	r3, [r6, #0]
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	0699      	lsls	r1, r3, #26
 800bb9a:	bf42      	ittt	mi
 800bb9c:	6833      	ldrmi	r3, [r6, #0]
 800bb9e:	3302      	addmi	r3, #2
 800bba0:	6033      	strmi	r3, [r6, #0]
 800bba2:	6825      	ldr	r5, [r4, #0]
 800bba4:	f015 0506 	ands.w	r5, r5, #6
 800bba8:	d106      	bne.n	800bbb8 <_printf_common+0x48>
 800bbaa:	f104 0a19 	add.w	sl, r4, #25
 800bbae:	68e3      	ldr	r3, [r4, #12]
 800bbb0:	6832      	ldr	r2, [r6, #0]
 800bbb2:	1a9b      	subs	r3, r3, r2
 800bbb4:	42ab      	cmp	r3, r5
 800bbb6:	dc26      	bgt.n	800bc06 <_printf_common+0x96>
 800bbb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbbc:	1e13      	subs	r3, r2, #0
 800bbbe:	6822      	ldr	r2, [r4, #0]
 800bbc0:	bf18      	it	ne
 800bbc2:	2301      	movne	r3, #1
 800bbc4:	0692      	lsls	r2, r2, #26
 800bbc6:	d42b      	bmi.n	800bc20 <_printf_common+0xb0>
 800bbc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbcc:	4649      	mov	r1, r9
 800bbce:	4638      	mov	r0, r7
 800bbd0:	47c0      	blx	r8
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	d01e      	beq.n	800bc14 <_printf_common+0xa4>
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	68e5      	ldr	r5, [r4, #12]
 800bbda:	6832      	ldr	r2, [r6, #0]
 800bbdc:	f003 0306 	and.w	r3, r3, #6
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	bf08      	it	eq
 800bbe4:	1aad      	subeq	r5, r5, r2
 800bbe6:	68a3      	ldr	r3, [r4, #8]
 800bbe8:	6922      	ldr	r2, [r4, #16]
 800bbea:	bf0c      	ite	eq
 800bbec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbf0:	2500      	movne	r5, #0
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	bfc4      	itt	gt
 800bbf6:	1a9b      	subgt	r3, r3, r2
 800bbf8:	18ed      	addgt	r5, r5, r3
 800bbfa:	2600      	movs	r6, #0
 800bbfc:	341a      	adds	r4, #26
 800bbfe:	42b5      	cmp	r5, r6
 800bc00:	d11a      	bne.n	800bc38 <_printf_common+0xc8>
 800bc02:	2000      	movs	r0, #0
 800bc04:	e008      	b.n	800bc18 <_printf_common+0xa8>
 800bc06:	2301      	movs	r3, #1
 800bc08:	4652      	mov	r2, sl
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	47c0      	blx	r8
 800bc10:	3001      	adds	r0, #1
 800bc12:	d103      	bne.n	800bc1c <_printf_common+0xac>
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	e7c6      	b.n	800bbae <_printf_common+0x3e>
 800bc20:	18e1      	adds	r1, r4, r3
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	2030      	movs	r0, #48	; 0x30
 800bc26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc2a:	4422      	add	r2, r4
 800bc2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc34:	3302      	adds	r3, #2
 800bc36:	e7c7      	b.n	800bbc8 <_printf_common+0x58>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	4638      	mov	r0, r7
 800bc40:	47c0      	blx	r8
 800bc42:	3001      	adds	r0, #1
 800bc44:	d0e6      	beq.n	800bc14 <_printf_common+0xa4>
 800bc46:	3601      	adds	r6, #1
 800bc48:	e7d9      	b.n	800bbfe <_printf_common+0x8e>
	...

0800bc4c <_printf_i>:
 800bc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc50:	7e0f      	ldrb	r7, [r1, #24]
 800bc52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc54:	2f78      	cmp	r7, #120	; 0x78
 800bc56:	4691      	mov	r9, r2
 800bc58:	4680      	mov	r8, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	469a      	mov	sl, r3
 800bc5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc62:	d807      	bhi.n	800bc74 <_printf_i+0x28>
 800bc64:	2f62      	cmp	r7, #98	; 0x62
 800bc66:	d80a      	bhi.n	800bc7e <_printf_i+0x32>
 800bc68:	2f00      	cmp	r7, #0
 800bc6a:	f000 80d8 	beq.w	800be1e <_printf_i+0x1d2>
 800bc6e:	2f58      	cmp	r7, #88	; 0x58
 800bc70:	f000 80a3 	beq.w	800bdba <_printf_i+0x16e>
 800bc74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc7c:	e03a      	b.n	800bcf4 <_printf_i+0xa8>
 800bc7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc82:	2b15      	cmp	r3, #21
 800bc84:	d8f6      	bhi.n	800bc74 <_printf_i+0x28>
 800bc86:	a101      	add	r1, pc, #4	; (adr r1, 800bc8c <_printf_i+0x40>)
 800bc88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc8c:	0800bce5 	.word	0x0800bce5
 800bc90:	0800bcf9 	.word	0x0800bcf9
 800bc94:	0800bc75 	.word	0x0800bc75
 800bc98:	0800bc75 	.word	0x0800bc75
 800bc9c:	0800bc75 	.word	0x0800bc75
 800bca0:	0800bc75 	.word	0x0800bc75
 800bca4:	0800bcf9 	.word	0x0800bcf9
 800bca8:	0800bc75 	.word	0x0800bc75
 800bcac:	0800bc75 	.word	0x0800bc75
 800bcb0:	0800bc75 	.word	0x0800bc75
 800bcb4:	0800bc75 	.word	0x0800bc75
 800bcb8:	0800be05 	.word	0x0800be05
 800bcbc:	0800bd29 	.word	0x0800bd29
 800bcc0:	0800bde7 	.word	0x0800bde7
 800bcc4:	0800bc75 	.word	0x0800bc75
 800bcc8:	0800bc75 	.word	0x0800bc75
 800bccc:	0800be27 	.word	0x0800be27
 800bcd0:	0800bc75 	.word	0x0800bc75
 800bcd4:	0800bd29 	.word	0x0800bd29
 800bcd8:	0800bc75 	.word	0x0800bc75
 800bcdc:	0800bc75 	.word	0x0800bc75
 800bce0:	0800bdef 	.word	0x0800bdef
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	1d1a      	adds	r2, r3, #4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	602a      	str	r2, [r5, #0]
 800bcec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e0a3      	b.n	800be40 <_printf_i+0x1f4>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	6829      	ldr	r1, [r5, #0]
 800bcfc:	0606      	lsls	r6, r0, #24
 800bcfe:	f101 0304 	add.w	r3, r1, #4
 800bd02:	d50a      	bpl.n	800bd1a <_printf_i+0xce>
 800bd04:	680e      	ldr	r6, [r1, #0]
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	2e00      	cmp	r6, #0
 800bd0a:	da03      	bge.n	800bd14 <_printf_i+0xc8>
 800bd0c:	232d      	movs	r3, #45	; 0x2d
 800bd0e:	4276      	negs	r6, r6
 800bd10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd14:	485e      	ldr	r0, [pc, #376]	; (800be90 <_printf_i+0x244>)
 800bd16:	230a      	movs	r3, #10
 800bd18:	e019      	b.n	800bd4e <_printf_i+0x102>
 800bd1a:	680e      	ldr	r6, [r1, #0]
 800bd1c:	602b      	str	r3, [r5, #0]
 800bd1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd22:	bf18      	it	ne
 800bd24:	b236      	sxthne	r6, r6
 800bd26:	e7ef      	b.n	800bd08 <_printf_i+0xbc>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	6820      	ldr	r0, [r4, #0]
 800bd2c:	1d19      	adds	r1, r3, #4
 800bd2e:	6029      	str	r1, [r5, #0]
 800bd30:	0601      	lsls	r1, r0, #24
 800bd32:	d501      	bpl.n	800bd38 <_printf_i+0xec>
 800bd34:	681e      	ldr	r6, [r3, #0]
 800bd36:	e002      	b.n	800bd3e <_printf_i+0xf2>
 800bd38:	0646      	lsls	r6, r0, #25
 800bd3a:	d5fb      	bpl.n	800bd34 <_printf_i+0xe8>
 800bd3c:	881e      	ldrh	r6, [r3, #0]
 800bd3e:	4854      	ldr	r0, [pc, #336]	; (800be90 <_printf_i+0x244>)
 800bd40:	2f6f      	cmp	r7, #111	; 0x6f
 800bd42:	bf0c      	ite	eq
 800bd44:	2308      	moveq	r3, #8
 800bd46:	230a      	movne	r3, #10
 800bd48:	2100      	movs	r1, #0
 800bd4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd4e:	6865      	ldr	r5, [r4, #4]
 800bd50:	60a5      	str	r5, [r4, #8]
 800bd52:	2d00      	cmp	r5, #0
 800bd54:	bfa2      	ittt	ge
 800bd56:	6821      	ldrge	r1, [r4, #0]
 800bd58:	f021 0104 	bicge.w	r1, r1, #4
 800bd5c:	6021      	strge	r1, [r4, #0]
 800bd5e:	b90e      	cbnz	r6, 800bd64 <_printf_i+0x118>
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	d04d      	beq.n	800be00 <_printf_i+0x1b4>
 800bd64:	4615      	mov	r5, r2
 800bd66:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd6a:	fb03 6711 	mls	r7, r3, r1, r6
 800bd6e:	5dc7      	ldrb	r7, [r0, r7]
 800bd70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd74:	4637      	mov	r7, r6
 800bd76:	42bb      	cmp	r3, r7
 800bd78:	460e      	mov	r6, r1
 800bd7a:	d9f4      	bls.n	800bd66 <_printf_i+0x11a>
 800bd7c:	2b08      	cmp	r3, #8
 800bd7e:	d10b      	bne.n	800bd98 <_printf_i+0x14c>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	07de      	lsls	r6, r3, #31
 800bd84:	d508      	bpl.n	800bd98 <_printf_i+0x14c>
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	6861      	ldr	r1, [r4, #4]
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	bfde      	ittt	le
 800bd8e:	2330      	movle	r3, #48	; 0x30
 800bd90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bd98:	1b52      	subs	r2, r2, r5
 800bd9a:	6122      	str	r2, [r4, #16]
 800bd9c:	f8cd a000 	str.w	sl, [sp]
 800bda0:	464b      	mov	r3, r9
 800bda2:	aa03      	add	r2, sp, #12
 800bda4:	4621      	mov	r1, r4
 800bda6:	4640      	mov	r0, r8
 800bda8:	f7ff fee2 	bl	800bb70 <_printf_common>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d14c      	bne.n	800be4a <_printf_i+0x1fe>
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdb4:	b004      	add	sp, #16
 800bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdba:	4835      	ldr	r0, [pc, #212]	; (800be90 <_printf_i+0x244>)
 800bdbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bdc0:	6829      	ldr	r1, [r5, #0]
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdc8:	6029      	str	r1, [r5, #0]
 800bdca:	061d      	lsls	r5, r3, #24
 800bdcc:	d514      	bpl.n	800bdf8 <_printf_i+0x1ac>
 800bdce:	07df      	lsls	r7, r3, #31
 800bdd0:	bf44      	itt	mi
 800bdd2:	f043 0320 	orrmi.w	r3, r3, #32
 800bdd6:	6023      	strmi	r3, [r4, #0]
 800bdd8:	b91e      	cbnz	r6, 800bde2 <_printf_i+0x196>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	f023 0320 	bic.w	r3, r3, #32
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	2310      	movs	r3, #16
 800bde4:	e7b0      	b.n	800bd48 <_printf_i+0xfc>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	f043 0320 	orr.w	r3, r3, #32
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	2378      	movs	r3, #120	; 0x78
 800bdf0:	4828      	ldr	r0, [pc, #160]	; (800be94 <_printf_i+0x248>)
 800bdf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdf6:	e7e3      	b.n	800bdc0 <_printf_i+0x174>
 800bdf8:	0659      	lsls	r1, r3, #25
 800bdfa:	bf48      	it	mi
 800bdfc:	b2b6      	uxthmi	r6, r6
 800bdfe:	e7e6      	b.n	800bdce <_printf_i+0x182>
 800be00:	4615      	mov	r5, r2
 800be02:	e7bb      	b.n	800bd7c <_printf_i+0x130>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	6826      	ldr	r6, [r4, #0]
 800be08:	6961      	ldr	r1, [r4, #20]
 800be0a:	1d18      	adds	r0, r3, #4
 800be0c:	6028      	str	r0, [r5, #0]
 800be0e:	0635      	lsls	r5, r6, #24
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	d501      	bpl.n	800be18 <_printf_i+0x1cc>
 800be14:	6019      	str	r1, [r3, #0]
 800be16:	e002      	b.n	800be1e <_printf_i+0x1d2>
 800be18:	0670      	lsls	r0, r6, #25
 800be1a:	d5fb      	bpl.n	800be14 <_printf_i+0x1c8>
 800be1c:	8019      	strh	r1, [r3, #0]
 800be1e:	2300      	movs	r3, #0
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	4615      	mov	r5, r2
 800be24:	e7ba      	b.n	800bd9c <_printf_i+0x150>
 800be26:	682b      	ldr	r3, [r5, #0]
 800be28:	1d1a      	adds	r2, r3, #4
 800be2a:	602a      	str	r2, [r5, #0]
 800be2c:	681d      	ldr	r5, [r3, #0]
 800be2e:	6862      	ldr	r2, [r4, #4]
 800be30:	2100      	movs	r1, #0
 800be32:	4628      	mov	r0, r5
 800be34:	f7f4 fa04 	bl	8000240 <memchr>
 800be38:	b108      	cbz	r0, 800be3e <_printf_i+0x1f2>
 800be3a:	1b40      	subs	r0, r0, r5
 800be3c:	6060      	str	r0, [r4, #4]
 800be3e:	6863      	ldr	r3, [r4, #4]
 800be40:	6123      	str	r3, [r4, #16]
 800be42:	2300      	movs	r3, #0
 800be44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be48:	e7a8      	b.n	800bd9c <_printf_i+0x150>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	462a      	mov	r2, r5
 800be4e:	4649      	mov	r1, r9
 800be50:	4640      	mov	r0, r8
 800be52:	47d0      	blx	sl
 800be54:	3001      	adds	r0, #1
 800be56:	d0ab      	beq.n	800bdb0 <_printf_i+0x164>
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	079b      	lsls	r3, r3, #30
 800be5c:	d413      	bmi.n	800be86 <_printf_i+0x23a>
 800be5e:	68e0      	ldr	r0, [r4, #12]
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	4298      	cmp	r0, r3
 800be64:	bfb8      	it	lt
 800be66:	4618      	movlt	r0, r3
 800be68:	e7a4      	b.n	800bdb4 <_printf_i+0x168>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4632      	mov	r2, r6
 800be6e:	4649      	mov	r1, r9
 800be70:	4640      	mov	r0, r8
 800be72:	47d0      	blx	sl
 800be74:	3001      	adds	r0, #1
 800be76:	d09b      	beq.n	800bdb0 <_printf_i+0x164>
 800be78:	3501      	adds	r5, #1
 800be7a:	68e3      	ldr	r3, [r4, #12]
 800be7c:	9903      	ldr	r1, [sp, #12]
 800be7e:	1a5b      	subs	r3, r3, r1
 800be80:	42ab      	cmp	r3, r5
 800be82:	dcf2      	bgt.n	800be6a <_printf_i+0x21e>
 800be84:	e7eb      	b.n	800be5e <_printf_i+0x212>
 800be86:	2500      	movs	r5, #0
 800be88:	f104 0619 	add.w	r6, r4, #25
 800be8c:	e7f5      	b.n	800be7a <_printf_i+0x22e>
 800be8e:	bf00      	nop
 800be90:	0800c057 	.word	0x0800c057
 800be94:	0800c068 	.word	0x0800c068

0800be98 <__retarget_lock_acquire_recursive>:
 800be98:	4770      	bx	lr

0800be9a <__retarget_lock_release_recursive>:
 800be9a:	4770      	bx	lr

0800be9c <memmove>:
 800be9c:	4288      	cmp	r0, r1
 800be9e:	b510      	push	{r4, lr}
 800bea0:	eb01 0402 	add.w	r4, r1, r2
 800bea4:	d902      	bls.n	800beac <memmove+0x10>
 800bea6:	4284      	cmp	r4, r0
 800bea8:	4623      	mov	r3, r4
 800beaa:	d807      	bhi.n	800bebc <memmove+0x20>
 800beac:	1e43      	subs	r3, r0, #1
 800beae:	42a1      	cmp	r1, r4
 800beb0:	d008      	beq.n	800bec4 <memmove+0x28>
 800beb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beba:	e7f8      	b.n	800beae <memmove+0x12>
 800bebc:	4402      	add	r2, r0
 800bebe:	4601      	mov	r1, r0
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d100      	bne.n	800bec6 <memmove+0x2a>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bece:	e7f7      	b.n	800bec0 <memmove+0x24>

0800bed0 <_malloc_usable_size_r>:
 800bed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed4:	1f18      	subs	r0, r3, #4
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	bfbc      	itt	lt
 800beda:	580b      	ldrlt	r3, [r1, r0]
 800bedc:	18c0      	addlt	r0, r0, r3
 800bede:	4770      	bx	lr

0800bee0 <_init>:
 800bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee2:	bf00      	nop
 800bee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee6:	bc08      	pop	{r3}
 800bee8:	469e      	mov	lr, r3
 800beea:	4770      	bx	lr

0800beec <_fini>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr
