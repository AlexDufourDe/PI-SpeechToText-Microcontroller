
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000000c  08007a34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200004cc  08007a34  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a93  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b9  00000000  00000000  00039acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000326c5  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d10b  00000000  00000000  0007288d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012525d  00000000  00000000  0008f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4bf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  001b4c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080079cc 	.word	0x080079cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080079cc 	.word	0x080079cc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <MX_ADC1_Init+0x9c>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_ADC1_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ADC1_Init+0x98>)
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <MX_ADC1_Init+0xa0>)
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_ADC1_Init+0x98>)
 800058a:	2201      	movs	r2, #1
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x98>)
 800059e:	f001 f879 	bl	8001694 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a8:	f000 fc74 	bl	8000e94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_ADC1_Init+0xa4>)
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_ADC1_Init+0x98>)
 80005be:	f001 f8ad 	bl	800171c <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c8:	f000 fc64 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40012000 	.word	0x40012000
 80005dc:	0f000001 	.word	0x0f000001
 80005e0:	10000012 	.word	0x10000012

080005e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_ADC_MspInit+0x38>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10b      	bne.n	800060e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40012000 	.word	0x40012000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f001 fbc7 	bl	8001de0 <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f000 fc1c 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000070 	.word	0x20000070
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80006ac:	4b63      	ldr	r3, [pc, #396]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ae:	4a64      	ldr	r2, [pc, #400]	; (8000840 <MX_DFSDM1_Init+0x198>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006b2:	4b62      	ldr	r3, [pc, #392]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80006b8:	4b60      	ldr	r3, [pc, #384]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80006be:	4b5f      	ldr	r3, [pc, #380]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 80006ca:	4b5c      	ldr	r3, [pc, #368]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80006d6:	4b59      	ldr	r3, [pc, #356]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80006dc:	4b57      	ldr	r3, [pc, #348]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80006ec:	4b53      	ldr	r3, [pc, #332]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80006f2:	4b52      	ldr	r3, [pc, #328]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006fa:	f001 fd1b 	bl	8002134 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <MX_DFSDM1_Init+0x1a0>)
 8000702:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000704:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800070a:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800070c:	2201      	movs	r2, #1
 800070e:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000710:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000712:	2201      	movs	r2, #1
 8000714:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000716:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 800071c:	4b49      	ldr	r3, [pc, #292]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800071e:	2201      	movs	r2, #1
 8000720:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 8000722:	4b48      	ldr	r3, [pc, #288]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000724:	2200      	movs	r2, #0
 8000726:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000728:	4b46      	ldr	r3, [pc, #280]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800072e:	4b45      	ldr	r3, [pc, #276]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000734:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000736:	4b43      	ldr	r3, [pc, #268]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000738:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800073c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000746:	2201      	movs	r2, #1
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800074a:	483e      	ldr	r0, [pc, #248]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800074c:	f001 fcf2 	bl	8002134 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_DFSDM1_Init+0x1a8>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000762:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000766:	2204      	movs	r2, #4
 8000768:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000786:	2204      	movs	r2, #4
 8000788:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80007a2:	482a      	ldr	r0, [pc, #168]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 80007a4:	f001 fc06 	bl	8001fb4 <HAL_DFSDM_ChannelInit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 80007ae:	f000 fb71 	bl	8000e94 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_DFSDM1_Init+0x1b0>)
 80007b6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f2:	220a      	movs	r2, #10
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007fe:	2202      	movs	r2, #2
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 8000804:	f001 fbd6 	bl	8001fb4 <HAL_DFSDM_ChannelInit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 800080e:	f000 fb41 	bl	8000e94 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000812:	2201      	movs	r2, #1
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000818:	f001 fd66 	bl	80022e8 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 800081c:	490f      	ldr	r1, [pc, #60]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000820:	f001 fda8 	bl	8002374 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000824:	2201      	movs	r2, #1
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800082a:	f001 fd5d 	bl	80022e8 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 800082e:	2101      	movs	r1, #1
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000832:	f001 fd9f 	bl	8002374 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	40017500 	.word	0x40017500
 8000844:	200000e8 	.word	0x200000e8
 8000848:	40017580 	.word	0x40017580
 800084c:	2000013c 	.word	0x2000013c
 8000850:	40017400 	.word	0x40017400
 8000854:	20000174 	.word	0x20000174
 8000858:	40017420 	.word	0x40017420
 800085c:	00010002 	.word	0x00010002

08000860 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000878:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d145      	bne.n	800090c <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000880:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10b      	bne.n	80008aa <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a5e      	ldr	r2, [pc, #376]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a58      	ldr	r2, [pc, #352]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80008d2:	230a      	movs	r3, #10
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	484d      	ldr	r0, [pc, #308]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008de:	f002 f989 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e2:	2308      	movs	r3, #8
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4845      	ldr	r0, [pc, #276]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008fe:	f002 f979 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800090a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d137      	bne.n	8000986 <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000918:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <HAL_DFSDM_FilterMspInit+0x1c0>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000922:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000936:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800093a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000956:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800095e:	482f      	ldr	r0, [pc, #188]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000960:	f001 fda2 	bl	80024a8 <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 800096a:	f000 fa93 	bl	8000e94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
 8000980:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_DFSDM_FilterMspInit+0x1c4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d137      	bne.n	8000a00 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009da:	f001 fd65 	bl	80024a8 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 80009e4:	f000 fa56 	bl	8000e94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000270 	.word	0x20000270
 8000a0c:	2000026c 	.word	0x2000026c
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40017500 	.word	0x40017500
 8000a1c:	200001ac 	.word	0x200001ac
 8000a20:	40026410 	.word	0x40026410
 8000a24:	40017580 	.word	0x40017580
 8000a28:	2000020c 	.word	0x2000020c
 8000a2c:	40026488 	.word	0x40026488

08000a30 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d145      	bne.n	8000adc <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10b      	bne.n	8000a7a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000aae:	f002 f8a1 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ace:	f002 f891 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ada:	6013      	str	r3, [r2, #0]
  }
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000270 	.word	0x20000270
 8000ae8:	2000026c 	.word	0x2000026c
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_DMA_Init+0x58>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_DMA_Init+0x58>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_DMA_Init+0x58>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2038      	movs	r0, #56	; 0x38
 8000b18:	f001 f92b 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1c:	2038      	movs	r0, #56	; 0x38
 8000b1e:	f001 f944 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2044      	movs	r0, #68	; 0x44
 8000b28:	f001 f923 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000b2c:	2044      	movs	r0, #68	; 0x44
 8000b2e:	f001 f93c 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2045      	movs	r0, #69	; 0x45
 8000b38:	f001 f91b 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b3c:	2045      	movs	r0, #69	; 0x45
 8000b3e:	f001 f934 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0xe4>)
 8000c24:	f001 ffe6 	bl	8002bf4 <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3c:	f3bf 8f4f 	dsb	sy
}
 8000c40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c42:	f3bf 8f6f 	isb	sy
}
 8000c46:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <SCB_EnableICache+0x48>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c50:	f3bf 8f4f 	dsb	sy
}
 8000c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c56:	f3bf 8f6f 	isb	sy
}
 8000c5a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <SCB_EnableICache+0x48>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <SCB_EnableICache+0x48>)
 8000c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c66:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c68:	f3bf 8f4f 	dsb	sy
}
 8000c6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c6e:	f3bf 8f6f 	isb	sy
}
 8000c72:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c92:	f3bf 8f4f 	dsb	sy
}
 8000c96:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c9e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	0b5b      	lsrs	r3, r3, #13
 8000ca4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ca8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cb2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	015a      	lsls	r2, r3, #5
 8000cb8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cbc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cc2:	4911      	ldr	r1, [pc, #68]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1ef      	bne.n	8000cb4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	60fa      	str	r2, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1e5      	bne.n	8000caa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cde:	f3bf 8f4f 	dsb	sy
}
 8000ce2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf0:	f3bf 8f4f 	dsb	sy
}
 8000cf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cf6:	f3bf 8f6f 	isb	sy
}
 8000cfa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d10:	f7ff ff92 	bl	8000c38 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d14:	f7ff ffb6 	bl	8000c84 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fc3b 	bl	8001592 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f818 	bl	8000d50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d20:	f000 f888 	bl	8000e34 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f7ff ff14 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d28:	f7ff fee4 	bl	8000af4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000d2c:	f7ff fcbc 	bl	80006a8 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000d30:	f000 f914 	bl	8000f5c <MX_SAI2_Init>
  MX_ADC1_Init();
 8000d34:	f7ff fc02 	bl	800053c <MX_ADC1_Init>
  MX_UART4_Init();
 8000d38:	f000 fb50 	bl	80013dc <MX_UART4_Init>
  MX_CRC_Init();
 8000d3c:	f7ff fc72 	bl	8000624 <MX_CRC_Init>
  MX_RTC_Init();
 8000d40:	f000 f8ae 	bl	8000ea0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000d44:	f000 fa14 	bl	8001170 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000d48:	f006 fb5e 	bl	8007408 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <main+0x40>
	...

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	; 0x50
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2234      	movs	r2, #52	; 0x34
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 fe2c 	bl	80079bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <SystemClock_Config+0xdc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a2c      	ldr	r2, [pc, #176]	; (8000e2c <SystemClock_Config+0xdc>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <SystemClock_Config+0xdc>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <SystemClock_Config+0xe0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <SystemClock_Config+0xe0>)
 8000d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <SystemClock_Config+0xe0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000da4:	2309      	movs	r3, #9
 8000da6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dbc:	2319      	movs	r3, #25
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000dc0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dca:	2309      	movs	r3, #9
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 f920 	bl	800301c <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000de2:	f000 f857 	bl	8000e94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000de6:	f002 f8c9 	bl	8002f7c <HAL_PWREx_EnableOverDrive>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000df0:	f000 f850 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2107      	movs	r1, #7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fbb0 	bl	8003578 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e1e:	f000 f839 	bl	8000e94 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b0a4      	sub	sp, #144	; 0x90
 8000e38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2290      	movs	r2, #144	; 0x90
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f006 fdbb 	bl	80079bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <PeriphCommonClock_Config+0x5c>)
 8000e48:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8000e4a:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000e4e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8000e54:	2306      	movs	r3, #6
 8000e56:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e64:	2300      	movs	r3, #0
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8000e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fd63 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000e84:	f000 f806 	bl	8000e94 <Error_Handler>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3790      	adds	r7, #144	; 0x90
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	18300000 	.word	0x18300000

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <MX_RTC_Init+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ec6:	227f      	movs	r2, #127	; 0x7f
 8000ec8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ecc:	22ff      	movs	r2, #255	; 0xff
 8000ece:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_RTC_Init+0x58>)
 8000ee4:	f003 fac8 	bl	8004478 <HAL_RTC_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000eee:	f7ff ffd1 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000274 	.word	0x20000274
 8000efc:	40002800 	.word	0x40002800

08000f00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0a6      	sub	sp, #152	; 0x98
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	2290      	movs	r2, #144	; 0x90
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fd53 	bl	80079bc <memset>
  if(rtcHandle->Instance==RTC)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_RTC_MspInit+0x54>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d114      	bne.n	8000f4a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f20:	2320      	movs	r3, #32
 8000f22:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fd08 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f3a:	f7ff ffab 	bl	8000e94 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_RTC_MspInit+0x58>)
 8000f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_RTC_MspInit+0x58>)
 8000f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f48:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3798      	adds	r7, #152	; 0x98
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40002800 	.word	0x40002800
 8000f58:	40023800 	.word	0x40023800

08000f5c <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f60:	4b2a      	ldr	r3, [pc, #168]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <MX_SAI2_Init+0xb4>)
 8000f64:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_SAI2_Init+0xb0>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_SAI2_Init+0xb8>)
 8000fa2:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fdc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_SAI2_Init+0xb0>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SAI2_Init+0xb0>)
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_SAI2_Init+0xb0>)
 8000ff8:	f003 fb46 	bl	8004688 <HAL_SAI_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8001002:	f7ff ff47 	bl	8000e94 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000294 	.word	0x20000294
 8001010:	40015c24 	.word	0x40015c24
 8001014:	0002ee00 	.word	0x0002ee00

08001018 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_SAI_MspInit+0x138>)
 8001026:	4293      	cmp	r3, r2
 8001028:	f040 808e 	bne.w	8001148 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800102c:	4b49      	ldr	r3, [pc, #292]	; (8001154 <HAL_SAI_MspInit+0x13c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10b      	bne.n	800104c <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <HAL_SAI_MspInit+0x140>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001038:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_SAI_MspInit+0x140>)
 800103a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800103e:	6453      	str	r3, [r2, #68]	; 0x44
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <HAL_SAI_MspInit+0x140>)
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <HAL_SAI_MspInit+0x13c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4a40      	ldr	r2, [pc, #256]	; (8001154 <HAL_SAI_MspInit+0x13c>)
 8001054:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001066:	230a      	movs	r3, #10
 8001068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	483a      	ldr	r0, [pc, #232]	; (800115c <HAL_SAI_MspInit+0x144>)
 8001072:	f001 fdbf 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001088:	230a      	movs	r3, #10
 800108a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4833      	ldr	r0, [pc, #204]	; (8001160 <HAL_SAI_MspInit+0x148>)
 8001094:	f001 fdae 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001098:	2301      	movs	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80010a8:	230a      	movs	r3, #10
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	482c      	ldr	r0, [pc, #176]	; (8001164 <HAL_SAI_MspInit+0x14c>)
 80010b4:	f001 fd9e 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 80010c8:	2308      	movs	r3, #8
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4824      	ldr	r0, [pc, #144]	; (8001164 <HAL_SAI_MspInit+0x14c>)
 80010d4:	f001 fd8e 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_SAI_MspInit+0x150>)
 80010da:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_SAI_MspInit+0x154>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_SAI_MspInit+0x150>)
 80010e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_SAI_MspInit+0x150>)
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_SAI_MspInit+0x150>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_SAI_MspInit+0x150>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_SAI_MspInit+0x150>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001104:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001108:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_SAI_MspInit+0x150>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001118:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_SAI_MspInit+0x150>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001122:	f001 f9c1 	bl	80024a8 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 800112c:	f7ff feb2 	bl	8000e94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001134:	671a      	str	r2, [r3, #112]	; 0x70
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001140:	66da      	str	r2, [r3, #108]	; 0x6c
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_SAI_MspInit+0x150>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40015c24 	.word	0x40015c24
 8001154:	20000378 	.word	0x20000378
 8001158:	40023800 	.word	0x40023800
 800115c:	40021000 	.word	0x40021000
 8001160:	40021800 	.word	0x40021800
 8001164:	40020000 	.word	0x40020000
 8001168:	20000318 	.word	0x20000318
 800116c:	400264a0 	.word	0x400264a0

08001170 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <MX_SDMMC1_SD_Init+0x3c>)
 8001178:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <MX_SDMMC1_SD_Init+0x38>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	2000037c 	.word	0x2000037c
 80011ac:	40012c00 	.word	0x40012c00

080011b0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ae      	sub	sp, #184	; 0xb8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2290      	movs	r2, #144	; 0x90
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fbf3 	bl	80079bc <memset>
  if(sdHandle->Instance==SDMMC1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <HAL_SD_MspInit+0x10c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d169      	bne.n	80012b4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80011e0:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80011e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fba4 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001202:	f7ff fe47 	bl	8000e94 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_SD_MspInit+0x110>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_SD_MspInit+0x110>)
 800120c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_SD_MspInit+0x110>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_SD_MspInit+0x110>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_SD_MspInit+0x110>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_SD_MspInit+0x110>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_SD_MspInit+0x110>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <HAL_SD_MspInit+0x110>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_SD_MspInit+0x110>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 800124e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001268:	230c      	movs	r3, #12
 800126a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <HAL_SD_MspInit+0x114>)
 8001276:	f001 fcbd 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127a:	2304      	movs	r3, #4
 800127c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001292:	230c      	movs	r3, #12
 8001294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001298:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800129c:	4619      	mov	r1, r3
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <HAL_SD_MspInit+0x118>)
 80012a0:	f001 fca8 	bl	8002bf4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2031      	movs	r0, #49	; 0x31
 80012aa:	f000 fd62 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012ae:	2031      	movs	r0, #49	; 0x31
 80012b0:	f000 fd7b 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	37b8      	adds	r7, #184	; 0xb8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40012c00 	.word	0x40012c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_MspInit+0x44>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_MspInit+0x44>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_MspInit+0x44>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_MspInit+0x44>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_MspInit+0x44>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_MspInit+0x44>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f954 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <SDMMC1_IRQHandler+0x10>)
 800136e:	f003 fdc1 	bl	8004ef4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000037c 	.word	0x2000037c

0800137c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA2_Stream0_IRQHandler+0x10>)
 8001382:	f001 f9c1 	bl	8002708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001ac 	.word	0x200001ac

08001390 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA2_Stream5_IRQHandler+0x10>)
 8001396:	f001 f9b7 	bl	8002708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000020c 	.word	0x2000020c

080013a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA2_Stream6_IRQHandler+0x10>)
 80013aa:	f001 f9ad 	bl	8002708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000318 	.word	0x20000318

080013b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_UART4_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_UART4_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_UART4_Init+0x58>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_UART4_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_UART4_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_UART4_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_UART4_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_UART4_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_UART4_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_UART4_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_UART4_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_UART4_Init+0x58>)
 8001420:	f004 fe13 	bl	800604a <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800142a:	f7ff fd33 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000400 	.word	0x20000400
 8001438:	40004c00 	.word	0x40004c00

0800143c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ae      	sub	sp, #184	; 0xb8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2290      	movs	r2, #144	; 0x90
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f006 faad 	bl	80079bc <memset>
  if(uartHandle->Instance==UART4)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_UART_MspInit+0xf4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d15d      	bne.n	8001528 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800146c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001470:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001472:	2300      	movs	r3, #0
 8001474:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa62 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001486:	f7ff fd05 	bl	8000e94 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_UART_MspInit+0xf8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <HAL_UART_MspInit+0xf8>)
 8001490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_UART_MspInit+0xf8>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_UART_MspInit+0xf8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_UART_MspInit+0xf8>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_UART_MspInit+0xf8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_UART_MspInit+0xf8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <HAL_UART_MspInit+0xf8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_UART_MspInit+0xf8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014ea:	2308      	movs	r3, #8
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <HAL_UART_MspInit+0xfc>)
 80014f8:	f001 fb7c 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001516:	2306      	movs	r3, #6
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_UART_MspInit+0x100>)
 8001524:	f001 fb66 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	37b8      	adds	r7, #184	; 0xb8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004c00 	.word	0x40004c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40020000 	.word	0x40020000

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800156a:	f7ff ff25 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f006 fa01 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fbcb 	bl	8000d0c <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001584:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 8001588:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800158c:	200004cc 	.word	0x200004cc

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>

08001592 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fbe0 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159c:	200f      	movs	r0, #15
 800159e:	f000 f805 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a2:	f7ff fe93 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fbfb 	bl	8001dc6 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e8:	f000 fbc3 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000000 	.word	0x20000000
 8001604:	20000008 	.word	0x20000008
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	20000488 	.word	0x20000488

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000488 	.word	0x20000488

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008

08001694 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e031      	b.n	800170e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe ff96 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_ADC_Init+0x84>)
 80016d8:	4013      	ands	r3, r2
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f970 	bl	80019c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
 80016fe:	e001      	b.n	8001704 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	ffffeefd 	.word	0xffffeefd

0800171c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1c>
 8001734:	2302      	movs	r3, #2
 8001736:	e136      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x28a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b09      	cmp	r3, #9
 8001746:	d93a      	bls.n	80017be <HAL_ADC_ConfigChannel+0xa2>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001750:	d035      	beq.n	80017be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68d9      	ldr	r1, [r3, #12]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	3b1e      	subs	r3, #30
 8001768:	2207      	movs	r2, #7
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	400a      	ands	r2, r1
 8001776:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a8d      	ldr	r2, [pc, #564]	; (80019b4 <HAL_ADC_ConfigChannel+0x298>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68d9      	ldr	r1, [r3, #12]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	061a      	lsls	r2, r3, #24
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001796:	e035      	b.n	8001804 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68d9      	ldr	r1, [r3, #12]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4403      	add	r3, r0
 80017b0:	3b1e      	subs	r3, #30
 80017b2:	409a      	lsls	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017bc:	e022      	b.n	8001804 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6919      	ldr	r1, [r3, #16]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	2207      	movs	r2, #7
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43da      	mvns	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	400a      	ands	r2, r1
 80017e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6919      	ldr	r1, [r3, #16]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4403      	add	r3, r0
 80017fa:	409a      	lsls	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d824      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b05      	subs	r3, #5
 800181e:	221f      	movs	r2, #31
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43da      	mvns	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	400a      	ands	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b05      	subs	r3, #5
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
 8001854:	e04c      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d824      	bhi.n	80018a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b23      	subs	r3, #35	; 0x23
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b23      	subs	r3, #35	; 0x23
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
 80018a6:	e023      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	3b41      	subs	r3, #65	; 0x41
 80018ba:	221f      	movs	r2, #31
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b41      	subs	r3, #65	; 0x41
 80018e4:	fa00 f203 	lsl.w	r2, r0, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <HAL_ADC_ConfigChannel+0x29c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10a      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1f4>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001902:	d105      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 800190a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800190e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_ADC_ConfigChannel+0x21e>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b12      	cmp	r3, #18
 8001920:	d10b      	bne.n	800193a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a25      	ldr	r2, [pc, #148]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800192c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800192e:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001938:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d12b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x280>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <HAL_ADC_ConfigChannel+0x298>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x23a>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b11      	cmp	r3, #17
 8001954:	d122      	bne.n	800199c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 800195c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001960:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800196c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_ADC_ConfigChannel+0x298>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d111      	bne.n	800199c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9a      	lsrs	r2, r3, #18
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800198e:	e002      	b.n	8001996 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3b01      	subs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f9      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	10000012 	.word	0x10000012
 80019b8:	40012000 	.word	0x40012000
 80019bc:	40012300 	.word	0x40012300
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019d0:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <ADC_Init+0x1ec>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a77      	ldr	r2, [pc, #476]	; (8001bb4 <ADC_Init+0x1ec>)
 80019d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <ADC_Init+0x1ec>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4973      	ldr	r1, [pc, #460]	; (8001bb4 <ADC_Init+0x1ec>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	021a      	lsls	r2, r3, #8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <ADC_Init+0x1f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e00f      	b.n	8001ac2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0202 	bic.w	r2, r2, #2
 8001ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6899      	ldr	r1, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	005a      	lsls	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	035a      	lsls	r2, r3, #13
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	e007      	b.n	8001b38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	051a      	lsls	r2, r3, #20
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7a:	025a      	lsls	r2, r3, #9
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	029a      	lsls	r2, r3, #10
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40012300 	.word	0x40012300
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <__NVIC_SetPriorityGrouping>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	05fa0000 	.word	0x05fa0000

08001c04 <__NVIC_GetPriorityGrouping>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e054      	b.n	8001e9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7f5b      	ldrb	r3, [r3, #29]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fc30 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	791b      	ldrb	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_CRC_Init+0xc4>)
 8001e1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0218 	bic.w	r2, r2, #24
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	e00c      	b.n	8001e4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f834 	bl	8001ea8 <HAL_CRCEx_Polynomial_Set>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e028      	b.n	8001e9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	795b      	ldrb	r3, [r3, #5]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	e004      	b.n	8001e68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6912      	ldr	r2, [r2, #16]
 8001e66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	04c11db7 	.word	0x04c11db7

08001ea8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001eb8:	231f      	movs	r3, #31
 8001eba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ebc:	bf00      	nop
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	613a      	str	r2, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HAL_CRCEx_Polynomial_Set+0x34>
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b18      	cmp	r3, #24
 8001ee0:	d846      	bhi.n	8001f70 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001ee2:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f71 	.word	0x08001f71
 8001ef0:	08001f71 	.word	0x08001f71
 8001ef4:	08001f71 	.word	0x08001f71
 8001ef8:	08001f71 	.word	0x08001f71
 8001efc:	08001f71 	.word	0x08001f71
 8001f00:	08001f71 	.word	0x08001f71
 8001f04:	08001f71 	.word	0x08001f71
 8001f08:	08001f65 	.word	0x08001f65
 8001f0c:	08001f71 	.word	0x08001f71
 8001f10:	08001f71 	.word	0x08001f71
 8001f14:	08001f71 	.word	0x08001f71
 8001f18:	08001f71 	.word	0x08001f71
 8001f1c:	08001f71 	.word	0x08001f71
 8001f20:	08001f71 	.word	0x08001f71
 8001f24:	08001f71 	.word	0x08001f71
 8001f28:	08001f59 	.word	0x08001f59
 8001f2c:	08001f71 	.word	0x08001f71
 8001f30:	08001f71 	.word	0x08001f71
 8001f34:	08001f71 	.word	0x08001f71
 8001f38:	08001f71 	.word	0x08001f71
 8001f3c:	08001f71 	.word	0x08001f71
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f71 	.word	0x08001f71
 8001f48:	08001f4d 	.word	0x08001f4d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d913      	bls.n	8001f7a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f56:	e010      	b.n	8001f7a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b07      	cmp	r3, #7
 8001f5c:	d90f      	bls.n	8001f7e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f62:	e00c      	b.n	8001f7e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d90b      	bls.n	8001f82 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f6e:	e008      	b.n	8001f82 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
      break;
 8001f74:	e006      	b.n	8001f84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f76:	bf00      	nop
 8001f78:	e004      	b.n	8001f84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e002      	b.n	8001f84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e000      	b.n	8001f84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f82:	bf00      	nop
  }
  if (status == HAL_OK)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 0118 	bic.w	r1, r3, #24
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0ac      	b.n	8002120 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fa20 	bl	8002410 <DFSDM_GetChannelFromInstance>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a55      	ldr	r2, [pc, #340]	; (8002128 <HAL_DFSDM_ChannelInit+0x174>)
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e09f      	b.n	8002120 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fd25 	bl	8000a30 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001fe6:	4b51      	ldr	r3, [pc, #324]	; (800212c <HAL_DFSDM_ChannelInit+0x178>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_DFSDM_ChannelInit+0x178>)
 8001fee:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	; (800212c <HAL_DFSDM_ChannelInit+0x178>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d125      	bne.n	8002044 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ff8:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002002:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4948      	ldr	r1, [pc, #288]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a46      	ldr	r2, [pc, #280]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8002018:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800201c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d108      	bne.n	8002038 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8002026:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	493f      	ldr	r1, [pc, #252]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <HAL_DFSDM_ChannelInit+0x17c>)
 800203e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002042:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002052:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002062:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002068:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020f 	bic.w	r2, r2, #15
 8002080:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80020a8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f002 0207 	and.w	r2, r2, #7
 80020d4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002100:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f97e 	bl	8002410 <DFSDM_GetChannelFromInstance>
 8002114:	4602      	mov	r2, r0
 8002116:	4904      	ldr	r1, [pc, #16]	; (8002128 <HAL_DFSDM_ChannelInit+0x174>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000490 	.word	0x20000490
 800212c:	2000048c 	.word	0x2000048c
 8002130:	40017400 	.word	0x40017400

08002134 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0c6      	b.n	80022d4 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_DFSDM_FilterInit+0x1a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d109      	bne.n	8002164 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002154:	2b01      	cmp	r3, #1
 8002156:	d003      	beq.n	8002160 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b7      	b.n	80022d4 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7fe fb6f 	bl	8000860 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002190:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7a1b      	ldrb	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e007      	b.n	80021bc <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80021ba:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7a5b      	ldrb	r3, [r3, #9]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_DFSDM_FilterInit+0x1ac>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d108      	bne.n	8002210 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7c1b      	ldrb	r3, [r3, #16]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0210 	orr.w	r2, r2, #16
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e007      	b.n	800223a <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7c5b      	ldrb	r3, [r3, #17]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0220 	bic.w	r2, r2, #32
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6959      	ldr	r1, [r3, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_DFSDM_FilterInit+0x1b0>)
 8002270:	400b      	ands	r3, r1
 8002272:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6959      	ldr	r1, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	3b01      	subs	r3, #1
 8002284:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002286:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800228e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7c1a      	ldrb	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40017500 	.word	0x40017500
 80022e0:	ffff80f7 	.word	0xffff80f7
 80022e4:	1c00ff00 	.word	0x1c00ff00

080022e8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02c      	beq.n	800235c <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d027      	beq.n	800235c <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002318:	400b      	ands	r3, r1
 800231a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10d      	bne.n	800233e <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e00a      	b.n	8002354 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e001      	b.n	8002360 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
}
 8002362:	4618      	mov	r0, r3
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	f8fbffff 	.word	0xf8fbffff

08002374 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002392:	2bff      	cmp	r3, #255	; 0xff
 8002394:	d016      	beq.n	80023c4 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	b292      	uxth	r2, r2
 800239e:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f000 f816 	bl	80023d2 <DFSDM_GetInjChannelsNbr>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	e000      	b.n	80023be <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80023bc:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6493      	str	r3, [r2, #72]	; 0x48
 80023c2:	e001      	b.n	80023c8 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80023e4:	e00a      	b.n	80023fc <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f1      	bne.n	80023e6 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <DFSDM_GetChannelFromInstance+0x7c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d102      	bne.n	8002426 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e02b      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <DFSDM_GetChannelFromInstance+0x80>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d102      	bne.n	8002434 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e024      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <DFSDM_GetChannelFromInstance+0x84>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d102      	bne.n	8002442 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800243c:	2302      	movs	r3, #2
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e01d      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <DFSDM_GetChannelFromInstance+0x88>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d102      	bne.n	8002450 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800244a:	2303      	movs	r3, #3
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e016      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <DFSDM_GetChannelFromInstance+0x8c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002458:	2304      	movs	r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e00f      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <DFSDM_GetChannelFromInstance+0x90>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d102      	bne.n	800246c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002466:	2305      	movs	r3, #5
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e008      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <DFSDM_GetChannelFromInstance+0x94>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d102      	bne.n	800247a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002474:	2306      	movs	r3, #6
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e001      	b.n	800247e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800247a:	2307      	movs	r3, #7
 800247c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40017400 	.word	0x40017400
 8002490:	40017420 	.word	0x40017420
 8002494:	40017440 	.word	0x40017440
 8002498:	40017460 	.word	0x40017460
 800249c:	40017480 	.word	0x40017480
 80024a0:	400174a0 	.word	0x400174a0
 80024a4:	400174c0 	.word	0x400174c0

080024a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff f8be 	bl	8001634 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e099      	b.n	80025f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	e00f      	b.n	8002506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e6:	f7ff f8a5 	bl	8001634 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d908      	bls.n	8002506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e078      	b.n	80025f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e8      	bne.n	80024e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <HAL_DMA_Init+0x158>)
 8002520:	4013      	ands	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b04      	cmp	r3, #4
 800255e:	d107      	bne.n	8002570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	4313      	orrs	r3, r2
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0307 	bic.w	r3, r3, #7
 8002586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b04      	cmp	r3, #4
 8002598:	d117      	bne.n	80025ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 faa5 	bl	8002afc <DMA_CheckFifoParam>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025c6:	2301      	movs	r3, #1
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa5c 	bl	8002a90 <DMA_CalcBaseAndBitshift>
 80025d8:	4603      	mov	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e010803f 	.word	0xe010803f

08002604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_DMA_Start_IT+0x26>
 8002626:	2302      	movs	r3, #2
 8002628:	e048      	b.n	80026bc <HAL_DMA_Start_IT+0xb8>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d137      	bne.n	80026ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f9ee 	bl	8002a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0216 	orr.w	r2, r2, #22
 8002672:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002682:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e005      	b.n	80026ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00c      	b.n	80026fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2205      	movs	r2, #5
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002714:	4b8e      	ldr	r3, [pc, #568]	; (8002950 <HAL_DMA_IRQHandler+0x248>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a8e      	ldr	r2, [pc, #568]	; (8002954 <HAL_DMA_IRQHandler+0x24c>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2208      	movs	r2, #8
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01a      	beq.n	8002774 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0204 	bic.w	r2, r2, #4
 800275a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2208      	movs	r2, #8
 8002762:	409a      	lsls	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2201      	movs	r2, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d012      	beq.n	80027aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	2201      	movs	r2, #1
 8002798:	409a      	lsls	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f043 0202 	orr.w	r2, r3, #2
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2204      	movs	r2, #4
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d012      	beq.n	80027e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2204      	movs	r2, #4
 80027ce:	409a      	lsls	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2210      	movs	r2, #16
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d043      	beq.n	8002878 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d03c      	beq.n	8002878 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2210      	movs	r2, #16
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d024      	beq.n	8002878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
 8002836:	e01f      	b.n	8002878 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
 8002848:	e016      	b.n	8002878 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0208 	bic.w	r2, r2, #8
 8002866:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2220      	movs	r2, #32
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 808f 	beq.w	80029a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8087 	beq.w	80029a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	2220      	movs	r2, #32
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d136      	bne.n	8002920 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0216 	bic.w	r2, r2, #22
 80028c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x1da>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0208 	bic.w	r2, r2, #8
 80028f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	223f      	movs	r2, #63	; 0x3f
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002912:	2b00      	cmp	r3, #0
 8002914:	d07e      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
        }
        return;
 800291e:	e079      	b.n	8002a14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01d      	beq.n	800296a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	2b00      	cmp	r3, #0
 8002942:	d031      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e02c      	b.n	80029a8 <HAL_DMA_IRQHandler+0x2a0>
 800294e:	bf00      	nop
 8002950:	20000000 	.word	0x20000000
 8002954:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d023      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
 8002968:	e01e      	b.n	80029a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0210 	bic.w	r2, r2, #16
 8002986:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d032      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2205      	movs	r2, #5
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d307      	bcc.n	80029f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f2      	bne.n	80029d4 <HAL_DMA_IRQHandler+0x2cc>
 80029ee:	e000      	b.n	80029f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
 8002a12:	e000      	b.n	8002a16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a14:	bf00      	nop
    }
  }
}
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d108      	bne.n	8002a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a72:	e007      	b.n	8002a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3b10      	subs	r3, #16
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <DMA_CalcBaseAndBitshift+0x60>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <DMA_CalcBaseAndBitshift+0x64>)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d908      	bls.n	8002ad0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	1d1a      	adds	r2, r3, #4
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	; 0x58
 8002ace:	e006      	b.n	8002ade <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	aaaaaaab 	.word	0xaaaaaaab
 8002af4:	080079fc 	.word	0x080079fc
 8002af8:	fffffc00 	.word	0xfffffc00

08002afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11f      	bne.n	8002b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d856      	bhi.n	8002bca <DMA_CheckFifoParam+0xce>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <DMA_CheckFifoParam+0x28>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b47 	.word	0x08002b47
 8002b2c:	08002b35 	.word	0x08002b35
 8002b30:	08002bcb 	.word	0x08002bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d046      	beq.n	8002bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b44:	e043      	b.n	8002bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b4e:	d140      	bne.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b54:	e03d      	b.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5e:	d121      	bne.n	8002ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d837      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xda>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <DMA_CheckFifoParam+0x70>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b83 	.word	0x08002b83
 8002b74:	08002b7d 	.word	0x08002b7d
 8002b78:	08002b95 	.word	0x08002b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e030      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d025      	beq.n	8002bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b92:	e022      	b.n	8002bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9c:	d11f      	bne.n	8002bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ba2:	e01c      	b.n	8002bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d903      	bls.n	8002bb2 <DMA_CheckFifoParam+0xb6>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d003      	beq.n	8002bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb0:	e018      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb6:	e015      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e00b      	b.n	8002be2 <DMA_CheckFifoParam+0xe6>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e00a      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e008      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e006      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
    }
  } 
  
  return status; 
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e175      	b.n	8002f00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f040 8164 	bne.w	8002efa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d005      	beq.n	8002c4a <HAL_GPIO_Init+0x56>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d130      	bne.n	8002cac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 0201 	and.w	r2, r3, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d017      	beq.n	8002ce8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d123      	bne.n	8002d3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0203 	and.w	r2, r3, #3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80be 	beq.w	8002efa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7e:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d96:	4a61      	ldr	r2, [pc, #388]	; (8002f1c <HAL_GPIO_Init+0x328>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_GPIO_Init+0x32c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d037      	beq.n	8002e32 <HAL_GPIO_Init+0x23e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a57      	ldr	r2, [pc, #348]	; (8002f24 <HAL_GPIO_Init+0x330>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_GPIO_Init+0x23a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <HAL_GPIO_Init+0x236>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a55      	ldr	r2, [pc, #340]	; (8002f2c <HAL_GPIO_Init+0x338>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d025      	beq.n	8002e26 <HAL_GPIO_Init+0x232>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a54      	ldr	r2, [pc, #336]	; (8002f30 <HAL_GPIO_Init+0x33c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01f      	beq.n	8002e22 <HAL_GPIO_Init+0x22e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a53      	ldr	r2, [pc, #332]	; (8002f34 <HAL_GPIO_Init+0x340>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x22a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_GPIO_Init+0x344>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a51      	ldr	r2, [pc, #324]	; (8002f3c <HAL_GPIO_Init+0x348>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x222>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_GPIO_Init+0x34c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x21e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4f      	ldr	r2, [pc, #316]	; (8002f44 <HAL_GPIO_Init+0x350>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002e0a:	2309      	movs	r3, #9
 8002e0c:	e012      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e0e:	230a      	movs	r3, #10
 8002e10:	e010      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e12:	2308      	movs	r3, #8
 8002e14:	e00e      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e00c      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	e00a      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e1e:	2305      	movs	r3, #5
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e32:	2300      	movs	r3, #0
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f002 0203 	and.w	r2, r2, #3
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4093      	lsls	r3, r2
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e44:	4935      	ldr	r1, [pc, #212]	; (8002f1c <HAL_GPIO_Init+0x328>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e76:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e7c:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea0:	4a29      	ldr	r2, [pc, #164]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef4:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <HAL_GPIO_Init+0x354>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	f67f ae86 	bls.w	8002c14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40021400 	.word	0x40021400
 8002f38:	40021800 	.word	0x40021800
 8002f3c:	40021c00 	.word	0x40021c00
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40022400 	.word	0x40022400
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e001      	b.n	8002f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002faa:	f7fe fb43 	bl	8001634 <HAL_GetTick>
 8002fae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fb0:	e009      	b.n	8002fc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fb2:	f7fe fb3f 	bl	8001634 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc0:	d901      	bls.n	8002fc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e022      	b.n	800300c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe0:	f7fe fb28 	bl	8001634 <HAL_GetTick>
 8002fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fe6:	e009      	b.n	8002ffc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fe8:	f7fe fb24 	bl	8001634 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff6:	d901      	bls.n	8002ffc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e007      	b.n	800300c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003008:	d1ee      	bne.n	8002fe8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e29b      	b.n	800356a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8087 	beq.w	800314e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003040:	4b96      	ldr	r3, [pc, #600]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b04      	cmp	r3, #4
 800304a:	d00c      	beq.n	8003066 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304c:	4b93      	ldr	r3, [pc, #588]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d112      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
 8003058:	4b90      	ldr	r3, [pc, #576]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003064:	d10b      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d06c      	beq.n	800314c <HAL_RCC_OscConfig+0x130>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d168      	bne.n	800314c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e275      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x7a>
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a83      	ldr	r2, [pc, #524]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e02e      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x9c>
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7e      	ldr	r2, [pc, #504]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7b      	ldr	r2, [pc, #492]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0xc0>
 80030c2:	4b76      	ldr	r3, [pc, #472]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xd8>
 80030dc:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6e      	ldr	r2, [pc, #440]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fa9a 	bl	8001634 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fe fa96 	bl	8001634 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e229      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xe8>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fa86 	bl	8001634 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fa82 	bl	8001634 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e215      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x110>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d069      	beq.n	800322e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800315a:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b4d      	ldr	r3, [pc, #308]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x190>
 8003172:	4b4a      	ldr	r3, [pc, #296]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x17a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e1e9      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	493d      	ldr	r1, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	e040      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fa38 	bl	8001634 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fa34 	bl	8001634 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1c7      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4929      	ldr	r1, [pc, #164]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
 80031fa:	e018      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x280>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fa14 	bl	8001634 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe fa10 	bl	8001634 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1a3      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d038      	beq.n	80032ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe f9f1 	bl	8001634 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe f9ed 	bl	8001634 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e180      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x23a>
 8003274:	e01a      	b.n	80032ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_OscConfig+0x280>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <HAL_RCC_OscConfig+0x280>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe f9d7 	bl	8001634 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe f9d3 	bl	8001634 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d903      	bls.n	80032a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e166      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
 800329c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	4b92      	ldr	r3, [pc, #584]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ee      	bne.n	800328a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a4 	beq.w	8003402 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b8c      	ldr	r3, [pc, #560]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b89      	ldr	r3, [pc, #548]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a88      	ldr	r2, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b86      	ldr	r3, [pc, #536]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e2:	4b83      	ldr	r3, [pc, #524]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ee:	4b80      	ldr	r3, [pc, #512]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7f      	ldr	r2, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe f99b 	bl	8001634 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe f997 	bl	8001634 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e12a      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <HAL_RCC_OscConfig+0x4d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x31a>
 8003328:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a6f      	ldr	r2, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	e02d      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x33c>
 800333e:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a6a      	ldr	r2, [pc, #424]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b68      	ldr	r3, [pc, #416]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a67      	ldr	r2, [pc, #412]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x35e>
 8003360:	4b62      	ldr	r3, [pc, #392]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a61      	ldr	r2, [pc, #388]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	4b5f      	ldr	r3, [pc, #380]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a5e      	ldr	r2, [pc, #376]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
 800337a:	4b5c      	ldr	r3, [pc, #368]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a5b      	ldr	r2, [pc, #364]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe f94b 	bl	8001634 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe f947 	bl	8001634 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0d8      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x386>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe f935 	bl	8001634 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe f931 	bl	8001634 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0c2      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80ae 	beq.w	8003568 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d06d      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d14b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe f902 	bl	8001634 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe f8fe 	bl	8001634 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e091      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	019b      	lsls	r3, r3, #6
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	3b01      	subs	r3, #1
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	071b      	lsls	r3, r3, #28
 800347e:	491b      	ldr	r1, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f8d0 	bl	8001634 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe f8cc 	bl	8001634 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e05f      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x47c>
 80034b6:	e057      	b.n	8003568 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f8b6 	bl	8001634 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe f8b2 	bl	8001634 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e045      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x4b0>
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x54c>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034f4:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_RCC_OscConfig+0x558>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d030      	beq.n	8003564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d129      	bne.n	8003564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d122      	bne.n	8003564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800352a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352c:	4293      	cmp	r3, r2
 800352e:	d119      	bne.n	8003564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	3b01      	subs	r3, #1
 800353e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d10f      	bne.n	8003564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d0      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b6a      	ldr	r3, [pc, #424]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 020f 	bic.w	r2, r3, #15
 80035a6:	4965      	ldr	r1, [pc, #404]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d040      	beq.n	800369c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e073      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4936      	ldr	r1, [pc, #216]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fd ffe2 	bl	8001634 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fd ffde 	bl	8001634 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e053      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d210      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 020f 	bic.w	r2, r3, #15
 80036b2:	4922      	ldr	r1, [pc, #136]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f821 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370e:	4602      	mov	r2, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	490a      	ldr	r1, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 800371c:	5ccb      	ldrb	r3, [r1, r3]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd ff3e 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00
 8003740:	40023800 	.word	0x40023800
 8003744:	080079e4 	.word	0x080079e4
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b090      	sub	sp, #64	; 0x40
 8003756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
 800375c:	2300      	movs	r3, #0
 800375e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003760:	2300      	movs	r3, #0
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b08      	cmp	r3, #8
 8003772:	d00d      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
 8003774:	2b08      	cmp	r3, #8
 8003776:	f200 80a1 	bhi.w	80038bc <HAL_RCC_GetSysClockFreq+0x16c>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x34>
 800377e:	2b04      	cmp	r3, #4
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x3a>
 8003782:	e09b      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003788:	e09b      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378a:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800378e:	e098      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003790:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800379a:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d028      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	627a      	str	r2, [r7, #36]	; 0x24
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037b8:	2100      	movs	r1, #0
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037bc:	fb03 f201 	mul.w	r2, r3, r1
 80037c0:	2300      	movs	r3, #0
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	4a43      	ldr	r2, [pc, #268]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ca:	fba0 1202 	umull	r1, r2, r0, r2
 80037ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d0:	460a      	mov	r2, r1
 80037d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80037d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d6:	4413      	add	r3, r2
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	2200      	movs	r2, #0
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ea:	f7fc fd25 	bl	8000238 <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4613      	mov	r3, r2
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f6:	e053      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	2200      	movs	r2, #0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	617a      	str	r2, [r7, #20]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800380a:	f04f 0b00 	mov.w	fp, #0
 800380e:	4652      	mov	r2, sl
 8003810:	465b      	mov	r3, fp
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	0159      	lsls	r1, r3, #5
 800381c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003820:	0150      	lsls	r0, r2, #5
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	ebb2 080a 	subs.w	r8, r2, sl
 800382a:	eb63 090b 	sbc.w	r9, r3, fp
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800383a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800383e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003842:	ebb2 0408 	subs.w	r4, r2, r8
 8003846:	eb63 0509 	sbc.w	r5, r3, r9
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	00eb      	lsls	r3, r5, #3
 8003854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003858:	00e2      	lsls	r2, r4, #3
 800385a:	4614      	mov	r4, r2
 800385c:	461d      	mov	r5, r3
 800385e:	eb14 030a 	adds.w	r3, r4, sl
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	eb45 030b 	adc.w	r3, r5, fp
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003876:	4629      	mov	r1, r5
 8003878:	028b      	lsls	r3, r1, #10
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003880:	4621      	mov	r1, r4
 8003882:	028a      	lsls	r2, r1, #10
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	2200      	movs	r2, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003894:	f7fc fcd0 	bl	8000238 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80038b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3740      	adds	r7, #64	; 0x40
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	017d7840 	.word	0x017d7840

080038dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	080079f4 	.word	0x080079f4

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffdc 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0b5b      	lsrs	r3, r3, #13
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	080079f4 	.word	0x080079f4

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800396c:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a68      	ldr	r2, [pc, #416]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003976:	6093      	str	r3, [r2, #8]
 8003978:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	4964      	ldr	r1, [pc, #400]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800398e:	2301      	movs	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399e:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	4959      	ldr	r1, [pc, #356]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d017      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039da:	4b4e      	ldr	r3, [pc, #312]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	494a      	ldr	r1, [pc, #296]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808b 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	4a39      	ldr	r2, [pc, #228]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6413      	str	r3, [r2, #64]	; 0x40
 8003a34:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a34      	ldr	r2, [pc, #208]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fdf2 	bl	8001634 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fd fdee 	bl	8001634 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e38f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a66:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a72:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d035      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d02e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a90:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d114      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fdb6 	bl	8001634 <HAL_GetTick>
 8003ac8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fd fdb2 	bl	8001634 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e351      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ee      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afa:	d111      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	4901      	ldr	r1, [pc, #4]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	0ffffcff 	.word	0x0ffffcff
 8003b20:	4bac      	ldr	r3, [pc, #688]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4aab      	ldr	r2, [pc, #684]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4ba9      	ldr	r3, [pc, #676]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	49a6      	ldr	r1, [pc, #664]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b4a:	4ba2      	ldr	r3, [pc, #648]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b50:	4aa0      	ldr	r2, [pc, #640]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b5a:	4b9e      	ldr	r3, [pc, #632]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	499b      	ldr	r1, [pc, #620]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b78:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b86:	4993      	ldr	r1, [pc, #588]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9a:	4b8e      	ldr	r3, [pc, #568]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba8:	498a      	ldr	r1, [pc, #552]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bca:	4982      	ldr	r1, [pc, #520]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bde:	4b7d      	ldr	r3, [pc, #500]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4979      	ldr	r1, [pc, #484]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c00:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	4971      	ldr	r1, [pc, #452]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c22:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f023 020c 	bic.w	r2, r3, #12
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	4968      	ldr	r1, [pc, #416]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c44:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	4960      	ldr	r1, [pc, #384]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c66:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	4957      	ldr	r1, [pc, #348]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c88:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	494f      	ldr	r1, [pc, #316]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	4946      	ldr	r1, [pc, #280]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ccc:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	493e      	ldr	r1, [pc, #248]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfc:	4935      	ldr	r1, [pc, #212]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d1e:	492d      	ldr	r1, [pc, #180]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d40:	4924      	ldr	r1, [pc, #144]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d50:	d101      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	4914      	ldr	r1, [pc, #80]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da4:	490b      	ldr	r1, [pc, #44]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00f      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	4902      	ldr	r1, [pc, #8]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de4:	4b8a      	ldr	r3, [pc, #552]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	4986      	ldr	r1, [pc, #536]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e08:	4b81      	ldr	r3, [pc, #516]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	497d      	ldr	r1, [pc, #500]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d006      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80d6 	beq.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e34:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a75      	ldr	r2, [pc, #468]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fd fbf8 	bl	8001634 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e48:	f7fd fbf4 	bl	8001634 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e195      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5a:	4b6d      	ldr	r3, [pc, #436]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d021      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e88:	4b61      	ldr	r3, [pc, #388]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8e:	0e1b      	lsrs	r3, r3, #24
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	019a      	lsls	r2, r3, #6
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	071b      	lsls	r3, r3, #28
 8003eae:	4958      	ldr	r1, [pc, #352]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee0:	d129      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee2:	4b4b      	ldr	r3, [pc, #300]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ef0:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef6:	0f1b      	lsrs	r3, r3, #28
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	019a      	lsls	r2, r3, #6
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	061b      	lsls	r3, r3, #24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	071b      	lsls	r3, r3, #28
 8003f16:	493e      	ldr	r1, [pc, #248]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f24:	f023 021f 	bic.w	r2, r3, #31
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	4938      	ldr	r1, [pc, #224]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01d      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	0e1b      	lsrs	r3, r3, #24
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f50:	4b2f      	ldr	r3, [pc, #188]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	0f1b      	lsrs	r3, r3, #28
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	019a      	lsls	r2, r3, #6
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	071b      	lsls	r3, r3, #28
 8003f76:	4926      	ldr	r1, [pc, #152]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	019a      	lsls	r2, r3, #6
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	491a      	ldr	r1, [pc, #104]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fba:	f7fd fb3b 	bl	8001634 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc2:	f7fd fb37 	bl	8001634 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	; 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0d8      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	f040 80ce 	bne.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fe8:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a08      	ldr	r2, [pc, #32]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fb1e 	bl	8001634 <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ffa:	e00b      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ffc:	f7fd fb1a 	bl	8001634 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d904      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0bb      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004014:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004020:	d0ec      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12a      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800404a:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004058:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	0f1b      	lsrs	r3, r3, #28
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	019a      	lsls	r2, r3, #6
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	431a      	orrs	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	071b      	lsls	r3, r3, #28
 800407e:	4944      	ldr	r1, [pc, #272]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004086:	4b42      	ldr	r3, [pc, #264]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	493d      	ldr	r1, [pc, #244]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d022      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b4:	d11d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b6:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	0e1b      	lsrs	r3, r3, #24
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040c4:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	0f1b      	lsrs	r3, r3, #28
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	019a      	lsls	r2, r3, #6
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	4929      	ldr	r1, [pc, #164]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d028      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800410c:	4b20      	ldr	r3, [pc, #128]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	4917      	ldr	r1, [pc, #92]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4911      	ldr	r1, [pc, #68]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415c:	f7fd fa6a 	bl	8001634 <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004164:	f7fd fa66 	bl	8001634 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e007      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800417e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004182:	d1ef      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800

08004194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041b2:	f040 80a3 	bne.w	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80041b6:	4ba8      	ldr	r3, [pc, #672]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041cc:	f000 808a 	beq.w	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041d6:	f200 8093 	bhi.w	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e0:	d07d      	beq.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e8:	f200 808a 	bhi.w	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f8:	d039      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80041fa:	e081      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80041fc:	4b96      	ldr	r3, [pc, #600]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004208:	4b93      	ldr	r3, [pc, #588]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004210:	4a92      	ldr	r2, [pc, #584]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e007      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800421a:	4b8f      	ldr	r3, [pc, #572]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004222:	4a8f      	ldr	r2, [pc, #572]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800422a:	4b8b      	ldr	r3, [pc, #556]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004238:	4b87      	ldr	r3, [pc, #540]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004252:	4b81      	ldr	r3, [pc, #516]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	617b      	str	r3, [r7, #20]
        break;
 800426c:	e049      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800426e:	4b7a      	ldr	r3, [pc, #488]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800427a:	4b77      	ldr	r3, [pc, #476]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004282:	4a76      	ldr	r2, [pc, #472]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e007      	b.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800428c:	4b72      	ldr	r3, [pc, #456]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	4a72      	ldr	r2, [pc, #456]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800429c:	4b6e      	ldr	r3, [pc, #440]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80042aa:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	fb03 f202 	mul.w	r2, r3, r2
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80042c4:	4b64      	ldr	r3, [pc, #400]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80042c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	617b      	str	r3, [r7, #20]
        break;
 80042dc:	e011      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80042de:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80042e0:	617b      	str	r3, [r7, #20]
        break;
 80042e2:	e00e      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80042e4:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80042f0:	4b5a      	ldr	r3, [pc, #360]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80042f2:	617b      	str	r3, [r7, #20]
        break;
 80042f4:	e005      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80042f6:	4b5a      	ldr	r3, [pc, #360]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80042f8:	617b      	str	r3, [r7, #20]
        break;
 80042fa:	e002      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004300:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004308:	f040 80a3 	bne.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800430c:	4b52      	ldr	r3, [pc, #328]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800430e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004312:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800431a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004322:	f000 808a 	beq.w	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800432c:	f200 809c 	bhi.w	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004336:	d07d      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800433e:	f200 8093 	bhi.w	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434e:	d039      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004350:	e08a      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800435e:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004366:	4a3d      	ldr	r2, [pc, #244]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e007      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004378:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004380:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	0e1b      	lsrs	r3, r3, #24
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800438e:	4b32      	ldr	r3, [pc, #200]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	099b      	lsrs	r3, r3, #6
 8004396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	fb03 f202 	mul.w	r2, r3, r2
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80043aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
        break;
 80043c2:	e052      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043d0:	4b21      	ldr	r3, [pc, #132]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d8:	4a20      	ldr	r2, [pc, #128]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	e007      	b.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80043f2:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004400:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	fb03 f202 	mul.w	r2, r3, r2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
        break;
 8004432:	e01a      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004436:	617b      	str	r3, [r7, #20]
        break;
 8004438:	e017      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004448:	617b      	str	r3, [r7, #20]
        break;
 800444a:	e00e      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e00b      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8004452:	bf00      	nop
 8004454:	e009      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400
 8004460:	017d7840 	.word	0x017d7840
 8004464:	00bb8000 	.word	0x00bb8000
        break;
 8004468:	bf00      	nop

  return frequency;
 800446a:	697b      	ldr	r3, [r7, #20]
}
 800446c:	4618      	mov	r0, r3
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e071      	b.n	8004572 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7f5b      	ldrb	r3, [r3, #29]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fd2e 	bl	8000f00 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d053      	beq.n	8004560 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	22ca      	movs	r2, #202	; 0xca
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2253      	movs	r2, #83	; 0x53
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f881 	bl	80045d0 <RTC_EnterInitMode>
 80044ce:	4603      	mov	r3, r0
 80044d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d12a      	bne.n	800452e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b26      	ldr	r3, [pc, #152]	; (800457c <HAL_RTC_Init+0x104>)
 80044e4:	400b      	ands	r3, r1
 80044e6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6899      	ldr	r1, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6919      	ldr	r1, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	041a      	lsls	r2, r3, #16
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f88a 	bl	800463e <RTC_ExitInitMode>
 800452a:	4603      	mov	r3, r0
 800452c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d110      	bne.n	8004556 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0208 	bic.w	r2, r2, #8
 8004542:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	22ff      	movs	r2, #255	; 0xff
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
 800455e:	e001      	b.n	8004564 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	ff8fffbf 	.word	0xff8fffbf

08004580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800459a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800459c:	f7fd f84a 	bl	8001634 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045a2:	e009      	b.n	80045b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045a4:	f7fd f846 	bl	8001634 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b2:	d901      	bls.n	80045b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e007      	b.n	80045c8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ee      	beq.n	80045a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d122      	bne.n	8004634 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045fe:	f7fd f819 	bl	8001634 <HAL_GetTick>
 8004602:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004604:	e00c      	b.n	8004620 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004606:	f7fd f815 	bl	8001634 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004614:	d904      	bls.n	8004620 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <RTC_EnterInitMode+0x64>
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d1e8      	bne.n	8004606 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004658:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ff89 	bl	8004580 <HAL_RTC_WaitForSynchro>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2204      	movs	r2, #4
 8004678:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e156      	b.n	8004954 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fcac 	bl	8001018 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f95b 	bl	8004984 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d00c      	beq.n	80046f0 <HAL_SAI_Init+0x68>
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d80d      	bhi.n	80046f6 <HAL_SAI_Init+0x6e>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SAI_Init+0x5c>
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d003      	beq.n	80046ea <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80046e2:	e008      	b.n	80046f6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
      break;
 80046e8:	e006      	b.n	80046f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80046ea:	2310      	movs	r3, #16
 80046ec:	61fb      	str	r3, [r7, #28]
      break;
 80046ee:	e003      	b.n	80046f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80046f0:	2320      	movs	r3, #32
 80046f2:	61fb      	str	r3, [r7, #28]
      break;
 80046f4:	e000      	b.n	80046f8 <HAL_SAI_Init+0x70>
      break;
 80046f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d81e      	bhi.n	800473e <HAL_SAI_Init+0xb6>
 8004700:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <HAL_SAI_Init+0x80>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	08004719 	.word	0x08004719
 800470c:	0800471f 	.word	0x0800471f
 8004710:	08004727 	.word	0x08004727
 8004714:	0800472f 	.word	0x0800472f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
    }
    break;
 800471c:	e010      	b.n	8004740 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800471e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004722:	617b      	str	r3, [r7, #20]
    }
    break;
 8004724:	e00c      	b.n	8004740 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800472a:	617b      	str	r3, [r7, #20]
    }
    break;
 800472c:	e008      	b.n	8004740 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800472e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004732:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800473c:	e000      	b.n	8004740 <HAL_SAI_Init+0xb8>
    default:
      break;
 800473e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a85      	ldr	r2, [pc, #532]	; (800495c <HAL_SAI_Init+0x2d4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_SAI_Init+0xcc>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a84      	ldr	r2, [pc, #528]	; (8004960 <HAL_SAI_Init+0x2d8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d103      	bne.n	800475c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004754:	4a83      	ldr	r2, [pc, #524]	; (8004964 <HAL_SAI_Init+0x2dc>)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e002      	b.n	8004762 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800475c:	4a82      	ldr	r2, [pc, #520]	; (8004968 <HAL_SAI_Init+0x2e0>)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04c      	beq.n	8004804 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a7a      	ldr	r2, [pc, #488]	; (800495c <HAL_SAI_Init+0x2d4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_SAI_Init+0xfa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a78      	ldr	r2, [pc, #480]	; (8004960 <HAL_SAI_Init+0x2d8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d104      	bne.n	800478c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004782:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004786:	f7ff fd05 	bl	8004194 <HAL_RCCEx_GetPeriphCLKFreq>
 800478a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a76      	ldr	r2, [pc, #472]	; (800496c <HAL_SAI_Init+0x2e4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_SAI_Init+0x118>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a75      	ldr	r2, [pc, #468]	; (8004970 <HAL_SAI_Init+0x2e8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d104      	bne.n	80047aa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80047a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80047a4:	f7ff fcf6 	bl	8004194 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a6b      	ldr	r2, [pc, #428]	; (8004974 <HAL_SAI_Init+0x2ec>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	08da      	lsrs	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	4b68      	ldr	r3, [pc, #416]	; (8004974 <HAL_SAI_Init+0x2ec>)
 80047d4:	fba3 2301 	umull	r2, r3, r3, r1
 80047d8:	08da      	lsrs	r2, r3, #3
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	1aca      	subs	r2, r1, r3
 80047e4:	2a08      	cmp	r2, #8
 80047e6:	d904      	bls.n	80047f2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d104      	bne.n	8004804 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	085a      	lsrs	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_SAI_Init+0x18c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d109      	bne.n	8004828 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_SAI_Init+0x198>
 800481c:	2300      	movs	r3, #0
 800481e:	e001      	b.n	8004824 <HAL_SAI_Init+0x19c>
 8004820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e008      	b.n	800483a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d102      	bne.n	8004836 <HAL_SAI_Init+0x1ae>
 8004830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004834:	e000      	b.n	8004838 <HAL_SAI_Init+0x1b0>
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <HAL_SAI_Init+0x2f0>)
 8004846:	400b      	ands	r3, r1
 8004848:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800485e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	431a      	orrs	r2, r3
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004872:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800487e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <HAL_SAI_Init+0x2f4>)
 800489c:	400b      	ands	r3, r1
 800489e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_SAI_Init+0x2f8>)
 80048ca:	400b      	ands	r3, r1
 80048cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80048de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80048e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80048ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	3b01      	subs	r3, #1
 80048f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80048f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	f24f 0320 	movw	r3, #61472	; 0xf020
 800490c:	400b      	ands	r3, r1
 800490e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68d9      	ldr	r1, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	3b01      	subs	r3, #1
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40015804 	.word	0x40015804
 8004960:	40015824 	.word	0x40015824
 8004964:	40015800 	.word	0x40015800
 8004968:	40015c00 	.word	0x40015c00
 800496c:	40015c04 	.word	0x40015c04
 8004970:	40015c24 	.word	0x40015c24
 8004974:	cccccccd 	.word	0xcccccccd
 8004978:	ff05c010 	.word	0xff05c010
 800497c:	ffff1ff0 	.word	0xffff1ff0
 8004980:	fff88000 	.word	0xfff88000

08004984 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <SAI_Disable+0x68>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <SAI_Disable+0x6c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0b1b      	lsrs	r3, r3, #12
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	60fa      	str	r2, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	72fb      	strb	r3, [r7, #11]
      break;
 80049ce:	e006      	b.n	80049de <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e8      	bne.n	80049b0 <SAI_Disable+0x2c>

  return status;
 80049de:	7afb      	ldrb	r3, [r7, #11]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	20000000 	.word	0x20000000
 80049f0:	95cbec1b 	.word	0x95cbec1b

080049f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e022      	b.n	8004a4c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fc fbc9 	bl	80011b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2203      	movs	r2, #3
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f814 	bl	8004a54 <HAL_SD_InitCard>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e00a      	b.n	8004a4c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b08e      	sub	sp, #56	; 0x38
 8004a58:	af04      	add	r7, sp, #16
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004a70:	2376      	movs	r3, #118	; 0x76
 8004a72:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681d      	ldr	r5, [r3, #0]
 8004a78:	466c      	mov	r4, sp
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a86:	f107 0308 	add.w	r3, r7, #8
 8004a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f001 ff45 	bl	800691c <SDMMC_Init>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e059      	b.n	8004b58 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 ff79 	bl	80069b0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004acc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004ace:	2002      	movs	r0, #2
 8004ad0:	f7fc fdbc 	bl	800164c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fff3 	bl	8005ac0 <SD_PowerON>
 8004ada:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e02e      	b.n	8004b58 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 ff12 	bl	8005924 <SD_InitCard>
 8004b00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e01b      	b.n	8004b58 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 ffd3 	bl	8006ad4 <SDMMC_CmdBlockLength>
 8004b2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00f      	beq.n	8004b56 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <HAL_SD_InitCard+0x10c>)
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3728      	adds	r7, #40	; 0x28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b60:	004005ff 	.word	0x004005ff

08004b64 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0c3      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	f040 80bc 	bne.w	8004d12 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d907      	bls.n	8004bbe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0aa      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	4a4e      	ldr	r2, [pc, #312]	; (8004d1c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a4d      	ldr	r2, [pc, #308]	; (8004d20 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004bec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3380      	adds	r3, #128	; 0x80
 8004c24:	4619      	mov	r1, r3
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	025b      	lsls	r3, r3, #9
 8004c2c:	089b      	lsrs	r3, r3, #2
 8004c2e:	f7fd fce9 	bl	8002604 <HAL_DMA_Start_IT>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d017      	beq.n	8004c68 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a35      	ldr	r2, [pc, #212]	; (8004d24 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e055      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0208 	orr.w	r2, r2, #8
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d002      	beq.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	025b      	lsls	r3, r3, #9
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c8a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	025b      	lsls	r3, r3, #9
 8004c90:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004c92:	2390      	movs	r3, #144	; 0x90
 8004c94:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c96:	2302      	movs	r3, #2
 8004c98:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f107 0210 	add.w	r2, r7, #16
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 fee5 	bl	8006a7c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d90a      	bls.n	8004cce <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2282      	movs	r2, #130	; 0x82
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 ff49 	bl	8006b5c <SDMMC_CmdReadMultiBlock>
 8004cca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ccc:	e009      	b.n	8004ce2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2281      	movs	r2, #129	; 0x81
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 ff1c 	bl	8006b18 <SDMMC_CmdReadSingleBlock>
 8004ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e002      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3730      	adds	r7, #48	; 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08005733 	.word	0x08005733
 8004d20:	080057a5 	.word	0x080057a5
 8004d24:	004005ff 	.word	0x004005ff

08004d28 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	; 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0c6      	b.n	8004ede <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	f040 80bf 	bne.w	8004edc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	441a      	add	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d907      	bls.n	8004d82 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0ad      	b.n	8004ede <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 021a 	orr.w	r2, r2, #26
 8004da0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	4a50      	ldr	r2, [pc, #320]	; (8004ee8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	4a4f      	ldr	r2, [pc, #316]	; (8004eec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004db0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	2200      	movs	r2, #0
 8004db8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	025b      	lsls	r3, r3, #9
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d90a      	bls.n	8004de4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22a0      	movs	r2, #160	; 0xa0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 ff02 	bl	8006be4 <SDMMC_CmdWriteMultiBlock>
 8004de0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004de2:	e009      	b.n	8004df8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2290      	movs	r2, #144	; 0x90
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fed5 	bl	8006ba0 <SDMMC_CmdWriteSingleBlock>
 8004df6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d012      	beq.n	8004e24 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e05c      	b.n	8004ede <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3380      	adds	r3, #128	; 0x80
 8004e64:	461a      	mov	r2, r3
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	f7fd fbca 	bl	8002604 <HAL_DMA_Start_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01a      	beq.n	8004eac <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 021a 	bic.w	r2, r2, #26
 8004e84:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e018      	b.n	8004ede <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	025b      	lsls	r3, r3, #9
 8004eb6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004eb8:	2390      	movs	r3, #144	; 0x90
 8004eba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f107 0210 	add.w	r2, r7, #16
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 fdd2 	bl	8006a7c <SDMMC_ConfigData>

      return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3730      	adds	r7, #48	; 0x30
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08005709 	.word	0x08005709
 8004eec:	080057a5 	.word	0x080057a5
 8004ef0:	004005ff 	.word	0x004005ff

08004ef4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_SD_IRQHandler+0x2e>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 ffef 	bl	8005efe <SD_Read_IT>
 8004f20:	e15a      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 808d 	beq.w	800504c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b9a      	ldr	r3, [pc, #616]	; (80051b0 <HAL_SD_IRQHandler+0x2bc>)
 8004f48:	400b      	ands	r3, r1
 8004f4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d039      	beq.n	8004fda <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_SD_IRQHandler+0x86>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 fe52 	bl	8006c28 <SDMMC_CmdStopTransfer>
 8004f84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f921 	bl	80051e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f240 523a 	movw	r2, #1338	; 0x53a
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <HAL_SD_IRQHandler+0xd6>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f002 faba 	bl	8007544 <HAL_SD_RxCpltCallback>
 8004fd0:	e102      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f002 faac 	bl	8007530 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fd8:	e0fe      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80f9 	beq.w	80051d8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d011      	beq.n	8005014 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fe17 	bl	8006c28 <SDMMC_CmdStopTransfer>
 8004ffa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8e6 	bl	80051e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 80dc 	bne.w	80051d8 <HAL_SD_IRQHandler+0x2e4>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 80d6 	bne.w	80051d8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0208 	bic.w	r2, r2, #8
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f002 fa73 	bl	8007530 <HAL_SD_TxCpltCallback>
}
 800504a:	e0c5      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_SD_IRQHandler+0x178>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 ff9b 	bl	8005fa0 <SD_Write_IT>
 800506a:	e0b5      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80ae 	beq.w	80051d8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f043 0202 	orr.w	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	f043 0208 	orr.w	r2, r3, #8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f043 0210 	orr.w	r2, r3, #16
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f001 fd90 	bl	8006c28 <SDMMC_CmdStopTransfer>
 8005108:	4602      	mov	r2, r0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f857 	bl	80051e0 <HAL_SD_ErrorCallback>
}
 8005132:	e051      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d04c      	beq.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_SD_IRQHandler+0x25e>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_SD_IRQHandler+0x2c0>)
 8005158:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	4618      	mov	r0, r3
 8005160:	f7fd fab0 	bl	80026c4 <HAL_DMA_Abort_IT>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d036      	beq.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb6a 	bl	8005848 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005174:	e030      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_SD_IRQHandler+0x296>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_SD_IRQHandler+0x2c4>)
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fa94 	bl	80026c4 <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fb85 	bl	80058b6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80051ac:	e014      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
 80051ae:	bf00      	nop
 80051b0:	ffff3ec5 	.word	0xffff3ec5
 80051b4:	08005849 	.word	0x08005849
 80051b8:	080058b7 	.word	0x080058b7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f002 f9a3 	bl	800751c <HAL_SD_AbortCallback>
}
 80051d6:	e7ff      	b.n	80051d8 <HAL_SD_IRQHandler+0x2e4>
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005202:	0f9b      	lsrs	r3, r3, #30
 8005204:	b2da      	uxtb	r2, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520e:	0e9b      	lsrs	r3, r3, #26
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	b2da      	uxtb	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005220:	0e1b      	lsrs	r3, r3, #24
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	b2da      	uxtb	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	b2da      	uxtb	r2, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	b2da      	uxtb	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524a:	b2da      	uxtb	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005254:	0d1b      	lsrs	r3, r3, #20
 8005256:	b29a      	uxth	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005260:	0c1b      	lsrs	r3, r3, #16
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	b2da      	uxtb	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005272:	0bdb      	lsrs	r3, r3, #15
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005284:	0b9b      	lsrs	r3, r3, #14
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	b2da      	uxtb	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005296:	0b5b      	lsrs	r3, r3, #13
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a8:	0b1b      	lsrs	r3, r3, #12
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d163      	bne.n	800538c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c8:	009a      	lsls	r2, r3, #2
 80052ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80052d4:	0f92      	lsrs	r2, r2, #30
 80052d6:	431a      	orrs	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e0:	0edb      	lsrs	r3, r3, #27
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f2:	0e1b      	lsrs	r3, r3, #24
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005304:	0d5b      	lsrs	r3, r3, #21
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	b2da      	uxtb	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005316:	0c9b      	lsrs	r3, r3, #18
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	b2da      	uxtb	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005328:	0bdb      	lsrs	r3, r3, #15
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	b2da      	uxtb	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	7e1b      	ldrb	r3, [r3, #24]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	3302      	adds	r3, #2
 800534c:	2201      	movs	r2, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005356:	fb03 f202 	mul.w	r2, r3, r2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	7a1b      	ldrb	r3, [r3, #8]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005378:	0a52      	lsrs	r2, r2, #9
 800537a:	fb03 f202 	mul.w	r2, r3, r2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005388:	661a      	str	r2, [r3, #96]	; 0x60
 800538a:	e031      	b.n	80053f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	2b01      	cmp	r3, #1
 8005392:	d11d      	bne.n	80053d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	431a      	orrs	r2, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	3301      	adds	r3, #1
 80053b0:	029a      	lsls	r2, r3, #10
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60
 80053ce:	e00f      	b.n	80053f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a58      	ldr	r2, [pc, #352]	; (8005538 <HAL_SD_GetCardCSD+0x344>)
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e09d      	b.n	800552c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f4:	0b9b      	lsrs	r3, r3, #14
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005406:	09db      	lsrs	r3, r3, #7
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540e:	b2da      	uxtb	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541e:	b2da      	uxtb	r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	0fdb      	lsrs	r3, r3, #31
 800542a:	b2da      	uxtb	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	0f5b      	lsrs	r3, r3, #29
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	b2da      	uxtb	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	0e9b      	lsrs	r3, r3, #26
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	b2da      	uxtb	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005458:	0d9b      	lsrs	r3, r3, #22
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	b2da      	uxtb	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	0d5b      	lsrs	r3, r3, #21
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	0bdb      	lsrs	r3, r3, #15
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	0b9b      	lsrs	r3, r3, #14
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	0b5b      	lsrs	r3, r3, #13
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	0b1b      	lsrs	r3, r3, #12
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	0a9b      	lsrs	r3, r3, #10
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	b2da      	uxtb	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	b2da      	uxtb	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	004005ff 	.word	0x004005ff

0800553c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005594:	b5b0      	push	{r4, r5, r7, lr}
 8005596:	b08e      	sub	sp, #56	; 0x38
 8005598:	af04      	add	r7, sp, #16
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2203      	movs	r2, #3
 80055a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d02e      	beq.n	8005612 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	d106      	bne.n	80055ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
 80055c8:	e029      	b.n	800561e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d10a      	bne.n	80055e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fb2a 	bl	8005c2c <SD_WideBus_Enable>
 80055d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
 80055e6:	e01a      	b.n	800561e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fb67 	bl	8005cc2 <SD_WideBus_Disable>
 80055f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
 8005602:	e00c      	b.n	800561e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
 8005610:	e005      	b.n	800561e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800563c:	e01f      	b.n	800567e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681d      	ldr	r5, [r3, #0]
 8005664:	466c      	mov	r4, sp
 8005666:	f107 0314 	add.w	r3, r7, #20
 800566a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800566e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005678:	4628      	mov	r0, r5
 800567a:	f001 f94f 	bl	800691c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005686:	4618      	mov	r0, r3
 8005688:	f001 fa24 	bl	8006ad4 <SDMMC_CmdBlockLength>
 800568c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00c      	beq.n	80056ae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80056b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3728      	adds	r7, #40	; 0x28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bdb0      	pop	{r4, r5, r7, pc}
 80056c2:	bf00      	nop
 80056c4:	004005ff 	.word	0x004005ff

080056c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fa7e 	bl	8005bdc <SD_SendStatus>
 80056e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	0a5b      	lsrs	r3, r3, #9
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80056fe:	693b      	ldr	r3, [r7, #16]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005724:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	2b82      	cmp	r3, #130	; 0x82
 8005746:	d111      	bne.n	800576c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f001 fa6b 	bl	8006c28 <SDMMC_CmdStopTransfer>
 8005752:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff fd3a 	bl	80051e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0208 	bic.w	r2, r2, #8
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f240 523a 	movw	r2, #1338	; 0x53a
 8005784:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f001 fed5 	bl	8007544 <HAL_SD_RxCpltCallback>
#endif
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fd f932 	bl	8002a1c <HAL_DMA_GetError>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d03e      	beq.n	800583c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d002      	beq.n	80057da <SD_DMAError+0x36>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d12d      	bne.n	8005836 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <SD_DMAError+0xa0>)
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80057f0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80057fe:	6978      	ldr	r0, [r7, #20]
 8005800:	f7ff ff62 	bl	80056c8 <HAL_SD_GetCardState>
 8005804:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d002      	beq.n	8005812 <SD_DMAError+0x6e>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b05      	cmp	r3, #5
 8005810:	d10a      	bne.n	8005828 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fa06 	bl	8006c28 <SDMMC_CmdStopTransfer>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	431a      	orrs	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f7ff fcd2 	bl	80051e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800583c:	bf00      	nop
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	004005ff 	.word	0x004005ff

08005848 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f240 523a 	movw	r2, #1338	; 0x53a
 800585e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ff31 	bl	80056c8 <HAL_SD_GetCardState>
 8005866:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d002      	beq.n	8005882 <SD_DMATxAbort+0x3a>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b05      	cmp	r3, #5
 8005880:	d10a      	bne.n	8005898 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f001 f9ce 	bl	8006c28 <SDMMC_CmdStopTransfer>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	431a      	orrs	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f001 fe3b 	bl	800751c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80058a6:	e002      	b.n	80058ae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fc99 	bl	80051e0 <HAL_SD_ErrorCallback>
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f240 523a 	movw	r2, #1338	; 0x53a
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff fefa 	bl	80056c8 <HAL_SD_GetCardState>
 80058d4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d002      	beq.n	80058f0 <SD_DMARxAbort+0x3a>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	d10a      	bne.n	8005906 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 f997 	bl	8006c28 <SDMMC_CmdStopTransfer>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f001 fe04 	bl	800751c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005914:	e002      	b.n	800591c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7ff fc62 	bl	80051e0 <HAL_SD_ErrorCallback>
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b094      	sub	sp, #80	; 0x50
 8005928:	af04      	add	r7, sp, #16
 800592a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f849 	bl	80069cc <SDMMC_GetPowerState>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005940:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005944:	e0b8      	b.n	8005ab8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	2b03      	cmp	r3, #3
 800594c:	d02f      	beq.n	80059ae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f001 fa73 	bl	8006e3e <SDMMC_CmdSendCID>
 8005958:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800595a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <SD_InitCard+0x40>
    {
      return errorstate;
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	e0a9      	b.n	8005ab8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f873 	bl	8006a56 <SDMMC_GetResponse>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2104      	movs	r1, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f001 f86a 	bl	8006a56 <SDMMC_GetResponse>
 8005982:	4602      	mov	r2, r0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2108      	movs	r1, #8
 800598e:	4618      	mov	r0, r3
 8005990:	f001 f861 	bl	8006a56 <SDMMC_GetResponse>
 8005994:	4602      	mov	r2, r0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	210c      	movs	r1, #12
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 f858 	bl	8006a56 <SDMMC_GetResponse>
 80059a6:	4602      	mov	r2, r0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d00d      	beq.n	80059d2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f107 020e 	add.w	r2, r7, #14
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fa79 	bl	8006eb8 <SDMMC_CmdSetRelAdd>
 80059c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <SD_InitCard+0xae>
    {
      return errorstate;
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	e072      	b.n	8005ab8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d036      	beq.n	8005a48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80059da:	89fb      	ldrh	r3, [r7, #14]
 80059dc:	461a      	mov	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f001 fa43 	bl	8006e7a <SDMMC_CmdSendCSD>
 80059f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <SD_InitCard+0xdc>
    {
      return errorstate;
 80059fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fe:	e05b      	b.n	8005ab8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f825 	bl	8006a56 <SDMMC_GetResponse>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2104      	movs	r1, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f81c 	bl	8006a56 <SDMMC_GetResponse>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2108      	movs	r1, #8
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 f813 	bl	8006a56 <SDMMC_GetResponse>
 8005a30:	4602      	mov	r2, r0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	210c      	movs	r1, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 f80a 	bl	8006a56 <SDMMC_GetResponse>
 8005a42:	4602      	mov	r2, r0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 f801 	bl	8006a56 <SDMMC_GetResponse>
 8005a54:	4603      	mov	r3, r0
 8005a56:	0d1a      	lsrs	r2, r3, #20
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005a5c:	f107 0310 	add.w	r3, r7, #16
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fbc6 	bl	80051f4 <HAL_SD_GetCardCSD>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a72:	e021      	b.n	8005ab8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6819      	ldr	r1, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	2200      	movs	r2, #0
 8005a80:	461c      	mov	r4, r3
 8005a82:	4615      	mov	r5, r2
 8005a84:	4622      	mov	r2, r4
 8005a86:	462b      	mov	r3, r5
 8005a88:	4608      	mov	r0, r1
 8005a8a:	f001 f8ef 	bl	8006c6c <SDMMC_CmdSelDesel>
 8005a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <SD_InitCard+0x176>
  {
    return errorstate;
 8005a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a98:	e00e      	b.n	8005ab8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	466c      	mov	r4, sp
 8005aa2:	f103 0210 	add.w	r2, r3, #16
 8005aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005aac:	3304      	adds	r3, #4
 8005aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 ff33 	bl	800691c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3740      	adds	r7, #64	; 0x40
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bdb0      	pop	{r4, r5, r7, pc}

08005ac0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 f8ea 	bl	8006cb2 <SDMMC_CmdGoIdleState>
 8005ade:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <SD_PowerON+0x2a>
  {
    return errorstate;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	e072      	b.n	8005bd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f8fd 	bl	8006cee <SDMMC_CmdOperCond>
 8005af4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00d      	beq.n	8005b18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f8d3 	bl	8006cb2 <SDMMC_CmdGoIdleState>
 8005b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	e05b      	b.n	8005bd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d137      	bne.n	8005b96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 f8fd 	bl	8006d2c <SDMMC_CmdAppCommand>
 8005b32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02d      	beq.n	8005b96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b3e:	e047      	b.n	8005bd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 f8f0 	bl	8006d2c <SDMMC_CmdAppCommand>
 8005b4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <SD_PowerON+0x98>
    {
      return errorstate;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	e03b      	b.n	8005bd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	491e      	ldr	r1, [pc, #120]	; (8005bd8 <SD_PowerON+0x118>)
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f906 	bl	8006d70 <SDMMC_CmdAppOperCommand>
 8005b64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b70:	e02e      	b.n	8005bd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 ff6c 	bl	8006a56 <SDMMC_GetResponse>
 8005b7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	0fdb      	lsrs	r3, r3, #31
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <SD_PowerON+0xcc>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <SD_PowerON+0xce>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]

    count++;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d802      	bhi.n	8005ba6 <SD_PowerON+0xe6>
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0cc      	beq.n	8005b40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d902      	bls.n	8005bb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bb4:	e00c      	b.n	8005bd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8005bc6:	e002      	b.n	8005bce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	c1100000 	.word	0xc1100000

08005bdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bf0:	e018      	b.n	8005c24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f001 f97b 	bl	8006efa <SDMMC_CmdSendStatus>
 8005c04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	e009      	b.n	8005c24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ff1d 	bl	8006a56 <SDMMC_GetResponse>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 ff07 	bl	8006a56 <SDMMC_GetResponse>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c52:	d102      	bne.n	8005c5a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c58:	e02f      	b.n	8005cba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c5a:	f107 030c 	add.w	r3, r7, #12
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f879 	bl	8005d58 <SD_FindSCR>
 8005c66:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	e023      	b.n	8005cba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01c      	beq.n	8005cb6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f001 f84f 	bl	8006d2c <SDMMC_CmdAppCommand>
 8005c8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	e00f      	b.n	8005cba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 f889 	bl	8006db8 <SDMMC_CmdBusWidth>
 8005ca6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	e003      	b.n	8005cba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e001      	b.n	8005cba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 febc 	bl	8006a56 <SDMMC_GetResponse>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce8:	d102      	bne.n	8005cf0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cee:	e02f      	b.n	8005d50 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f82e 	bl	8005d58 <SD_FindSCR>
 8005cfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	e023      	b.n	8005d50 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01c      	beq.n	8005d4c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f001 f804 	bl	8006d2c <SDMMC_CmdAppCommand>
 8005d24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	e00f      	b.n	8005d50 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 f83e 	bl	8006db8 <SDMMC_CmdBusWidth>
 8005d3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	e003      	b.n	8005d50 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e001      	b.n	8005d50 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b08f      	sub	sp, #60	; 0x3c
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d62:	f7fb fc67 	bl	8001634 <HAL_GetTick>
 8005d66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2108      	movs	r1, #8
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fea8 	bl	8006ad4 <SDMMC_CmdBlockLength>
 8005d84:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	e0b2      	b.n	8005ef6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f000 ffc5 	bl	8006d2c <SDMMC_CmdAppCommand>
 8005da2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <SD_FindSCR+0x56>
  {
    return errorstate;
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	e0a3      	b.n	8005ef6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005db4:	2308      	movs	r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005db8:	2330      	movs	r3, #48	; 0x30
 8005dba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f107 0210 	add.w	r2, r7, #16
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fe52 	bl	8006a7c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 f80d 	bl	8006dfc <SDMMC_CmdSendSCR>
 8005de2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02a      	beq.n	8005e40 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	e083      	b.n	8005ef6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00f      	beq.n	8005e1c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f107 0208 	add.w	r2, r7, #8
 8005e08:	18d4      	adds	r4, r2, r3
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	f000 fdb2 	bl	8006974 <SDMMC_ReadFIFO>
 8005e10:	4603      	mov	r3, r0
 8005e12:	6023      	str	r3, [r4, #0]
      index++;
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	3301      	adds	r3, #1
 8005e18:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1a:	e006      	b.n	8005e2a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e2a:	f7fb fc03 	bl	8001634 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e38:	d102      	bne.n	8005e40 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e3e:	e05a      	b.n	8005ef6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0cf      	beq.n	8005dee <SD_FindSCR+0x96>
 8005e4e:	e000      	b.n	8005e52 <SD_FindSCR+0xfa>
      break;
 8005e50:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2208      	movs	r2, #8
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e68:	2308      	movs	r3, #8
 8005e6a:	e044      	b.n	8005ef6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e82:	2302      	movs	r3, #2
 8005e84:	e037      	b.n	8005ef6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	e02a      	b.n	8005ef6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	061a      	lsls	r2, r3, #24
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ec0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0e1b      	lsrs	r3, r3, #24
 8005ec6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	601a      	str	r2, [r3, #0]
    scr++;
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	3304      	adds	r3, #4
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	061a      	lsls	r2, r3, #24
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ede:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ee8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	0e1b      	lsrs	r3, r3, #24
 8005eee:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	373c      	adds	r7, #60	; 0x3c
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}

08005efe <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b086      	sub	sp, #24
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d03f      	beq.n	8005f98 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e033      	b.n	8005f86 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fd26 	bl	8006974 <SDMMC_ReadFIFO>
 8005f28:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	0e1b      	lsrs	r3, r3, #24
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b07      	cmp	r3, #7
 8005f8a:	d9c8      	bls.n	8005f1e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d043      	beq.n	8006042 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e037      	b.n	8006030 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	021a      	lsls	r2, r3, #8
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	041a      	lsls	r2, r3, #16
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	061a      	lsls	r2, r3, #24
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4313      	orrs	r3, r2
 800600c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3b01      	subs	r3, #1
 8006018:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f107 0208 	add.w	r2, r7, #8
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fcb2 	bl	800698e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	3301      	adds	r3, #1
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b07      	cmp	r3, #7
 8006034:	d9c4      	bls.n	8005fc0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006042:	bf00      	nop
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e040      	b.n	80060de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fb f9e5 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2224      	movs	r2, #36	; 0x24
 8006076:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f82d 	bl	80060e8 <UART_SetConfig>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e022      	b.n	80060de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fa85 	bl	80065b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fb0c 	bl	80066f4 <UART_CheckIdleState>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4ba6      	ldr	r3, [pc, #664]	; (80063ac <UART_SetConfig+0x2c4>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	430b      	orrs	r3, r1
 800611e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a94      	ldr	r2, [pc, #592]	; (80063b0 <UART_SetConfig+0x2c8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d120      	bne.n	80061a6 <UART_SetConfig+0xbe>
 8006164:	4b93      	ldr	r3, [pc, #588]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b03      	cmp	r3, #3
 8006170:	d816      	bhi.n	80061a0 <UART_SetConfig+0xb8>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x90>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	08006195 	.word	0x08006195
 8006180:	0800618f 	.word	0x0800618f
 8006184:	0800619b 	.word	0x0800619b
 8006188:	2301      	movs	r3, #1
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e150      	b.n	8006430 <UART_SetConfig+0x348>
 800618e:	2302      	movs	r3, #2
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e14d      	b.n	8006430 <UART_SetConfig+0x348>
 8006194:	2304      	movs	r3, #4
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e14a      	b.n	8006430 <UART_SetConfig+0x348>
 800619a:	2308      	movs	r3, #8
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e147      	b.n	8006430 <UART_SetConfig+0x348>
 80061a0:	2310      	movs	r3, #16
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e144      	b.n	8006430 <UART_SetConfig+0x348>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a83      	ldr	r2, [pc, #524]	; (80063b8 <UART_SetConfig+0x2d0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d132      	bne.n	8006216 <UART_SetConfig+0x12e>
 80061b0:	4b80      	ldr	r3, [pc, #512]	; (80063b4 <UART_SetConfig+0x2cc>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	f003 030c 	and.w	r3, r3, #12
 80061ba:	2b0c      	cmp	r3, #12
 80061bc:	d828      	bhi.n	8006210 <UART_SetConfig+0x128>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <UART_SetConfig+0xdc>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061f9 	.word	0x080061f9
 80061c8:	08006211 	.word	0x08006211
 80061cc:	08006211 	.word	0x08006211
 80061d0:	08006211 	.word	0x08006211
 80061d4:	08006205 	.word	0x08006205
 80061d8:	08006211 	.word	0x08006211
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006211 	.word	0x08006211
 80061e4:	080061ff 	.word	0x080061ff
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006211 	.word	0x08006211
 80061f4:	0800620b 	.word	0x0800620b
 80061f8:	2300      	movs	r3, #0
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e118      	b.n	8006430 <UART_SetConfig+0x348>
 80061fe:	2302      	movs	r3, #2
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e115      	b.n	8006430 <UART_SetConfig+0x348>
 8006204:	2304      	movs	r3, #4
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e112      	b.n	8006430 <UART_SetConfig+0x348>
 800620a:	2308      	movs	r3, #8
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e10f      	b.n	8006430 <UART_SetConfig+0x348>
 8006210:	2310      	movs	r3, #16
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e10c      	b.n	8006430 <UART_SetConfig+0x348>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a68      	ldr	r2, [pc, #416]	; (80063bc <UART_SetConfig+0x2d4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d120      	bne.n	8006262 <UART_SetConfig+0x17a>
 8006220:	4b64      	ldr	r3, [pc, #400]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800622a:	2b30      	cmp	r3, #48	; 0x30
 800622c:	d013      	beq.n	8006256 <UART_SetConfig+0x16e>
 800622e:	2b30      	cmp	r3, #48	; 0x30
 8006230:	d814      	bhi.n	800625c <UART_SetConfig+0x174>
 8006232:	2b20      	cmp	r3, #32
 8006234:	d009      	beq.n	800624a <UART_SetConfig+0x162>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d810      	bhi.n	800625c <UART_SetConfig+0x174>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <UART_SetConfig+0x15c>
 800623e:	2b10      	cmp	r3, #16
 8006240:	d006      	beq.n	8006250 <UART_SetConfig+0x168>
 8006242:	e00b      	b.n	800625c <UART_SetConfig+0x174>
 8006244:	2300      	movs	r3, #0
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e0f2      	b.n	8006430 <UART_SetConfig+0x348>
 800624a:	2302      	movs	r3, #2
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	e0ef      	b.n	8006430 <UART_SetConfig+0x348>
 8006250:	2304      	movs	r3, #4
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e0ec      	b.n	8006430 <UART_SetConfig+0x348>
 8006256:	2308      	movs	r3, #8
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e0e9      	b.n	8006430 <UART_SetConfig+0x348>
 800625c:	2310      	movs	r3, #16
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e0e6      	b.n	8006430 <UART_SetConfig+0x348>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a56      	ldr	r2, [pc, #344]	; (80063c0 <UART_SetConfig+0x2d8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d120      	bne.n	80062ae <UART_SetConfig+0x1c6>
 800626c:	4b51      	ldr	r3, [pc, #324]	; (80063b4 <UART_SetConfig+0x2cc>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006276:	2bc0      	cmp	r3, #192	; 0xc0
 8006278:	d013      	beq.n	80062a2 <UART_SetConfig+0x1ba>
 800627a:	2bc0      	cmp	r3, #192	; 0xc0
 800627c:	d814      	bhi.n	80062a8 <UART_SetConfig+0x1c0>
 800627e:	2b80      	cmp	r3, #128	; 0x80
 8006280:	d009      	beq.n	8006296 <UART_SetConfig+0x1ae>
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d810      	bhi.n	80062a8 <UART_SetConfig+0x1c0>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <UART_SetConfig+0x1a8>
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d006      	beq.n	800629c <UART_SetConfig+0x1b4>
 800628e:	e00b      	b.n	80062a8 <UART_SetConfig+0x1c0>
 8006290:	2300      	movs	r3, #0
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e0cc      	b.n	8006430 <UART_SetConfig+0x348>
 8006296:	2302      	movs	r3, #2
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e0c9      	b.n	8006430 <UART_SetConfig+0x348>
 800629c:	2304      	movs	r3, #4
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e0c6      	b.n	8006430 <UART_SetConfig+0x348>
 80062a2:	2308      	movs	r3, #8
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e0c3      	b.n	8006430 <UART_SetConfig+0x348>
 80062a8:	2310      	movs	r3, #16
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e0c0      	b.n	8006430 <UART_SetConfig+0x348>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a44      	ldr	r2, [pc, #272]	; (80063c4 <UART_SetConfig+0x2dc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d125      	bne.n	8006304 <UART_SetConfig+0x21c>
 80062b8:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <UART_SetConfig+0x2cc>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c6:	d017      	beq.n	80062f8 <UART_SetConfig+0x210>
 80062c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062cc:	d817      	bhi.n	80062fe <UART_SetConfig+0x216>
 80062ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d2:	d00b      	beq.n	80062ec <UART_SetConfig+0x204>
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d8:	d811      	bhi.n	80062fe <UART_SetConfig+0x216>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <UART_SetConfig+0x1fe>
 80062de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e2:	d006      	beq.n	80062f2 <UART_SetConfig+0x20a>
 80062e4:	e00b      	b.n	80062fe <UART_SetConfig+0x216>
 80062e6:	2300      	movs	r3, #0
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e0a1      	b.n	8006430 <UART_SetConfig+0x348>
 80062ec:	2302      	movs	r3, #2
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e09e      	b.n	8006430 <UART_SetConfig+0x348>
 80062f2:	2304      	movs	r3, #4
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e09b      	b.n	8006430 <UART_SetConfig+0x348>
 80062f8:	2308      	movs	r3, #8
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e098      	b.n	8006430 <UART_SetConfig+0x348>
 80062fe:	2310      	movs	r3, #16
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e095      	b.n	8006430 <UART_SetConfig+0x348>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <UART_SetConfig+0x2e0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d125      	bne.n	800635a <UART_SetConfig+0x272>
 800630e:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800631c:	d017      	beq.n	800634e <UART_SetConfig+0x266>
 800631e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006322:	d817      	bhi.n	8006354 <UART_SetConfig+0x26c>
 8006324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006328:	d00b      	beq.n	8006342 <UART_SetConfig+0x25a>
 800632a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632e:	d811      	bhi.n	8006354 <UART_SetConfig+0x26c>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <UART_SetConfig+0x254>
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006338:	d006      	beq.n	8006348 <UART_SetConfig+0x260>
 800633a:	e00b      	b.n	8006354 <UART_SetConfig+0x26c>
 800633c:	2301      	movs	r3, #1
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e076      	b.n	8006430 <UART_SetConfig+0x348>
 8006342:	2302      	movs	r3, #2
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e073      	b.n	8006430 <UART_SetConfig+0x348>
 8006348:	2304      	movs	r3, #4
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e070      	b.n	8006430 <UART_SetConfig+0x348>
 800634e:	2308      	movs	r3, #8
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e06d      	b.n	8006430 <UART_SetConfig+0x348>
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e06a      	b.n	8006430 <UART_SetConfig+0x348>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <UART_SetConfig+0x2e4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d138      	bne.n	80063d6 <UART_SetConfig+0x2ee>
 8006364:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800636e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006372:	d017      	beq.n	80063a4 <UART_SetConfig+0x2bc>
 8006374:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006378:	d82a      	bhi.n	80063d0 <UART_SetConfig+0x2e8>
 800637a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637e:	d00b      	beq.n	8006398 <UART_SetConfig+0x2b0>
 8006380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006384:	d824      	bhi.n	80063d0 <UART_SetConfig+0x2e8>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <UART_SetConfig+0x2aa>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d006      	beq.n	800639e <UART_SetConfig+0x2b6>
 8006390:	e01e      	b.n	80063d0 <UART_SetConfig+0x2e8>
 8006392:	2300      	movs	r3, #0
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e04b      	b.n	8006430 <UART_SetConfig+0x348>
 8006398:	2302      	movs	r3, #2
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e048      	b.n	8006430 <UART_SetConfig+0x348>
 800639e:	2304      	movs	r3, #4
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e045      	b.n	8006430 <UART_SetConfig+0x348>
 80063a4:	2308      	movs	r3, #8
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e042      	b.n	8006430 <UART_SetConfig+0x348>
 80063aa:	bf00      	nop
 80063ac:	efff69f3 	.word	0xefff69f3
 80063b0:	40011000 	.word	0x40011000
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40004400 	.word	0x40004400
 80063bc:	40004800 	.word	0x40004800
 80063c0:	40004c00 	.word	0x40004c00
 80063c4:	40005000 	.word	0x40005000
 80063c8:	40011400 	.word	0x40011400
 80063cc:	40007800 	.word	0x40007800
 80063d0:	2310      	movs	r3, #16
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e02c      	b.n	8006430 <UART_SetConfig+0x348>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a72      	ldr	r2, [pc, #456]	; (80065a4 <UART_SetConfig+0x4bc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d125      	bne.n	800642c <UART_SetConfig+0x344>
 80063e0:	4b71      	ldr	r3, [pc, #452]	; (80065a8 <UART_SetConfig+0x4c0>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063ee:	d017      	beq.n	8006420 <UART_SetConfig+0x338>
 80063f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063f4:	d817      	bhi.n	8006426 <UART_SetConfig+0x33e>
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fa:	d00b      	beq.n	8006414 <UART_SetConfig+0x32c>
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d811      	bhi.n	8006426 <UART_SetConfig+0x33e>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <UART_SetConfig+0x326>
 8006406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640a:	d006      	beq.n	800641a <UART_SetConfig+0x332>
 800640c:	e00b      	b.n	8006426 <UART_SetConfig+0x33e>
 800640e:	2300      	movs	r3, #0
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e00d      	b.n	8006430 <UART_SetConfig+0x348>
 8006414:	2302      	movs	r3, #2
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e00a      	b.n	8006430 <UART_SetConfig+0x348>
 800641a:	2304      	movs	r3, #4
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e007      	b.n	8006430 <UART_SetConfig+0x348>
 8006420:	2308      	movs	r3, #8
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e004      	b.n	8006430 <UART_SetConfig+0x348>
 8006426:	2310      	movs	r3, #16
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e001      	b.n	8006430 <UART_SetConfig+0x348>
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d15b      	bne.n	80064f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800643a:	7ffb      	ldrb	r3, [r7, #31]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d828      	bhi.n	8006492 <UART_SetConfig+0x3aa>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x360>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800646d 	.word	0x0800646d
 800644c:	08006475 	.word	0x08006475
 8006450:	0800647d 	.word	0x0800647d
 8006454:	08006493 	.word	0x08006493
 8006458:	08006483 	.word	0x08006483
 800645c:	08006493 	.word	0x08006493
 8006460:	08006493 	.word	0x08006493
 8006464:	08006493 	.word	0x08006493
 8006468:	0800648b 	.word	0x0800648b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800646c:	f7fd fa42 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8006470:	61b8      	str	r0, [r7, #24]
        break;
 8006472:	e013      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7fd fa52 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8006478:	61b8      	str	r0, [r7, #24]
        break;
 800647a:	e00f      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800647c:	4b4b      	ldr	r3, [pc, #300]	; (80065ac <UART_SetConfig+0x4c4>)
 800647e:	61bb      	str	r3, [r7, #24]
        break;
 8006480:	e00c      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006482:	f7fd f965 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8006486:	61b8      	str	r0, [r7, #24]
        break;
 8006488:	e008      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648e:	61bb      	str	r3, [r7, #24]
        break;
 8006490:	e004      	b.n	800649c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	77bb      	strb	r3, [r7, #30]
        break;
 800649a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d074      	beq.n	800658c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	005a      	lsls	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b0f      	cmp	r3, #15
 80064bc:	d916      	bls.n	80064ec <UART_SetConfig+0x404>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d212      	bcs.n	80064ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f023 030f 	bic.w	r3, r3, #15
 80064ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	b29a      	uxth	r2, r3
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	4313      	orrs	r3, r2
 80064e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	89fa      	ldrh	r2, [r7, #14]
 80064e8:	60da      	str	r2, [r3, #12]
 80064ea:	e04f      	b.n	800658c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	77bb      	strb	r3, [r7, #30]
 80064f0:	e04c      	b.n	800658c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d828      	bhi.n	800654a <UART_SetConfig+0x462>
 80064f8:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x418>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	0800654b 	.word	0x0800654b
 8006510:	0800653b 	.word	0x0800653b
 8006514:	0800654b 	.word	0x0800654b
 8006518:	0800654b 	.word	0x0800654b
 800651c:	0800654b 	.word	0x0800654b
 8006520:	08006543 	.word	0x08006543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006524:	f7fd f9e6 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8006528:	61b8      	str	r0, [r7, #24]
        break;
 800652a:	e013      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800652c:	f7fd f9f6 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8006530:	61b8      	str	r0, [r7, #24]
        break;
 8006532:	e00f      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <UART_SetConfig+0x4c4>)
 8006536:	61bb      	str	r3, [r7, #24]
        break;
 8006538:	e00c      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653a:	f7fd f909 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800653e:	61b8      	str	r0, [r7, #24]
        break;
 8006540:	e008      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	61bb      	str	r3, [r7, #24]
        break;
 8006548:	e004      	b.n	8006554 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	77bb      	strb	r3, [r7, #30]
        break;
 8006552:	bf00      	nop
    }

    if (pclk != 0U)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d018      	beq.n	800658c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	085a      	lsrs	r2, r3, #1
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	441a      	add	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b0f      	cmp	r3, #15
 8006572:	d909      	bls.n	8006588 <UART_SetConfig+0x4a0>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657a:	d205      	bcs.n	8006588 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60da      	str	r2, [r3, #12]
 8006586:	e001      	b.n	800658c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006598:	7fbb      	ldrb	r3, [r7, #30]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40007c00 	.word	0x40007c00
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00f42400 	.word	0x00f42400

080065b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ae:	d10a      	bne.n	80066c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006704:	f7fa ff96 	bl	8001634 <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10e      	bne.n	8006736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f831 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e027      	b.n	8006786 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d10e      	bne.n	8006762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f81b 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e011      	b.n	8006786 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b09c      	sub	sp, #112	; 0x70
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	e0a7      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a6:	f000 80a3 	beq.w	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fa ff43 	bl	8001634 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d13f      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d4:	667b      	str	r3, [r7, #100]	; 0x64
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e6      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	663b      	str	r3, [r7, #96]	; 0x60
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006812:	64ba      	str	r2, [r7, #72]	; 0x48
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e068      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d050      	beq.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685c:	d148      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006866:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800687c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800688c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e6      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ba:	623a      	str	r2, [r7, #32]
 80068bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	69f9      	ldr	r1, [r7, #28]
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e5      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e010      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	429a      	cmp	r2, r3
 800690c:	f43f af48 	beq.w	80067a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3770      	adds	r7, #112	; 0x70
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800691c:	b084      	sub	sp, #16
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	f107 001c 	add.w	r0, r7, #28
 800692a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006932:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006934:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006936:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800693a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800693e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006942:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006946:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <SDMMC_Init+0x54>)
 8006954:	4013      	ands	r3, r2
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	b004      	add	sp, #16
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	ffff8100 	.word	0xffff8100

08006974 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2203      	movs	r2, #3
 80069bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0303 	and.w	r3, r3, #3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006a0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006a12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <SDMMC_SendCommand+0x50>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	fffff000 	.word	0xfffff000

08006a3c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	b2db      	uxtb	r3, r3
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3314      	adds	r3, #20
 8006a64:	461a      	mov	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
}  
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006aa2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006aa8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006aae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0

}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006ae2:	2310      	movs	r3, #16
 8006ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006af4:	f107 0308 	add.w	r3, r7, #8
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff ff74 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b04:	2110      	movs	r1, #16
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa1a 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006b26:	2311      	movs	r3, #17
 8006b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b2a:	2340      	movs	r3, #64	; 0x40
 8006b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b38:	f107 0308 	add.w	r3, r7, #8
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff52 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b48:	2111      	movs	r1, #17
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f9f8 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006b50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b52:	69fb      	ldr	r3, [r7, #28]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006b6a:	2312      	movs	r3, #18
 8006b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b6e:	2340      	movs	r3, #64	; 0x40
 8006b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b7c:	f107 0308 	add.w	r3, r7, #8
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff ff30 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8c:	2112      	movs	r1, #18
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9d6 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b96:	69fb      	ldr	r3, [r7, #28]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006bae:	2318      	movs	r3, #24
 8006bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff ff0e 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd0:	2118      	movs	r1, #24
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9b4 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bda:	69fb      	ldr	r3, [r7, #28]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006bf2:	2319      	movs	r3, #25
 8006bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c04:	f107 0308 	add.w	r3, r7, #8
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff feec 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c14:	2119      	movs	r1, #25
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f992 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006c34:	230c      	movs	r3, #12
 8006c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fecb 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006c52:	4a05      	ldr	r2, [pc, #20]	; (8006c68 <SDMMC_CmdStopTransfer+0x40>)
 8006c54:	210c      	movs	r1, #12
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f972 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	05f5e100 	.word	0x05f5e100

08006c6c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	; 0x28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006c7c:	2307      	movs	r3, #7
 8006c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c8c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c8e:	f107 0310 	add.w	r3, r7, #16
 8006c92:	4619      	mov	r1, r3
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7ff fea7 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9e:	2107      	movs	r1, #7
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f94d 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006ca6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3728      	adds	r7, #40	; 0x28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b088      	sub	sp, #32
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cd0:	f107 0308 	add.w	r3, r7, #8
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fe86 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fb67 	bl	80073b0 <SDMMC_GetCmdError>
 8006ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006cf6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff fe67 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fafa 	bl	8007314 <SDMMC_GetCmdResp7>
 8006d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d22:	69fb      	ldr	r3, [r7, #28]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006d3a:	2337      	movs	r3, #55	; 0x37
 8006d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d4c:	f107 0308 	add.w	r3, r7, #8
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff fe48 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5c:	2137      	movs	r1, #55	; 0x37
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8ee 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d66:	69fb      	ldr	r3, [r7, #28]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <SDMMC_CmdAppOperCommand+0x44>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d82:	2329      	movs	r3, #41	; 0x29
 8006d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d94:	f107 0308 	add.w	r3, r7, #8
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fe24 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fa03 	bl	80071ac <SDMMC_GetCmdResp3>
 8006da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006da8:	69fb      	ldr	r3, [r7, #28]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	80100000 	.word	0x80100000

08006db8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006dc6:	2306      	movs	r3, #6
 8006dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006dca:	2340      	movs	r3, #64	; 0x40
 8006dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dd8:	f107 0308 	add.w	r3, r7, #8
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fe02 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	2106      	movs	r1, #6
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f8a8 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006df2:	69fb      	ldr	r3, [r7, #28]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006e08:	2333      	movs	r3, #51	; 0x33
 8006e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e1a:	f107 0308 	add.w	r3, r7, #8
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff fde1 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2a:	2133      	movs	r1, #51	; 0x33
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f887 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e34:	69fb      	ldr	r3, [r7, #28]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b088      	sub	sp, #32
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006e4e:	23c0      	movs	r3, #192	; 0xc0
 8006e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e5c:	f107 0308 	add.w	r3, r7, #8
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fdc0 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f957 	bl	800711c <SDMMC_GetCmdResp2>
 8006e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e70:	69fb      	ldr	r3, [r7, #28]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b088      	sub	sp, #32
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006e88:	2309      	movs	r3, #9
 8006e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006e8c:	23c0      	movs	r3, #192	; 0xc0
 8006e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e9a:	f107 0308 	add.w	r3, r7, #8
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fda1 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f938 	bl	800711c <SDMMC_GetCmdResp2>
 8006eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eae:	69fb      	ldr	r3, [r7, #28]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fd82 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	2103      	movs	r1, #3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f99d 	bl	8007228 <SDMMC_GetCmdResp6>
 8006eee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b088      	sub	sp, #32
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006f08:	230d      	movs	r3, #13
 8006f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f1a:	f107 0308 	add.w	r3, r7, #8
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fd61 	bl	80069e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2a:	210d      	movs	r1, #13
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f807 	bl	8006f40 <SDMMC_GetCmdResp1>
 8006f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f34:	69fb      	ldr	r3, [r7, #28]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f4e:	4b70      	ldr	r3, [pc, #448]	; (8007110 <SDMMC_GetCmdResp1+0x1d0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a70      	ldr	r2, [pc, #448]	; (8007114 <SDMMC_GetCmdResp1+0x1d4>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	0a5a      	lsrs	r2, r3, #9
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	1e5a      	subs	r2, r3, #1
 8006f66:	61fa      	str	r2, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f70:	e0c9      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0ef      	beq.n	8006f62 <SDMMC_GetCmdResp1+0x22>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ea      	bne.n	8006f62 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	e0b1      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0a6      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	22c5      	movs	r2, #197	; 0xc5
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fd3c 	bl	8006a3c <SDMMC_GetCommandResponse>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d001      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e099      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff fd3e 	bl	8006a56 <SDMMC_GetResponse>
 8006fda:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4b4e      	ldr	r3, [pc, #312]	; (8007118 <SDMMC_GetCmdResp1+0x1d8>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e08d      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da02      	bge.n	8006ff6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff4:	e087      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	e080      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	e079      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800701c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007020:	e071      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800702c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007030:	e069      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800703c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007040:	e061      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800704c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007050:	e059      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800705c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007060:	e051      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800706c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007070:	e049      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800707c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007080:	e041      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800708c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007090:	e039      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800709c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070a0:	e031      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070b0:	e029      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070c0:	e021      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070d0:	e019      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80070dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070e0:	e011      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80070ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070f0:	e009      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80070fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007100:	e001      	b.n	8007106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000000 	.word	0x20000000
 8007114:	10624dd3 	.word	0x10624dd3
 8007118:	fdffe008 	.word	0xfdffe008

0800711c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007124:	4b1f      	ldr	r3, [pc, #124]	; (80071a4 <SDMMC_GetCmdResp2+0x88>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <SDMMC_GetCmdResp2+0x8c>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	0a5b      	lsrs	r3, r3, #9
 8007130:	f241 3288 	movw	r2, #5000	; 0x1388
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1e5a      	subs	r2, r3, #1
 800713e:	60fa      	str	r2, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007148:	e026      	b.n	8007198 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0ef      	beq.n	800713a <SDMMC_GetCmdResp2+0x1e>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1ea      	bne.n	800713a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2204      	movs	r2, #4
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007176:	2304      	movs	r3, #4
 8007178:	e00e      	b.n	8007198 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800718c:	2301      	movs	r3, #1
 800718e:	e003      	b.n	8007198 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	22c5      	movs	r2, #197	; 0xc5
 8007194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	20000000 	.word	0x20000000
 80071a8:	10624dd3 	.word	0x10624dd3

080071ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <SDMMC_GetCmdResp3+0x74>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <SDMMC_GetCmdResp3+0x78>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	0a5b      	lsrs	r3, r3, #9
 80071c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1e5a      	subs	r2, r3, #1
 80071ce:	60fa      	str	r2, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071d8:	e01b      	b.n	8007212 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0ef      	beq.n	80071ca <SDMMC_GetCmdResp3+0x1e>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1ea      	bne.n	80071ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2204      	movs	r2, #4
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007206:	2304      	movs	r3, #4
 8007208:	e003      	b.n	8007212 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	22c5      	movs	r2, #197	; 0xc5
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000000 	.word	0x20000000
 8007224:	10624dd3 	.word	0x10624dd3

08007228 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	460b      	mov	r3, r1
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007236:	4b35      	ldr	r3, [pc, #212]	; (800730c <SDMMC_GetCmdResp6+0xe4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a35      	ldr	r2, [pc, #212]	; (8007310 <SDMMC_GetCmdResp6+0xe8>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	0a5b      	lsrs	r3, r3, #9
 8007242:	f241 3288 	movw	r2, #5000	; 0x1388
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	61fa      	str	r2, [r7, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800725a:	e052      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0ef      	beq.n	800724c <SDMMC_GetCmdResp6+0x24>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1ea      	bne.n	800724c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2204      	movs	r2, #4
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007288:	2304      	movs	r3, #4
 800728a:	e03a      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800729e:	2301      	movs	r3, #1
 80072a0:	e02f      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff fbca 	bl	8006a3c <SDMMC_GetCommandResponse>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d001      	beq.n	80072b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e025      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	22c5      	movs	r2, #197	; 0xc5
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff fbc9 	bl	8006a56 <SDMMC_GetResponse>
 80072c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80072da:	2300      	movs	r3, #0
 80072dc:	e011      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80072e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072ec:	e009      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80072f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072fc:	e001      	b.n	8007302 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80072fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000000 	.word	0x20000000
 8007310:	10624dd3 	.word	0x10624dd3

08007314 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800731c:	4b22      	ldr	r3, [pc, #136]	; (80073a8 <SDMMC_GetCmdResp7+0x94>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <SDMMC_GetCmdResp7+0x98>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	0a5b      	lsrs	r3, r3, #9
 8007328:	f241 3288 	movw	r2, #5000	; 0x1388
 800732c:	fb02 f303 	mul.w	r3, r2, r3
 8007330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1e5a      	subs	r2, r3, #1
 8007336:	60fa      	str	r2, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800733c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007340:	e02c      	b.n	800739c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0ef      	beq.n	8007332 <SDMMC_GetCmdResp7+0x1e>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1ea      	bne.n	8007332 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2204      	movs	r2, #4
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800736e:	2304      	movs	r3, #4
 8007370:	e014      	b.n	800739c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007384:	2301      	movs	r3, #1
 8007386:	e009      	b.n	800739c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2240      	movs	r2, #64	; 0x40
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800739a:	2300      	movs	r3, #0
  
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000000 	.word	0x20000000
 80073ac:	10624dd3 	.word	0x10624dd3

080073b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073b8:	4b11      	ldr	r3, [pc, #68]	; (8007400 <SDMMC_GetCmdError+0x50>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a11      	ldr	r2, [pc, #68]	; (8007404 <SDMMC_GetCmdError+0x54>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	0a5b      	lsrs	r3, r3, #9
 80073c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	60fa      	str	r2, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073dc:	e009      	b.n	80073f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f1      	beq.n	80073ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	22c5      	movs	r2, #197	; 0xc5
 80073ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000000 	.word	0x20000000
 8007404:	10624dd3 	.word	0x10624dd3

08007408 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800740c:	4904      	ldr	r1, [pc, #16]	; (8007420 <MX_FATFS_Init+0x18>)
 800740e:	4805      	ldr	r0, [pc, #20]	; (8007424 <MX_FATFS_Init+0x1c>)
 8007410:	f000 faa0 	bl	8007954 <FATFS_LinkDriver>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	4b03      	ldr	r3, [pc, #12]	; (8007428 <MX_FATFS_Init+0x20>)
 800741a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800741c:	bf00      	nop
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200004b4 	.word	0x200004b4
 8007424:	08007a04 	.word	0x08007a04
 8007428:	200004b0 	.word	0x200004b0

0800742c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007436:	f000 f896 	bl	8007566 <BSP_SD_IsDetected>
 800743a:	4603      	mov	r3, r0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d001      	beq.n	8007444 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007440:	2302      	movs	r3, #2
 8007442:	e012      	b.n	800746a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007444:	480b      	ldr	r0, [pc, #44]	; (8007474 <BSP_SD_Init+0x48>)
 8007446:	f7fd fad5 	bl	80049f4 <HAL_SD_Init>
 800744a:	4603      	mov	r3, r0
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d109      	bne.n	8007468 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007458:	4806      	ldr	r0, [pc, #24]	; (8007474 <BSP_SD_Init+0x48>)
 800745a:	f7fe f89b 	bl	8005594 <HAL_SD_ConfigWideBusOperation>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007468:	79fb      	ldrb	r3, [r7, #7]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	2000037c 	.word	0x2000037c

08007478 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	4806      	ldr	r0, [pc, #24]	; (80074a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007490:	f7fd fb68 	bl	8004b64 <HAL_SD_ReadBlocks_DMA>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	2000037c 	.word	0x2000037c

080074ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	68f9      	ldr	r1, [r7, #12]
 80074c2:	4806      	ldr	r0, [pc, #24]	; (80074dc <BSP_SD_WriteBlocks_DMA+0x30>)
 80074c4:	f7fd fc30 	bl	8004d28 <HAL_SD_WriteBlocks_DMA>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	2000037c 	.word	0x2000037c

080074e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80074e4:	4805      	ldr	r0, [pc, #20]	; (80074fc <BSP_SD_GetCardState+0x1c>)
 80074e6:	f7fe f8ef 	bl	80056c8 <HAL_SD_GetCardState>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	bf14      	ite	ne
 80074f0:	2301      	movne	r3, #1
 80074f2:	2300      	moveq	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	2000037c 	.word	0x2000037c

08007500 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4803      	ldr	r0, [pc, #12]	; (8007518 <BSP_SD_GetCardInfo+0x18>)
 800750c:	f7fe f816 	bl	800553c <HAL_SD_GetCardInfo>
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	2000037c 	.word	0x2000037c

0800751c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007524:	f000 f818 	bl	8007558 <BSP_SD_AbortCallback>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007538:	f000 f9a8 	bl	800788c <BSP_SD_WriteCpltCallback>
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800754c:	f000 f9aa 	bl	80078a4 <BSP_SD_ReadCpltCallback>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0

}
 800755c:	bf00      	nop
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800756c:	2301      	movs	r3, #1
 800756e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007570:	f000 f80c 	bl	800758c <BSP_PlatformIsDetected>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800757a:	2300      	movs	r3, #0
 800757c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	b2db      	uxtb	r3, r3
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007592:	2301      	movs	r3, #1
 8007594:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800759a:	4806      	ldr	r0, [pc, #24]	; (80075b4 <BSP_PlatformIsDetected+0x28>)
 800759c:	f7fb fcd6 	bl	8002f4c <HAL_GPIO_ReadPin>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80075a6:	2300      	movs	r3, #0
 80075a8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80075aa:	79fb      	ldrb	r3, [r7, #7]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40020400 	.word	0x40020400

080075b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80075c0:	f7fa f838 	bl	8001634 <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80075c6:	e006      	b.n	80075d6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80075c8:	f7ff ff8a 	bl	80074e0 <BSP_SD_GetCardState>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e009      	b.n	80075ea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80075d6:	f7fa f82d 	bl	8001634 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8f0      	bhi.n	80075c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <SD_CheckStatus+0x38>)
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007604:	f7ff ff6c 	bl	80074e0 <BSP_SD_GetCardState>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d107      	bne.n	800761e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800760e:	4b07      	ldr	r3, [pc, #28]	; (800762c <SD_CheckStatus+0x38>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <SD_CheckStatus+0x38>)
 800761c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <SD_CheckStatus+0x38>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000009 	.word	0x20000009

08007630 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800763a:	f7ff fef7 	bl	800742c <BSP_SD_Init>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d107      	bne.n	8007654 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ffd4 	bl	80075f4 <SD_CheckStatus>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <SD_initialize+0x34>)
 8007652:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007654:	4b03      	ldr	r3, [pc, #12]	; (8007664 <SD_initialize+0x34>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b2db      	uxtb	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000009 	.word	0x20000009

08007668 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff ffbd 	bl	80075f4 <SD_CheckStatus>
 800767a:	4603      	mov	r3, r0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007698:	f247 5030 	movw	r0, #30000	; 0x7530
 800769c:	f7ff ff8c 	bl	80075b8 <SD_CheckStatusWithTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da01      	bge.n	80076aa <SD_read+0x26>
  {
    return res;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	e03b      	b.n	8007722 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	68b8      	ldr	r0, [r7, #8]
 80076b0:	f7ff fee2 	bl	8007478 <BSP_SD_ReadBlocks_DMA>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d132      	bne.n	8007720 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80076ba:	4b1c      	ldr	r3, [pc, #112]	; (800772c <SD_read+0xa8>)
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80076c0:	f7f9 ffb8 	bl	8001634 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80076c6:	bf00      	nop
 80076c8:	4b18      	ldr	r3, [pc, #96]	; (800772c <SD_read+0xa8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d108      	bne.n	80076e2 <SD_read+0x5e>
 80076d0:	f7f9 ffb0 	bl	8001634 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f247 522f 	movw	r2, #29999	; 0x752f
 80076de:	4293      	cmp	r3, r2
 80076e0:	d9f2      	bls.n	80076c8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <SD_read+0xa8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
 80076ee:	e017      	b.n	8007720 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <SD_read+0xa8>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80076f6:	f7f9 ff9d 	bl	8001634 <HAL_GetTick>
 80076fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80076fc:	e007      	b.n	800770e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80076fe:	f7ff feef 	bl	80074e0 <BSP_SD_GetCardState>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <SD_read+0x8a>
          {
            res = RES_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800770c:	e008      	b.n	8007720 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800770e:	f7f9 ff91 	bl	8001634 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	f247 522f 	movw	r2, #29999	; 0x752f
 800771c:	4293      	cmp	r3, r2
 800771e:	d9ee      	bls.n	80076fe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	200004bc 	.word	0x200004bc

08007730 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007744:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <SD_write+0xa8>)
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800774a:	f247 5030 	movw	r0, #30000	; 0x7530
 800774e:	f7ff ff33 	bl	80075b8 <SD_CheckStatusWithTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	da01      	bge.n	800775c <SD_write+0x2c>
  {
    return res;
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	e038      	b.n	80077ce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f7ff fea3 	bl	80074ac <BSP_SD_WriteBlocks_DMA>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d12f      	bne.n	80077cc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800776c:	f7f9 ff62 	bl	8001634 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007772:	bf00      	nop
 8007774:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <SD_write+0xa8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d108      	bne.n	800778e <SD_write+0x5e>
 800777c:	f7f9 ff5a 	bl	8001634 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f247 522f 	movw	r2, #29999	; 0x752f
 800778a:	4293      	cmp	r3, r2
 800778c:	d9f2      	bls.n	8007774 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <SD_write+0xa8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
 800779a:	e017      	b.n	80077cc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <SD_write+0xa8>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80077a2:	f7f9 ff47 	bl	8001634 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80077a8:	e007      	b.n	80077ba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80077aa:	f7ff fe99 	bl	80074e0 <BSP_SD_GetCardState>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <SD_write+0x8a>
          {
            res = RES_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]
            break;
 80077b8:	e008      	b.n	80077cc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80077ba:	f7f9 ff3b 	bl	8001634 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d9ee      	bls.n	80077aa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	200004b8 	.word	0x200004b8

080077dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	603a      	str	r2, [r7, #0]
 80077e6:	71fb      	strb	r3, [r7, #7]
 80077e8:	460b      	mov	r3, r1
 80077ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80077f2:	4b25      	ldr	r3, [pc, #148]	; (8007888 <SD_ioctl+0xac>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <SD_ioctl+0x28>
 8007800:	2303      	movs	r3, #3
 8007802:	e03c      	b.n	800787e <SD_ioctl+0xa2>

  switch (cmd)
 8007804:	79bb      	ldrb	r3, [r7, #6]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d834      	bhi.n	8007874 <SD_ioctl+0x98>
 800780a:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <SD_ioctl+0x34>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	08007821 	.word	0x08007821
 8007814:	08007829 	.word	0x08007829
 8007818:	08007841 	.word	0x08007841
 800781c:	0800785b 	.word	0x0800785b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007826:	e028      	b.n	800787a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007828:	f107 030c 	add.w	r3, r7, #12
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fe67 	bl	8007500 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800783e:	e01c      	b.n	800787a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fe5b 	bl	8007500 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	b29a      	uxth	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007858:	e00f      	b.n	800787a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800785a:	f107 030c 	add.w	r3, r7, #12
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff fe4e 	bl	8007500 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	0a5a      	lsrs	r2, r3, #9
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007872:	e002      	b.n	800787a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007874:	2304      	movs	r3, #4
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800787a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800787e:	4618      	mov	r0, r3
 8007880:	3730      	adds	r7, #48	; 0x30
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000009 	.word	0x20000009

0800788c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007890:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <BSP_SD_WriteCpltCallback+0x14>)
 8007892:	2201      	movs	r2, #1
 8007894:	601a      	str	r2, [r3, #0]
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	200004b8 	.word	0x200004b8

080078a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <BSP_SD_ReadCpltCallback+0x14>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	200004bc 	.word	0x200004bc

080078bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078d4:	7a5b      	ldrb	r3, [r3, #9]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d131      	bne.n	8007940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078dc:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078de:	7a5b      	ldrb	r3, [r3, #9]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078e6:	2100      	movs	r1, #0
 80078e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078ec:	7a5b      	ldrb	r3, [r3, #9]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	4a17      	ldr	r2, [pc, #92]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 80078fc:	7a5b      	ldrb	r3, [r3, #9]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 8007904:	4413      	add	r3, r2
 8007906:	79fa      	ldrb	r2, [r7, #7]
 8007908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 800790c:	7a5b      	ldrb	r3, [r3, #9]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	b2d1      	uxtb	r1, r2
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <FATFS_LinkDriverEx+0x94>)
 8007916:	7251      	strb	r1, [r2, #9]
 8007918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800791a:	7dbb      	ldrb	r3, [r7, #22]
 800791c:	3330      	adds	r3, #48	; 0x30
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	3301      	adds	r3, #1
 8007928:	223a      	movs	r2, #58	; 0x3a
 800792a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3302      	adds	r3, #2
 8007930:	222f      	movs	r2, #47	; 0x2f
 8007932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3303      	adds	r3, #3
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	200004c0 	.word	0x200004c0

08007954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800795e:	2200      	movs	r2, #0
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ffaa 	bl	80078bc <FATFS_LinkDriverEx>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f000 f820 	bl	80079cc <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	08007a20 	.word	0x08007a20
 80079b0:	08007a20 	.word	0x08007a20
 80079b4:	08007a20 	.word	0x08007a20
 80079b8:	08007a24 	.word	0x08007a24

080079bc <memset>:
 80079bc:	4402      	add	r2, r0
 80079be:	4603      	mov	r3, r0
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d100      	bne.n	80079c6 <memset+0xa>
 80079c4:	4770      	bx	lr
 80079c6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ca:	e7f9      	b.n	80079c0 <memset+0x4>

080079cc <_init>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr

080079d8 <_fini>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr
