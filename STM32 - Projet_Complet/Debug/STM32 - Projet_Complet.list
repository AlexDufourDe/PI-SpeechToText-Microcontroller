
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e580  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a00  0800e780  0800e780  0001e780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022180  08022180  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  08022180  08022180  00032180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022188  08022188  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022188  08022188  00032188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802218c  0802218c  0003218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08022190  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018c18  20000070  08022200  00040070  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20018c88  08022200  00048c88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d25  00000000  00000000  0004009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d21  00000000  00000000  00063dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00069ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0006b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000364ae  00000000  00000000  0006cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1a7  00000000  00000000  000a31d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012aa08  00000000  00000000  000cd37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  001f7d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f74  00000000  00000000  001f7e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  001fedb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e768 	.word	0x0800e768

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800e768 	.word	0x0800e768

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC1_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC1_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC1_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC1_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC1_Init+0x98>)
 8000706:	f001 ffd1 	bl	80026ac <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 fdac 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_ADC1_Init+0xa4>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC1_Init+0x98>)
 8000726:	f002 f805 	bl	8002734 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 fd9c 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001
 8000748:	10000012 	.word	0x10000012

0800074c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_ADC_MspInit+0x38>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10b      	bne.n	8000776 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a09      	ldr	r2, [pc, #36]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40012000 	.word	0x40012000
 8000788:	40023800 	.word	0x40023800

0800078c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_CRC_Init+0x3c>)
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <MX_CRC_Init+0x40>)
 8000794:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_CRC_Init+0x3c>)
 8000798:	2200      	movs	r2, #0
 800079a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_CRC_Init+0x3c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007b6:	f002 fb1f 	bl	8002df8 <HAL_CRC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007c0:	f000 fd54 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000d4 	.word	0x200000d4
 80007cc:	40023000 	.word	0x40023000

080007d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_CRC_MspInit+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023000 	.word	0x40023000
 800080c:	40023800 	.word	0x40023800

08000810 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000814:	4b63      	ldr	r3, [pc, #396]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000816:	4a64      	ldr	r2, [pc, #400]	; (80009a8 <MX_DFSDM1_Init+0x198>)
 8000818:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800081a:	4b62      	ldr	r3, [pc, #392]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000820:	4b60      	ldr	r3, [pc, #384]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000822:	2201      	movs	r2, #1
 8000824:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000828:	2201      	movs	r2, #1
 800082a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082c:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000832:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000834:	2200      	movs	r2, #0
 8000836:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000838:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800083a:	2200      	movs	r2, #0
 800083c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800084c:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800084e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000852:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000854:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000856:	22b0      	movs	r2, #176	; 0xb0
 8000858:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800085c:	2201      	movs	r2, #1
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000860:	4850      	ldr	r0, [pc, #320]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000862:	f002 fc73 	bl	800314c <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000866:	4b51      	ldr	r3, [pc, #324]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000868:	4a51      	ldr	r2, [pc, #324]	; (80009b0 <MX_DFSDM1_Init+0x1a0>)
 800086a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800086c:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000874:	2201      	movs	r2, #1
 8000876:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000878:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800087a:	2201      	movs	r2, #1
 800087c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800087e:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000886:	2201      	movs	r2, #1
 8000888:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800088c:	2200      	movs	r2, #0
 800088e:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000896:	4b45      	ldr	r3, [pc, #276]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089c:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008a0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008a4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008a8:	22b0      	movs	r2, #176	; 0xb0
 80008aa:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008b2:	483e      	ldr	r0, [pc, #248]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008b4:	f002 fc4a 	bl	800314c <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008b8:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <MX_DFSDM1_Init+0x1a8>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800090a:	482a      	ldr	r0, [pc, #168]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 800090c:	f002 fb5e 	bl	8002fcc <HAL_DFSDM_ChannelInit>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000916:	f000 fca9 	bl	800126c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800091c:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_DFSDM1_Init+0x1b0>)
 800091e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000922:	2201      	movs	r2, #1
 8000924:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000930:	2204      	movs	r2, #4
 8000932:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800094e:	2204      	movs	r2, #4
 8000950:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800095a:	220a      	movs	r2, #10
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000966:	2202      	movs	r2, #2
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800096c:	f002 fb2e 	bl	8002fcc <HAL_DFSDM_ChannelInit>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000976:	f000 fc79 	bl	800126c <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800097a:	2201      	movs	r2, #1
 800097c:	4911      	ldr	r1, [pc, #68]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000980:	f002 fcbe 	bl	8003300 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000984:	490f      	ldr	r1, [pc, #60]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000988:	f002 fd00 	bl	800338c <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800098c:	2201      	movs	r2, #1
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000992:	f002 fcb5 	bl	8003300 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 8000996:	2101      	movs	r1, #1
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800099a:	f002 fcf7 	bl	800338c <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	40017500 	.word	0x40017500
 80009ac:	2000014c 	.word	0x2000014c
 80009b0:	40017580 	.word	0x40017580
 80009b4:	200001a0 	.word	0x200001a0
 80009b8:	40017400 	.word	0x40017400
 80009bc:	200001d8 	.word	0x200001d8
 80009c0:	40017420 	.word	0x40017420
 80009c4:	00010002 	.word	0x00010002

080009c8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80009e0:	4b63      	ldr	r3, [pc, #396]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d145      	bne.n	8000a74 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009e8:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80009f2:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10b      	bne.n	8000a12 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a5e      	ldr	r2, [pc, #376]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a58      	ldr	r2, [pc, #352]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	484d      	ldr	r0, [pc, #308]	; (8000b7c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a46:	f003 f9f3 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4845      	ldr	r0, [pc, #276]	; (8000b7c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a66:	f003 f9e3 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a3f      	ldr	r2, [pc, #252]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a72:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d137      	bne.n	8000aee <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a80:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000abe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ac6:	482f      	ldr	r0, [pc, #188]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac8:	f002 fe0c 	bl	80036e4 <HAL_DMA_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000ad2:	f000 fbcb 	bl	800126c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d137      	bne.n	8000b68 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000afc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b28:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b38:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b42:	f002 fdcf 	bl	80036e4 <HAL_DMA_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000b4c:	f000 fb8e 	bl	800126c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002d4 	.word	0x200002d4
 8000b74:	200002d0 	.word	0x200002d0
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40017500 	.word	0x40017500
 8000b84:	20000210 	.word	0x20000210
 8000b88:	40026410 	.word	0x40026410
 8000b8c:	40017580 	.word	0x40017580
 8000b90:	20000270 	.word	0x20000270
 8000b94:	40026488 	.word	0x40026488

08000b98 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d145      	bne.n	8000c44 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10b      	bne.n	8000be2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c16:	f003 f90b 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c36:	f003 f8fb 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a02      	ldr	r2, [pc, #8]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c42:	6013      	str	r3, [r2, #0]
  }
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002d4 	.word	0x200002d4
 8000c50:	200002d0 	.word	0x200002d0
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f002 f883 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f002 f89c 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2039      	movs	r0, #57	; 0x39
 8000c90:	f002 f87b 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c94:	2039      	movs	r0, #57	; 0x39
 8000c96:	f002 f894 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	203b      	movs	r0, #59	; 0x3b
 8000ca0:	f002 f873 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ca4:	203b      	movs	r0, #59	; 0x3b
 8000ca6:	f002 f88c 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2044      	movs	r0, #68	; 0x44
 8000cb0:	f002 f86b 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cb4:	2044      	movs	r0, #68	; 0x44
 8000cb6:	f002 f884 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2045      	movs	r0, #69	; 0x45
 8000cc0:	f002 f863 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cc4:	2045      	movs	r0, #69	; 0x45
 8000cc6:	f002 f87c 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a3e      	ldr	r2, [pc, #248]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a2c      	ldr	r2, [pc, #176]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dcc:	4826      	ldr	r0, [pc, #152]	; (8000e68 <MX_GPIO_Init+0x190>)
 8000dce:	f003 f9f3 	bl	80041b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210b      	movs	r1, #11
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x194>)
 8000dd8:	f003 f9ee 	bl	80041b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	481f      	ldr	r0, [pc, #124]	; (8000e70 <MX_GPIO_Init+0x198>)
 8000df4:	f003 f81c 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x190>)
 8000e12:	f003 f80d 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000e16:	230b      	movs	r3, #11
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <MX_GPIO_Init+0x194>)
 8000e2e:	f002 ffff 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x19c>)
 8000e48:	f002 fff2 	bl	8003e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f001 ff9a 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f001 ffb3 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

}
 8000e5c:	bf00      	nop
 8000e5e:	3738      	adds	r7, #56	; 0x38
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40022400 	.word	0x40022400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020400 	.word	0x40020400

08000e78 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7c:	f3bf 8f4f 	dsb	sy
}
 8000e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e82:	f3bf 8f6f 	isb	sy
}
 8000e86:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e96:	f3bf 8f6f 	isb	sy
}
 8000e9a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eae:	f3bf 8f6f 	isb	sy
}
 8000eb2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed2:	f3bf 8f4f 	dsb	sy
}
 8000ed6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ede:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0b5b      	lsrs	r3, r3, #13
 8000ee4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ee8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ef2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	015a      	lsls	r2, r3, #5
 8000ef8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000efc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f02:	4911      	ldr	r1, [pc, #68]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ef      	bne.n	8000ef4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	60fa      	str	r2, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e5      	bne.n	8000eea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1e:	f3bf 8f4f 	dsb	sy
}
 8000f22:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09c      	sub	sp, #112	; 0x70
 8000f50:	af00      	add	r7, sp, #0
	char directory_name[35];
	char file_path [35];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f52:	f7ff ff91 	bl	8000e78 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f56:	f7ff ffb5 	bl	8000ec4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f001 fb25 	bl	80025a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f8e3 	bl	8001128 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f62:	f000 f953 	bl	800120c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f7ff feb7 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6a:	f7ff fe77 	bl	8000c5c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f6e:	f7ff fc4f 	bl	8000810 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000f72:	f000 fa1b 	bl	80013ac <MX_SAI2_Init>
  MX_ADC1_Init();
 8000f76:	f7ff fb95 	bl	80006a4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000f7a:	f000 fd29 	bl	80019d0 <MX_UART4_Init>
  MX_CRC_Init();
 8000f7e:	f7ff fc05 	bl	800078c <MX_CRC_Init>
  MX_RTC_Init();
 8000f82:	f000 f979 	bl	8001278 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f86:	f000 fb1b 	bl	80015c0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f8a:	f007 fdc7 	bl	8008b1c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f92:	4959      	ldr	r1, [pc, #356]	; (80010f8 <main+0x1ac>)
 8000f94:	4859      	ldr	r0, [pc, #356]	; (80010fc <main+0x1b0>)
 8000f96:	f002 fa29 	bl	80033ec <HAL_DFSDM_FilterRegularStart_DMA>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x58>
    {
      Error_Handler();
 8000fa0:	f000 f964 	bl	800126c <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa8:	4955      	ldr	r1, [pc, #340]	; (8001100 <main+0x1b4>)
 8000faa:	4856      	ldr	r0, [pc, #344]	; (8001104 <main+0x1b8>)
 8000fac:	f002 fa1e 	bl	80033ec <HAL_DFSDM_FilterRegularStart_DMA>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <main+0x6e>
    {
      Error_Handler();
 8000fb6:	f000 f959 	bl	800126c <Error_Handler>
    }


	SDInit();
 8000fba:	f00a fcff 	bl	800b9bc <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4850      	ldr	r0, [pc, #320]	; (8001108 <main+0x1bc>)
 8000fc6:	f003 f8f7 	bl	80041b8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2101      	movs	r1, #1
 8000fce:	484f      	ldr	r0, [pc, #316]	; (800110c <main+0x1c0>)
 8000fd0:	f003 f8f2 	bl	80041b8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	484c      	ldr	r0, [pc, #304]	; (800110c <main+0x1c0>)
 8000fda:	f003 f8ed 	bl	80041b8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	484a      	ldr	r0, [pc, #296]	; (800110c <main+0x1c0>)
 8000fe4:	f003 f8e8 	bl	80041b8 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000fe8:	f00a fabc 	bl	800b564 <Preprocessing_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for the temper button to be pressed
	  while (!recording);
 8000fec:	bf00      	nop
 8000fee:	4b48      	ldr	r3, [pc, #288]	; (8001110 <main+0x1c4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0fb      	beq.n	8000fee <main+0xa2>
	  // debouncing
	  HAL_Delay(250);
 8000ff6:	20fa      	movs	r0, #250	; 0xfa
 8000ff8:	f001 fb34 	bl	8002664 <HAL_Delay>
	  recording = 1;
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <main+0x1c4>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 8001002:	4b44      	ldr	r3, [pc, #272]	; (8001114 <main+0x1c8>)
 8001004:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001008:	461a      	mov	r2, r3
 800100a:	2300      	movs	r3, #0
 800100c:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 8001010:	4b40      	ldr	r3, [pc, #256]	; (8001114 <main+0x1c8>)
 8001012:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
	  //LED0 on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	4839      	ldr	r0, [pc, #228]	; (8001108 <main+0x1bc>)
 8001024:	f003 f8c8 	bl	80041b8 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8001028:	e001      	b.n	800102e <main+0xe2>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 800102a:	f00a fbab 	bl	800b784 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <main+0x1c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <main+0xf8>
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <main+0x1c8>)
 8001038:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800103c:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f2      	beq.n	800102a <main+0xde>
	  }
	  HAL_Delay(250);
 8001044:	20fa      	movs	r0, #250	; 0xfa
 8001046:	f001 fb0d 	bl	8002664 <HAL_Delay>
	  recording = 0;
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <main+0x1c4>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	482c      	ldr	r0, [pc, #176]	; (8001108 <main+0x1bc>)
 8001058:	f003 f8ae 	bl	80041b8 <HAL_GPIO_WritePin>
	  //read date to folder name
	  get_date((char*)directory_name);
 800105c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001060:	4618      	mov	r0, r3
 8001062:	f00a fc51 	bl	800b908 <get_date>
	  //creates a folder with the date
	  f_mkdir ((char*)(directory_name));
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f00a f917 	bl	800b29e <f_mkdir>
	  //read time and date
	  get_time_filename((char*)file_name);
 8001070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001074:	4618      	mov	r0, r3
 8001076:	f00a fc69 	bl	800b94c <get_time_filename>


//////////////////////////////////////
	  //getting the mel spectrogram
	  AudioPreprocessing_RunMethod4(BufferCtl.pcm_buff, (uint32_t*)spectrogram_output, BufferCtl.fptr);
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <main+0x1c8>)
 800107c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001080:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8001084:	461a      	mov	r2, r3
 8001086:	4924      	ldr	r1, [pc, #144]	; (8001118 <main+0x1cc>)
 8001088:	4822      	ldr	r0, [pc, #136]	; (8001114 <main+0x1c8>)
 800108a:	f00a faf3 	bl	800b674 <AudioPreprocessing_RunMethod4>
	  sprintf((char*)file_path,"%s/%s",directory_name, file_name);
 800108e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001092:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001096:	1d38      	adds	r0, r7, #4
 8001098:	4920      	ldr	r1, [pc, #128]	; (800111c <main+0x1d0>)
 800109a:	f00c f82f 	bl	800d0fc <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00a fc9f 	bl	800b9e4 <createFile>
	  writeToFile((uint8_t*)spectrogram_output, 4*MEL_SPEC_SIZE);
 80010a6:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <main+0x1cc>)
 80010ac:	f00a fcb2 	bl	800ba14 <writeToFile>
	  SDclose();
 80010b0:	f00a fcc4 	bl	800ba3c <SDclose>
//////////////////////////////////////

	  sprintf((char*)file_path,"%s/%s.wav",directory_name, file_name);
 80010b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010bc:	1d38      	adds	r0, r7, #4
 80010be:	4918      	ldr	r1, [pc, #96]	; (8001120 <main+0x1d4>)
 80010c0:	f00c f81c 	bl	800d0fc <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00a fc8c 	bl	800b9e4 <createFile>
	  //creates the header and saves audio file
	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 80010cc:	4915      	ldr	r1, [pc, #84]	; (8001124 <main+0x1d8>)
 80010ce:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010d2:	f00a fcdb 	bl	800ba8c <WavProcess_EncInit>
	  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 80010d6:	212c      	movs	r1, #44	; 0x2c
 80010d8:	4812      	ldr	r0, [pc, #72]	; (8001124 <main+0x1d8>)
 80010da:	f00a fc9b 	bl	800ba14 <writeToFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <main+0x1c8>)
 80010e0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80010e4:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80010e8:	4619      	mov	r1, r3
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <main+0x1c8>)
 80010ec:	f00a fc92 	bl	800ba14 <writeToFile>
	  SDclose();
 80010f0:	f00a fca4 	bl	800ba3c <SDclose>
  {
 80010f4:	e77a      	b.n	8000fec <main+0xa0>
 80010f6:	bf00      	nop
 80010f8:	200022dc 	.word	0x200022dc
 80010fc:	2000014c 	.word	0x2000014c
 8001100:	200002dc 	.word	0x200002dc
 8001104:	200000f8 	.word	0x200000f8
 8001108:	40022000 	.word	0x40022000
 800110c:	40022400 	.word	0x40022400
 8001110:	200002d8 	.word	0x200002d8
 8001114:	2000910c 	.word	0x2000910c
 8001118:	20010e20 	.word	0x20010e20
 800111c:	0800e780 	.word	0x0800e780
 8001120:	0800e788 	.word	0x0800e788
 8001124:	20018c4c 	.word	0x20018c4c

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2234      	movs	r2, #52	; 0x34
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f00b fee8 	bl	800cf0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <SystemClock_Config+0xdc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <SystemClock_Config+0xdc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <SystemClock_Config+0xdc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <SystemClock_Config+0xe0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <SystemClock_Config+0xe0>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <SystemClock_Config+0xe0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800117c:	2309      	movs	r3, #9
 800117e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001186:	2301      	movs	r3, #1
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001194:	2319      	movs	r3, #25
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001198:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011a2:	2309      	movs	r3, #9
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 f884 	bl	80042bc <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ba:	f000 f857 	bl	800126c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011be:	f003 f82d 	bl	800421c <HAL_PWREx_EnableOverDrive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011c8:	f000 f850 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2107      	movs	r1, #7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fb14 	bl	8004818 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011f6:	f000 f839 	bl	800126c <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a4      	sub	sp, #144	; 0x90
 8001210:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2290      	movs	r2, #144	; 0x90
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00b fe77 	bl	800cf0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <PeriphCommonClock_Config+0x5c>)
 8001220:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8001222:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001226:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 800122c:	2306      	movs	r3, #6
 800122e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001234:	2306      	movs	r3, #6
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800123c:	2300      	movs	r3, #0
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fcc7 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800125c:	f000 f806 	bl	800126c <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3790      	adds	r7, #144	; 0x90
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	18300000 	.word	0x18300000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_RTC_Init+0xd0>)
 8001292:	4a2e      	ldr	r2, [pc, #184]	; (800134c <MX_RTC_Init+0xd4>)
 8001294:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_RTC_Init+0xd0>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_RTC_Init+0xd0>)
 800129e:	227f      	movs	r2, #127	; 0x7f
 80012a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_RTC_Init+0xd0>)
 80012a4:	22ff      	movs	r2, #255	; 0xff
 80012a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_RTC_Init+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_RTC_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_RTC_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ba:	4823      	ldr	r0, [pc, #140]	; (8001348 <MX_RTC_Init+0xd0>)
 80012bc:	f004 fa2c 	bl	8005718 <HAL_RTC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012c6:	f7ff ffd1 	bl	800126c <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 80012ca:	2100      	movs	r1, #0
 80012cc:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_RTC_Init+0xd0>)
 80012ce:	f004 fd4d 	bl	8005d6c <HAL_RTCEx_BKUPRead>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80012d8:	4293      	cmp	r3, r2
 80012da:	d02e      	beq.n	800133a <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 80012dc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80012e0:	2100      	movs	r1, #0
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <MX_RTC_Init+0xd0>)
 80012e4:	f004 fd28 	bl	8005d38 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 80012e8:	2314      	movs	r3, #20
 80012ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 80012ec:	2329      	movs	r3, #41	; 0x29
 80012ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 80012f0:	2300      	movs	r3, #0
 80012f2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_RTC_Init+0xd0>)
 8001304:	f004 fa8c 	bl	8005820 <HAL_RTC_SetTime>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800130e:	f7ff ffad 	bl	800126c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001312:	2301      	movs	r3, #1
 8001314:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8001316:	2301      	movs	r3, #1
 8001318:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 800131a:	2323      	movs	r3, #35	; 0x23
 800131c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 800131e:	2323      	movs	r3, #35	; 0x23
 8001320:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_RTC_Init+0xd0>)
 800132a:	f004 fb71 	bl	8005a10 <HAL_RTC_SetDate>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001334:	f7ff ff9a 	bl	800126c <Error_Handler>
  }
  return;
 8001338:	e001      	b.n	800133e <MX_RTC_Init+0xc6>
			return;
 800133a:	bf00      	nop
 800133c:	e000      	b.n	8001340 <MX_RTC_Init+0xc8>
  return;
 800133e:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200042ec 	.word	0x200042ec
 800134c:	40002800 	.word	0x40002800

08001350 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0a6      	sub	sp, #152	; 0x98
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	2290      	movs	r2, #144	; 0x90
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fdd3 	bl	800cf0c <memset>
  if(rtcHandle->Instance==RTC)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_RTC_MspInit+0x54>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d114      	bne.n	800139a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001370:	2320      	movs	r3, #32
 8001372:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fc30 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800138a:	f7ff ff6f 	bl	800126c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RTC_MspInit+0x58>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <HAL_RTC_MspInit+0x58>)
 8001394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3798      	adds	r7, #152	; 0x98
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40002800 	.word	0x40002800
 80013a8:	40023800 	.word	0x40023800

080013ac <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_SAI2_Init+0xb0>)
 80013b2:	4a2b      	ldr	r2, [pc, #172]	; (8001460 <MX_SAI2_Init+0xb4>)
 80013b4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_SAI2_Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SAI2_Init+0xb0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_SAI2_Init+0xb0>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_SAI2_Init+0xb0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_SAI2_Init+0xb0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SAI2_Init+0xb0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_SAI2_Init+0xb0>)
 80013dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SAI2_Init+0xb0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SAI2_Init+0xb0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_SAI2_Init+0xb0>)
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <MX_SAI2_Init+0xb8>)
 80013f2:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SAI2_Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_SAI2_Init+0xb0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SAI2_Init+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_SAI2_Init+0xb0>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_SAI2_Init+0xb0>)
 800140e:	2220      	movs	r2, #32
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SAI2_Init+0xb0>)
 8001414:	2210      	movs	r2, #16
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_SAI2_Init+0xb0>)
 800141a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SAI2_Init+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_SAI2_Init+0xb0>)
 8001428:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SAI2_Init+0xb0>)
 8001430:	2200      	movs	r2, #0
 8001432:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SAI2_Init+0xb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SAI2_Init+0xb0>)
 800143c:	2202      	movs	r2, #2
 800143e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SAI2_Init+0xb0>)
 8001442:	2203      	movs	r2, #3
 8001444:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SAI2_Init+0xb0>)
 8001448:	f004 fca8 	bl	8005d9c <HAL_SAI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8001452:	f7ff ff0b 	bl	800126c <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000430c 	.word	0x2000430c
 8001460:	40015c24 	.word	0x40015c24
 8001464:	0002ee00 	.word	0x0002ee00

08001468 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <HAL_SAI_MspInit+0x138>)
 8001476:	4293      	cmp	r3, r2
 8001478:	f040 808e 	bne.w	8001598 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_SAI_MspInit+0x13c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10b      	bne.n	800149c <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001484:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <HAL_SAI_MspInit+0x140>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	4a47      	ldr	r2, [pc, #284]	; (80015a8 <HAL_SAI_MspInit+0x140>)
 800148a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148e:	6453      	str	r3, [r2, #68]	; 0x44
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <HAL_SAI_MspInit+0x140>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_SAI_MspInit+0x13c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <HAL_SAI_MspInit+0x13c>)
 80014a4:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014b6:	230a      	movs	r3, #10
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	483a      	ldr	r0, [pc, #232]	; (80015ac <HAL_SAI_MspInit+0x144>)
 80014c2:	f002 fcb5 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014d8:	230a      	movs	r3, #10
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	4833      	ldr	r0, [pc, #204]	; (80015b0 <HAL_SAI_MspInit+0x148>)
 80014e4:	f002 fca4 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014f8:	230a      	movs	r3, #10
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	482c      	ldr	r0, [pc, #176]	; (80015b4 <HAL_SAI_MspInit+0x14c>)
 8001504:	f002 fc94 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001508:	2304      	movs	r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001518:	2308      	movs	r3, #8
 800151a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4824      	ldr	r0, [pc, #144]	; (80015b4 <HAL_SAI_MspInit+0x14c>)
 8001524:	f002 fc84 	bl	8003e30 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_SAI_MspInit+0x154>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001530:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 8001534:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001558:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001568:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001572:	f002 f8b7 	bl	80036e4 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 800157c:	f7ff fe76 	bl	800126c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001584:	671a      	str	r2, [r3, #112]	; 0x70
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001590:	66da      	str	r2, [r3, #108]	; 0x6c
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40015c24 	.word	0x40015c24
 80015a4:	200043f0 	.word	0x200043f0
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	20004390 	.word	0x20004390
 80015bc:	40026428 	.word	0x40026428

080015c0 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <MX_SDMMC1_SD_Init+0x3c>)
 80015c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	200043f4 	.word	0x200043f4
 80015fc:	40012c00 	.word	0x40012c00

08001600 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ae      	sub	sp, #184	; 0xb8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2290      	movs	r2, #144	; 0x90
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00b fc73 	bl	800cf0c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a74      	ldr	r2, [pc, #464]	; (80017fc <HAL_SD_MspInit+0x1fc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	f040 80e0 	bne.w	80017f2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001632:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001636:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f003 facb 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001654:	f7ff fe0a 	bl	800126c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_SD_MspInit+0x200>)
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <HAL_SD_MspInit+0x200>)
 800165e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001662:	6453      	str	r3, [r2, #68]	; 0x44
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	4a62      	ldr	r2, [pc, #392]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6313      	str	r3, [r2, #48]	; 0x30
 800167c:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_SD_MspInit+0x200>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_SD_MspInit+0x200>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a5c      	ldr	r2, [pc, #368]	; (8001800 <HAL_SD_MspInit+0x200>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80016a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016ba:	230c      	movs	r3, #12
 80016bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c4:	4619      	mov	r1, r3
 80016c6:	484f      	ldr	r0, [pc, #316]	; (8001804 <HAL_SD_MspInit+0x204>)
 80016c8:	f002 fbb2 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016e4:	230c      	movs	r3, #12
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4845      	ldr	r0, [pc, #276]	; (8001808 <HAL_SD_MspInit+0x208>)
 80016f2:	f002 fb9d 	bl	8003e30 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <HAL_SD_MspInit+0x20c>)
 80016f8:	4a45      	ldr	r2, [pc, #276]	; (8001810 <HAL_SD_MspInit+0x210>)
 80016fa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_SD_MspInit+0x20c>)
 80016fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001702:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_SD_MspInit+0x20c>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001716:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_SD_MspInit+0x20c>)
 800171a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800171e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_SD_MspInit+0x20c>)
 800172a:	2220      	movs	r2, #32
 800172c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001736:	2204      	movs	r2, #4
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_SD_MspInit+0x20c>)
 800173c:	2203      	movs	r2, #3
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_SD_MspInit+0x20c>)
 800174a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001750:	482e      	ldr	r0, [pc, #184]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001752:	f001 ffc7 	bl	80036e4 <HAL_DMA_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 800175c:	f7ff fd86 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_SD_MspInit+0x214>)
 800176e:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_SD_MspInit+0x218>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001778:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_SD_MspInit+0x214>)
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001794:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001798:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017b2:	2203      	movs	r2, #3
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017c8:	f001 ff8c 	bl	80036e4 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80017d2:	f7ff fd4b 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2031      	movs	r0, #49	; 0x31
 80017e8:	f001 facf 	bl	8002d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017ec:	2031      	movs	r0, #49	; 0x31
 80017ee:	f001 fae8 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80017f2:	bf00      	nop
 80017f4:	37b8      	adds	r7, #184	; 0xb8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	20004478 	.word	0x20004478
 8001810:	400264a0 	.word	0x400264a0
 8001814:	200044d8 	.word	0x200044d8
 8001818:	40026458 	.word	0x40026458

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x44>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x44>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x44>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x44>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x44>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x44>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 feb8 	bl	8002624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80018bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c0:	f002 fc94 	bl	80041ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <SDMMC1_IRQHandler+0x10>)
 80018ce:	f004 fe9b 	bl	8006608 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200043f4 	.word	0x200043f4

080018dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream0_IRQHandler+0x10>)
 80018e2:	f002 f82f 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000210 	.word	0x20000210

080018f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA2_Stream1_IRQHandler+0x10>)
 80018f6:	f002 f825 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20004390 	.word	0x20004390

08001904 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA2_Stream3_IRQHandler+0x10>)
 800190a:	f002 f81b 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200044d8 	.word	0x200044d8

08001918 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA2_Stream5_IRQHandler+0x10>)
 800191e:	f002 f811 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000270 	.word	0x20000270

0800192c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream6_IRQHandler+0x10>)
 8001932:	f002 f807 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20004478 	.word	0x20004478

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f00b fa94 	bl	800ce9c <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20080000 	.word	0x20080000
 80019a0:	00000800 	.word	0x00000800
 80019a4:	20004538 	.word	0x20004538
 80019a8:	20018c88 	.word	0x20018c88

080019ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_UART4_Init+0x58>)
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <MX_UART4_Init+0x5c>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_UART4_Init+0x58>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_UART4_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_UART4_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_UART4_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_UART4_Init+0x58>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_UART4_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a14:	f005 fea3 	bl	800775e <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f7ff fc25 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000453c 	.word	0x2000453c
 8001a2c:	40004c00 	.word	0x40004c00

08001a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0ae      	sub	sp, #184	; 0xb8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2290      	movs	r2, #144	; 0x90
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00b fa5b 	bl	800cf0c <memset>
  if(uartHandle->Instance==UART4)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_UART_MspInit+0xf4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d15d      	bne.n	8001b1c <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 f8b8 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a7a:	f7ff fbf7 	bl	800126c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4810      	ldr	r0, [pc, #64]	; (8001b2c <HAL_UART_MspInit+0xfc>)
 8001aec:	f002 f9a0 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001b18:	f002 f98a 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	37b8      	adds	r7, #184	; 0xb8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40004c00 	.word	0x40004c00
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40020000 	.word	0x40020000

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5e:	f7ff ff25 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f00b f9a1 	bl	800cea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff f9f1 	bl	8000f4c <main>
  bx  lr    
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b78:	08022190 	.word	0x08022190
  ldr r2, =_sbss
 8001b7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b80:	20018c88 	.word	0x20018c88

08001b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC_IRQHandler>

08001b86 <buf_to_float>:
 * @param      *pInSignal  points to input signal buffer
 * @param      *pOutSignal points to output signal buffer
 * @param      len         signal length
 */
void buf_to_float(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b087      	sub	sp, #28
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e012      	b.n	8001bbe <buf_to_float+0x38>
  {
    pOutSignal[i] = (float32_t) pInSignal[i];
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	4413      	add	r3, r2
 8001bac:	ee07 1a90 	vmov	s15, r1
 8001bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3e8      	bcc.n	8001b98 <buf_to_float+0x12>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f00a fe16 	bl	800c82c <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	18d0      	adds	r0, r2, r3
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2100      	movs	r1, #0
 8001c12:	f00b f97b 	bl	800cf0c <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6a3a      	ldr	r2, [r7, #32]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	f00a f948 	bl	800beb4 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	3304      	adds	r3, #4
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4c:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f103 0008 	add.w	r0, r3, #8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1d19      	adds	r1, r3, #4
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	461a      	mov	r2, r3
 8001c68:	f00a fd88 	bl	800c77c <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d12c      	bne.n	8001cdc <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	e023      	b.n	8001cd0 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	440b      	add	r3, r1
 8001c9a:	617a      	str	r2, [r7, #20]
 8001c9c:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001c9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	db09      	blt.n	8001cc0 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001cac:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cb0:	f00b ff2e 	bl	800db10 <sqrtf>
 8001cb4:	eef0 7a40 	vmov.f32	s15, s0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001cbe:	e004      	b.n	8001cca <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001cc8:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	3301      	adds	r3, #1
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d3d5      	bcc.n	8001c88 <SpectrogramColumn+0xb4>
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3730      	adds	r7, #48	; 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b08f      	sub	sp, #60	; 0x3c
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff5a 	bl	8001bd4 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fa49 	bl	80021c2 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
 8001d34:	e012      	b.n	8001d5c <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	edd3 6a00 	vldr	s13, [r3]
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d52:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3301      	adds	r3, #1
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3e8      	bcc.n	8001d36 <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
 8001d68:	e014      	b.n	8001d94 <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d806      	bhi.n	8001d8e <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d8c:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	3301      	adds	r3, #1
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
 8001d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e6      	bcc.n	8001d6a <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d14a      	bne.n	8001e3a <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da8:	e018      	b.n	8001ddc <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	f00b fe7b 	bl	800dab4 <log10f>
 8001dbe:	eef0 7a40 	vmov.f32	s15, s0
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd2:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3e2      	bcc.n	8001daa <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de8:	e022      	b.n	8001e30 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	ed93 7a00 	vldr	s14, [r3]
 8001df6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dfa:	eef1 7a67 	vneg.f32	s15, s15
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d504      	bpl.n	8001e12 <LogMelSpectrogramColumn+0x12e>
 8001e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0c:	eef1 7a67 	vneg.f32	s15, s15
 8001e10:	e005      	b.n	8001e1e <LogMelSpectrogramColumn+0x13a>
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d8      	bcc.n	8001dea <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8001e38:	e01b      	b.n	8001e72 <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	e014      	b.n	8001e6a <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	18d4      	adds	r4, r2, r3
 8001e54:	eeb0 0a67 	vmov.f32	s0, s15
 8001e58:	f00b fdc6 	bl	800d9e8 <logf>
 8001e5c:	eef0 7a40 	vmov.f32	s15, s0
 8001e60:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3301      	adds	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3e6      	bcc.n	8001e40 <LogMelSpectrogramColumn+0x15c>
}
 8001e72:	bf00      	nop
 8001e74:	373c      	adds	r7, #60	; 0x3c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}

08001e7a <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b0a4      	sub	sp, #144	; 0x90
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	330c      	adds	r3, #12
 8001eb0:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001ed0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001eda:	f000 f9c7 	bl	800226c <MelScale>
 8001ede:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001ee2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001eec:	f000 f9be 	bl	800226c <MelScale>
 8001ef0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001ef4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ef8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001efc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f02:	3301      	adds	r3, #1
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f10:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f36:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f44:	e133      	b.n	80021ae <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d044      	beq.n	8001fd6 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	f000 f9ec 	bl	800234c <InverseMelScale>
 8001f74:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8001f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f98:	4618      	mov	r0, r3
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	f000 f9d5 	bl	800234c <InverseMelScale>
 8001fa2:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8001fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa8:	3302      	adds	r3, #2
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fcc:	f000 f9be 	bl	800234c <InverseMelScale>
 8001fd0:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8001fd4:	e02e      	b.n	8002034 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 8001fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8001ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002000:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002008:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8002014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002016:	3302      	adds	r3, #2
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002020:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002028:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800202c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002030:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8002034:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002038:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8002044:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002048:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800204c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002050:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8002064:	2300      	movs	r3, #0
 8002066:	667b      	str	r3, [r7, #100]	; 0x64
 8002068:	e098      	b.n	800219c <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 800206a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8002070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002086:	e011      	b.n	80020ac <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8002088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800209e:	4618      	mov	r0, r3
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	f000 f8e2 	bl	800226c <MelScale>
 80020a8:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 80020ac:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80020b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b8:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 80020bc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c8:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 80020cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80020d0:	eef1 6a67 	vneg.f32	s13, s15
 80020d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020dc:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 80020e0:	edd7 6a06 	vldr	s13, [r7, #24]
 80020e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80020e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ec:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 80020f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d502      	bpl.n	8002108 <MelFilterbank_Init+0x28e>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	673b      	str	r3, [r7, #112]	; 0x70
 8002106:	e001      	b.n	800210c <MelFilterbank_Init+0x292>
      else min = upper;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 800210c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	dd2f      	ble.n	800217a <MelFilterbank_Init+0x300>
      {
        weight = min;
 800211a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211c:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 800211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8002124:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002128:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800212c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002130:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002138:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 800213c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002140:	edd7 7a03 	vldr	s15, [r7, #12]
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 800214c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002150:	1d1a      	adds	r2, r3, #4
 8002152:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002156:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002158:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 800215a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002162:	d102      	bne.n	800216a <MelFilterbank_Init+0x2f0>
          start_index = j;
 8002164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800217a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002180:	4413      	add	r3, r2
 8002182:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002186:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8002188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800218e:	4413      	add	r3, r2
 8002190:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002194:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8002196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002198:	3301      	adds	r3, #1
 800219a:	667b      	str	r3, [r7, #100]	; 0x64
 800219c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f4ff af61 	bcc.w	800206a <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	3301      	adds	r3, #1
 80021ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80021b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b2:	429a      	cmp	r2, r3
 80021b4:	f4ff aec7 	bcc.w	8001f46 <MelFilterbank_Init+0xcc>
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3790      	adds	r7, #144	; 0x90
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b08d      	sub	sp, #52	; 0x34
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e034      	b.n	8002256 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4413      	add	r3, r2
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800220a:	8a7b      	ldrh	r3, [r7, #18]
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	e015      	b.n	800223c <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	4413      	add	r3, r2
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	1d1a      	adds	r2, r3, #4
 8002220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	3301      	adds	r3, #1
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	8a3b      	ldrh	r3, [r7, #16]
 800223e:	6a3a      	ldr	r2, [r7, #32]
 8002240:	429a      	cmp	r2, r3
 8002242:	d9e5      	bls.n	8002210 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	3301      	adds	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	429a      	cmp	r2, r3
 800225c:	d3c6      	bcc.n	80021ec <MelFilterbank+0x2a>
  }
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	3734      	adds	r7, #52	; 0x34
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	ed87 0a01 	vstr	s0, [r7, #4]
 8002276:	4603      	mov	r3, r0
 8002278:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d042      	beq.n	8002306 <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <MelScale+0xcc>)
 8002288:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800228a:	ed97 7a01 	vldr	s14, [r7, #4]
 800228e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002292:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002296:	ed97 7a05 	vldr	s14, [r7, #20]
 800229a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <MelScale+0xd0>)
 80022a4:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 80022a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80022aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80022b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ba:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <MelScale+0xd4>)
 80022c0:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 80022c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	db15      	blt.n	8002300 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 80022d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022e0:	eeb0 0a66 	vmov.f32	s0, s13
 80022e4:	f00b fb80 	bl	800d9e8 <logf>
 80022e8:	eef0 6a40 	vmov.f32	s13, s0
 80022ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80022f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80022f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 8002300:	edd7 7a07 	vldr	s15, [r7, #28]
 8002304:	e013      	b.n	800232e <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 8002306:	ed97 7a01 	vldr	s14, [r7, #4]
 800230a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002344 <MelScale+0xd8>
 800230e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800231a:	eeb0 0a67 	vmov.f32	s0, s15
 800231e:	f00b fb63 	bl	800d9e8 <logf>
 8002322:	eef0 7a40 	vmov.f32	s15, s0
 8002326:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002348 <MelScale+0xdc>
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800232e:	eeb0 0a67 	vmov.f32	s0, s15
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	42855555 	.word	0x42855555
 800233c:	447a0000 	.word	0x447a0000
 8002340:	3d8ccdbb 	.word	0x3d8ccdbb
 8002344:	442f0000 	.word	0x442f0000
 8002348:	448ce000 	.word	0x448ce000

0800234c <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	ed87 0a01 	vstr	s0, [r7, #4]
 8002356:	4603      	mov	r3, r0
 8002358:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d042      	beq.n	80023e6 <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <InverseMelScale+0xcc>)
 8002368:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800236a:	ed97 7a05 	vldr	s14, [r7, #20]
 800236e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	ed97 7a06 	vldr	s14, [r7, #24]
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <InverseMelScale+0xd0>)
 8002384:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8002386:	ed97 7a04 	vldr	s14, [r7, #16]
 800238a:	edd7 7a06 	vldr	s15, [r7, #24]
 800238e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002392:	ed97 7a05 	vldr	s14, [r7, #20]
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <InverseMelScale+0xd4>)
 80023a0:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 80023a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80023a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	db15      	blt.n	80023e0 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 80023b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f00b fa98 	bl	800d900 <expf>
 80023d0:	eeb0 7a40 	vmov.f32	s14, s0
 80023d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023dc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 80023e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80023e4:	e013      	b.n	800240e <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 80023e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ea:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002424 <InverseMelScale+0xd8>
 80023ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023f2:	eeb0 0a47 	vmov.f32	s0, s14
 80023f6:	f00b fa83 	bl	800d900 <expf>
 80023fa:	eef0 7a40 	vmov.f32	s15, s0
 80023fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002406:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002428 <InverseMelScale+0xdc>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	42855555 	.word	0x42855555
 800241c:	447a0000 	.word	0x447a0000
 8002420:	3d8ccdbb 	.word	0x3d8ccdbb
 8002424:	448ce000 	.word	0x448ce000
 8002428:	442f0000 	.word	0x442f0000
 800242c:	00000000 	.word	0x00000000

08002430 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]

  switch (type)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d01c      	beq.n	8002482 <Window_Init+0x52>
 8002448:	2b02      	cmp	r3, #2
 800244a:	dc25      	bgt.n	8002498 <Window_Init+0x68>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <Window_Init+0x26>
 8002450:	2b01      	cmp	r3, #1
 8002452:	d00b      	beq.n	800246c <Window_Init+0x3c>
 8002454:	e020      	b.n	8002498 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 8002456:	ed9f 2b16 	vldr	d2, [pc, #88]	; 80024b0 <Window_Init+0x80>
 800245a:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800245e:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f837 	bl	80024d8 <cosine_sum_window_create>
      break;
 800246a:	e019      	b.n	80024a0 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800246c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 80024b0 <Window_Init+0x80>
 8002470:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80024b8 <Window_Init+0x88>
 8002474:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80024c0 <Window_Init+0x90>
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f82c 	bl	80024d8 <cosine_sum_window_create>
      break;
 8002480:	e00e      	b.n	80024a0 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8002482:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80024c8 <Window_Init+0x98>
 8002486:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800248a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80024d0 <Window_Init+0xa0>
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f821 	bl	80024d8 <cosine_sum_window_create>
      break;
 8002496:	e003      	b.n	80024a0 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249c:	617b      	str	r3, [r7, #20]
      break;
 800249e:	bf00      	nop
  }

  return status;
 80024a0:	697b      	ldr	r3, [r7, #20]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	f3af 8000 	nop.w
	...
 80024b8:	d70a3d71 	.word	0xd70a3d71
 80024bc:	3fdd70a3 	.word	0x3fdd70a3
 80024c0:	147ae148 	.word	0x147ae148
 80024c4:	3fe147ae 	.word	0x3fe147ae
 80024c8:	47ae147b 	.word	0x47ae147b
 80024cc:	3fb47ae1 	.word	0x3fb47ae1
 80024d0:	ae147ae1 	.word	0xae147ae1
 80024d4:	3fdae147 	.word	0x3fdae147

080024d8 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	ed2d 8b02 	vpush	{d8}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	61f8      	str	r0, [r7, #28]
 80024e4:	61b9      	str	r1, [r7, #24]
 80024e6:	ed87 0b04 	vstr	d0, [r7, #16]
 80024ea:	ed87 1b02 	vstr	d1, [r7, #8]
 80024ee:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	e043      	b.n	8002580 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002502:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002598 <cosine_sum_window_create+0xc0>
 8002506:	ee27 6b06 	vmul.f64	d6, d7, d6
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002514:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002518:	eeb0 0b45 	vmov.f64	d0, d5
 800251c:	f00b f9a4 	bl	800d868 <cos>
 8002520:	eeb0 6b40 	vmov.f64	d6, d0
 8002524:	ed97 7b02 	vldr	d7, [r7, #8]
 8002528:	ee26 7b07 	vmul.f64	d7, d6, d7
 800252c:	ed97 6b04 	vldr	d6, [r7, #16]
 8002530:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800253e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80025a0 <cosine_sum_window_create+0xc8>
 8002542:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002550:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002554:	eeb0 0b45 	vmov.f64	d0, d5
 8002558:	f00b f986 	bl	800d868 <cos>
 800255c:	eeb0 6b40 	vmov.f64	d6, d0
 8002560:	ed97 7b00 	vldr	d7, [r7]
 8002564:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002568:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8002572:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 8002576:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
 8002580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3b7      	bcc.n	80024f8 <cosine_sum_window_create+0x20>
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	ecbd 8b02 	vpop	{d8}
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	54442d18 	.word	0x54442d18
 800259c:	401921fb 	.word	0x401921fb
 80025a0:	54442d18 	.word	0x54442d18
 80025a4:	402921fb 	.word	0x402921fb

080025a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 fbe1 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f806 	bl	80025c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff f930 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x54>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x58>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025da:	fbb3 f3f1 	udiv	r3, r3, r1
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fbfb 	bl	8002dde <HAL_SYSTICK_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00e      	b.n	8002610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d80a      	bhi.n	800260e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f8:	2200      	movs	r2, #0
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	f000 fbc3 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <HAL_InitTick+0x5c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000000 	.word	0x20000000
 800261c:	20000008 	.word	0x20000008
 8002620:	20000004 	.word	0x20000004

08002624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x20>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x24>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_IncTick+0x24>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000008 	.word	0x20000008
 8002648:	200045c4 	.word	0x200045c4

0800264c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_GetTick+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200045c4 	.word	0x200045c4

08002664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff ffee 	bl	800264c <HAL_GetTick>
 8002670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267c:	d005      	beq.n	800268a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_Delay+0x44>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800268a:	bf00      	nop
 800268c:	f7ff ffde 	bl	800264c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d8f7      	bhi.n	800268c <HAL_Delay+0x28>
  {
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000008 	.word	0x20000008

080026ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e031      	b.n	8002726 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe f83e 	bl	800074c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_ADC_Init+0x84>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f970 	bl	80029e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
 8002716:	e001      	b.n	800271c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	ffffeefd 	.word	0xffffeefd

08002734 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1c>
 800274c:	2302      	movs	r3, #2
 800274e:	e136      	b.n	80029be <HAL_ADC_ConfigChannel+0x28a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b09      	cmp	r3, #9
 800275e:	d93a      	bls.n	80027d6 <HAL_ADC_ConfigChannel+0xa2>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002768:	d035      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68d9      	ldr	r1, [r3, #12]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	3b1e      	subs	r3, #30
 8002780:	2207      	movs	r2, #7
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a8d      	ldr	r2, [pc, #564]	; (80029cc <HAL_ADC_ConfigChannel+0x298>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	061a      	lsls	r2, r3, #24
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ae:	e035      	b.n	800281c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4403      	add	r3, r0
 80027c8:	3b1e      	subs	r3, #30
 80027ca:	409a      	lsls	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d4:	e022      	b.n	800281c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	4603      	mov	r3, r0
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4403      	add	r3, r0
 8002812:	409a      	lsls	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d824      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b05      	subs	r3, #5
 8002836:	221f      	movs	r2, #31
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3b05      	subs	r3, #5
 8002860:	fa00 f203 	lsl.w	r2, r0, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	635a      	str	r2, [r3, #52]	; 0x34
 800286c:	e04c      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d824      	bhi.n	80028c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b23      	subs	r3, #35	; 0x23
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	400a      	ands	r2, r1
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	3b23      	subs	r3, #35	; 0x23
 80028b2:	fa00 f203 	lsl.w	r2, r0, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	e023      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b41      	subs	r3, #65	; 0x41
 80028d2:	221f      	movs	r2, #31
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b41      	subs	r3, #65	; 0x41
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_ADC_ConfigChannel+0x29c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10a      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1f4>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800291a:	d105      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002922:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002926:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <HAL_ADC_ConfigChannel+0x29c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10f      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x21e>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b12      	cmp	r3, #18
 8002938:	d10b      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002940:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002944:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800294c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002950:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_ADC_ConfigChannel+0x29c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d12b      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x280>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_ADC_ConfigChannel+0x298>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <HAL_ADC_ConfigChannel+0x23a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b11      	cmp	r3, #17
 800296c:	d122      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002974:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002978:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002984:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_ADC_ConfigChannel+0x298>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_ADC_ConfigChannel+0x2a8>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0c9a      	lsrs	r2, r3, #18
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029a6:	e002      	b.n	80029ae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	10000012 	.word	0x10000012
 80029d0:	40012000 	.word	0x40012000
 80029d4:	40012300 	.word	0x40012300
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029e8:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <ADC_Init+0x1ec>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <ADC_Init+0x1ec>)
 80029ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029f4:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <ADC_Init+0x1ec>)
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4973      	ldr	r1, [pc, #460]	; (8002bcc <ADC_Init+0x1ec>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <ADC_Init+0x1f0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	e00f      	b.n	8002ada <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0202 	bic.w	r2, r2, #2
 8002ae8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6899      	ldr	r1, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	005a      	lsls	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	3b01      	subs	r3, #1
 8002b34:	035a      	lsls	r2, r3, #13
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	e007      	b.n	8002b50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	051a      	lsls	r2, r3, #20
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b92:	025a      	lsls	r2, r3, #9
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	029a      	lsls	r2, r3, #10
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40012300 	.word	0x40012300
 8002bd0:	0f000001 	.word	0x0f000001

08002bd4 <__NVIC_SetPriorityGrouping>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <__NVIC_SetPriorityGrouping+0x40>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <__NVIC_SetPriorityGrouping+0x40>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00
 8002c18:	05fa0000 	.word	0x05fa0000

08002c1c <__NVIC_GetPriorityGrouping>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff29 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff3e 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff31 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa2 	bl	8002d30 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e054      	b.n	8002eb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7f5b      	ldrb	r3, [r3, #29]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fcd8 	bl	80007d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	791b      	ldrb	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10c      	bne.n	8002e48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_CRC_Init+0xc4>)
 8002e34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0218 	bic.w	r2, r2, #24
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	e00c      	b.n	8002e62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f834 	bl	8002ec0 <HAL_CRCEx_Polynomial_Set>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e028      	b.n	8002eb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	795b      	ldrb	r3, [r3, #5]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e72:	611a      	str	r2, [r3, #16]
 8002e74:	e004      	b.n	8002e80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6912      	ldr	r2, [r2, #16]
 8002e7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	04c11db7 	.word	0x04c11db7

08002ec0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ed0:	231f      	movs	r3, #31
 8002ed2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ed4:	bf00      	nop
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	613a      	str	r2, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b18      	cmp	r3, #24
 8002ef8:	d846      	bhi.n	8002f88 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f8f 	.word	0x08002f8f
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002f89 	.word	0x08002f89
 8002f0c:	08002f89 	.word	0x08002f89
 8002f10:	08002f89 	.word	0x08002f89
 8002f14:	08002f89 	.word	0x08002f89
 8002f18:	08002f89 	.word	0x08002f89
 8002f1c:	08002f89 	.word	0x08002f89
 8002f20:	08002f7d 	.word	0x08002f7d
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	08002f89 	.word	0x08002f89
 8002f2c:	08002f89 	.word	0x08002f89
 8002f30:	08002f89 	.word	0x08002f89
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	08002f89 	.word	0x08002f89
 8002f3c:	08002f89 	.word	0x08002f89
 8002f40:	08002f71 	.word	0x08002f71
 8002f44:	08002f89 	.word	0x08002f89
 8002f48:	08002f89 	.word	0x08002f89
 8002f4c:	08002f89 	.word	0x08002f89
 8002f50:	08002f89 	.word	0x08002f89
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	08002f89 	.word	0x08002f89
 8002f5c:	08002f89 	.word	0x08002f89
 8002f60:	08002f65 	.word	0x08002f65
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d913      	bls.n	8002f92 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f6e:	e010      	b.n	8002f92 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b07      	cmp	r3, #7
 8002f74:	d90f      	bls.n	8002f96 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f7a:	e00c      	b.n	8002f96 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d90b      	bls.n	8002f9a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f86:	e008      	b.n	8002f9a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8c:	e006      	b.n	8002f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e004      	b.n	8002f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f92:	bf00      	nop
 8002f94:	e002      	b.n	8002f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f96:	bf00      	nop
 8002f98:	e000      	b.n	8002f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f9a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 0118 	bic.w	r1, r3, #24
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0ac      	b.n	8003138 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fadc 	bl	80035a0 <DFSDM_GetChannelFromInstance>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_DFSDM_ChannelInit+0x174>)
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e09f      	b.n	8003138 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fd fdcd 	bl	8000b98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_DFSDM_ChannelInit+0x178>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_DFSDM_ChannelInit+0x178>)
 8003006:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8003008:	4b4e      	ldr	r3, [pc, #312]	; (8003144 <HAL_DFSDM_ChannelInit+0x178>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d125      	bne.n	800305c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003010:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4c      	ldr	r2, [pc, #304]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800301a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800301c:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4948      	ldr	r1, [pc, #288]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a46      	ldr	r2, [pc, #280]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003030:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003034:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	791b      	ldrb	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 800303e:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	3b01      	subs	r3, #1
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	493f      	ldr	r1, [pc, #252]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003050:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800305a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800306a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800307a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003080:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 020f 	bic.w	r2, r2, #15
 8003098:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80030c0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f002 0207 	and.w	r2, r2, #7
 80030ec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003118:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa3a 	bl	80035a0 <DFSDM_GetChannelFromInstance>
 800312c:	4602      	mov	r2, r0
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_DFSDM_ChannelInit+0x174>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200045cc 	.word	0x200045cc
 8003144:	200045c8 	.word	0x200045c8
 8003148:	40017400 	.word	0x40017400

0800314c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0c6      	b.n	80032ec <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a64      	ldr	r2, [pc, #400]	; (80032f4 <HAL_DFSDM_FilterInit+0x1a8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d109      	bne.n	800317c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800316c:	2b01      	cmp	r3, #1
 800316e:	d003      	beq.n	8003178 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b7      	b.n	80032ec <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fd fc17 	bl	80009c8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80031a8:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7a1b      	ldrb	r3, [r3, #8]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80031d2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7a5b      	ldrb	r3, [r3, #9]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d108      	bne.n	80031ee <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e007      	b.n	80031fe <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_DFSDM_FilterInit+0x1ac>)
 800320a:	400b      	ands	r3, r1
 800320c:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d108      	bne.n	8003228 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7c1b      	ldrb	r3, [r3, #16]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d108      	bne.n	8003242 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0210 	orr.w	r2, r2, #16
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e007      	b.n	8003252 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0210 	bic.w	r2, r2, #16
 8003250:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7c5b      	ldrb	r3, [r3, #17]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d108      	bne.n	800326c <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0220 	orr.w	r2, r2, #32
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e007      	b.n	800327c <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0220 	bic.w	r2, r2, #32
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6959      	ldr	r1, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_DFSDM_FilterInit+0x1b0>)
 8003288:	400b      	ands	r3, r1
 800328a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6959      	ldr	r1, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	3b01      	subs	r3, #1
 800329c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800329e:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80032a6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7c1a      	ldrb	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40017500 	.word	0x40017500
 80032f8:	ffff80f7 	.word	0xffff80f7
 80032fc:	1c00ff00 	.word	0x1c00ff00

08003300 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02c      	beq.n	8003374 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003320:	2bff      	cmp	r3, #255	; 0xff
 8003322:	d027      	beq.n	8003374 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8003330:	400b      	ands	r3, r1
 8003332:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10d      	bne.n	8003356 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e00a      	b.n	800336c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
 8003372:	e001      	b.n	8003378 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
}
 800337a:	4618      	mov	r0, r3
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	f8fbffff 	.word	0xf8fbffff

0800338c <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01b      	beq.n	80033dc <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d016      	beq.n	80033dc <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	b292      	uxth	r2, r2
 80033b6:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80033b8:	6838      	ldr	r0, [r7, #0]
 80033ba:	f000 f8d2 	bl	8003562 <DFSDM_GetInjChannelsNbr>
 80033be:	4602      	mov	r2, r0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d102      	bne.n	80033d4 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	e000      	b.n	80033d6 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80033d4:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6493      	str	r3, [r2, #72]	; 0x48
 80033da:	e001      	b.n	80033e0 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
 800340c:	e066      	b.n	80034dc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341c:	d002      	beq.n	8003424 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
 8003422:	e05b      	b.n	80034dc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10e      	bne.n	800344a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d002      	beq.n	800344a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
 8003448:	e048      	b.n	80034dc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	d102      	bne.n	800346c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
 800346a:	e037      	b.n	80034dc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d004      	beq.n	8003480 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800347c:	2b03      	cmp	r3, #3
 800347e:	d12b      	bne.n	80034d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003486:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800348e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349a:	d101      	bne.n	80034a0 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800349e:	e000      	b.n	80034a2 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 80034a0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	331c      	adds	r3, #28
 80034b2:	4619      	mov	r1, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f000 f9c2 	bl	8003840 <HAL_DMA_Start_IT>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80034ce:	e005      	b.n	80034dc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f8b1 	bl	8003638 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80034d6:	e001      	b.n	80034dc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08003525 	.word	0x08003525
 80034ec:	08003541 	.word	0x08003541
 80034f0:	08003509 	.word	0x08003509

080034f4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f008 f8fc 	bl	800b714 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f008 f90a 	bl	800b74c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2203      	movs	r2, #3
 8003552:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff ffcd 	bl	80034f4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	b29b      	uxth	r3, r3
 8003572:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8003574:	e00a      	b.n	800358c <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3301      	adds	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f1      	bne.n	8003576 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <DFSDM_GetChannelFromInstance+0x7c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d102      	bne.n	80035b6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e02b      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <DFSDM_GetChannelFromInstance+0x80>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d102      	bne.n	80035c4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e024      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <DFSDM_GetChannelFromInstance+0x84>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80035cc:	2302      	movs	r3, #2
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e01d      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <DFSDM_GetChannelFromInstance+0x88>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d102      	bne.n	80035e0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80035da:	2303      	movs	r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e016      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <DFSDM_GetChannelFromInstance+0x8c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80035e8:	2304      	movs	r3, #4
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e00f      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <DFSDM_GetChannelFromInstance+0x90>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d102      	bne.n	80035fc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80035f6:	2305      	movs	r3, #5
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e008      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <DFSDM_GetChannelFromInstance+0x94>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d102      	bne.n	800360a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003604:	2306      	movs	r3, #6
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e001      	b.n	800360e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800360a:	2307      	movs	r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40017400 	.word	0x40017400
 8003620:	40017420 	.word	0x40017420
 8003624:	40017440 	.word	0x40017440
 8003628:	40017460 	.word	0x40017460
 800362c:	40017480 	.word	0x40017480
 8003630:	400174a0 	.word	0x400174a0
 8003634:	400174c0 	.word	0x400174c0

08003638 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e033      	b.n	80036c2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003678:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003690:	2b03      	cmp	r3, #3
 8003692:	d116      	bne.n	80036c2 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0202 	orr.w	r2, r2, #2
 80036aa:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <DFSDM_RegConvStart+0x84>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	e000      	b.n	80036be <DFSDM_RegConvStart+0x86>
 80036bc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <DFSDM_RegConvStart+0x98>
 80036cc:	2202      	movs	r2, #2
 80036ce:	e000      	b.n	80036d2 <DFSDM_RegConvStart+0x9a>
 80036d0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036f0:	f7fe ffac 	bl	800264c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e099      	b.n	8003834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003720:	e00f      	b.n	8003742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003722:	f7fe ff93 	bl	800264c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b05      	cmp	r3, #5
 800372e:	d908      	bls.n	8003742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2203      	movs	r2, #3
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e078      	b.n	8003834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e8      	bne.n	8003722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4b38      	ldr	r3, [pc, #224]	; (800383c <HAL_DMA_Init+0x158>)
 800375c:	4013      	ands	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	2b04      	cmp	r3, #4
 800379a:	d107      	bne.n	80037ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4313      	orrs	r3, r2
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0307 	bic.w	r3, r3, #7
 80037c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d117      	bne.n	8003806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 faa5 	bl	8003d38 <DMA_CheckFifoParam>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003802:	2301      	movs	r3, #1
 8003804:	e016      	b.n	8003834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa5c 	bl	8003ccc <DMA_CalcBaseAndBitshift>
 8003814:	4603      	mov	r3, r0
 8003816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	223f      	movs	r2, #63	; 0x3f
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	e010803f 	.word	0xe010803f

08003840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_DMA_Start_IT+0x26>
 8003862:	2302      	movs	r3, #2
 8003864:	e048      	b.n	80038f8 <HAL_DMA_Start_IT+0xb8>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d137      	bne.n	80038ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f9ee 	bl	8003c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	223f      	movs	r2, #63	; 0x3f
 800389a:	409a      	lsls	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0216 	orr.w	r2, r2, #22
 80038ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e005      	b.n	80038f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d004      	beq.n	800391e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e00c      	b.n	8003938 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2205      	movs	r2, #5
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003950:	4b8e      	ldr	r3, [pc, #568]	; (8003b8c <HAL_DMA_IRQHandler+0x248>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a8e      	ldr	r2, [pc, #568]	; (8003b90 <HAL_DMA_IRQHandler+0x24c>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	2208      	movs	r2, #8
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01a      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2208      	movs	r2, #8
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2204      	movs	r2, #4
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	2204      	movs	r2, #4
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2210      	movs	r2, #16
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d043      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03c      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2210      	movs	r2, #16
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d018      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d024      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e01f      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01b      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	e016      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0208 	bic.w	r2, r2, #8
 8003aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	2220      	movs	r2, #32
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 808f 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8087 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	2220      	movs	r2, #32
 8003adc:	409a      	lsls	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d136      	bne.n	8003b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0216 	bic.w	r2, r2, #22
 8003afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x1da>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0208 	bic.w	r2, r2, #8
 8003b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	223f      	movs	r2, #63	; 0x3f
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d07e      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
        }
        return;
 8003b5a:	e079      	b.n	8003c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d031      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e02c      	b.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
 8003ba4:	e01e      	b.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0210 	bic.w	r2, r2, #16
 8003bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d032      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d022      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d307      	bcc.n	8003c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f2      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x2cc>
 8003c2a:	e000      	b.n	8003c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e000      	b.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c50:	bf00      	nop
    }
  }
}
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d108      	bne.n	8003cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cae:	e007      	b.n	8003cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	3b10      	subs	r3, #16
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <DMA_CalcBaseAndBitshift+0x60>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <DMA_CalcBaseAndBitshift+0x64>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d908      	bls.n	8003d0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <DMA_CalcBaseAndBitshift+0x68>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	1d1a      	adds	r2, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	659a      	str	r2, [r3, #88]	; 0x58
 8003d0a:	e006      	b.n	8003d1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <DMA_CalcBaseAndBitshift+0x68>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	aaaaaaab 	.word	0xaaaaaaab
 8003d30:	0800e814 	.word	0x0800e814
 8003d34:	fffffc00 	.word	0xfffffc00

08003d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11f      	bne.n	8003d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d856      	bhi.n	8003e06 <DMA_CheckFifoParam+0xce>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <DMA_CheckFifoParam+0x28>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d71 	.word	0x08003d71
 8003d64:	08003d83 	.word	0x08003d83
 8003d68:	08003d71 	.word	0x08003d71
 8003d6c:	08003e07 	.word	0x08003e07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d046      	beq.n	8003e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d80:	e043      	b.n	8003e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d8a:	d140      	bne.n	8003e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e03d      	b.n	8003e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d121      	bne.n	8003de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d837      	bhi.n	8003e12 <DMA_CheckFifoParam+0xda>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <DMA_CheckFifoParam+0x70>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dbf 	.word	0x08003dbf
 8003db0:	08003db9 	.word	0x08003db9
 8003db4:	08003dd1 	.word	0x08003dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e030      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d025      	beq.n	8003e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dce:	e022      	b.n	8003e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dd8:	d11f      	bne.n	8003e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dde:	e01c      	b.n	8003e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d903      	bls.n	8003dee <DMA_CheckFifoParam+0xb6>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d003      	beq.n	8003df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dec:	e018      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      break;
 8003df2:	e015      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e00b      	b.n	8003e1e <DMA_CheckFifoParam+0xe6>
      break;
 8003e06:	bf00      	nop
 8003e08:	e00a      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e008      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e006      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e12:	bf00      	nop
 8003e14:	e004      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	e175      	b.n	800413c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e50:	2201      	movs	r2, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f040 8164 	bne.w	8004136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d005      	beq.n	8003e86 <HAL_GPIO_Init+0x56>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d130      	bne.n	8003ee8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 0201 	and.w	r2, r3, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d017      	beq.n	8003f24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d123      	bne.n	8003f78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80be 	beq.w	8004136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fba:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_GPIO_Init+0x324>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a65      	ldr	r2, [pc, #404]	; (8004154 <HAL_GPIO_Init+0x324>)
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b63      	ldr	r3, [pc, #396]	; (8004154 <HAL_GPIO_Init+0x324>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fd2:	4a61      	ldr	r2, [pc, #388]	; (8004158 <HAL_GPIO_Init+0x328>)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	3302      	adds	r3, #2
 8003fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_GPIO_Init+0x32c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d037      	beq.n	800406e <HAL_GPIO_Init+0x23e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a57      	ldr	r2, [pc, #348]	; (8004160 <HAL_GPIO_Init+0x330>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_GPIO_Init+0x23a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a56      	ldr	r2, [pc, #344]	; (8004164 <HAL_GPIO_Init+0x334>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02b      	beq.n	8004066 <HAL_GPIO_Init+0x236>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a55      	ldr	r2, [pc, #340]	; (8004168 <HAL_GPIO_Init+0x338>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d025      	beq.n	8004062 <HAL_GPIO_Init+0x232>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a54      	ldr	r2, [pc, #336]	; (800416c <HAL_GPIO_Init+0x33c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <HAL_GPIO_Init+0x22e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a53      	ldr	r2, [pc, #332]	; (8004170 <HAL_GPIO_Init+0x340>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d019      	beq.n	800405a <HAL_GPIO_Init+0x22a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_GPIO_Init+0x344>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_GPIO_Init+0x226>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_GPIO_Init+0x348>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00d      	beq.n	8004052 <HAL_GPIO_Init+0x222>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_GPIO_Init+0x34c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <HAL_GPIO_Init+0x21e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4f      	ldr	r2, [pc, #316]	; (8004180 <HAL_GPIO_Init+0x350>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_GPIO_Init+0x21a>
 8004046:	2309      	movs	r3, #9
 8004048:	e012      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800404a:	230a      	movs	r3, #10
 800404c:	e010      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800404e:	2308      	movs	r3, #8
 8004050:	e00e      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004052:	2307      	movs	r3, #7
 8004054:	e00c      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004056:	2306      	movs	r3, #6
 8004058:	e00a      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800405a:	2305      	movs	r3, #5
 800405c:	e008      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800405e:	2304      	movs	r3, #4
 8004060:	e006      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004062:	2303      	movs	r3, #3
 8004064:	e004      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004066:	2302      	movs	r3, #2
 8004068:	e002      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800406e:	2300      	movs	r3, #0
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f002 0203 	and.w	r2, r2, #3
 8004076:	0092      	lsls	r2, r2, #2
 8004078:	4093      	lsls	r3, r2
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004080:	4935      	ldr	r1, [pc, #212]	; (8004158 <HAL_GPIO_Init+0x328>)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_GPIO_Init+0x354>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040b2:	4a34      	ldr	r2, [pc, #208]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040dc:	4a29      	ldr	r2, [pc, #164]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004106:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <HAL_GPIO_Init+0x354>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_GPIO_Init+0x354>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_GPIO_Init+0x354>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	f67f ae86 	bls.w	8003e50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3724      	adds	r7, #36	; 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	40013800 	.word	0x40013800
 800415c:	40020000 	.word	0x40020000
 8004160:	40020400 	.word	0x40020400
 8004164:	40020800 	.word	0x40020800
 8004168:	40020c00 	.word	0x40020c00
 800416c:	40021000 	.word	0x40021000
 8004170:	40021400 	.word	0x40021400
 8004174:	40021800 	.word	0x40021800
 8004178:	40021c00 	.word	0x40021c00
 800417c:	40022000 	.word	0x40022000
 8004180:	40022400 	.word	0x40022400
 8004184:	40013c00 	.word	0x40013c00

08004188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	887b      	ldrh	r3, [r7, #2]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
 80041a4:	e001      	b.n	80041aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
 80041c4:	4613      	mov	r3, r2
 80041c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c8:	787b      	ldrb	r3, [r7, #1]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041d4:	e003      	b.n	80041de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004202:	4a05      	ldr	r2, [pc, #20]	; (8004218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	4618      	mov	r0, r3
 800420c:	f007 fc20 	bl	800ba50 <HAL_GPIO_EXTI_Callback>
  }
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40013c00 	.word	0x40013c00

0800421c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800424a:	f7fe f9ff 	bl	800264c <HAL_GetTick>
 800424e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004250:	e009      	b.n	8004266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004252:	f7fe f9fb 	bl	800264c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004260:	d901      	bls.n	8004266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e022      	b.n	80042ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004272:	d1ee      	bne.n	8004252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004280:	f7fe f9e4 	bl	800264c <HAL_GetTick>
 8004284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004286:	e009      	b.n	800429c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004288:	f7fe f9e0 	bl	800264c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004296:	d901      	bls.n	800429c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e007      	b.n	80042ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a8:	d1ee      	bne.n	8004288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40007000 	.word	0x40007000

080042bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e29b      	b.n	800480a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8087 	beq.w	80043ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e0:	4b96      	ldr	r3, [pc, #600]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d00c      	beq.n	8004306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ec:	4b93      	ldr	r3, [pc, #588]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d112      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
 80042f8:	4b90      	ldr	r3, [pc, #576]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004304:	d10b      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004306:	4b8d      	ldr	r3, [pc, #564]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d06c      	beq.n	80043ec <HAL_RCC_OscConfig+0x130>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d168      	bne.n	80043ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e275      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x7a>
 8004328:	4b84      	ldr	r3, [pc, #528]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a83      	ldr	r2, [pc, #524]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e02e      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x9c>
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a7e      	ldr	r2, [pc, #504]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7b      	ldr	r2, [pc, #492]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0xc0>
 8004362:	4b76      	ldr	r3, [pc, #472]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b73      	ldr	r3, [pc, #460]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a72      	ldr	r2, [pc, #456]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 800437c:	4b6f      	ldr	r3, [pc, #444]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6e      	ldr	r2, [pc, #440]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b6c      	ldr	r3, [pc, #432]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6b      	ldr	r2, [pc, #428]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe f956 	bl	800264c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe f952 	bl	800264c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e229      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fe f942 	bl	800264c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fe f93e 	bl	800264c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e215      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x110>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d069      	beq.n	80044ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043fa:	4b50      	ldr	r3, [pc, #320]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b4d      	ldr	r3, [pc, #308]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11c      	bne.n	800444c <HAL_RCC_OscConfig+0x190>
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x17a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e1e9      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	493d      	ldr	r1, [pc, #244]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	e040      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b39      	ldr	r3, [pc, #228]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a38      	ldr	r2, [pc, #224]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe f8f4 	bl	800264c <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fe f8f0 	bl	800264c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1c7      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4929      	ldr	r1, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
 800449a:	e018      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe f8d0 	bl	800264c <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fe f8cc 	bl	800264c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e1a3      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d038      	beq.n	800454c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d019      	beq.n	8004516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fe f8ad 	bl	800264c <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fe f8a9 	bl	800264c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e180      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x23a>
 8004514:	e01a      	b.n	800454c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fe f893 	bl	800264c <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fe f88f 	bl	800264c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d903      	bls.n	8004540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e166      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
 800453c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	4b92      	ldr	r3, [pc, #584]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ee      	bne.n	800452a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80a4 	beq.w	80046a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4b8c      	ldr	r3, [pc, #560]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b89      	ldr	r3, [pc, #548]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a88      	ldr	r2, [pc, #544]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b86      	ldr	r3, [pc, #536]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	4b83      	ldr	r3, [pc, #524]	; (8004790 <HAL_RCC_OscConfig+0x4d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800458e:	4b80      	ldr	r3, [pc, #512]	; (8004790 <HAL_RCC_OscConfig+0x4d4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7f      	ldr	r2, [pc, #508]	; (8004790 <HAL_RCC_OscConfig+0x4d4>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fe f857 	bl	800264c <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fe f853 	bl	800264c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e12a      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b4:	4b76      	ldr	r3, [pc, #472]	; (8004790 <HAL_RCC_OscConfig+0x4d4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x31a>
 80045c8:	4b70      	ldr	r3, [pc, #448]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a6f      	ldr	r2, [pc, #444]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	e02d      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x33c>
 80045de:	4b6b      	ldr	r3, [pc, #428]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a6a      	ldr	r2, [pc, #424]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	4b68      	ldr	r3, [pc, #416]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a67      	ldr	r2, [pc, #412]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045f0:	f023 0304 	bic.w	r3, r3, #4
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	e01c      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b05      	cmp	r3, #5
 80045fe:	d10c      	bne.n	800461a <HAL_RCC_OscConfig+0x35e>
 8004600:	4b62      	ldr	r3, [pc, #392]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a61      	ldr	r2, [pc, #388]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	4b5f      	ldr	r3, [pc, #380]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a5e      	ldr	r2, [pc, #376]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	e00b      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 800461a:	4b5c      	ldr	r3, [pc, #368]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a5b      	ldr	r2, [pc, #364]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	4b59      	ldr	r3, [pc, #356]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a58      	ldr	r2, [pc, #352]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d015      	beq.n	8004666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fe f807 	bl	800264c <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe f803 	bl	800264c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0d8      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ee      	beq.n	8004642 <HAL_RCC_OscConfig+0x386>
 8004664:	e014      	b.n	8004690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fd fff1 	bl	800264c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fd ffed 	bl	800264c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0c2      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004684:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ee      	bne.n	800466e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d105      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004696:	4b3d      	ldr	r3, [pc, #244]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a3c      	ldr	r2, [pc, #240]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800469c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80ae 	beq.w	8004808 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ac:	4b37      	ldr	r3, [pc, #220]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d06d      	beq.n	8004794 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d14b      	bne.n	8004758 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a31      	ldr	r2, [pc, #196]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80046c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd ffbe 	bl	800264c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd ffba 	bl	800264c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e091      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	071b      	lsls	r3, r3, #28
 800471e:	491b      	ldr	r1, [pc, #108]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a18      	ldr	r2, [pc, #96]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd ff8c 	bl	800264c <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fd ff88 	bl	800264c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e05f      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x47c>
 8004756:	e057      	b.n	8004808 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0b      	ldr	r2, [pc, #44]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd ff72 	bl	800264c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd ff6e 	bl	800264c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e045      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x4b0>
 800478a:	e03d      	b.n	8004808 <HAL_RCC_OscConfig+0x54c>
 800478c:	40023800 	.word	0x40023800
 8004790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <HAL_RCC_OscConfig+0x558>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d030      	beq.n	8004804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d129      	bne.n	8004804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d122      	bne.n	8004804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047c4:	4013      	ands	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d119      	bne.n	8004804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	3b01      	subs	r3, #1
 80047de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d10f      	bne.n	8004804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800

08004818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0d0      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d910      	bls.n	8004860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b67      	ldr	r3, [pc, #412]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 020f 	bic.w	r2, r3, #15
 8004846:	4965      	ldr	r1, [pc, #404]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d040      	beq.n	800493c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d115      	bne.n	80048fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e073      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	4b3d      	ldr	r3, [pc, #244]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06b      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4936      	ldr	r1, [pc, #216]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490c:	f7fd fe9e 	bl	800264c <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fd fe9a 	bl	800264c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e053      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d210      	bcs.n	800496c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 020f 	bic.w	r2, r3, #15
 8004952:	4922      	ldr	r1, [pc, #136]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f821 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490a      	ldr	r1, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x1cc>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1d0>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1d4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fdfa 	bl	80025c4 <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	0800e7fc 	.word	0x0800e7fc
 80049e8:	20000000 	.word	0x20000000
 80049ec:	20000004 	.word	0x20000004

080049f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b090      	sub	sp, #64	; 0x40
 80049f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	2300      	movs	r3, #0
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	2300      	movs	r3, #0
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d00d      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x40>
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	f200 80a1 	bhi.w	8004b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x34>
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a22:	e09b      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a28:	e09b      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a2e:	e098      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a3a:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a46:	4b4a      	ldr	r3, [pc, #296]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	627a      	str	r2, [r7, #36]	; 0x24
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5c:	fb03 f201 	mul.w	r2, r3, r1
 8004a60:	2300      	movs	r3, #0
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a70:	460a      	mov	r2, r1
 8004a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a76:	4413      	add	r3, r2
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	61fa      	str	r2, [r7, #28]
 8004a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a8a:	f7fb fc89 	bl	80003a0 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4613      	mov	r3, r2
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a96:	e053      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	617a      	str	r2, [r7, #20]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004aaa:	f04f 0b00 	mov.w	fp, #0
 8004aae:	4652      	mov	r2, sl
 8004ab0:	465b      	mov	r3, fp
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac0:	0150      	lsls	r0, r2, #5
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8004aca:	eb63 090b 	sbc.w	r9, r3, fp
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	00eb      	lsls	r3, r5, #3
 8004af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af8:	00e2      	lsls	r2, r4, #3
 8004afa:	4614      	mov	r4, r2
 8004afc:	461d      	mov	r5, r3
 8004afe:	eb14 030a 	adds.w	r3, r4, sl
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	eb45 030b 	adc.w	r3, r5, fp
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b16:	4629      	mov	r1, r5
 8004b18:	028b      	lsls	r3, r1, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b20:	4621      	mov	r1, r4
 8004b22:	028a      	lsls	r2, r1, #10
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	60fa      	str	r2, [r7, #12]
 8004b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b34:	f7fb fc34 	bl	80003a0 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3740      	adds	r7, #64	; 0x40
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	017d7840 	.word	0x017d7840

08004b7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000000 	.word	0x20000000

08004b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b98:	f7ff fff0 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0a9b      	lsrs	r3, r3, #10
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4903      	ldr	r1, [pc, #12]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	0800e80c 	.word	0x0800e80c

08004bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bc0:	f7ff ffdc 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0b5b      	lsrs	r3, r3, #13
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4903      	ldr	r1, [pc, #12]	; (8004be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	0800e80c 	.word	0x0800e80c

08004be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c0c:	4b69      	ldr	r3, [pc, #420]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a68      	ldr	r2, [pc, #416]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	4b66      	ldr	r3, [pc, #408]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c20:	4964      	ldr	r1, [pc, #400]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d017      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3e:	4b5d      	ldr	r3, [pc, #372]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4c:	4959      	ldr	r1, [pc, #356]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d017      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c7a:	4b4e      	ldr	r3, [pc, #312]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	494a      	ldr	r1, [pc, #296]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 808b 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	4a39      	ldr	r2, [pc, #228]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ce0:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a34      	ldr	r2, [pc, #208]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fd fcae 	bl	800264c <HAL_GetTick>
 8004cf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf4:	f7fd fcaa 	bl	800264c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e38f      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d035      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d02e      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d30:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d46:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d52:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d58:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d114      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd fc72 	bl	800264c <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6c:	f7fd fc6e 	bl	800264c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e351      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ee      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9a:	d111      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	4901      	ldr	r1, [pc, #4]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
 8004db2:	e00b      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	0ffffcff 	.word	0x0ffffcff
 8004dc0:	4bac      	ldr	r3, [pc, #688]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4aab      	ldr	r2, [pc, #684]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dca:	6093      	str	r3, [r2, #8]
 8004dcc:	4ba9      	ldr	r3, [pc, #676]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd8:	49a6      	ldr	r1, [pc, #664]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d010      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dea:	4ba2      	ldr	r3, [pc, #648]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df0:	4aa0      	ldr	r2, [pc, #640]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dfa:	4b9e      	ldr	r3, [pc, #632]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	499b      	ldr	r1, [pc, #620]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e18:	4b96      	ldr	r3, [pc, #600]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e26:	4993      	ldr	r1, [pc, #588]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e3a:	4b8e      	ldr	r3, [pc, #568]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e48:	498a      	ldr	r1, [pc, #552]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e5c:	4b85      	ldr	r3, [pc, #532]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6a:	4982      	ldr	r1, [pc, #520]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4979      	ldr	r1, [pc, #484]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea0:	4b74      	ldr	r3, [pc, #464]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4971      	ldr	r1, [pc, #452]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec2:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f023 020c 	bic.w	r2, r3, #12
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed0:	4968      	ldr	r1, [pc, #416]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee4:	4b63      	ldr	r3, [pc, #396]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	4960      	ldr	r1, [pc, #384]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f06:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	4957      	ldr	r1, [pc, #348]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f28:	4b52      	ldr	r3, [pc, #328]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	494f      	ldr	r1, [pc, #316]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	4946      	ldr	r1, [pc, #280]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f6c:	4b41      	ldr	r3, [pc, #260]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	493e      	ldr	r1, [pc, #248]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f8e:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	4935      	ldr	r1, [pc, #212]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fb0:	4b30      	ldr	r3, [pc, #192]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fbe:	492d      	ldr	r1, [pc, #180]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d011      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fd2:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe0:	4924      	ldr	r1, [pc, #144]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005002:	2301      	movs	r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005012:	4b18      	ldr	r3, [pc, #96]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	4914      	ldr	r1, [pc, #80]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00b      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005044:	490b      	ldr	r1, [pc, #44]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005068:	4902      	ldr	r1, [pc, #8]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005070:	e002      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005084:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	4986      	ldr	r1, [pc, #536]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050a8:	4b81      	ldr	r3, [pc, #516]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b8:	497d      	ldr	r1, [pc, #500]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d006      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80d6 	beq.w	8005280 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050d4:	4b76      	ldr	r3, [pc, #472]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a75      	ldr	r2, [pc, #468]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e0:	f7fd fab4 	bl	800264c <HAL_GetTick>
 80050e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050e8:	f7fd fab0 	bl	800264c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e195      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050fa:	4b6d      	ldr	r3, [pc, #436]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d021      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11d      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800511a:	4b65      	ldr	r3, [pc, #404]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005128:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	019a      	lsls	r2, r3, #6
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	071b      	lsls	r3, r3, #28
 800514e:	4958      	ldr	r1, [pc, #352]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02e      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005180:	d129      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005182:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005190:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005196:	0f1b      	lsrs	r3, r3, #28
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	019a      	lsls	r2, r3, #6
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	061b      	lsls	r3, r3, #24
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	071b      	lsls	r3, r3, #28
 80051b6:	493e      	ldr	r1, [pc, #248]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051be:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c4:	f023 021f 	bic.w	r2, r3, #31
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4938      	ldr	r1, [pc, #224]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01d      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051e2:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051f0:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f6:	0f1b      	lsrs	r3, r3, #28
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	019a      	lsls	r2, r3, #6
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	4926      	ldr	r1, [pc, #152]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	019a      	lsls	r2, r3, #6
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	071b      	lsls	r3, r3, #28
 8005246:	491a      	ldr	r1, [pc, #104]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800524e:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fd f9f7 	bl	800264c <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005262:	f7fd f9f3 	bl	800264c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b64      	cmp	r3, #100	; 0x64
 800526e:	d901      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e0d8      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b01      	cmp	r3, #1
 8005284:	f040 80ce 	bne.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005294:	f7fd f9da 	bl	800264c <HAL_GetTick>
 8005298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800529a:	e00b      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800529c:	f7fd f9d6 	bl	800264c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	; 0x64
 80052a8:	d904      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0bb      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b4:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d0ec      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d02e      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d12a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052ea:	4b51      	ldr	r3, [pc, #324]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f8:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	0f1b      	lsrs	r3, r3, #28
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	019a      	lsls	r2, r3, #6
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	071b      	lsls	r3, r3, #28
 800531e:	4944      	ldr	r1, [pc, #272]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005326:	4b42      	ldr	r3, [pc, #264]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	493d      	ldr	r1, [pc, #244]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d022      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005354:	d11d      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	0e1b      	lsrs	r3, r3, #24
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	0f1b      	lsrs	r3, r3, #28
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	019a      	lsls	r2, r3, #6
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	071b      	lsls	r3, r3, #28
 800538a:	4929      	ldr	r1, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	019a      	lsls	r2, r3, #6
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	4917      	ldr	r1, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4911      	ldr	r1, [pc, #68]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fd f926 	bl	800264c <HAL_GetTick>
 8005400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005404:	f7fd f922 	bl	800264c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e007      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005422:	d1ef      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005452:	f040 80a3 	bne.w	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005456:	4ba8      	ldr	r3, [pc, #672]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005464:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800546c:	f000 808a 	beq.w	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005476:	f200 8093 	bhi.w	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005480:	d07d      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005488:	f200 808a 	bhi.w	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005498:	d039      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800549a:	e081      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800549c:	4b96      	ldr	r3, [pc, #600]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054a8:	4b93      	ldr	r3, [pc, #588]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b0:	4a92      	ldr	r2, [pc, #584]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e007      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054ba:	4b8f      	ldr	r3, [pc, #572]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c2:	4a8f      	ldr	r2, [pc, #572]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80054ca:	4b8b      	ldr	r3, [pc, #556]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80054d8:	4b87      	ldr	r3, [pc, #540]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	fb03 f202 	mul.w	r2, r3, r2
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80054f2:	4b81      	ldr	r3, [pc, #516]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	617b      	str	r3, [r7, #20]
        break;
 800550c:	e049      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800550e:	4b7a      	ldr	r3, [pc, #488]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800551a:	4b77      	ldr	r3, [pc, #476]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005522:	4a76      	ldr	r2, [pc, #472]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e007      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800552c:	4b72      	ldr	r3, [pc, #456]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005534:	4a72      	ldr	r2, [pc, #456]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005536:	fbb2 f3f3 	udiv	r3, r2, r3
 800553a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800553c:	4b6e      	ldr	r3, [pc, #440]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800553e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005542:	0e1b      	lsrs	r3, r3, #24
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800554a:	4b6b      	ldr	r3, [pc, #428]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	fb03 f202 	mul.w	r2, r3, r2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005564:	4b64      	ldr	r3, [pc, #400]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	617b      	str	r3, [r7, #20]
        break;
 800557c:	e011      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800557e:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005580:	617b      	str	r3, [r7, #20]
        break;
 8005582:	e00e      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005584:	4b5c      	ldr	r3, [pc, #368]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005590:	4b5a      	ldr	r3, [pc, #360]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e005      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005596:	4b5a      	ldr	r3, [pc, #360]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005598:	617b      	str	r3, [r7, #20]
        break;
 800559a:	e002      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80055a0:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a8:	f040 80a3 	bne.w	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80055ac:	4b52      	ldr	r3, [pc, #328]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055ba:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c2:	f000 808a 	beq.w	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055cc:	f200 809c 	bhi.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d6:	d07d      	beq.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055de:	f200 8093 	bhi.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d039      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80055f0:	e08a      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d108      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055fe:	4b3e      	ldr	r3, [pc, #248]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005606:	4a3d      	ldr	r2, [pc, #244]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e007      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005610:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005618:	4a39      	ldr	r2, [pc, #228]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005620:	4b35      	ldr	r3, [pc, #212]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	0e1b      	lsrs	r3, r3, #24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800562e:	4b32      	ldr	r3, [pc, #200]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	fb03 f202 	mul.w	r2, r3, r2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005648:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800564a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	3301      	adds	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]
        break;
 8005662:	e052      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005664:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005670:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005678:	4a20      	ldr	r2, [pc, #128]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e007      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005692:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005698:	0e1b      	lsrs	r3, r3, #24
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80056a0:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	fb03 f202 	mul.w	r2, r3, r2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
        break;
 80056d2:	e01a      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80056d6:	617b      	str	r3, [r7, #20]
        break;
 80056d8:	e017      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056e8:	617b      	str	r3, [r7, #20]
        break;
 80056ea:	e00e      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056ee:	617b      	str	r3, [r7, #20]
        break;
 80056f0:	e00b      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 80056f2:	bf00      	nop
 80056f4:	e009      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	017d7840 	.word	0x017d7840
 8005704:	00bb8000 	.word	0x00bb8000
        break;
 8005708:	bf00      	nop

  return frequency;
 800570a:	697b      	ldr	r3, [r7, #20]
}
 800570c:	4618      	mov	r0, r3
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e071      	b.n	8005812 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	7f5b      	ldrb	r3, [r3, #29]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb fe06 	bl	8001350 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d053      	beq.n	8005800 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	22ca      	movs	r2, #202	; 0xca
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2253      	movs	r2, #83	; 0x53
 8005766:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa4d 	bl	8005c08 <RTC_EnterInitMode>
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d12a      	bne.n	80057ce <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <HAL_RTC_Init+0x104>)
 8005784:	400b      	ands	r3, r1
 8005786:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6899      	ldr	r1, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68d2      	ldr	r2, [r2, #12]
 80057ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6919      	ldr	r1, [r3, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	041a      	lsls	r2, r3, #16
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa56 	bl	8005c76 <RTC_ExitInitMode>
 80057ca:	4603      	mov	r3, r0
 80057cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0208 	bic.w	r2, r2, #8
 80057e2:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
 80057fe:	e001      	b.n	8005804 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	ff8fffbf 	.word	0xff8fffbf

08005820 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	7f1b      	ldrb	r3, [r3, #28]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_RTC_SetTime+0x1c>
 8005838:	2302      	movs	r3, #2
 800583a:	e085      	b.n	8005948 <HAL_RTC_SetTime+0x128>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2202      	movs	r2, #2
 8005846:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d126      	bne.n	800589c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fa2a 	bl	8005cc0 <RTC_ByteToBcd2>
 800586c:	4603      	mov	r3, r0
 800586e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fa23 	bl	8005cc0 <RTC_ByteToBcd2>
 800587a:	4603      	mov	r3, r0
 800587c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800587e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	789b      	ldrb	r3, [r3, #2]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fa1b 	bl	8005cc0 <RTC_ByteToBcd2>
 800588a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800588c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	78db      	ldrb	r3, [r3, #3]
 8005894:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e018      	b.n	80058ce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058bc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	78db      	ldrb	r3, [r3, #3]
 80058c8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	22ca      	movs	r2, #202	; 0xca
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2253      	movs	r2, #83	; 0x53
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f992 	bl	8005c08 <RTC_EnterInitMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11e      	bne.n	800592c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <HAL_RTC_SetTime+0x130>)
 80058f6:	400b      	ands	r3, r1
 80058f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005908:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f9a7 	bl	8005c76 <RTC_ExitInitMode>
 8005928:	4603      	mov	r3, r0
 800592a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	771a      	strb	r2, [r3, #28]

  return status;
 8005946:	7cfb      	ldrb	r3, [r7, #19]
}
 8005948:	4618      	mov	r0, r3
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd90      	pop	{r4, r7, pc}
 8005950:	007f7f7f 	.word	0x007f7f7f

08005954 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <HAL_RTC_GetTime+0xb8>)
 8005984:	4013      	ands	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	0c1b      	lsrs	r3, r3, #16
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	0d9b      	lsrs	r3, r3, #22
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11a      	bne.n	8005a02 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f993 	bl	8005cfc <RTC_Bcd2ToByte>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f98a 	bl	8005cfc <RTC_Bcd2ToByte>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461a      	mov	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	789b      	ldrb	r3, [r3, #2]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 f981 	bl	8005cfc <RTC_Bcd2ToByte>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	007f7f7f 	.word	0x007f7f7f

08005a10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	7f1b      	ldrb	r3, [r3, #28]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_RTC_SetDate+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e06f      	b.n	8005b0c <HAL_RTC_SetDate+0xfc>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2202      	movs	r2, #2
 8005a36:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10e      	bne.n	8005a5c <HAL_RTC_SetDate+0x4c>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	f023 0310 	bic.w	r3, r3, #16
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	330a      	adds	r3, #10
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11c      	bne.n	8005a9c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	78db      	ldrb	r3, [r3, #3]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f92a 	bl	8005cc0 <RTC_ByteToBcd2>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 f923 	bl	8005cc0 <RTC_ByteToBcd2>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a7e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	789b      	ldrb	r3, [r3, #2]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 f91b 	bl	8005cc0 <RTC_ByteToBcd2>
 8005a8a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a8c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e00e      	b.n	8005aba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	78db      	ldrb	r3, [r3, #3]
 8005aa0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005aa8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005aae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	22ca      	movs	r2, #202	; 0xca
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2253      	movs	r2, #83	; 0x53
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f89c 	bl	8005c08 <RTC_EnterInitMode>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	6979      	ldr	r1, [r7, #20]
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <HAL_RTC_SetDate+0x104>)
 8005ae2:	400b      	ands	r3, r1
 8005ae4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8c5 	bl	8005c76 <RTC_ExitInitMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	771a      	strb	r2, [r3, #28]

  return status;
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd90      	pop	{r4, r7, pc}
 8005b14:	00ffff3f 	.word	0x00ffff3f

08005b18 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_RTC_GetDate+0x9c>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	0b5b      	lsrs	r3, r3, #13
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d11a      	bne.n	8005ba8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	78db      	ldrb	r3, [r3, #3]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f8c0 	bl	8005cfc <RTC_Bcd2ToByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f8b7 	bl	8005cfc <RTC_Bcd2ToByte>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	789b      	ldrb	r3, [r3, #2]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f8ae 	bl	8005cfc <RTC_Bcd2ToByte>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	00ffff3f 	.word	0x00ffff3f

08005bb8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bd4:	f7fc fd3a 	bl	800264c <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bda:	e009      	b.n	8005bf0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bdc:	f7fc fd36 	bl	800264c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bea:	d901      	bls.n	8005bf0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e007      	b.n	8005c00 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0ee      	beq.n	8005bdc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d122      	bne.n	8005c6c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c36:	f7fc fd09 	bl	800264c <HAL_GetTick>
 8005c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c3c:	e00c      	b.n	8005c58 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c3e:	f7fc fd05 	bl	800264c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4c:	d904      	bls.n	8005c58 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <RTC_EnterInitMode+0x64>
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d1e8      	bne.n	8005c3e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c90:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff89 	bl	8005bb8 <HAL_RTC_WaitForSynchro>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005cce:	e005      	b.n	8005cdc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	3b0a      	subs	r3, #10
 8005cda:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d8f6      	bhi.n	8005cd0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b2db      	uxtb	r3, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	b2db      	uxtb	r3, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3350      	adds	r3, #80	; 0x50
 8005d4e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3350      	adds	r3, #80	; 0x50
 8005d80:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e156      	b.n	8006068 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fb fb4a 	bl	8001468 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f95b 	bl	8006098 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d00c      	beq.n	8005e04 <HAL_SAI_Init+0x68>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d80d      	bhi.n	8005e0a <HAL_SAI_Init+0x6e>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_SAI_Init+0x5c>
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d003      	beq.n	8005dfe <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005df6:	e008      	b.n	8005e0a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]
      break;
 8005dfc:	e006      	b.n	8005e0c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005dfe:	2310      	movs	r3, #16
 8005e00:	61fb      	str	r3, [r7, #28]
      break;
 8005e02:	e003      	b.n	8005e0c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005e04:	2320      	movs	r3, #32
 8005e06:	61fb      	str	r3, [r7, #28]
      break;
 8005e08:	e000      	b.n	8005e0c <HAL_SAI_Init+0x70>
      break;
 8005e0a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d81e      	bhi.n	8005e52 <HAL_SAI_Init+0xb6>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <HAL_SAI_Init+0x80>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e33 	.word	0x08005e33
 8005e24:	08005e3b 	.word	0x08005e3b
 8005e28:	08005e43 	.word	0x08005e43
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005e30:	e010      	b.n	8005e54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e36:	617b      	str	r3, [r7, #20]
    }
    break;
 8005e38:	e00c      	b.n	8005e54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e3e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005e40:	e008      	b.n	8005e54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e46:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005e50:	e000      	b.n	8005e54 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005e52:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a85      	ldr	r2, [pc, #532]	; (8006070 <HAL_SAI_Init+0x2d4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_SAI_Init+0xcc>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a84      	ldr	r2, [pc, #528]	; (8006074 <HAL_SAI_Init+0x2d8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d103      	bne.n	8005e70 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005e68:	4a83      	ldr	r2, [pc, #524]	; (8006078 <HAL_SAI_Init+0x2dc>)
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e002      	b.n	8005e76 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005e70:	4a82      	ldr	r2, [pc, #520]	; (800607c <HAL_SAI_Init+0x2e0>)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d04c      	beq.n	8005f18 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7a      	ldr	r2, [pc, #488]	; (8006070 <HAL_SAI_Init+0x2d4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_SAI_Init+0xfa>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a78      	ldr	r2, [pc, #480]	; (8006074 <HAL_SAI_Init+0x2d8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d104      	bne.n	8005ea0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005e96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e9a:	f7ff facb 	bl	8005434 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e9e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a76      	ldr	r2, [pc, #472]	; (8006080 <HAL_SAI_Init+0x2e4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_SAI_Init+0x118>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a75      	ldr	r2, [pc, #468]	; (8006084 <HAL_SAI_Init+0x2e8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d104      	bne.n	8005ebe <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005eb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005eb8:	f7ff fabc 	bl	8005434 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ebc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	025b      	lsls	r3, r3, #9
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a6b      	ldr	r2, [pc, #428]	; (8006088 <HAL_SAI_Init+0x2ec>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	08da      	lsrs	r2, r3, #3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005ee4:	68f9      	ldr	r1, [r7, #12]
 8005ee6:	4b68      	ldr	r3, [pc, #416]	; (8006088 <HAL_SAI_Init+0x2ec>)
 8005ee8:	fba3 2301 	umull	r2, r3, r3, r1
 8005eec:	08da      	lsrs	r2, r3, #3
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	1aca      	subs	r2, r1, r3
 8005ef8:	2a08      	cmp	r2, #8
 8005efa:	d904      	bls.n	8005f06 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d104      	bne.n	8005f18 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	085a      	lsrs	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_SAI_Init+0x18c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d109      	bne.n	8005f3c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_SAI_Init+0x198>
 8005f30:	2300      	movs	r3, #0
 8005f32:	e001      	b.n	8005f38 <HAL_SAI_Init+0x19c>
 8005f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e008      	b.n	8005f4e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d102      	bne.n	8005f4a <HAL_SAI_Init+0x1ae>
 8005f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f48:	e000      	b.n	8005f4c <HAL_SAI_Init+0x1b0>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b4c      	ldr	r3, [pc, #304]	; (800608c <HAL_SAI_Init+0x2f0>)
 8005f5a:	400b      	ands	r3, r1
 8005f5c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f72:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005f86:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f92:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	051b      	lsls	r3, r3, #20
 8005f9a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b38      	ldr	r3, [pc, #224]	; (8006090 <HAL_SAI_Init+0x2f4>)
 8005fb0:	400b      	ands	r3, r1
 8005fb2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6859      	ldr	r1, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6899      	ldr	r1, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <HAL_SAI_Init+0x2f8>)
 8005fde:	400b      	ands	r3, r1
 8005fe0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005ff2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005ff8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005ffe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	3b01      	subs	r3, #1
 8006006:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006008:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68d9      	ldr	r1, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006020:	400b      	ands	r3, r1
 8006022:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68d9      	ldr	r1, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006040:	3b01      	subs	r3, #1
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3720      	adds	r7, #32
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40015804 	.word	0x40015804
 8006074:	40015824 	.word	0x40015824
 8006078:	40015800 	.word	0x40015800
 800607c:	40015c00 	.word	0x40015c00
 8006080:	40015c04 	.word	0x40015c04
 8006084:	40015c24 	.word	0x40015c24
 8006088:	cccccccd 	.word	0xcccccccd
 800608c:	ff05c010 	.word	0xff05c010
 8006090:	ffff1ff0 	.word	0xffff1ff0
 8006094:	fff88000 	.word	0xfff88000

08006098 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <SAI_Disable+0x68>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <SAI_Disable+0x6c>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0b1b      	lsrs	r3, r3, #12
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060c2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1e5a      	subs	r2, r3, #1
 80060c8:	60fa      	str	r2, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	72fb      	strb	r3, [r7, #11]
      break;
 80060e2:	e006      	b.n	80060f2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e8      	bne.n	80060c4 <SAI_Disable+0x2c>

  return status;
 80060f2:	7afb      	ldrb	r3, [r7, #11]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000000 	.word	0x20000000
 8006104:	95cbec1b 	.word	0x95cbec1b

08006108 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e022      	b.n	8006160 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fb fa67 	bl	8001600 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2203      	movs	r2, #3
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f814 	bl	8006168 <HAL_SD_InitCard>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e00a      	b.n	8006160 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006168:	b5b0      	push	{r4, r5, r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af04      	add	r7, sp, #16
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006184:	2376      	movs	r3, #118	; 0x76
 8006186:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681d      	ldr	r5, [r3, #0]
 800618c:	466c      	mov	r4, sp
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800619a:	f107 0308 	add.w	r3, r7, #8
 800619e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061a0:	4628      	mov	r0, r5
 80061a2:	f001 ff45 	bl	8008030 <SDMMC_Init>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e059      	b.n	800626c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061c6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 ff79 	bl	80080c4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80061e2:	2002      	movs	r0, #2
 80061e4:	f7fc fa3e 	bl	8002664 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fff3 	bl	80071d4 <SD_PowerON>
 80061ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02e      	b.n	800626c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 ff12 	bl	8007038 <SD_InitCard>
 8006214:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e01b      	b.n	800626c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800623c:	4618      	mov	r0, r3
 800623e:	f001 ffd3 	bl	80081e8 <SDMMC_CmdBlockLength>
 8006242:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00f      	beq.n	800626a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <HAL_SD_InitCard+0x10c>)
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3728      	adds	r7, #40	; 0x28
 8006270:	46bd      	mov	sp, r7
 8006272:	bdb0      	pop	{r4, r5, r7, pc}
 8006274:	004005ff 	.word	0x004005ff

08006278 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d107      	bne.n	80062a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e0c3      	b.n	8006428 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	f040 80bc 	bne.w	8006426 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80062b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	441a      	add	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	429a      	cmp	r2, r3
 80062c0:	d907      	bls.n	80062d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e0aa      	b.n	8006428 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2203      	movs	r2, #3
 80062d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2200      	movs	r2, #0
 80062e0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80062f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	4a4e      	ldr	r2, [pc, #312]	; (8006430 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80062f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	4a4d      	ldr	r2, [pc, #308]	; (8006434 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006300:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	2200      	movs	r2, #0
 8006308:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3380      	adds	r3, #128	; 0x80
 8006338:	4619      	mov	r1, r3
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	025b      	lsls	r3, r3, #9
 8006340:	089b      	lsrs	r3, r3, #2
 8006342:	f7fd fa7d 	bl	8003840 <HAL_DMA_Start_IT>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800635a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a35      	ldr	r2, [pc, #212]	; (8006438 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e055      	b.n	8006428 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	2b01      	cmp	r3, #1
 8006392:	d002      	beq.n	800639a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	025b      	lsls	r3, r3, #9
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800639a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800639e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	025b      	lsls	r3, r3, #9
 80063a4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80063a6:	2390      	movs	r3, #144	; 0x90
 80063a8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80063aa:	2302      	movs	r3, #2
 80063ac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f107 0210 	add.w	r2, r7, #16
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 fee5 	bl	8008190 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d90a      	bls.n	80063e2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2282      	movs	r2, #130	; 0x82
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 ff49 	bl	8008270 <SDMMC_CmdReadMultiBlock>
 80063de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063e0:	e009      	b.n	80063f6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2281      	movs	r2, #129	; 0x81
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 ff1c 	bl	800822c <SDMMC_CmdReadSingleBlock>
 80063f4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d012      	beq.n	8006422 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0d      	ldr	r2, [pc, #52]	; (8006438 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	431a      	orrs	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e002      	b.n	8006428 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	3730      	adds	r7, #48	; 0x30
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	08006e47 	.word	0x08006e47
 8006434:	08006eb9 	.word	0x08006eb9
 8006438:	004005ff 	.word	0x004005ff

0800643c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	; 0x30
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0c6      	b.n	80065f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	f040 80bf 	bne.w	80065f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	441a      	add	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	429a      	cmp	r2, r3
 8006484:	d907      	bls.n	8006496 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0ad      	b.n	80065f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2203      	movs	r2, #3
 800649a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 021a 	orr.w	r2, r2, #26
 80064b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	4a50      	ldr	r2, [pc, #320]	; (80065fc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80064bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	4a4f      	ldr	r2, [pc, #316]	; (8006600 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	2200      	movs	r2, #0
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d002      	beq.n	80064dc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	025b      	lsls	r3, r3, #9
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d90a      	bls.n	80064f8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22a0      	movs	r2, #160	; 0xa0
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 ff02 	bl	80082f8 <SDMMC_CmdWriteMultiBlock>
 80064f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80064f6:	e009      	b.n	800650c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2290      	movs	r2, #144	; 0x90
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006504:	4618      	mov	r0, r3
 8006506:	f001 fed5 	bl	80082b4 <SDMMC_CmdWriteSingleBlock>
 800650a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a3b      	ldr	r2, [pc, #236]	; (8006604 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	431a      	orrs	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e05c      	b.n	80065f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	2240      	movs	r2, #64	; 0x40
 800654e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3380      	adds	r3, #128	; 0x80
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	025b      	lsls	r3, r3, #9
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	f7fd f95e 	bl	8003840 <HAL_DMA_Start_IT>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01a      	beq.n	80065c0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 021a 	bic.w	r2, r2, #26
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a19      	ldr	r2, [pc, #100]	; (8006604 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e018      	b.n	80065f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	025b      	lsls	r3, r3, #9
 80065ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80065cc:	2390      	movs	r3, #144	; 0x90
 80065ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80065d8:	2301      	movs	r3, #1
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f107 0210 	add.w	r2, r7, #16
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fdd2 	bl	8008190 <SDMMC_ConfigData>

      return HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e000      	b.n	80065f2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3730      	adds	r7, #48	; 0x30
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	08006e1d 	.word	0x08006e1d
 8006600:	08006eb9 	.word	0x08006eb9
 8006604:	004005ff 	.word	0x004005ff

08006608 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_SD_IRQHandler+0x2e>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 ffef 	bl	8007612 <SD_Read_IT>
 8006634:	e15a      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 808d 	beq.w	8006760 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b9a      	ldr	r3, [pc, #616]	; (80068c4 <HAL_SD_IRQHandler+0x2bc>)
 800665c:	400b      	ands	r3, r1
 800665e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d039      	beq.n	80066ee <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_SD_IRQHandler+0x86>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d011      	beq.n	80066b2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f001 fe52 	bl	800833c <SDMMC_CmdStopTransfer>
 8006698:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f921 	bl	80068f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80066ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_SD_IRQHandler+0xd6>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f002 fac2 	bl	8008c68 <HAL_SD_RxCpltCallback>
 80066e4:	e102      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fab4 	bl	8008c54 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066ec:	e0fe      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80f9 	beq.w	80068ec <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b00      	cmp	r3, #0
 8006702:	d011      	beq.n	8006728 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fe17 	bl	800833c <SDMMC_CmdStopTransfer>
 800670e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8e6 	bl	80068f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 80dc 	bne.w	80068ec <HAL_SD_IRQHandler+0x2e4>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 80d6 	bne.w	80068ec <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0208 	bic.w	r2, r2, #8
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f002 fa7b 	bl	8008c54 <HAL_SD_TxCpltCallback>
}
 800675e:	e0c5      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_SD_IRQHandler+0x178>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 ff9b 	bl	80076b4 <SD_Write_IT>
 800677e:	e0b5      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006786:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80ae 	beq.w	80068ec <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a2:	f043 0202 	orr.w	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	f043 0208 	orr.w	r2, r3, #8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	f043 0210 	orr.w	r2, r3, #16
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8006800:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006810:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fd90 	bl	800833c <SDMMC_CmdStopTransfer>
 800681c:	4602      	mov	r2, r0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f857 	bl	80068f4 <HAL_SD_ErrorCallback>
}
 8006846:	e051      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04c      	beq.n	80068ec <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <HAL_SD_IRQHandler+0x25e>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d011      	beq.n	800688a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <HAL_SD_IRQHandler+0x2c0>)
 800686c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd f844 	bl	8003900 <HAL_DMA_Abort_IT>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d036      	beq.n	80068ec <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb6a 	bl	8006f5c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006888:	e030      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <HAL_SD_IRQHandler+0x296>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <HAL_SD_IRQHandler+0x2c4>)
 80068a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fd f828 	bl	8003900 <HAL_DMA_Abort_IT>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01a      	beq.n	80068ec <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fb85 	bl	8006fca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80068c0:	e014      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
 80068c2:	bf00      	nop
 80068c4:	ffff3ec5 	.word	0xffff3ec5
 80068c8:	08006f5d 	.word	0x08006f5d
 80068cc:	08006fcb 	.word	0x08006fcb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f002 f9ab 	bl	8008c40 <HAL_SD_AbortCallback>
}
 80068ea:	e7ff      	b.n	80068ec <HAL_SD_IRQHandler+0x2e4>
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	0f9b      	lsrs	r3, r3, #30
 8006918:	b2da      	uxtb	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006922:	0e9b      	lsrs	r3, r3, #26
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	0e1b      	lsrs	r3, r3, #24
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	b2da      	uxtb	r2, r3
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	b2da      	uxtb	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	b2da      	uxtb	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695e:	b2da      	uxtb	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006968:	0d1b      	lsrs	r3, r3, #20
 800696a:	b29a      	uxth	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	b2da      	uxtb	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	0bdb      	lsrs	r3, r3, #15
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006998:	0b9b      	lsrs	r3, r3, #14
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069aa:	0b5b      	lsrs	r3, r3, #13
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069bc:	0b1b      	lsrs	r3, r3, #12
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2200      	movs	r2, #0
 80069ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d163      	bne.n	8006aa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069dc:	009a      	lsls	r2, r3, #2
 80069de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069e2:	4013      	ands	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80069e8:	0f92      	lsrs	r2, r2, #30
 80069ea:	431a      	orrs	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f4:	0edb      	lsrs	r3, r3, #27
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a06:	0e1b      	lsrs	r3, r3, #24
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a18:	0d5b      	lsrs	r3, r3, #21
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2a:	0c9b      	lsrs	r3, r3, #18
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3c:	0bdb      	lsrs	r3, r3, #15
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	7e1b      	ldrb	r3, [r3, #24]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	3302      	adds	r3, #2
 8006a60:	2201      	movs	r2, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a6a:	fb03 f202 	mul.w	r2, r3, r2
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	7a1b      	ldrb	r3, [r3, #8]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a8c:	0a52      	lsrs	r2, r2, #9
 8006a8e:	fb03 f202 	mul.w	r2, r3, r2
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a9c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a9e:	e031      	b.n	8006b04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d11d      	bne.n	8006ae4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab6:	0c1b      	lsrs	r3, r3, #16
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	029a      	lsls	r2, r3, #10
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	661a      	str	r2, [r3, #96]	; 0x60
 8006ae2:	e00f      	b.n	8006b04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a58      	ldr	r2, [pc, #352]	; (8006c4c <HAL_SD_GetCardCSD+0x344>)
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e09d      	b.n	8006c40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b08:	0b9b      	lsrs	r3, r3, #14
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1a:	09db      	lsrs	r3, r3, #7
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	0fdb      	lsrs	r3, r3, #31
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b48:	0f5b      	lsrs	r3, r3, #29
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	0e9b      	lsrs	r3, r3, #26
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	0d9b      	lsrs	r3, r3, #22
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	0d5b      	lsrs	r3, r3, #21
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	0bdb      	lsrs	r3, r3, #15
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	0b9b      	lsrs	r3, r3, #14
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	0b5b      	lsrs	r3, r3, #13
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	0b1b      	lsrs	r3, r3, #12
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	0a9b      	lsrs	r3, r3, #10
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	004005ff 	.word	0x004005ff

08006c50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ca8:	b5b0      	push	{r4, r5, r7, lr}
 8006caa:	b08e      	sub	sp, #56	; 0x38
 8006cac:	af04      	add	r7, sp, #16
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2203      	movs	r2, #3
 8006cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d02e      	beq.n	8006d26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	d106      	bne.n	8006cde <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
 8006cdc:	e029      	b.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	d10a      	bne.n	8006cfc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fb2a 	bl	8007340 <SD_WideBus_Enable>
 8006cec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cfa:	e01a      	b.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fb67 	bl	80073d6 <SD_WideBus_Disable>
 8006d08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
 8006d16:	e00c      	b.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
 8006d24:	e005      	b.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00b      	beq.n	8006d52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a26      	ldr	r2, [pc, #152]	; (8006dd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d50:	e01f      	b.n	8006d92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681d      	ldr	r5, [r3, #0]
 8006d78:	466c      	mov	r4, sp
 8006d7a:	f107 0314 	add.w	r3, r7, #20
 8006d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d86:	f107 0308 	add.w	r3, r7, #8
 8006d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f001 f94f 	bl	8008030 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 fa24 	bl	80081e8 <SDMMC_CmdBlockLength>
 8006da0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00c      	beq.n	8006dc2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3728      	adds	r7, #40	; 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	004005ff 	.word	0x004005ff

08006ddc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa7e 	bl	80072f0 <SD_SendStatus>
 8006df4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	0a5b      	lsrs	r3, r3, #9
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e12:	693b      	ldr	r3, [r7, #16]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	2b82      	cmp	r3, #130	; 0x82
 8006e5a:	d111      	bne.n	8006e80 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fa6b 	bl	800833c <SDMMC_CmdStopTransfer>
 8006e66:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	431a      	orrs	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fd3a 	bl	80068f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0208 	bic.w	r2, r2, #8
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f001 fedd 	bl	8008c68 <HAL_SD_RxCpltCallback>
#endif
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fc fec6 	bl	8003c58 <HAL_DMA_GetError>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d03e      	beq.n	8006f50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d002      	beq.n	8006eee <SD_DMAError+0x36>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d12d      	bne.n	8006f4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <SD_DMAError+0xa0>)
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006f04:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006f12:	6978      	ldr	r0, [r7, #20]
 8006f14:	f7ff ff62 	bl	8006ddc <HAL_SD_GetCardState>
 8006f18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b06      	cmp	r3, #6
 8006f1e:	d002      	beq.n	8006f26 <SD_DMAError+0x6e>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d10a      	bne.n	8006f3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fa06 	bl	800833c <SDMMC_CmdStopTransfer>
 8006f30:	4602      	mov	r2, r0
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	431a      	orrs	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2200      	movs	r2, #0
 8006f48:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006f4a:	6978      	ldr	r0, [r7, #20]
 8006f4c:	f7ff fcd2 	bl	80068f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006f50:	bf00      	nop
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	004005ff 	.word	0x004005ff

08006f5c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff ff31 	bl	8006ddc <HAL_SD_GetCardState>
 8006f7a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d002      	beq.n	8006f96 <SD_DMATxAbort+0x3a>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d10a      	bne.n	8006fac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 f9ce 	bl	800833c <SDMMC_CmdStopTransfer>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 fe43 	bl	8008c40 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006fba:	e002      	b.n	8006fc2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff fc99 	bl	80068f4 <HAL_SD_ErrorCallback>
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fefa 	bl	8006ddc <HAL_SD_GetCardState>
 8006fe8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b06      	cmp	r3, #6
 8006ffc:	d002      	beq.n	8007004 <SD_DMARxAbort+0x3a>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b05      	cmp	r3, #5
 8007002:	d10a      	bne.n	800701a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f997 	bl	800833c <SDMMC_CmdStopTransfer>
 800700e:	4602      	mov	r2, r0
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	431a      	orrs	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f001 fe0c 	bl	8008c40 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007028:	e002      	b.n	8007030 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff fc62 	bl	80068f4 <HAL_SD_ErrorCallback>
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007038:	b5b0      	push	{r4, r5, r7, lr}
 800703a:	b094      	sub	sp, #80	; 0x50
 800703c:	af04      	add	r7, sp, #16
 800703e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007040:	2301      	movs	r3, #1
 8007042:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f001 f849 	bl	80080e0 <SDMMC_GetPowerState>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007054:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007058:	e0b8      	b.n	80071cc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	2b03      	cmp	r3, #3
 8007060:	d02f      	beq.n	80070c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fa73 	bl	8008552 <SDMMC_CmdSendCID>
 800706c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <SD_InitCard+0x40>
    {
      return errorstate;
 8007074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007076:	e0a9      	b.n	80071cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f873 	bl	800816a <SDMMC_GetResponse>
 8007084:	4602      	mov	r2, r0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2104      	movs	r1, #4
 8007090:	4618      	mov	r0, r3
 8007092:	f001 f86a 	bl	800816a <SDMMC_GetResponse>
 8007096:	4602      	mov	r2, r0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2108      	movs	r1, #8
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 f861 	bl	800816a <SDMMC_GetResponse>
 80070a8:	4602      	mov	r2, r0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	210c      	movs	r1, #12
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 f858 	bl	800816a <SDMMC_GetResponse>
 80070ba:	4602      	mov	r2, r0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d00d      	beq.n	80070e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f107 020e 	add.w	r2, r7, #14
 80070d2:	4611      	mov	r1, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fa79 	bl	80085cc <SDMMC_CmdSetRelAdd>
 80070da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80070e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e4:	e072      	b.n	80071cc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d036      	beq.n	800715c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80070ee:	89fb      	ldrh	r3, [r7, #14]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f001 fa43 	bl	800858e <SDMMC_CmdSendCSD>
 8007108:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800710a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	e05b      	b.n	80071cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f001 f825 	bl	800816a <SDMMC_GetResponse>
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2104      	movs	r1, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f001 f81c 	bl	800816a <SDMMC_GetResponse>
 8007132:	4602      	mov	r2, r0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2108      	movs	r1, #8
 800713e:	4618      	mov	r0, r3
 8007140:	f001 f813 	bl	800816a <SDMMC_GetResponse>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	210c      	movs	r1, #12
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f80a 	bl	800816a <SDMMC_GetResponse>
 8007156:	4602      	mov	r2, r0
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2104      	movs	r1, #4
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f801 	bl	800816a <SDMMC_GetResponse>
 8007168:	4603      	mov	r3, r0
 800716a:	0d1a      	lsrs	r2, r3, #20
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007170:	f107 0310 	add.w	r3, r7, #16
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fbc6 	bl	8006908 <HAL_SD_GetCardCSD>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007186:	e021      	b.n	80071cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6819      	ldr	r1, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	2200      	movs	r2, #0
 8007194:	461c      	mov	r4, r3
 8007196:	4615      	mov	r5, r2
 8007198:	4622      	mov	r2, r4
 800719a:	462b      	mov	r3, r5
 800719c:	4608      	mov	r0, r1
 800719e:	f001 f8ef 	bl	8008380 <SDMMC_CmdSelDesel>
 80071a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80071a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <SD_InitCard+0x176>
  {
    return errorstate;
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	e00e      	b.n	80071cc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681d      	ldr	r5, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	466c      	mov	r4, sp
 80071b6:	f103 0210 	add.w	r2, r3, #16
 80071ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80071bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071c0:	3304      	adds	r3, #4
 80071c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 ff33 	bl	8008030 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3740      	adds	r7, #64	; 0x40
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bdb0      	pop	{r4, r5, r7, pc}

080071d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f8ea 	bl	80083c6 <SDMMC_CmdGoIdleState>
 80071f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	e072      	b.n	80072e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f8fd 	bl	8008402 <SDMMC_CmdOperCond>
 8007208:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00d      	beq.n	800722c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f001 f8d3 	bl	80083c6 <SDMMC_CmdGoIdleState>
 8007220:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	e05b      	b.n	80072e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007236:	2b01      	cmp	r3, #1
 8007238:	d137      	bne.n	80072aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f8fd 	bl	8008440 <SDMMC_CmdAppCommand>
 8007246:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02d      	beq.n	80072aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800724e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007252:	e047      	b.n	80072e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f001 f8f0 	bl	8008440 <SDMMC_CmdAppCommand>
 8007260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <SD_PowerON+0x98>
    {
      return errorstate;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	e03b      	b.n	80072e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	491e      	ldr	r1, [pc, #120]	; (80072ec <SD_PowerON+0x118>)
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f906 	bl	8008484 <SDMMC_CmdAppOperCommand>
 8007278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007284:	e02e      	b.n	80072e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ff6c 	bl	800816a <SDMMC_GetResponse>
 8007292:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	0fdb      	lsrs	r3, r3, #31
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <SD_PowerON+0xcc>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <SD_PowerON+0xce>
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]

    count++;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d802      	bhi.n	80072ba <SD_PowerON+0xe6>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0cc      	beq.n	8007254 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d902      	bls.n	80072ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80072c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072c8:	e00c      	b.n	80072e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	645a      	str	r2, [r3, #68]	; 0x44
 80072da:	e002      	b.n	80072e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	c1100000 	.word	0xc1100000

080072f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007304:	e018      	b.n	8007338 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	041b      	lsls	r3, r3, #16
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f001 f97b 	bl	800860e <SDMMC_CmdSendStatus>
 8007318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	e009      	b.n	8007338 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f000 ff1d 	bl	800816a <SDMMC_GetResponse>
 8007330:	4602      	mov	r2, r0
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f000 ff07 	bl	800816a <SDMMC_GetResponse>
 800735c:	4603      	mov	r3, r0
 800735e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007366:	d102      	bne.n	800736e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800736c:	e02f      	b.n	80073ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f879 	bl	800746c <SD_FindSCR>
 800737a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	e023      	b.n	80073ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01c      	beq.n	80073ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f001 f84f 	bl	8008440 <SDMMC_CmdAppCommand>
 80073a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	e00f      	b.n	80073ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2102      	movs	r1, #2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 f889 	bl	80084cc <SDMMC_CmdBusWidth>
 80073ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	e003      	b.n	80073ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e001      	b.n	80073ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	2300      	movs	r3, #0
 80073e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 febc 	bl	800816a <SDMMC_GetResponse>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073fc:	d102      	bne.n	8007404 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007402:	e02f      	b.n	8007464 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007404:	f107 030c 	add.w	r3, r7, #12
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f82e 	bl	800746c <SD_FindSCR>
 8007410:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	e023      	b.n	8007464 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f001 f804 	bl	8008440 <SDMMC_CmdAppCommand>
 8007438:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	e00f      	b.n	8007464 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f001 f83e 	bl	80084cc <SDMMC_CmdBusWidth>
 8007450:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	e003      	b.n	8007464 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800745c:	2300      	movs	r3, #0
 800745e:	e001      	b.n	8007464 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007460:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b08f      	sub	sp, #60	; 0x3c
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007476:	f7fb f8e9 	bl	800264c <HAL_GetTick>
 800747a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007480:	2300      	movs	r3, #0
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2108      	movs	r1, #8
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fea8 	bl	80081e8 <SDMMC_CmdBlockLength>
 8007498:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	e0b2      	b.n	800760a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	041b      	lsls	r3, r3, #16
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f000 ffc5 	bl	8008440 <SDMMC_CmdAppCommand>
 80074b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	e0a3      	b.n	800760a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80074c8:	2308      	movs	r3, #8
 80074ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80074cc:	2330      	movs	r3, #48	; 0x30
 80074ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80074d0:	2302      	movs	r3, #2
 80074d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80074d8:	2301      	movs	r3, #1
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f107 0210 	add.w	r2, r7, #16
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fe52 	bl	8008190 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f80d 	bl	8008510 <SDMMC_CmdSendSCR>
 80074f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d02a      	beq.n	8007554 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	e083      	b.n	800760a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6819      	ldr	r1, [r3, #0]
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	f107 0208 	add.w	r2, r7, #8
 800751c:	18d4      	adds	r4, r2, r3
 800751e:	4608      	mov	r0, r1
 8007520:	f000 fdb2 	bl	8008088 <SDMMC_ReadFIFO>
 8007524:	4603      	mov	r3, r0
 8007526:	6023      	str	r3, [r4, #0]
      index++;
 8007528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752a:	3301      	adds	r3, #1
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
 800752e:	e006      	b.n	800753e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d012      	beq.n	8007564 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800753e:	f7fb f885 	bl	800264c <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754c:	d102      	bne.n	8007554 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800754e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007552:	e05a      	b.n	800760a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0cf      	beq.n	8007502 <SD_FindSCR+0x96>
 8007562:	e000      	b.n	8007566 <SD_FindSCR+0xfa>
      break;
 8007564:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2208      	movs	r2, #8
 800757a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800757c:	2308      	movs	r3, #8
 800757e:	e044      	b.n	800760a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2202      	movs	r2, #2
 8007594:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007596:	2302      	movs	r3, #2
 8007598:	e037      	b.n	800760a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2220      	movs	r2, #32
 80075ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80075b0:	2320      	movs	r3, #32
 80075b2:	e02a      	b.n	800760a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	061a      	lsls	r2, r3, #24
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80075d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	0e1b      	lsrs	r3, r3, #24
 80075da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	601a      	str	r2, [r3, #0]
    scr++;
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	3304      	adds	r3, #4
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	061a      	lsls	r2, r3, #24
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	0e1b      	lsrs	r3, r3, #24
 8007602:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	373c      	adds	r7, #60	; 0x3c
 800760e:	46bd      	mov	sp, r7
 8007610:	bd90      	pop	{r4, r7, pc}

08007612 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d03f      	beq.n	80076ac <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e033      	b.n	800769a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fd26 	bl	8008088 <SDMMC_ReadFIFO>
 800763c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3b01      	subs	r3, #1
 8007650:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	b2da      	uxtb	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	3b01      	subs	r3, #1
 8007666:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	b2da      	uxtb	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3b01      	subs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	0e1b      	lsrs	r3, r3, #24
 8007682:	b2da      	uxtb	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3b01      	subs	r3, #1
 8007692:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	3301      	adds	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b07      	cmp	r3, #7
 800769e:	d9c8      	bls.n	8007632 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80076ac:	bf00      	nop
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d043      	beq.n	8007756 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	e037      	b.n	8007744 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	021a      	lsls	r2, r3, #8
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	041a      	lsls	r2, r3, #16
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4313      	orrs	r3, r2
 8007708:	60bb      	str	r3, [r7, #8]
      tmp++;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3301      	adds	r3, #1
 800770e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	3b01      	subs	r3, #1
 8007714:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	061a      	lsls	r2, r3, #24
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	3b01      	subs	r3, #1
 800772c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f107 0208 	add.w	r2, r7, #8
 8007736:	4611      	mov	r1, r2
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fcb2 	bl	80080a2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	3301      	adds	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b07      	cmp	r3, #7
 8007748:	d9c4      	bls.n	80076d4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007756:	bf00      	nop
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e040      	b.n	80077f2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fa f955 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2224      	movs	r2, #36	; 0x24
 800778a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0201 	bic.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f82d 	bl	80077fc <UART_SetConfig>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e022      	b.n	80077f2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa85 	bl	8007cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 0201 	orr.w	r2, r2, #1
 80077e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fb0c 	bl	8007e08 <UART_CheckIdleState>
 80077f0:	4603      	mov	r3, r0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4313      	orrs	r3, r2
 800781e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4ba6      	ldr	r3, [pc, #664]	; (8007ac0 <UART_SetConfig+0x2c4>)
 8007828:	4013      	ands	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	430b      	orrs	r3, r1
 8007832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	430a      	orrs	r2, r1
 800786c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a94      	ldr	r2, [pc, #592]	; (8007ac4 <UART_SetConfig+0x2c8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d120      	bne.n	80078ba <UART_SetConfig+0xbe>
 8007878:	4b93      	ldr	r3, [pc, #588]	; (8007ac8 <UART_SetConfig+0x2cc>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b03      	cmp	r3, #3
 8007884:	d816      	bhi.n	80078b4 <UART_SetConfig+0xb8>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x90>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078a9 	.word	0x080078a9
 8007894:	080078a3 	.word	0x080078a3
 8007898:	080078af 	.word	0x080078af
 800789c:	2301      	movs	r3, #1
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e150      	b.n	8007b44 <UART_SetConfig+0x348>
 80078a2:	2302      	movs	r3, #2
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e14d      	b.n	8007b44 <UART_SetConfig+0x348>
 80078a8:	2304      	movs	r3, #4
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e14a      	b.n	8007b44 <UART_SetConfig+0x348>
 80078ae:	2308      	movs	r3, #8
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e147      	b.n	8007b44 <UART_SetConfig+0x348>
 80078b4:	2310      	movs	r3, #16
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e144      	b.n	8007b44 <UART_SetConfig+0x348>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a83      	ldr	r2, [pc, #524]	; (8007acc <UART_SetConfig+0x2d0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d132      	bne.n	800792a <UART_SetConfig+0x12e>
 80078c4:	4b80      	ldr	r3, [pc, #512]	; (8007ac8 <UART_SetConfig+0x2cc>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	f003 030c 	and.w	r3, r3, #12
 80078ce:	2b0c      	cmp	r3, #12
 80078d0:	d828      	bhi.n	8007924 <UART_SetConfig+0x128>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0xdc>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	0800790d 	.word	0x0800790d
 80078dc:	08007925 	.word	0x08007925
 80078e0:	08007925 	.word	0x08007925
 80078e4:	08007925 	.word	0x08007925
 80078e8:	08007919 	.word	0x08007919
 80078ec:	08007925 	.word	0x08007925
 80078f0:	08007925 	.word	0x08007925
 80078f4:	08007925 	.word	0x08007925
 80078f8:	08007913 	.word	0x08007913
 80078fc:	08007925 	.word	0x08007925
 8007900:	08007925 	.word	0x08007925
 8007904:	08007925 	.word	0x08007925
 8007908:	0800791f 	.word	0x0800791f
 800790c:	2300      	movs	r3, #0
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e118      	b.n	8007b44 <UART_SetConfig+0x348>
 8007912:	2302      	movs	r3, #2
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e115      	b.n	8007b44 <UART_SetConfig+0x348>
 8007918:	2304      	movs	r3, #4
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e112      	b.n	8007b44 <UART_SetConfig+0x348>
 800791e:	2308      	movs	r3, #8
 8007920:	77fb      	strb	r3, [r7, #31]
 8007922:	e10f      	b.n	8007b44 <UART_SetConfig+0x348>
 8007924:	2310      	movs	r3, #16
 8007926:	77fb      	strb	r3, [r7, #31]
 8007928:	e10c      	b.n	8007b44 <UART_SetConfig+0x348>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a68      	ldr	r2, [pc, #416]	; (8007ad0 <UART_SetConfig+0x2d4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d120      	bne.n	8007976 <UART_SetConfig+0x17a>
 8007934:	4b64      	ldr	r3, [pc, #400]	; (8007ac8 <UART_SetConfig+0x2cc>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800793e:	2b30      	cmp	r3, #48	; 0x30
 8007940:	d013      	beq.n	800796a <UART_SetConfig+0x16e>
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	d814      	bhi.n	8007970 <UART_SetConfig+0x174>
 8007946:	2b20      	cmp	r3, #32
 8007948:	d009      	beq.n	800795e <UART_SetConfig+0x162>
 800794a:	2b20      	cmp	r3, #32
 800794c:	d810      	bhi.n	8007970 <UART_SetConfig+0x174>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <UART_SetConfig+0x15c>
 8007952:	2b10      	cmp	r3, #16
 8007954:	d006      	beq.n	8007964 <UART_SetConfig+0x168>
 8007956:	e00b      	b.n	8007970 <UART_SetConfig+0x174>
 8007958:	2300      	movs	r3, #0
 800795a:	77fb      	strb	r3, [r7, #31]
 800795c:	e0f2      	b.n	8007b44 <UART_SetConfig+0x348>
 800795e:	2302      	movs	r3, #2
 8007960:	77fb      	strb	r3, [r7, #31]
 8007962:	e0ef      	b.n	8007b44 <UART_SetConfig+0x348>
 8007964:	2304      	movs	r3, #4
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e0ec      	b.n	8007b44 <UART_SetConfig+0x348>
 800796a:	2308      	movs	r3, #8
 800796c:	77fb      	strb	r3, [r7, #31]
 800796e:	e0e9      	b.n	8007b44 <UART_SetConfig+0x348>
 8007970:	2310      	movs	r3, #16
 8007972:	77fb      	strb	r3, [r7, #31]
 8007974:	e0e6      	b.n	8007b44 <UART_SetConfig+0x348>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a56      	ldr	r2, [pc, #344]	; (8007ad4 <UART_SetConfig+0x2d8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d120      	bne.n	80079c2 <UART_SetConfig+0x1c6>
 8007980:	4b51      	ldr	r3, [pc, #324]	; (8007ac8 <UART_SetConfig+0x2cc>)
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007986:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800798a:	2bc0      	cmp	r3, #192	; 0xc0
 800798c:	d013      	beq.n	80079b6 <UART_SetConfig+0x1ba>
 800798e:	2bc0      	cmp	r3, #192	; 0xc0
 8007990:	d814      	bhi.n	80079bc <UART_SetConfig+0x1c0>
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d009      	beq.n	80079aa <UART_SetConfig+0x1ae>
 8007996:	2b80      	cmp	r3, #128	; 0x80
 8007998:	d810      	bhi.n	80079bc <UART_SetConfig+0x1c0>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <UART_SetConfig+0x1a8>
 800799e:	2b40      	cmp	r3, #64	; 0x40
 80079a0:	d006      	beq.n	80079b0 <UART_SetConfig+0x1b4>
 80079a2:	e00b      	b.n	80079bc <UART_SetConfig+0x1c0>
 80079a4:	2300      	movs	r3, #0
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e0cc      	b.n	8007b44 <UART_SetConfig+0x348>
 80079aa:	2302      	movs	r3, #2
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e0c9      	b.n	8007b44 <UART_SetConfig+0x348>
 80079b0:	2304      	movs	r3, #4
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e0c6      	b.n	8007b44 <UART_SetConfig+0x348>
 80079b6:	2308      	movs	r3, #8
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e0c3      	b.n	8007b44 <UART_SetConfig+0x348>
 80079bc:	2310      	movs	r3, #16
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e0c0      	b.n	8007b44 <UART_SetConfig+0x348>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a44      	ldr	r2, [pc, #272]	; (8007ad8 <UART_SetConfig+0x2dc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d125      	bne.n	8007a18 <UART_SetConfig+0x21c>
 80079cc:	4b3e      	ldr	r3, [pc, #248]	; (8007ac8 <UART_SetConfig+0x2cc>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079da:	d017      	beq.n	8007a0c <UART_SetConfig+0x210>
 80079dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079e0:	d817      	bhi.n	8007a12 <UART_SetConfig+0x216>
 80079e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e6:	d00b      	beq.n	8007a00 <UART_SetConfig+0x204>
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ec:	d811      	bhi.n	8007a12 <UART_SetConfig+0x216>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <UART_SetConfig+0x1fe>
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d006      	beq.n	8007a06 <UART_SetConfig+0x20a>
 80079f8:	e00b      	b.n	8007a12 <UART_SetConfig+0x216>
 80079fa:	2300      	movs	r3, #0
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e0a1      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a00:	2302      	movs	r3, #2
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e09e      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a06:	2304      	movs	r3, #4
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e09b      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	e098      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a12:	2310      	movs	r3, #16
 8007a14:	77fb      	strb	r3, [r7, #31]
 8007a16:	e095      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2f      	ldr	r2, [pc, #188]	; (8007adc <UART_SetConfig+0x2e0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d125      	bne.n	8007a6e <UART_SetConfig+0x272>
 8007a22:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <UART_SetConfig+0x2cc>)
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a30:	d017      	beq.n	8007a62 <UART_SetConfig+0x266>
 8007a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a36:	d817      	bhi.n	8007a68 <UART_SetConfig+0x26c>
 8007a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a3c:	d00b      	beq.n	8007a56 <UART_SetConfig+0x25a>
 8007a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a42:	d811      	bhi.n	8007a68 <UART_SetConfig+0x26c>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <UART_SetConfig+0x254>
 8007a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a4c:	d006      	beq.n	8007a5c <UART_SetConfig+0x260>
 8007a4e:	e00b      	b.n	8007a68 <UART_SetConfig+0x26c>
 8007a50:	2301      	movs	r3, #1
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e076      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a56:	2302      	movs	r3, #2
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e073      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e070      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a62:	2308      	movs	r3, #8
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e06d      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e06a      	b.n	8007b44 <UART_SetConfig+0x348>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <UART_SetConfig+0x2e4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d138      	bne.n	8007aea <UART_SetConfig+0x2ee>
 8007a78:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <UART_SetConfig+0x2cc>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a86:	d017      	beq.n	8007ab8 <UART_SetConfig+0x2bc>
 8007a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a8c:	d82a      	bhi.n	8007ae4 <UART_SetConfig+0x2e8>
 8007a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a92:	d00b      	beq.n	8007aac <UART_SetConfig+0x2b0>
 8007a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a98:	d824      	bhi.n	8007ae4 <UART_SetConfig+0x2e8>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <UART_SetConfig+0x2aa>
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa2:	d006      	beq.n	8007ab2 <UART_SetConfig+0x2b6>
 8007aa4:	e01e      	b.n	8007ae4 <UART_SetConfig+0x2e8>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e04b      	b.n	8007b44 <UART_SetConfig+0x348>
 8007aac:	2302      	movs	r3, #2
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e048      	b.n	8007b44 <UART_SetConfig+0x348>
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	77fb      	strb	r3, [r7, #31]
 8007ab6:	e045      	b.n	8007b44 <UART_SetConfig+0x348>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	77fb      	strb	r3, [r7, #31]
 8007abc:	e042      	b.n	8007b44 <UART_SetConfig+0x348>
 8007abe:	bf00      	nop
 8007ac0:	efff69f3 	.word	0xefff69f3
 8007ac4:	40011000 	.word	0x40011000
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	40004800 	.word	0x40004800
 8007ad4:	40004c00 	.word	0x40004c00
 8007ad8:	40005000 	.word	0x40005000
 8007adc:	40011400 	.word	0x40011400
 8007ae0:	40007800 	.word	0x40007800
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e02c      	b.n	8007b44 <UART_SetConfig+0x348>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a72      	ldr	r2, [pc, #456]	; (8007cb8 <UART_SetConfig+0x4bc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d125      	bne.n	8007b40 <UART_SetConfig+0x344>
 8007af4:	4b71      	ldr	r3, [pc, #452]	; (8007cbc <UART_SetConfig+0x4c0>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007afe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b02:	d017      	beq.n	8007b34 <UART_SetConfig+0x338>
 8007b04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b08:	d817      	bhi.n	8007b3a <UART_SetConfig+0x33e>
 8007b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b0e:	d00b      	beq.n	8007b28 <UART_SetConfig+0x32c>
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	d811      	bhi.n	8007b3a <UART_SetConfig+0x33e>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <UART_SetConfig+0x326>
 8007b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b1e:	d006      	beq.n	8007b2e <UART_SetConfig+0x332>
 8007b20:	e00b      	b.n	8007b3a <UART_SetConfig+0x33e>
 8007b22:	2300      	movs	r3, #0
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e00d      	b.n	8007b44 <UART_SetConfig+0x348>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e00a      	b.n	8007b44 <UART_SetConfig+0x348>
 8007b2e:	2304      	movs	r3, #4
 8007b30:	77fb      	strb	r3, [r7, #31]
 8007b32:	e007      	b.n	8007b44 <UART_SetConfig+0x348>
 8007b34:	2308      	movs	r3, #8
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e004      	b.n	8007b44 <UART_SetConfig+0x348>
 8007b3a:	2310      	movs	r3, #16
 8007b3c:	77fb      	strb	r3, [r7, #31]
 8007b3e:	e001      	b.n	8007b44 <UART_SetConfig+0x348>
 8007b40:	2310      	movs	r3, #16
 8007b42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4c:	d15b      	bne.n	8007c06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007b4e:	7ffb      	ldrb	r3, [r7, #31]
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d828      	bhi.n	8007ba6 <UART_SetConfig+0x3aa>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x360>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	08007ba7 	.word	0x08007ba7
 8007b6c:	08007b97 	.word	0x08007b97
 8007b70:	08007ba7 	.word	0x08007ba7
 8007b74:	08007ba7 	.word	0x08007ba7
 8007b78:	08007ba7 	.word	0x08007ba7
 8007b7c:	08007b9f 	.word	0x08007b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b80:	f7fd f808 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007b84:	61b8      	str	r0, [r7, #24]
        break;
 8007b86:	e013      	b.n	8007bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b88:	f7fd f818 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8007b8c:	61b8      	str	r0, [r7, #24]
        break;
 8007b8e:	e00f      	b.n	8007bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b90:	4b4b      	ldr	r3, [pc, #300]	; (8007cc0 <UART_SetConfig+0x4c4>)
 8007b92:	61bb      	str	r3, [r7, #24]
        break;
 8007b94:	e00c      	b.n	8007bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b96:	f7fc ff2b 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 8007b9a:	61b8      	str	r0, [r7, #24]
        break;
 8007b9c:	e008      	b.n	8007bb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba2:	61bb      	str	r3, [r7, #24]
        break;
 8007ba4:	e004      	b.n	8007bb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	77bb      	strb	r3, [r7, #30]
        break;
 8007bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d074      	beq.n	8007ca0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	005a      	lsls	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b0f      	cmp	r3, #15
 8007bd0:	d916      	bls.n	8007c00 <UART_SetConfig+0x404>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d212      	bcs.n	8007c00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f023 030f 	bic.w	r3, r3, #15
 8007be2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	89fa      	ldrh	r2, [r7, #14]
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	e04f      	b.n	8007ca0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	77bb      	strb	r3, [r7, #30]
 8007c04:	e04c      	b.n	8007ca0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d828      	bhi.n	8007c5e <UART_SetConfig+0x462>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0x418>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c5f 	.word	0x08007c5f
 8007c24:	08007c4f 	.word	0x08007c4f
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c5f 	.word	0x08007c5f
 8007c30:	08007c5f 	.word	0x08007c5f
 8007c34:	08007c57 	.word	0x08007c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c38:	f7fc ffac 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8007c3c:	61b8      	str	r0, [r7, #24]
        break;
 8007c3e:	e013      	b.n	8007c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c40:	f7fc ffbc 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8007c44:	61b8      	str	r0, [r7, #24]
        break;
 8007c46:	e00f      	b.n	8007c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <UART_SetConfig+0x4c4>)
 8007c4a:	61bb      	str	r3, [r7, #24]
        break;
 8007c4c:	e00c      	b.n	8007c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4e:	f7fc fecf 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 8007c52:	61b8      	str	r0, [r7, #24]
        break;
 8007c54:	e008      	b.n	8007c68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5a:	61bb      	str	r3, [r7, #24]
        break;
 8007c5c:	e004      	b.n	8007c68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	77bb      	strb	r3, [r7, #30]
        break;
 8007c66:	bf00      	nop
    }

    if (pclk != 0U)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d018      	beq.n	8007ca0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	085a      	lsrs	r2, r3, #1
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	441a      	add	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b0f      	cmp	r3, #15
 8007c86:	d909      	bls.n	8007c9c <UART_SetConfig+0x4a0>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8e:	d205      	bcs.n	8007c9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e001      	b.n	8007ca0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007cac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40007c00 	.word	0x40007c00
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	00f42400 	.word	0x00f42400

08007cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01a      	beq.n	8007dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc2:	d10a      	bne.n	8007dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e18:	f7fa fc18 	bl	800264c <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d10e      	bne.n	8007e4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f831 	bl	8007ea2 <UART_WaitOnFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e027      	b.n	8007e9a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d10e      	bne.n	8007e76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f81b 	bl	8007ea2 <UART_WaitOnFlagUntilTimeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e011      	b.n	8007e9a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b09c      	sub	sp, #112	; 0x70
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb2:	e0a7      	b.n	8008004 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eba:	f000 80a3 	beq.w	8008004 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ebe:	f7fa fbc5 	bl	800264c <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d302      	bcc.n	8007ed4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d13f      	bne.n	8007f54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e6      	bne.n	8007ed4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3308      	adds	r3, #8
 8007f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e068      	b.n	8008026 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d050      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f70:	d148      	bne.n	8008004 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fce:	623a      	str	r2, [r7, #32]
 8007fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	69f9      	ldr	r1, [r7, #28]
 8007fd4:	6a3a      	ldr	r2, [r7, #32]
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e010      	b.n	8008026 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69da      	ldr	r2, [r3, #28]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	4013      	ands	r3, r2
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	429a      	cmp	r2, r3
 8008012:	bf0c      	ite	eq
 8008014:	2301      	moveq	r3, #1
 8008016:	2300      	movne	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	461a      	mov	r2, r3
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	429a      	cmp	r2, r3
 8008020:	f43f af48 	beq.w	8007eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3770      	adds	r7, #112	; 0x70
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008030:	b084      	sub	sp, #16
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	f107 001c 	add.w	r0, r7, #28
 800803e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008046:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008048:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800804a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800804e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008052:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008056:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800805a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <SDMMC_Init+0x54>)
 8008068:	4013      	ands	r3, r2
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	431a      	orrs	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	b004      	add	sp, #16
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	ffff8100 	.word	0xffff8100

08008088 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008096:	4618      	mov	r0, r3
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2203      	movs	r2, #3
 80080d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0303 	and.w	r3, r3, #3
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800811a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008120:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008126:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	4b06      	ldr	r3, [pc, #24]	; (800814c <SDMMC_SendCommand+0x50>)
 8008134:	4013      	ands	r3, r2
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	fffff000 	.word	0xfffff000

08008150 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	b2db      	uxtb	r3, r3
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3314      	adds	r3, #20
 8008178:	461a      	mov	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	4413      	add	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
}  
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80081bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80081c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80081da:	2300      	movs	r3, #0

}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80081f6:	2310      	movs	r3, #16
 80081f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081fa:	2340      	movs	r3, #64	; 0x40
 80081fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff ff74 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008214:	f241 3288 	movw	r2, #5000	; 0x1388
 8008218:	2110      	movs	r1, #16
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa1a 	bl	8008654 <SDMMC_GetCmdResp1>
 8008220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008222:	69fb      	ldr	r3, [r7, #28]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800823a:	2311      	movs	r3, #17
 800823c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800824a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800824c:	f107 0308 	add.w	r3, r7, #8
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff ff52 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008258:	f241 3288 	movw	r2, #5000	; 0x1388
 800825c:	2111      	movs	r1, #17
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9f8 	bl	8008654 <SDMMC_GetCmdResp1>
 8008264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008266:	69fb      	ldr	r3, [r7, #28]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800827e:	2312      	movs	r3, #18
 8008280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008282:	2340      	movs	r3, #64	; 0x40
 8008284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800828a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800828e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008290:	f107 0308 	add.w	r3, r7, #8
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff ff30 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800829c:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a0:	2112      	movs	r1, #18
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9d6 	bl	8008654 <SDMMC_GetCmdResp1>
 80082a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082aa:	69fb      	ldr	r3, [r7, #28]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3720      	adds	r7, #32
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80082c2:	2318      	movs	r3, #24
 80082c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082d4:	f107 0308 	add.w	r3, r7, #8
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff ff0e 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80082e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e4:	2118      	movs	r1, #24
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f9b4 	bl	8008654 <SDMMC_GetCmdResp1>
 80082ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082ee:	69fb      	ldr	r3, [r7, #28]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008306:	2319      	movs	r3, #25
 8008308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800830a:	2340      	movs	r3, #64	; 0x40
 800830c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008318:	f107 0308 	add.w	r3, r7, #8
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff feec 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008324:	f241 3288 	movw	r2, #5000	; 0x1388
 8008328:	2119      	movs	r1, #25
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f992 	bl	8008654 <SDMMC_GetCmdResp1>
 8008330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008332:	69fb      	ldr	r3, [r7, #28]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008348:	230c      	movs	r3, #12
 800834a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800834c:	2340      	movs	r3, #64	; 0x40
 800834e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fecb 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008366:	4a05      	ldr	r2, [pc, #20]	; (800837c <SDMMC_CmdStopTransfer+0x40>)
 8008368:	210c      	movs	r1, #12
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f972 	bl	8008654 <SDMMC_GetCmdResp1>
 8008370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008372:	69fb      	ldr	r3, [r7, #28]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	05f5e100 	.word	0x05f5e100

08008380 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008390:	2307      	movs	r3, #7
 8008392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008398:	2300      	movs	r3, #0
 800839a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800839c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083a0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083a2:	f107 0310 	add.w	r3, r7, #16
 80083a6:	4619      	mov	r1, r3
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fea7 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	2107      	movs	r1, #7
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f94d 	bl	8008654 <SDMMC_GetCmdResp1>
 80083ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3728      	adds	r7, #40	; 0x28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b088      	sub	sp, #32
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fe86 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fb67 	bl	8008ac4 <SDMMC_GetCmdError>
 80083f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083f8:	69fb      	ldr	r3, [r7, #28]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3720      	adds	r7, #32
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800840a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800840e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008410:	2308      	movs	r3, #8
 8008412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008414:	2340      	movs	r3, #64	; 0x40
 8008416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008418:	2300      	movs	r3, #0
 800841a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800841c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fe67 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fafa 	bl	8008a28 <SDMMC_GetCmdResp7>
 8008434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008436:	69fb      	ldr	r3, [r7, #28]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800844e:	2337      	movs	r3, #55	; 0x37
 8008450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008452:	2340      	movs	r3, #64	; 0x40
 8008454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008456:	2300      	movs	r3, #0
 8008458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800845a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008460:	f107 0308 	add.w	r3, r7, #8
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fe48 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800846c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008470:	2137      	movs	r1, #55	; 0x37
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f8ee 	bl	8008654 <SDMMC_GetCmdResp1>
 8008478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800847a:	69fb      	ldr	r3, [r7, #28]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <SDMMC_CmdAppOperCommand+0x44>)
 8008492:	4313      	orrs	r3, r2
 8008494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008496:	2329      	movs	r3, #41	; 0x29
 8008498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800849a:	2340      	movs	r3, #64	; 0x40
 800849c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fe24 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fa03 	bl	80088c0 <SDMMC_GetCmdResp3>
 80084ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084bc:	69fb      	ldr	r3, [r7, #28]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	80100000 	.word	0x80100000

080084cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80084da:	2306      	movs	r3, #6
 80084dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084ec:	f107 0308 	add.w	r3, r7, #8
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff fe02 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80084f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084fc:	2106      	movs	r1, #6
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8a8 	bl	8008654 <SDMMC_GetCmdResp1>
 8008504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008506:	69fb      	ldr	r3, [r7, #28]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800851c:	2333      	movs	r3, #51	; 0x33
 800851e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008524:	2300      	movs	r3, #0
 8008526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800852e:	f107 0308 	add.w	r3, r7, #8
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff fde1 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800853a:	f241 3288 	movw	r2, #5000	; 0x1388
 800853e:	2133      	movs	r1, #51	; 0x33
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f887 	bl	8008654 <SDMMC_GetCmdResp1>
 8008546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008548:	69fb      	ldr	r3, [r7, #28]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3720      	adds	r7, #32
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b088      	sub	sp, #32
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800855e:	2302      	movs	r3, #2
 8008560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008562:	23c0      	movs	r3, #192	; 0xc0
 8008564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800856a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800856e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff fdc0 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f957 	bl	8008830 <SDMMC_GetCmdResp2>
 8008582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008584:	69fb      	ldr	r3, [r7, #28]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800859c:	2309      	movs	r3, #9
 800859e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085a0:	23c0      	movs	r3, #192	; 0xc0
 80085a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fda1 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f938 	bl	8008830 <SDMMC_GetCmdResp2>
 80085c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085c2:	69fb      	ldr	r3, [r7, #28]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80085da:	2303      	movs	r3, #3
 80085dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff fd82 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	2103      	movs	r1, #3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f99d 	bl	800893c <SDMMC_GetCmdResp6>
 8008602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008604:	69fb      	ldr	r3, [r7, #28]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3720      	adds	r7, #32
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b088      	sub	sp, #32
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800861c:	230d      	movs	r3, #13
 800861e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008620:	2340      	movs	r3, #64	; 0x40
 8008622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800862c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff fd61 	bl	80080fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800863a:	f241 3288 	movw	r2, #5000	; 0x1388
 800863e:	210d      	movs	r1, #13
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f807 	bl	8008654 <SDMMC_GetCmdResp1>
 8008646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008648:	69fb      	ldr	r3, [r7, #28]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	460b      	mov	r3, r1
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008662:	4b70      	ldr	r3, [pc, #448]	; (8008824 <SDMMC_GetCmdResp1+0x1d0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a70      	ldr	r2, [pc, #448]	; (8008828 <SDMMC_GetCmdResp1+0x1d4>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	0a5a      	lsrs	r2, r3, #9
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	1e5a      	subs	r2, r3, #1
 800867a:	61fa      	str	r2, [r7, #28]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008684:	e0c9      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0ef      	beq.n	8008676 <SDMMC_GetCmdResp1+0x22>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1ea      	bne.n	8008676 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2204      	movs	r2, #4
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086b2:	2304      	movs	r3, #4
 80086b4:	e0b1      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0a6      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	22c5      	movs	r2, #197	; 0xc5
 80086d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff fd3c 	bl	8008150 <SDMMC_GetCommandResponse>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	4293      	cmp	r3, r2
 80086e0:	d001      	beq.n	80086e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e099      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80086e6:	2100      	movs	r1, #0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff fd3e 	bl	800816a <SDMMC_GetResponse>
 80086ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4b4e      	ldr	r3, [pc, #312]	; (800882c <SDMMC_GetCmdResp1+0x1d8>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e08d      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da02      	bge.n	800870a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008708:	e087      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008714:	2340      	movs	r3, #64	; 0x40
 8008716:	e080      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008722:	2380      	movs	r3, #128	; 0x80
 8008724:	e079      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008734:	e071      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008744:	e069      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008754:	e061      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008764:	e059      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008774:	e051      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008784:	e049      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008794:	e041      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80087a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a4:	e039      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80087b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80087b4:	e031      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80087c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80087c4:	e029      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80087d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80087d4:	e021      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80087e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087e4:	e019      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80087f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087f4:	e011      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008804:	e009      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f003 0308 	and.w	r3, r3, #8
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008810:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008814:	e001      	b.n	800881a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800881a:	4618      	mov	r0, r3
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000000 	.word	0x20000000
 8008828:	10624dd3 	.word	0x10624dd3
 800882c:	fdffe008 	.word	0xfdffe008

08008830 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008838:	4b1f      	ldr	r3, [pc, #124]	; (80088b8 <SDMMC_GetCmdResp2+0x88>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <SDMMC_GetCmdResp2+0x8c>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	0a5b      	lsrs	r3, r3, #9
 8008844:	f241 3288 	movw	r2, #5000	; 0x1388
 8008848:	fb02 f303 	mul.w	r3, r2, r3
 800884c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1e5a      	subs	r2, r3, #1
 8008852:	60fa      	str	r2, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008858:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800885c:	e026      	b.n	80088ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ef      	beq.n	800884e <SDMMC_GetCmdResp2+0x1e>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1ea      	bne.n	800884e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2204      	movs	r2, #4
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800888a:	2304      	movs	r3, #4
 800888c:	e00e      	b.n	80088ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e003      	b.n	80088ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	22c5      	movs	r2, #197	; 0xc5
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	20000000 	.word	0x20000000
 80088bc:	10624dd3 	.word	0x10624dd3

080088c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088c8:	4b1a      	ldr	r3, [pc, #104]	; (8008934 <SDMMC_GetCmdResp3+0x74>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1a      	ldr	r2, [pc, #104]	; (8008938 <SDMMC_GetCmdResp3+0x78>)
 80088ce:	fba2 2303 	umull	r2, r3, r2, r3
 80088d2:	0a5b      	lsrs	r3, r3, #9
 80088d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	60fa      	str	r2, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ec:	e01b      	b.n	8008926 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0ef      	beq.n	80088de <SDMMC_GetCmdResp3+0x1e>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1ea      	bne.n	80088de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2204      	movs	r2, #4
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800891a:	2304      	movs	r3, #4
 800891c:	e003      	b.n	8008926 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	22c5      	movs	r2, #197	; 0xc5
 8008922:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000000 	.word	0x20000000
 8008938:	10624dd3 	.word	0x10624dd3

0800893c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	460b      	mov	r3, r1
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800894a:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <SDMMC_GetCmdResp6+0xe4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a35      	ldr	r2, [pc, #212]	; (8008a24 <SDMMC_GetCmdResp6+0xe8>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	0a5b      	lsrs	r3, r3, #9
 8008956:	f241 3288 	movw	r2, #5000	; 0x1388
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	61fa      	str	r2, [r7, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800896a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800896e:	e052      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008974:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0ef      	beq.n	8008960 <SDMMC_GetCmdResp6+0x24>
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1ea      	bne.n	8008960 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2204      	movs	r2, #4
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800899c:	2304      	movs	r3, #4
 800899e:	e03a      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e02f      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7ff fbca 	bl	8008150 <SDMMC_GetCommandResponse>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d001      	beq.n	80089ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e025      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	22c5      	movs	r2, #197	; 0xc5
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80089d0:	2100      	movs	r1, #0
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff fbc9 	bl	800816a <SDMMC_GetResponse>
 80089d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	0c1b      	lsrs	r3, r3, #16
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e011      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a00:	e009      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a10:	e001      	b.n	8008a16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3720      	adds	r7, #32
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000000 	.word	0x20000000
 8008a24:	10624dd3 	.word	0x10624dd3

08008a28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a30:	4b22      	ldr	r3, [pc, #136]	; (8008abc <SDMMC_GetCmdResp7+0x94>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a22      	ldr	r2, [pc, #136]	; (8008ac0 <SDMMC_GetCmdResp7+0x98>)
 8008a36:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3a:	0a5b      	lsrs	r3, r3, #9
 8008a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a40:	fb02 f303 	mul.w	r3, r2, r3
 8008a44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	1e5a      	subs	r2, r3, #1
 8008a4a:	60fa      	str	r2, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a54:	e02c      	b.n	8008ab0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0ef      	beq.n	8008a46 <SDMMC_GetCmdResp7+0x1e>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1ea      	bne.n	8008a46 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2204      	movs	r2, #4
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a82:	2304      	movs	r3, #4
 8008a84:	e014      	b.n	8008ab0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e009      	b.n	8008ab0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2240      	movs	r2, #64	; 0x40
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008aae:	2300      	movs	r3, #0
  
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	20000000 	.word	0x20000000
 8008ac0:	10624dd3 	.word	0x10624dd3

08008ac4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008acc:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <SDMMC_GetCmdError+0x50>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <SDMMC_GetCmdError+0x54>)
 8008ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad6:	0a5b      	lsrs	r3, r3, #9
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	fb02 f303 	mul.w	r3, r2, r3
 8008ae0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1e5a      	subs	r2, r3, #1
 8008ae6:	60fa      	str	r2, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008af0:	e009      	b.n	8008b06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f1      	beq.n	8008ae2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	22c5      	movs	r2, #197	; 0xc5
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000000 	.word	0x20000000
 8008b18:	10624dd3 	.word	0x10624dd3

08008b1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008b20:	4904      	ldr	r1, [pc, #16]	; (8008b34 <MX_FATFS_Init+0x18>)
 8008b22:	4805      	ldr	r0, [pc, #20]	; (8008b38 <MX_FATFS_Init+0x1c>)
 8008b24:	f002 fd0e 	bl	800b544 <FATFS_LinkDriver>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <MX_FATFS_Init+0x20>)
 8008b2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b30:	bf00      	nop
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	200045f0 	.word	0x200045f0
 8008b38:	0800e81c 	.word	0x0800e81c
 8008b3c:	200045ec 	.word	0x200045ec

08008b40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008b44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008b5a:	f000 f896 	bl	8008c8a <BSP_SD_IsDetected>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d001      	beq.n	8008b68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008b64:	2302      	movs	r3, #2
 8008b66:	e012      	b.n	8008b8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008b68:	480b      	ldr	r0, [pc, #44]	; (8008b98 <BSP_SD_Init+0x48>)
 8008b6a:	f7fd facd 	bl	8006108 <HAL_SD_Init>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b7c:	4806      	ldr	r0, [pc, #24]	; (8008b98 <BSP_SD_Init+0x48>)
 8008b7e:	f7fe f893 	bl	8006ca8 <HAL_SD_ConfigWideBusOperation>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200043f4 	.word	0x200043f4

08008b9c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	4806      	ldr	r0, [pc, #24]	; (8008bcc <BSP_SD_ReadBlocks_DMA+0x30>)
 8008bb4:	f7fd fb60 	bl	8006278 <HAL_SD_ReadBlocks_DMA>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	200043f4 	.word	0x200043f4

08008bd0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	68f9      	ldr	r1, [r7, #12]
 8008be6:	4806      	ldr	r0, [pc, #24]	; (8008c00 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008be8:	f7fd fc28 	bl	800643c <HAL_SD_WriteBlocks_DMA>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	200043f4 	.word	0x200043f4

08008c04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008c08:	4805      	ldr	r0, [pc, #20]	; (8008c20 <BSP_SD_GetCardState+0x1c>)
 8008c0a:	f7fe f8e7 	bl	8006ddc <HAL_SD_GetCardState>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	bf14      	ite	ne
 8008c14:	2301      	movne	r3, #1
 8008c16:	2300      	moveq	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	200043f4 	.word	0x200043f4

08008c24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4803      	ldr	r0, [pc, #12]	; (8008c3c <BSP_SD_GetCardInfo+0x18>)
 8008c30:	f7fe f80e 	bl	8006c50 <HAL_SD_GetCardInfo>
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200043f4 	.word	0x200043f4

08008c40 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008c48:	f000 f818 	bl	8008c7c <BSP_SD_AbortCallback>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008c5c:	f000 f9a8 	bl	8008fb0 <BSP_SD_WriteCpltCallback>
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008c70:	f000 f9aa 	bl	8008fc8 <BSP_SD_ReadCpltCallback>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0

}
 8008c80:	bf00      	nop
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008c90:	2301      	movs	r3, #1
 8008c92:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008c94:	f000 f80c 	bl	8008cb0 <BSP_PlatformIsDetected>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	b2db      	uxtb	r3, r3
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008cbe:	4806      	ldr	r0, [pc, #24]	; (8008cd8 <BSP_PlatformIsDetected+0x28>)
 8008cc0:	f7fb fa62 	bl	8004188 <HAL_GPIO_ReadPin>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008cce:	79fb      	ldrb	r3, [r7, #7]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40020400 	.word	0x40020400

08008cdc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008ce4:	f7f9 fcb2 	bl	800264c <HAL_GetTick>
 8008ce8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008cea:	e006      	b.n	8008cfa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008cec:	f7ff ff8a 	bl	8008c04 <BSP_SD_GetCardState>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e009      	b.n	8008d0e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008cfa:	f7f9 fca7 	bl	800264c <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d8f0      	bhi.n	8008cec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008d22:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <SD_CheckStatus+0x38>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008d28:	f7ff ff6c 	bl	8008c04 <BSP_SD_GetCardState>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d107      	bne.n	8008d42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <SD_CheckStatus+0x38>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f023 0301 	bic.w	r3, r3, #1
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <SD_CheckStatus+0x38>)
 8008d40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008d42:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <SD_CheckStatus+0x38>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b2db      	uxtb	r3, r3
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000009 	.word	0x20000009

08008d54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008d5e:	f7ff fef7 	bl	8008b50 <BSP_SD_Init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d107      	bne.n	8008d78 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff ffd4 	bl	8008d18 <SD_CheckStatus>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <SD_initialize+0x34>)
 8008d76:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008d78:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <SD_initialize+0x34>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b2db      	uxtb	r3, r3
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000009 	.word	0x20000009

08008d8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff ffbd 	bl	8008d18 <SD_CheckStatus>
 8008d9e:	4603      	mov	r3, r0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008dbc:	f247 5030 	movw	r0, #30000	; 0x7530
 8008dc0:	f7ff ff8c 	bl	8008cdc <SD_CheckStatusWithTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da01      	bge.n	8008dce <SD_read+0x26>
  {
    return res;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	e03b      	b.n	8008e46 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	68b8      	ldr	r0, [r7, #8]
 8008dd4:	f7ff fee2 	bl	8008b9c <BSP_SD_ReadBlocks_DMA>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d132      	bne.n	8008e44 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008dde:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <SD_read+0xa8>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008de4:	f7f9 fc32 	bl	800264c <HAL_GetTick>
 8008de8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008dea:	bf00      	nop
 8008dec:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <SD_read+0xa8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d108      	bne.n	8008e06 <SD_read+0x5e>
 8008df4:	f7f9 fc2a 	bl	800264c <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	f247 522f 	movw	r2, #29999	; 0x752f
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d9f2      	bls.n	8008dec <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <SD_read+0xa8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	75fb      	strb	r3, [r7, #23]
 8008e12:	e017      	b.n	8008e44 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008e14:	4b0e      	ldr	r3, [pc, #56]	; (8008e50 <SD_read+0xa8>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008e1a:	f7f9 fc17 	bl	800264c <HAL_GetTick>
 8008e1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008e20:	e007      	b.n	8008e32 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008e22:	f7ff feef 	bl	8008c04 <BSP_SD_GetCardState>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <SD_read+0x8a>
          {
            res = RES_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008e30:	e008      	b.n	8008e44 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008e32:	f7f9 fc0b 	bl	800264c <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d9ee      	bls.n	8008e22 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20004a58 	.word	0x20004a58

08008e54 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008e68:	4b24      	ldr	r3, [pc, #144]	; (8008efc <SD_write+0xa8>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008e6e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008e72:	f7ff ff33 	bl	8008cdc <SD_CheckStatusWithTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	da01      	bge.n	8008e80 <SD_write+0x2c>
  {
    return res;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	e038      	b.n	8008ef2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	68b8      	ldr	r0, [r7, #8]
 8008e86:	f7ff fea3 	bl	8008bd0 <BSP_SD_WriteBlocks_DMA>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d12f      	bne.n	8008ef0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008e90:	f7f9 fbdc 	bl	800264c <HAL_GetTick>
 8008e94:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008e96:	bf00      	nop
 8008e98:	4b18      	ldr	r3, [pc, #96]	; (8008efc <SD_write+0xa8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d108      	bne.n	8008eb2 <SD_write+0x5e>
 8008ea0:	f7f9 fbd4 	bl	800264c <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	f247 522f 	movw	r2, #29999	; 0x752f
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d9f2      	bls.n	8008e98 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <SD_write+0xa8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d102      	bne.n	8008ec0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	75fb      	strb	r3, [r7, #23]
 8008ebe:	e017      	b.n	8008ef0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008ec0:	4b0e      	ldr	r3, [pc, #56]	; (8008efc <SD_write+0xa8>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008ec6:	f7f9 fbc1 	bl	800264c <HAL_GetTick>
 8008eca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ecc:	e007      	b.n	8008ede <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ece:	f7ff fe99 	bl	8008c04 <BSP_SD_GetCardState>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <SD_write+0x8a>
          {
            res = RES_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75fb      	strb	r3, [r7, #23]
            break;
 8008edc:	e008      	b.n	8008ef0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ede:	f7f9 fbb5 	bl	800264c <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	f247 522f 	movw	r2, #29999	; 0x752f
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d9ee      	bls.n	8008ece <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20004a54 	.word	0x20004a54

08008f00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08c      	sub	sp, #48	; 0x30
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	603a      	str	r2, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f16:	4b25      	ldr	r3, [pc, #148]	; (8008fac <SD_ioctl+0xac>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <SD_ioctl+0x28>
 8008f24:	2303      	movs	r3, #3
 8008f26:	e03c      	b.n	8008fa2 <SD_ioctl+0xa2>

  switch (cmd)
 8008f28:	79bb      	ldrb	r3, [r7, #6]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d834      	bhi.n	8008f98 <SD_ioctl+0x98>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <SD_ioctl+0x34>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f45 	.word	0x08008f45
 8008f38:	08008f4d 	.word	0x08008f4d
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f7f 	.word	0x08008f7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008f4a:	e028      	b.n	8008f9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008f4c:	f107 030c 	add.w	r3, r7, #12
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7ff fe67 	bl	8008c24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008f62:	e01c      	b.n	8008f9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fe5b 	bl	8008c24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008f7c:	e00f      	b.n	8008f9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fe4e 	bl	8008c24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	0a5a      	lsrs	r2, r3, #9
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008f96:	e002      	b.n	8008f9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008f98:	2304      	movs	r3, #4
 8008f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3730      	adds	r7, #48	; 0x30
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000009 	.word	0x20000009

08008fb0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008fb4:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <BSP_SD_WriteCpltCallback+0x14>)
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	20004a54 	.word	0x20004a54

08008fc8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008fcc:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <BSP_SD_ReadCpltCallback+0x14>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	20004a58 	.word	0x20004a58

08008fe0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <disk_status+0x30>)
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	79fa      	ldrb	r2, [r7, #7]
 8008ff8:	4905      	ldr	r1, [pc, #20]	; (8009010 <disk_status+0x30>)
 8008ffa:	440a      	add	r2, r1
 8008ffc:	7a12      	ldrb	r2, [r2, #8]
 8008ffe:	4610      	mov	r0, r2
 8009000:	4798      	blx	r3
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20004a84 	.word	0x20004a84

08009014 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	4a0d      	ldr	r2, [pc, #52]	; (800905c <disk_initialize+0x48>)
 8009026:	5cd3      	ldrb	r3, [r2, r3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d111      	bne.n	8009050 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	4a0b      	ldr	r2, [pc, #44]	; (800905c <disk_initialize+0x48>)
 8009030:	2101      	movs	r1, #1
 8009032:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <disk_initialize+0x48>)
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	79fa      	ldrb	r2, [r7, #7]
 8009042:	4906      	ldr	r1, [pc, #24]	; (800905c <disk_initialize+0x48>)
 8009044:	440a      	add	r2, r1
 8009046:	7a12      	ldrb	r2, [r2, #8]
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20004a84 	.word	0x20004a84

08009060 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009060:	b590      	push	{r4, r7, lr}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	4a0a      	ldr	r2, [pc, #40]	; (800909c <disk_read+0x3c>)
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	689c      	ldr	r4, [r3, #8]
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	4a07      	ldr	r2, [pc, #28]	; (800909c <disk_read+0x3c>)
 8009080:	4413      	add	r3, r2
 8009082:	7a18      	ldrb	r0, [r3, #8]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	47a0      	blx	r4
 800908c:	4603      	mov	r3, r0
 800908e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	bd90      	pop	{r4, r7, pc}
 800909a:	bf00      	nop
 800909c:	20004a84 	.word	0x20004a84

080090a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80090a0:	b590      	push	{r4, r7, lr}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	4a0a      	ldr	r2, [pc, #40]	; (80090dc <disk_write+0x3c>)
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68dc      	ldr	r4, [r3, #12]
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	4a07      	ldr	r2, [pc, #28]	; (80090dc <disk_write+0x3c>)
 80090c0:	4413      	add	r3, r2
 80090c2:	7a18      	ldrb	r0, [r3, #8]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	47a0      	blx	r4
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd90      	pop	{r4, r7, pc}
 80090da:	bf00      	nop
 80090dc:	20004a84 	.word	0x20004a84

080090e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	603a      	str	r2, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
 80090ec:	460b      	mov	r3, r1
 80090ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <disk_ioctl+0x38>)
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	79fa      	ldrb	r2, [r7, #7]
 80090fe:	4906      	ldr	r1, [pc, #24]	; (8009118 <disk_ioctl+0x38>)
 8009100:	440a      	add	r2, r1
 8009102:	7a10      	ldrb	r0, [r2, #8]
 8009104:	79b9      	ldrb	r1, [r7, #6]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4798      	blx	r3
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]
  return res;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20004a84 	.word	0x20004a84

0800911c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3301      	adds	r3, #1
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800912c:	89fb      	ldrh	r3, [r7, #14]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	b21a      	sxth	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	b21b      	sxth	r3, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	b21b      	sxth	r3, r3
 800913c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800913e:	89fb      	ldrh	r3, [r7, #14]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3303      	adds	r3, #3
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	3202      	adds	r2, #2
 8009164:	7812      	ldrb	r2, [r2, #0]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	3201      	adds	r2, #1
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	4313      	orrs	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	7812      	ldrb	r2, [r2, #0]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
	return rv;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	887a      	ldrh	r2, [r7, #2]
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	887b      	ldrh	r3, [r7, #2]
 80091ac:	0a1b      	lsrs	r3, r3, #8
 80091ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	b2d2      	uxtb	r2, r2
 80091ba:	701a      	strb	r2, [r3, #0]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	b2d2      	uxtb	r2, r2
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	b2d2      	uxtb	r2, r2
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	0a1b      	lsrs	r3, r3, #8
 8009206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	b2d2      	uxtb	r2, r2
 8009212:	701a      	strb	r2, [r3, #0]
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	1c53      	adds	r3, r2, #1
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	1c59      	adds	r1, r3, #1
 8009244:	6179      	str	r1, [r7, #20]
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3b01      	subs	r3, #1
 800924e:	607b      	str	r3, [r7, #4]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f1      	bne.n	800923a <mem_cpy+0x1a>
	}
}
 8009256:	bf00      	nop
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009262:	b480      	push	{r7}
 8009264:	b087      	sub	sp, #28
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	617a      	str	r2, [r7, #20]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3b01      	subs	r3, #1
 8009282:	607b      	str	r3, [r7, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f3      	bne.n	8009272 <mem_set+0x10>
}
 800928a:	bf00      	nop
 800928c:	bf00      	nop
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009298:	b480      	push	{r7}
 800929a:	b089      	sub	sp, #36	; 0x24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	61fa      	str	r2, [r7, #28]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	61ba      	str	r2, [r7, #24]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	1acb      	subs	r3, r1, r3
 80092c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	607b      	str	r3, [r7, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <mem_cmp+0x40>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0eb      	beq.n	80092b0 <mem_cmp+0x18>

	return r;
 80092d8:	697b      	ldr	r3, [r7, #20]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3724      	adds	r7, #36	; 0x24
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80092f0:	e002      	b.n	80092f8 <chk_chr+0x12>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3301      	adds	r3, #1
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <chk_chr+0x26>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	4293      	cmp	r3, r2
 800930a:	d1f2      	bne.n	80092f2 <chk_chr+0xc>
	return *str;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	781b      	ldrb	r3, [r3, #0]
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e029      	b.n	8009384 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009330:	4a27      	ldr	r2, [pc, #156]	; (80093d0 <chk_lock+0xb4>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	4413      	add	r3, r2
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d01d      	beq.n	800937a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800933e:	4a24      	ldr	r2, [pc, #144]	; (80093d0 <chk_lock+0xb4>)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	4413      	add	r3, r2
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d116      	bne.n	800937e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009350:	4a1f      	ldr	r2, [pc, #124]	; (80093d0 <chk_lock+0xb4>)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	4413      	add	r3, r2
 8009358:	3304      	adds	r3, #4
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009360:	429a      	cmp	r2, r3
 8009362:	d10c      	bne.n	800937e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009364:	4a1a      	ldr	r2, [pc, #104]	; (80093d0 <chk_lock+0xb4>)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	011b      	lsls	r3, r3, #4
 800936a:	4413      	add	r3, r2
 800936c:	3308      	adds	r3, #8
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009374:	429a      	cmp	r2, r3
 8009376:	d102      	bne.n	800937e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009378:	e007      	b.n	800938a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d9d2      	bls.n	8009330 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d109      	bne.n	80093a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d102      	bne.n	800939c <chk_lock+0x80>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d101      	bne.n	80093a0 <chk_lock+0x84>
 800939c:	2300      	movs	r3, #0
 800939e:	e010      	b.n	80093c2 <chk_lock+0xa6>
 80093a0:	2312      	movs	r3, #18
 80093a2:	e00e      	b.n	80093c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d108      	bne.n	80093bc <chk_lock+0xa0>
 80093aa:	4a09      	ldr	r2, [pc, #36]	; (80093d0 <chk_lock+0xb4>)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	4413      	add	r3, r2
 80093b2:	330c      	adds	r3, #12
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ba:	d101      	bne.n	80093c0 <chk_lock+0xa4>
 80093bc:	2310      	movs	r3, #16
 80093be:	e000      	b.n	80093c2 <chk_lock+0xa6>
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20004a64 	.word	0x20004a64

080093d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80093da:	2300      	movs	r3, #0
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	e002      	b.n	80093e6 <enq_lock+0x12>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3301      	adds	r3, #1
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d806      	bhi.n	80093fa <enq_lock+0x26>
 80093ec:	4a09      	ldr	r2, [pc, #36]	; (8009414 <enq_lock+0x40>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	4413      	add	r3, r2
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1f2      	bne.n	80093e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	bf14      	ite	ne
 8009400:	2301      	movne	r3, #1
 8009402:	2300      	moveq	r3, #0
 8009404:	b2db      	uxtb	r3, r3
}
 8009406:	4618      	mov	r0, r3
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	20004a64 	.word	0x20004a64

08009418 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e01f      	b.n	8009468 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009428:	4a41      	ldr	r2, [pc, #260]	; (8009530 <inc_lock+0x118>)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	4413      	add	r3, r2
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d113      	bne.n	8009462 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800943a:	4a3d      	ldr	r2, [pc, #244]	; (8009530 <inc_lock+0x118>)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	4413      	add	r3, r2
 8009442:	3304      	adds	r3, #4
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800944a:	429a      	cmp	r2, r3
 800944c:	d109      	bne.n	8009462 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800944e:	4a38      	ldr	r2, [pc, #224]	; (8009530 <inc_lock+0x118>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	4413      	add	r3, r2
 8009456:	3308      	adds	r3, #8
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800945e:	429a      	cmp	r2, r3
 8009460:	d006      	beq.n	8009470 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d9dc      	bls.n	8009428 <inc_lock+0x10>
 800946e:	e000      	b.n	8009472 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009470:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d132      	bne.n	80094de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	e002      	b.n	8009484 <inc_lock+0x6c>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d806      	bhi.n	8009498 <inc_lock+0x80>
 800948a:	4a29      	ldr	r2, [pc, #164]	; (8009530 <inc_lock+0x118>)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	4413      	add	r3, r2
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1f2      	bne.n	800947e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d101      	bne.n	80094a2 <inc_lock+0x8a>
 800949e:	2300      	movs	r3, #0
 80094a0:	e040      	b.n	8009524 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4922      	ldr	r1, [pc, #136]	; (8009530 <inc_lock+0x118>)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	440b      	add	r3, r1
 80094ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	491e      	ldr	r1, [pc, #120]	; (8009530 <inc_lock+0x118>)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	440b      	add	r3, r1
 80094bc:	3304      	adds	r3, #4
 80094be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	695a      	ldr	r2, [r3, #20]
 80094c4:	491a      	ldr	r1, [pc, #104]	; (8009530 <inc_lock+0x118>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	440b      	add	r3, r1
 80094cc:	3308      	adds	r3, #8
 80094ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80094d0:	4a17      	ldr	r2, [pc, #92]	; (8009530 <inc_lock+0x118>)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	4413      	add	r3, r2
 80094d8:	330c      	adds	r3, #12
 80094da:	2200      	movs	r2, #0
 80094dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <inc_lock+0xe0>
 80094e4:	4a12      	ldr	r2, [pc, #72]	; (8009530 <inc_lock+0x118>)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	4413      	add	r3, r2
 80094ec:	330c      	adds	r3, #12
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <inc_lock+0xe0>
 80094f4:	2300      	movs	r3, #0
 80094f6:	e015      	b.n	8009524 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d108      	bne.n	8009510 <inc_lock+0xf8>
 80094fe:	4a0c      	ldr	r2, [pc, #48]	; (8009530 <inc_lock+0x118>)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	4413      	add	r3, r2
 8009506:	330c      	adds	r3, #12
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	3301      	adds	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	e001      	b.n	8009514 <inc_lock+0xfc>
 8009510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009514:	4906      	ldr	r1, [pc, #24]	; (8009530 <inc_lock+0x118>)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	440b      	add	r3, r1
 800951c:	330c      	adds	r3, #12
 800951e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3301      	adds	r3, #1
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	20004a64 	.word	0x20004a64

08009534 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3b01      	subs	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d825      	bhi.n	8009594 <dec_lock+0x60>
		n = Files[i].ctr;
 8009548:	4a17      	ldr	r2, [pc, #92]	; (80095a8 <dec_lock+0x74>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	4413      	add	r3, r2
 8009550:	330c      	adds	r3, #12
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009556:	89fb      	ldrh	r3, [r7, #14]
 8009558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955c:	d101      	bne.n	8009562 <dec_lock+0x2e>
 800955e:	2300      	movs	r3, #0
 8009560:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009562:	89fb      	ldrh	r3, [r7, #14]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <dec_lock+0x3a>
 8009568:	89fb      	ldrh	r3, [r7, #14]
 800956a:	3b01      	subs	r3, #1
 800956c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800956e:	4a0e      	ldr	r2, [pc, #56]	; (80095a8 <dec_lock+0x74>)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	4413      	add	r3, r2
 8009576:	330c      	adds	r3, #12
 8009578:	89fa      	ldrh	r2, [r7, #14]
 800957a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800957c:	89fb      	ldrh	r3, [r7, #14]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d105      	bne.n	800958e <dec_lock+0x5a>
 8009582:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <dec_lock+0x74>)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	4413      	add	r3, r2
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	737b      	strb	r3, [r7, #13]
 8009592:	e001      	b.n	8009598 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009594:	2302      	movs	r3, #2
 8009596:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009598:	7b7b      	ldrb	r3, [r7, #13]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	20004a64 	.word	0x20004a64

080095ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	e010      	b.n	80095dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80095ba:	4a0d      	ldr	r2, [pc, #52]	; (80095f0 <clear_lock+0x44>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	4413      	add	r3, r2
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d105      	bne.n	80095d6 <clear_lock+0x2a>
 80095ca:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <clear_lock+0x44>)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	4413      	add	r3, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d9eb      	bls.n	80095ba <clear_lock+0xe>
	}
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	20004a64 	.word	0x20004a64

080095f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	78db      	ldrb	r3, [r3, #3]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d034      	beq.n	8009672 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	7858      	ldrb	r0, [r3, #1]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009618:	2301      	movs	r3, #1
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	f7ff fd40 	bl	80090a0 <disk_write>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]
 800962a:	e022      	b.n	8009672 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	1ad2      	subs	r2, r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	429a      	cmp	r2, r3
 8009640:	d217      	bcs.n	8009672 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	789b      	ldrb	r3, [r3, #2]
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	e010      	b.n	800966c <sync_window+0x78>
					wsect += fs->fsize;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4413      	add	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7858      	ldrb	r0, [r3, #1]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800965e:	2301      	movs	r3, #1
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	f7ff fd1d 	bl	80090a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	3b01      	subs	r3, #1
 800966a:	613b      	str	r3, [r7, #16]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d8eb      	bhi.n	800964a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d01b      	beq.n	80096cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ffad 	bl	80095f4 <sync_window>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d113      	bne.n	80096cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7858      	ldrb	r0, [r3, #1]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096ae:	2301      	movs	r3, #1
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	f7ff fcd5 	bl	8009060 <disk_read>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80096bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff ff87 	bl	80095f4 <sync_window>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d158      	bne.n	80097a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d148      	bne.n	800978a <sync_fs+0xb2>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	791b      	ldrb	r3, [r3, #4]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d144      	bne.n	800978a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3330      	adds	r3, #48	; 0x30
 8009704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fda9 	bl	8009262 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3330      	adds	r3, #48	; 0x30
 8009714:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009718:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fd38 	bl	8009192 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3330      	adds	r3, #48	; 0x30
 8009726:	4921      	ldr	r1, [pc, #132]	; (80097ac <sync_fs+0xd4>)
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fd4d 	bl	80091c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3330      	adds	r3, #48	; 0x30
 8009732:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009736:	491e      	ldr	r1, [pc, #120]	; (80097b0 <sync_fs+0xd8>)
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fd45 	bl	80091c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3330      	adds	r3, #48	; 0x30
 8009742:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7ff fd3b 	bl	80091c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3330      	adds	r3, #48	; 0x30
 8009756:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7ff fd31 	bl	80091c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7858      	ldrb	r0, [r3, #1]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977e:	2301      	movs	r3, #1
 8009780:	f7ff fc8e 	bl	80090a0 <disk_write>
			fs->fsi_flag = 0;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	2200      	movs	r2, #0
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fca4 	bl	80090e0 <disk_ioctl>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <sync_fs+0xca>
 800979e:	2301      	movs	r3, #1
 80097a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	41615252 	.word	0x41615252
 80097b0:	61417272 	.word	0x61417272

080097b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	3b02      	subs	r3, #2
 80097c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	3b02      	subs	r3, #2
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d301      	bcc.n	80097d4 <clust2sect+0x20>
 80097d0:	2300      	movs	r3, #0
 80097d2:	e008      	b.n	80097e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	895b      	ldrh	r3, [r3, #10]
 80097d8:	461a      	mov	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	fb03 f202 	mul.w	r2, r3, r2
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	4413      	add	r3, r2
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d904      	bls.n	8009812 <get_fat+0x20>
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d302      	bcc.n	8009818 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009812:	2301      	movs	r3, #1
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e08f      	b.n	8009938 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800981c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b03      	cmp	r3, #3
 8009824:	d062      	beq.n	80098ec <get_fat+0xfa>
 8009826:	2b03      	cmp	r3, #3
 8009828:	dc7c      	bgt.n	8009924 <get_fat+0x132>
 800982a:	2b01      	cmp	r3, #1
 800982c:	d002      	beq.n	8009834 <get_fat+0x42>
 800982e:	2b02      	cmp	r3, #2
 8009830:	d042      	beq.n	80098b8 <get_fat+0xc6>
 8009832:	e077      	b.n	8009924 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	085b      	lsrs	r3, r3, #1
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	6a1a      	ldr	r2, [r3, #32]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	0a5b      	lsrs	r3, r3, #9
 800984a:	4413      	add	r3, r2
 800984c:	4619      	mov	r1, r3
 800984e:	6938      	ldr	r0, [r7, #16]
 8009850:	f7ff ff14 	bl	800967c <move_window>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d167      	bne.n	800992a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	60fa      	str	r2, [r7, #12]
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4413      	add	r3, r2
 8009868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800986c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6a1a      	ldr	r2, [r3, #32]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	0a5b      	lsrs	r3, r3, #9
 8009876:	4413      	add	r3, r2
 8009878:	4619      	mov	r1, r3
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f7ff fefe 	bl	800967c <move_window>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d153      	bne.n	800992e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4413      	add	r3, r2
 8009890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	461a      	mov	r2, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4313      	orrs	r3, r2
 800989c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <get_fat+0xbc>
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	091b      	lsrs	r3, r3, #4
 80098ac:	e002      	b.n	80098b4 <get_fat+0xc2>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b4:	617b      	str	r3, [r7, #20]
			break;
 80098b6:	e03f      	b.n	8009938 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6a1a      	ldr	r2, [r3, #32]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	4413      	add	r3, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	6938      	ldr	r0, [r7, #16]
 80098c6:	f7ff fed9 	bl	800967c <move_window>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d130      	bne.n	8009932 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80098de:	4413      	add	r3, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff fc1b 	bl	800911c <ld_word>
 80098e6:	4603      	mov	r3, r0
 80098e8:	617b      	str	r3, [r7, #20]
			break;
 80098ea:	e025      	b.n	8009938 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	6a1a      	ldr	r2, [r3, #32]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	09db      	lsrs	r3, r3, #7
 80098f4:	4413      	add	r3, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	6938      	ldr	r0, [r7, #16]
 80098fa:	f7ff febf 	bl	800967c <move_window>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d118      	bne.n	8009936 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009912:	4413      	add	r3, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff fc19 	bl	800914c <ld_dword>
 800991a:	4603      	mov	r3, r0
 800991c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009920:	617b      	str	r3, [r7, #20]
			break;
 8009922:	e009      	b.n	8009938 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009924:	2301      	movs	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e006      	b.n	8009938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800992a:	bf00      	nop
 800992c:	e004      	b.n	8009938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800992e:	bf00      	nop
 8009930:	e002      	b.n	8009938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009932:	bf00      	nop
 8009934:	e000      	b.n	8009938 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009936:	bf00      	nop
		}
	}

	return val;
 8009938:	697b      	ldr	r3, [r7, #20]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009942:	b590      	push	{r4, r7, lr}
 8009944:	b089      	sub	sp, #36	; 0x24
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	60b9      	str	r1, [r7, #8]
 800994c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800994e:	2302      	movs	r3, #2
 8009950:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b01      	cmp	r3, #1
 8009956:	f240 80d2 	bls.w	8009afe <put_fat+0x1bc>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	f080 80cc 	bcs.w	8009afe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b03      	cmp	r3, #3
 800996c:	f000 8096 	beq.w	8009a9c <put_fat+0x15a>
 8009970:	2b03      	cmp	r3, #3
 8009972:	f300 80cd 	bgt.w	8009b10 <put_fat+0x1ce>
 8009976:	2b01      	cmp	r3, #1
 8009978:	d002      	beq.n	8009980 <put_fat+0x3e>
 800997a:	2b02      	cmp	r3, #2
 800997c:	d06e      	beq.n	8009a5c <put_fat+0x11a>
 800997e:	e0c7      	b.n	8009b10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	61bb      	str	r3, [r7, #24]
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	4413      	add	r3, r2
 800998c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a1a      	ldr	r2, [r3, #32]
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	0a5b      	lsrs	r3, r3, #9
 8009996:	4413      	add	r3, r2
 8009998:	4619      	mov	r1, r3
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff fe6e 	bl	800967c <move_window>
 80099a0:	4603      	mov	r3, r0
 80099a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099a4:	7ffb      	ldrb	r3, [r7, #31]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 80ab 	bne.w	8009b02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	1c59      	adds	r1, r3, #1
 80099b6:	61b9      	str	r1, [r7, #24]
 80099b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099bc:	4413      	add	r3, r2
 80099be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00d      	beq.n	80099e6 <put_fat+0xa4>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	b25b      	sxtb	r3, r3
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	b25a      	sxtb	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	b25b      	sxtb	r3, r3
 80099de:	4313      	orrs	r3, r2
 80099e0:	b25b      	sxtb	r3, r3
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	e001      	b.n	80099ea <put_fat+0xa8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a1a      	ldr	r2, [r3, #32]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	0a5b      	lsrs	r3, r3, #9
 80099fc:	4413      	add	r3, r2
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff fe3b 	bl	800967c <move_window>
 8009a06:	4603      	mov	r3, r0
 8009a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d17a      	bne.n	8009b06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1c:	4413      	add	r3, r2
 8009a1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <put_fat+0xf0>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	091b      	lsrs	r3, r3, #4
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	e00e      	b.n	8009a50 <put_fat+0x10e>
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	b25b      	sxtb	r3, r3
 8009a38:	f023 030f 	bic.w	r3, r3, #15
 8009a3c:	b25a      	sxtb	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	0a1b      	lsrs	r3, r3, #8
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	f003 030f 	and.w	r3, r3, #15
 8009a48:	b25b      	sxtb	r3, r3
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	b25b      	sxtb	r3, r3
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	70da      	strb	r2, [r3, #3]
			break;
 8009a5a:	e059      	b.n	8009b10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a1a      	ldr	r2, [r3, #32]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	0a1b      	lsrs	r3, r3, #8
 8009a64:	4413      	add	r3, r2
 8009a66:	4619      	mov	r1, r3
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fe07 	bl	800967c <move_window>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a72:	7ffb      	ldrb	r3, [r7, #31]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d148      	bne.n	8009b0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009a86:	4413      	add	r3, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	b292      	uxth	r2, r2
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff fb7f 	bl	8009192 <st_word>
			fs->wflag = 1;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2201      	movs	r2, #1
 8009a98:	70da      	strb	r2, [r3, #3]
			break;
 8009a9a:	e039      	b.n	8009b10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1a      	ldr	r2, [r3, #32]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	09db      	lsrs	r3, r3, #7
 8009aa4:	4413      	add	r3, r2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f7ff fde7 	bl	800967c <move_window>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ab2:	7ffb      	ldrb	r3, [r7, #31]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d12a      	bne.n	8009b0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009acc:	4413      	add	r3, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fb3c 	bl	800914c <ld_dword>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009ada:	4323      	orrs	r3, r4
 8009adc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009aec:	4413      	add	r3, r2
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fb69 	bl	80091c8 <st_dword>
			fs->wflag = 1;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	70da      	strb	r2, [r3, #3]
			break;
 8009afc:	e008      	b.n	8009b10 <put_fat+0x1ce>
		}
	}
 8009afe:	bf00      	nop
 8009b00:	e006      	b.n	8009b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b02:	bf00      	nop
 8009b04:	e004      	b.n	8009b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b06:	bf00      	nop
 8009b08:	e002      	b.n	8009b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b0a:	bf00      	nop
 8009b0c:	e000      	b.n	8009b10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b0e:	bf00      	nop
	return res;
 8009b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3724      	adds	r7, #36	; 0x24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd90      	pop	{r4, r7, pc}

08009b1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b088      	sub	sp, #32
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d904      	bls.n	8009b40 <remove_chain+0x26>
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d301      	bcc.n	8009b44 <remove_chain+0x2a>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e04b      	b.n	8009bdc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	69b8      	ldr	r0, [r7, #24]
 8009b52:	f7ff fef6 	bl	8009942 <put_fat>
 8009b56:	4603      	mov	r3, r0
 8009b58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b5a:	7ffb      	ldrb	r3, [r7, #31]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <remove_chain+0x4a>
 8009b60:	7ffb      	ldrb	r3, [r7, #31]
 8009b62:	e03b      	b.n	8009bdc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff fe43 	bl	80097f2 <get_fat>
 8009b6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d031      	beq.n	8009bd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d101      	bne.n	8009b7e <remove_chain+0x64>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e02e      	b.n	8009bdc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b84:	d101      	bne.n	8009b8a <remove_chain+0x70>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e028      	b.n	8009bdc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	69b8      	ldr	r0, [r7, #24]
 8009b90:	f7ff fed7 	bl	8009942 <put_fat>
 8009b94:	4603      	mov	r3, r0
 8009b96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009b98:	7ffb      	ldrb	r3, [r7, #31]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <remove_chain+0x88>
 8009b9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ba0:	e01c      	b.n	8009bdc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	691a      	ldr	r2, [r3, #16]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	3b02      	subs	r3, #2
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d20b      	bcs.n	8009bc8 <remove_chain+0xae>
			fs->free_clst++;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	791b      	ldrb	r3, [r3, #4]
 8009bbe:	f043 0301 	orr.w	r3, r3, #1
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d3c6      	bcc.n	8009b64 <remove_chain+0x4a>
 8009bd6:	e000      	b.n	8009bda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009bd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10d      	bne.n	8009c16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d004      	beq.n	8009c10 <create_chain+0x2c>
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d31b      	bcc.n	8009c48 <create_chain+0x64>
 8009c10:	2301      	movs	r3, #1
 8009c12:	61bb      	str	r3, [r7, #24]
 8009c14:	e018      	b.n	8009c48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff fdea 	bl	80097f2 <get_fat>
 8009c1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d801      	bhi.n	8009c2a <create_chain+0x46>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e070      	b.n	8009d0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c30:	d101      	bne.n	8009c36 <create_chain+0x52>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	e06a      	b.n	8009d0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d201      	bcs.n	8009c44 <create_chain+0x60>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	e063      	b.n	8009d0c <create_chain+0x128>
		scl = clst;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d307      	bcc.n	8009c6c <create_chain+0x88>
				ncl = 2;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c60:	69fa      	ldr	r2, [r7, #28]
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d901      	bls.n	8009c6c <create_chain+0x88>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e04f      	b.n	8009d0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c6c:	69f9      	ldr	r1, [r7, #28]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff fdbf 	bl	80097f2 <get_fat>
 8009c74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00e      	beq.n	8009c9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d003      	beq.n	8009c8a <create_chain+0xa6>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c88:	d101      	bne.n	8009c8e <create_chain+0xaa>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	e03e      	b.n	8009d0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d1da      	bne.n	8009c4c <create_chain+0x68>
 8009c96:	2300      	movs	r3, #0
 8009c98:	e038      	b.n	8009d0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009c9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ca0:	69f9      	ldr	r1, [r7, #28]
 8009ca2:	6938      	ldr	r0, [r7, #16]
 8009ca4:	f7ff fe4d 	bl	8009942 <put_fat>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d109      	bne.n	8009cc6 <create_chain+0xe2>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6938      	ldr	r0, [r7, #16]
 8009cbe:	f7ff fe40 	bl	8009942 <put_fat>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d116      	bne.n	8009cfa <create_chain+0x116>
		fs->last_clst = ncl;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	691a      	ldr	r2, [r3, #16]
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	3b02      	subs	r3, #2
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d804      	bhi.n	8009cea <create_chain+0x106>
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	1e5a      	subs	r2, r3, #1
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	791b      	ldrb	r3, [r3, #4]
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	711a      	strb	r2, [r3, #4]
 8009cf8:	e007      	b.n	8009d0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d102      	bne.n	8009d06 <create_chain+0x122>
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d04:	e000      	b.n	8009d08 <create_chain+0x124>
 8009d06:	2301      	movs	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d0a:	69fb      	ldr	r3, [r7, #28]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3720      	adds	r7, #32
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	3304      	adds	r3, #4
 8009d2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	0a5b      	lsrs	r3, r3, #9
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	8952      	ldrh	r2, [r2, #10]
 8009d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	1d1a      	adds	r2, r3, #4
 8009d3e:	613a      	str	r2, [r7, #16]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <clmt_clust+0x3a>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e010      	b.n	8009d70 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d307      	bcc.n	8009d66 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	3304      	adds	r3, #4
 8009d62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d64:	e7e9      	b.n	8009d3a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009d66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4413      	add	r3, r2
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d92:	d204      	bcs.n	8009d9e <dir_sdi+0x22>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	f003 031f 	and.w	r3, r3, #31
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e063      	b.n	8009e6a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d106      	bne.n	8009dc2 <dir_sdi+0x46>
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d902      	bls.n	8009dc2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10c      	bne.n	8009de2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	095b      	lsrs	r3, r3, #5
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	8912      	ldrh	r2, [r2, #8]
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d301      	bcc.n	8009dd8 <dir_sdi+0x5c>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e048      	b.n	8009e6a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	61da      	str	r2, [r3, #28]
 8009de0:	e029      	b.n	8009e36 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	895b      	ldrh	r3, [r3, #10]
 8009de6:	025b      	lsls	r3, r3, #9
 8009de8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009dea:	e019      	b.n	8009e20 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6979      	ldr	r1, [r7, #20]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fcfe 	bl	80097f2 <get_fat>
 8009df6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfe:	d101      	bne.n	8009e04 <dir_sdi+0x88>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e032      	b.n	8009e6a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d904      	bls.n	8009e14 <dir_sdi+0x98>
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d301      	bcc.n	8009e18 <dir_sdi+0x9c>
 8009e14:	2302      	movs	r3, #2
 8009e16:	e028      	b.n	8009e6a <dir_sdi+0xee>
			ofs -= csz;
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d2e1      	bcs.n	8009dec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	6938      	ldr	r0, [r7, #16]
 8009e2c:	f7ff fcc2 	bl	80097b4 <clust2sect>
 8009e30:	4602      	mov	r2, r0
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <dir_sdi+0xcc>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e010      	b.n	8009e6a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	69da      	ldr	r2, [r3, #28]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	0a5b      	lsrs	r3, r3, #9
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	441a      	add	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	3320      	adds	r3, #32
 8009e88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <dir_next+0x28>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e98:	d301      	bcc.n	8009e9e <dir_next+0x2c>
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	e0aa      	b.n	8009ff4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f040 8098 	bne.w	8009fda <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10b      	bne.n	8009ed4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	8912      	ldrh	r2, [r2, #8]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	f0c0 8088 	bcc.w	8009fda <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	61da      	str	r2, [r3, #28]
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	e08f      	b.n	8009ff4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	0a5b      	lsrs	r3, r3, #9
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	8952      	ldrh	r2, [r2, #10]
 8009edc:	3a01      	subs	r2, #1
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d17a      	bne.n	8009fda <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7ff fc80 	bl	80097f2 <get_fat>
 8009ef2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d801      	bhi.n	8009efe <dir_next+0x8c>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e07a      	b.n	8009ff4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f04:	d101      	bne.n	8009f0a <dir_next+0x98>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e074      	b.n	8009ff4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d358      	bcc.n	8009fc6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d104      	bne.n	8009f24 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	61da      	str	r2, [r3, #28]
 8009f20:	2304      	movs	r3, #4
 8009f22:	e067      	b.n	8009ff4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7ff fe59 	bl	8009be4 <create_chain>
 8009f32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <dir_next+0xcc>
 8009f3a:	2307      	movs	r3, #7
 8009f3c:	e05a      	b.n	8009ff4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <dir_next+0xd6>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e055      	b.n	8009ff4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f4e:	d101      	bne.n	8009f54 <dir_next+0xe2>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e04f      	b.n	8009ff4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff fb4d 	bl	80095f4 <sync_window>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <dir_next+0xf2>
 8009f60:	2301      	movs	r3, #1
 8009f62:	e047      	b.n	8009ff4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3330      	adds	r3, #48	; 0x30
 8009f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff f977 	bl	8009262 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f74:	2300      	movs	r3, #0
 8009f76:	613b      	str	r3, [r7, #16]
 8009f78:	6979      	ldr	r1, [r7, #20]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7ff fc1a 	bl	80097b4 <clust2sect>
 8009f80:	4602      	mov	r2, r0
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8009f86:	e012      	b.n	8009fae <dir_next+0x13c>
						fs->wflag = 1;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fb30 	bl	80095f4 <sync_window>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <dir_next+0x12c>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e02a      	b.n	8009ff4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	613b      	str	r3, [r7, #16]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	895b      	ldrh	r3, [r3, #10]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d3e6      	bcc.n	8009f88 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad2      	subs	r2, r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009fcc:	6979      	ldr	r1, [r7, #20]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7ff fbf0 	bl	80097b4 <clust2sect>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fec:	441a      	add	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a00c:	2100      	movs	r1, #0
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff feb4 	bl	8009d7c <dir_sdi>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d12b      	bne.n	800a076 <dir_alloc+0x7a>
		n = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	4619      	mov	r1, r3
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff fb27 	bl	800967c <move_window>
 800a02e:	4603      	mov	r3, r0
 800a030:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d11d      	bne.n	800a074 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2be5      	cmp	r3, #229	; 0xe5
 800a040:	d004      	beq.n	800a04c <dir_alloc+0x50>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d107      	bne.n	800a05c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3301      	adds	r3, #1
 800a050:	613b      	str	r3, [r7, #16]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d102      	bne.n	800a060 <dir_alloc+0x64>
 800a05a:	e00c      	b.n	800a076 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a05c:	2300      	movs	r3, #0
 800a05e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a060:	2101      	movs	r1, #1
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff ff05 	bl	8009e72 <dir_next>
 800a068:	4603      	mov	r3, r0
 800a06a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0d7      	beq.n	800a022 <dir_alloc+0x26>
 800a072:	e000      	b.n	800a076 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a074:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	2b04      	cmp	r3, #4
 800a07a:	d101      	bne.n	800a080 <dir_alloc+0x84>
 800a07c:	2307      	movs	r3, #7
 800a07e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a080:	7dfb      	ldrb	r3, [r7, #23]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	331a      	adds	r3, #26
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff f83f 	bl	800911c <ld_word>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d109      	bne.n	800a0be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	3314      	adds	r3, #20
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff f834 	bl	800911c <ld_word>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	041b      	lsls	r3, r3, #16
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a0be:	68fb      	ldr	r3, [r7, #12]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	331a      	adds	r3, #26
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff f857 	bl	8009192 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d109      	bne.n	800a100 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f103 0214 	add.w	r2, r3, #20
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0c1b      	lsrs	r3, r3, #16
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7ff f849 	bl	8009192 <st_word>
	}
}
 800a100:	bf00      	nop
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a116:	2100      	movs	r1, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff fe2f 	bl	8009d7c <dir_sdi>
 800a11e:	4603      	mov	r3, r0
 800a120:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <dir_find+0x24>
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	e03e      	b.n	800a1aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	4619      	mov	r1, r3
 800a132:	6938      	ldr	r0, [r7, #16]
 800a134:	f7ff faa2 	bl	800967c <move_window>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d12f      	bne.n	800a1a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <dir_find+0x4e>
 800a150:	2304      	movs	r3, #4
 800a152:	75fb      	strb	r3, [r7, #23]
 800a154:	e028      	b.n	800a1a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	330b      	adds	r3, #11
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a162:	b2da      	uxtb	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	330b      	adds	r3, #11
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	f003 0308 	and.w	r3, r3, #8
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <dir_find+0x86>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a18      	ldr	r0, [r3, #32]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3324      	adds	r3, #36	; 0x24
 800a180:	220b      	movs	r2, #11
 800a182:	4619      	mov	r1, r3
 800a184:	f7ff f888 	bl	8009298 <mem_cmp>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a18e:	2100      	movs	r1, #0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fe6e 	bl	8009e72 <dir_next>
 800a196:	4603      	mov	r3, r0
 800a198:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0c5      	beq.n	800a12c <dir_find+0x24>
 800a1a0:	e002      	b.n	800a1a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a1a2:	bf00      	nop
 800a1a4:	e000      	b.n	800a1a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1a6:	bf00      	nop

	return res;
 800a1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff ff1a 	bl	8009ffc <dir_alloc>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d11c      	bne.n	800a20c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68b8      	ldr	r0, [r7, #8]
 800a1da:	f7ff fa4f 	bl	800967c <move_window>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d111      	bne.n	800a20c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7ff f836 	bl	8009262 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a18      	ldr	r0, [r3, #32]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3324      	adds	r3, #36	; 0x24
 800a1fe:	220b      	movs	r2, #11
 800a200:	4619      	mov	r1, r3
 800a202:	f7ff f80d 	bl	8009220 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2201      	movs	r2, #1
 800a20a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3324      	adds	r3, #36	; 0x24
 800a22c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a22e:	220b      	movs	r2, #11
 800a230:	2120      	movs	r1, #32
 800a232:	68b8      	ldr	r0, [r7, #8]
 800a234:	f7ff f815 	bl	8009262 <mem_set>
	si = i = 0; ni = 8;
 800a238:	2300      	movs	r3, #0
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	61fb      	str	r3, [r7, #28]
 800a240:	2308      	movs	r3, #8
 800a242:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	61fa      	str	r2, [r7, #28]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a252:	7efb      	ldrb	r3, [r7, #27]
 800a254:	2b20      	cmp	r3, #32
 800a256:	d94e      	bls.n	800a2f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a258:	7efb      	ldrb	r3, [r7, #27]
 800a25a:	2b2f      	cmp	r3, #47	; 0x2f
 800a25c:	d006      	beq.n	800a26c <create_name+0x54>
 800a25e:	7efb      	ldrb	r3, [r7, #27]
 800a260:	2b5c      	cmp	r3, #92	; 0x5c
 800a262:	d110      	bne.n	800a286 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a264:	e002      	b.n	800a26c <create_name+0x54>
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	3301      	adds	r3, #1
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b2f      	cmp	r3, #47	; 0x2f
 800a276:	d0f6      	beq.n	800a266 <create_name+0x4e>
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	4413      	add	r3, r2
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b5c      	cmp	r3, #92	; 0x5c
 800a282:	d0f0      	beq.n	800a266 <create_name+0x4e>
			break;
 800a284:	e038      	b.n	800a2f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a286:	7efb      	ldrb	r3, [r7, #27]
 800a288:	2b2e      	cmp	r3, #46	; 0x2e
 800a28a:	d003      	beq.n	800a294 <create_name+0x7c>
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	429a      	cmp	r2, r3
 800a292:	d30c      	bcc.n	800a2ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b0b      	cmp	r3, #11
 800a298:	d002      	beq.n	800a2a0 <create_name+0x88>
 800a29a:	7efb      	ldrb	r3, [r7, #27]
 800a29c:	2b2e      	cmp	r3, #46	; 0x2e
 800a29e:	d001      	beq.n	800a2a4 <create_name+0x8c>
 800a2a0:	2306      	movs	r3, #6
 800a2a2:	e044      	b.n	800a32e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	230b      	movs	r3, #11
 800a2aa:	617b      	str	r3, [r7, #20]
			continue;
 800a2ac:	e022      	b.n	800a2f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a2ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da04      	bge.n	800a2c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a2b6:	7efb      	ldrb	r3, [r7, #27]
 800a2b8:	3b80      	subs	r3, #128	; 0x80
 800a2ba:	4a1f      	ldr	r2, [pc, #124]	; (800a338 <create_name+0x120>)
 800a2bc:	5cd3      	ldrb	r3, [r2, r3]
 800a2be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a2c0:	7efb      	ldrb	r3, [r7, #27]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	481d      	ldr	r0, [pc, #116]	; (800a33c <create_name+0x124>)
 800a2c6:	f7ff f80e 	bl	80092e6 <chk_chr>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <create_name+0xbc>
 800a2d0:	2306      	movs	r3, #6
 800a2d2:	e02c      	b.n	800a32e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a2d4:	7efb      	ldrb	r3, [r7, #27]
 800a2d6:	2b60      	cmp	r3, #96	; 0x60
 800a2d8:	d905      	bls.n	800a2e6 <create_name+0xce>
 800a2da:	7efb      	ldrb	r3, [r7, #27]
 800a2dc:	2b7a      	cmp	r3, #122	; 0x7a
 800a2de:	d802      	bhi.n	800a2e6 <create_name+0xce>
 800a2e0:	7efb      	ldrb	r3, [r7, #27]
 800a2e2:	3b20      	subs	r3, #32
 800a2e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	613a      	str	r2, [r7, #16]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	7efa      	ldrb	r2, [r7, #27]
 800a2f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a2f4:	e7a6      	b.n	800a244 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <create_name+0xf4>
 800a308:	2306      	movs	r3, #6
 800a30a:	e010      	b.n	800a32e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2be5      	cmp	r3, #229	; 0xe5
 800a312:	d102      	bne.n	800a31a <create_name+0x102>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2205      	movs	r2, #5
 800a318:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a31a:	7efb      	ldrb	r3, [r7, #27]
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	d801      	bhi.n	800a324 <create_name+0x10c>
 800a320:	2204      	movs	r2, #4
 800a322:	e000      	b.n	800a326 <create_name+0x10e>
 800a324:	2200      	movs	r2, #0
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	330b      	adds	r3, #11
 800a32a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a32c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	0800e830 	.word	0x0800e830
 800a33c:	0800e794 	.word	0x0800e794

0800a340 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a354:	e002      	b.n	800a35c <follow_path+0x1c>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	3301      	adds	r3, #1
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b2f      	cmp	r3, #47	; 0x2f
 800a362:	d0f8      	beq.n	800a356 <follow_path+0x16>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b5c      	cmp	r3, #92	; 0x5c
 800a36a:	d0f4      	beq.n	800a356 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2200      	movs	r2, #0
 800a370:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b1f      	cmp	r3, #31
 800a378:	d80a      	bhi.n	800a390 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2280      	movs	r2, #128	; 0x80
 800a37e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a382:	2100      	movs	r1, #0
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff fcf9 	bl	8009d7c <dir_sdi>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]
 800a38e:	e043      	b.n	800a418 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a390:	463b      	mov	r3, r7
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff ff3f 	bl	800a218 <create_name>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d134      	bne.n	800a40e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff feaf 	bl	800a108 <dir_find>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a3b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d127      	bne.n	800a412 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d122      	bne.n	800a412 <follow_path+0xd2>
 800a3cc:	2305      	movs	r3, #5
 800a3ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a3d0:	e01f      	b.n	800a412 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d11c      	bne.n	800a416 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	799b      	ldrb	r3, [r3, #6]
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a3e8:	2305      	movs	r3, #5
 800a3ea:	75fb      	strb	r3, [r7, #23]
 800a3ec:	e014      	b.n	800a418 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fc:	4413      	add	r3, r2
 800a3fe:	4619      	mov	r1, r3
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fe42 	bl	800a08a <ld_clust>
 800a406:	4602      	mov	r2, r0
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a40c:	e7c0      	b.n	800a390 <follow_path+0x50>
			if (res != FR_OK) break;
 800a40e:	bf00      	nop
 800a410:	e002      	b.n	800a418 <follow_path+0xd8>
				break;
 800a412:	bf00      	nop
 800a414:	e000      	b.n	800a418 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a416:	bf00      	nop
			}
		}
	}

	return res;
 800a418:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a422:	b480      	push	{r7}
 800a424:	b087      	sub	sp, #28
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a42a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a42e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d031      	beq.n	800a49c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e002      	b.n	800a446 <get_ldnumber+0x24>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	3301      	adds	r3, #1
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d903      	bls.n	800a456 <get_ldnumber+0x34>
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b3a      	cmp	r3, #58	; 0x3a
 800a454:	d1f4      	bne.n	800a440 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b3a      	cmp	r3, #58	; 0x3a
 800a45c:	d11c      	bne.n	800a498 <get_ldnumber+0x76>
			tp = *path;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	60fa      	str	r2, [r7, #12]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	3b30      	subs	r3, #48	; 0x30
 800a46e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b09      	cmp	r3, #9
 800a474:	d80e      	bhi.n	800a494 <get_ldnumber+0x72>
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d10a      	bne.n	800a494 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d107      	bne.n	800a494 <get_ldnumber+0x72>
					vol = (int)i;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	3301      	adds	r3, #1
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	e002      	b.n	800a49e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a49c:	693b      	ldr	r3, [r7, #16]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	70da      	strb	r2, [r3, #3]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff f8d8 	bl	800967c <move_window>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <check_fs+0x2a>
 800a4d2:	2304      	movs	r3, #4
 800a4d4:	e038      	b.n	800a548 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3330      	adds	r3, #48	; 0x30
 800a4da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe fe1c 	bl	800911c <ld_word>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d001      	beq.n	800a4f4 <check_fs+0x48>
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e029      	b.n	800a548 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4fa:	2be9      	cmp	r3, #233	; 0xe9
 800a4fc:	d009      	beq.n	800a512 <check_fs+0x66>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a504:	2beb      	cmp	r3, #235	; 0xeb
 800a506:	d11e      	bne.n	800a546 <check_fs+0x9a>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a50e:	2b90      	cmp	r3, #144	; 0x90
 800a510:	d119      	bne.n	800a546 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3330      	adds	r3, #48	; 0x30
 800a516:	3336      	adds	r3, #54	; 0x36
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fe17 	bl	800914c <ld_dword>
 800a51e:	4603      	mov	r3, r0
 800a520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a524:	4a0a      	ldr	r2, [pc, #40]	; (800a550 <check_fs+0xa4>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d101      	bne.n	800a52e <check_fs+0x82>
 800a52a:	2300      	movs	r3, #0
 800a52c:	e00c      	b.n	800a548 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3330      	adds	r3, #48	; 0x30
 800a532:	3352      	adds	r3, #82	; 0x52
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe fe09 	bl	800914c <ld_dword>
 800a53a:	4603      	mov	r3, r0
 800a53c:	4a05      	ldr	r2, [pc, #20]	; (800a554 <check_fs+0xa8>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d101      	bne.n	800a546 <check_fs+0x9a>
 800a542:	2300      	movs	r3, #0
 800a544:	e000      	b.n	800a548 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a546:	2302      	movs	r3, #2
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	00544146 	.word	0x00544146
 800a554:	33544146 	.word	0x33544146

0800a558 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b096      	sub	sp, #88	; 0x58
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4613      	mov	r3, r2
 800a564:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff ff58 	bl	800a422 <get_ldnumber>
 800a572:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a576:	2b00      	cmp	r3, #0
 800a578:	da01      	bge.n	800a57e <find_volume+0x26>
 800a57a:	230b      	movs	r3, #11
 800a57c:	e22d      	b.n	800a9da <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a57e:	4aa1      	ldr	r2, [pc, #644]	; (800a804 <find_volume+0x2ac>)
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a586:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <find_volume+0x3a>
 800a58e:	230c      	movs	r3, #12
 800a590:	e223      	b.n	800a9da <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a596:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	f023 0301 	bic.w	r3, r3, #1
 800a59e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01a      	beq.n	800a5de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fd17 	bl	8008fe0 <disk_status>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10c      	bne.n	800a5de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d007      	beq.n	800a5da <find_volume+0x82>
 800a5ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	e1ff      	b.n	800a9da <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e1fd      	b.n	800a9da <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	785b      	ldrb	r3, [r3, #1]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fd0f 	bl	8009014 <disk_initialize>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a5fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a608:	2303      	movs	r3, #3
 800a60a:	e1e6      	b.n	800a9da <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d007      	beq.n	800a622 <find_volume+0xca>
 800a612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a61e:	230a      	movs	r3, #10
 800a620:	e1db      	b.n	800a9da <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a62a:	f7ff ff3f 	bl	800a4ac <check_fs>
 800a62e:	4603      	mov	r3, r0
 800a630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d149      	bne.n	800a6d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a63c:	2300      	movs	r3, #0
 800a63e:	643b      	str	r3, [r7, #64]	; 0x40
 800a640:	e01e      	b.n	800a680 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64a:	011b      	lsls	r3, r3, #4
 800a64c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a650:	4413      	add	r3, r2
 800a652:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	3304      	adds	r3, #4
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d006      	beq.n	800a66c <find_volume+0x114>
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	3308      	adds	r3, #8
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fd72 	bl	800914c <ld_dword>
 800a668:	4602      	mov	r2, r0
 800a66a:	e000      	b.n	800a66e <find_volume+0x116>
 800a66c:	2200      	movs	r2, #0
 800a66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	3358      	adds	r3, #88	; 0x58
 800a674:	443b      	add	r3, r7
 800a676:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67c:	3301      	adds	r3, #1
 800a67e:	643b      	str	r3, [r7, #64]	; 0x40
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	2b03      	cmp	r3, #3
 800a684:	d9dd      	bls.n	800a642 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a686:	2300      	movs	r3, #0
 800a688:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <find_volume+0x13e>
 800a690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a692:	3b01      	subs	r3, #1
 800a694:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	3358      	adds	r3, #88	; 0x58
 800a69c:	443b      	add	r3, r7
 800a69e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a6a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d005      	beq.n	800a6b6 <find_volume+0x15e>
 800a6aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ae:	f7ff fefd 	bl	800a4ac <check_fs>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	e000      	b.n	800a6b8 <find_volume+0x160>
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a6bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d905      	bls.n	800a6d0 <find_volume+0x178>
 800a6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d9e2      	bls.n	800a696 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a6d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6d4:	2b04      	cmp	r3, #4
 800a6d6:	d101      	bne.n	800a6dc <find_volume+0x184>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e17e      	b.n	800a9da <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d901      	bls.n	800a6e8 <find_volume+0x190>
 800a6e4:	230d      	movs	r3, #13
 800a6e6:	e178      	b.n	800a9da <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	3330      	adds	r3, #48	; 0x30
 800a6ec:	330b      	adds	r3, #11
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fd14 	bl	800911c <ld_word>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fa:	d001      	beq.n	800a700 <find_volume+0x1a8>
 800a6fc:	230d      	movs	r3, #13
 800a6fe:	e16c      	b.n	800a9da <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	3330      	adds	r3, #48	; 0x30
 800a704:	3316      	adds	r3, #22
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fd08 	bl	800911c <ld_word>
 800a70c:	4603      	mov	r3, r0
 800a70e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <find_volume+0x1cc>
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	3330      	adds	r3, #48	; 0x30
 800a71a:	3324      	adds	r3, #36	; 0x24
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe fd15 	bl	800914c <ld_dword>
 800a722:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a728:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	789b      	ldrb	r3, [r3, #2]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d005      	beq.n	800a748 <find_volume+0x1f0>
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	789b      	ldrb	r3, [r3, #2]
 800a740:	2b02      	cmp	r3, #2
 800a742:	d001      	beq.n	800a748 <find_volume+0x1f0>
 800a744:	230d      	movs	r3, #13
 800a746:	e148      	b.n	800a9da <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	789b      	ldrb	r3, [r3, #2]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a750:	fb02 f303 	mul.w	r3, r2, r3
 800a754:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	895b      	ldrh	r3, [r3, #10]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d008      	beq.n	800a77c <find_volume+0x224>
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	895b      	ldrh	r3, [r3, #10]
 800a76e:	461a      	mov	r2, r3
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	895b      	ldrh	r3, [r3, #10]
 800a774:	3b01      	subs	r3, #1
 800a776:	4013      	ands	r3, r2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <find_volume+0x228>
 800a77c:	230d      	movs	r3, #13
 800a77e:	e12c      	b.n	800a9da <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	3330      	adds	r3, #48	; 0x30
 800a784:	3311      	adds	r3, #17
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fcc8 	bl	800911c <ld_word>
 800a78c:	4603      	mov	r3, r0
 800a78e:	461a      	mov	r2, r3
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	891b      	ldrh	r3, [r3, #8]
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <find_volume+0x24e>
 800a7a2:	230d      	movs	r3, #13
 800a7a4:	e119      	b.n	800a9da <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	3330      	adds	r3, #48	; 0x30
 800a7aa:	3313      	adds	r3, #19
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe fcb5 	bl	800911c <ld_word>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a7b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <find_volume+0x272>
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	3330      	adds	r3, #48	; 0x30
 800a7c0:	3320      	adds	r3, #32
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fcc2 	bl	800914c <ld_dword>
 800a7c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7cc:	3330      	adds	r3, #48	; 0x30
 800a7ce:	330e      	adds	r3, #14
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe fca3 	bl	800911c <ld_word>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a7da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <find_volume+0x28c>
 800a7e0:	230d      	movs	r3, #13
 800a7e2:	e0fa      	b.n	800a9da <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a7e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e8:	4413      	add	r3, r2
 800a7ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7ec:	8912      	ldrh	r2, [r2, #8]
 800a7ee:	0912      	lsrs	r2, r2, #4
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a7f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d204      	bcs.n	800a808 <find_volume+0x2b0>
 800a7fe:	230d      	movs	r3, #13
 800a800:	e0eb      	b.n	800a9da <find_volume+0x482>
 800a802:	bf00      	nop
 800a804:	20004a5c 	.word	0x20004a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a810:	8952      	ldrh	r2, [r2, #10]
 800a812:	fbb3 f3f2 	udiv	r3, r3, r2
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <find_volume+0x2ca>
 800a81e:	230d      	movs	r3, #13
 800a820:	e0db      	b.n	800a9da <find_volume+0x482>
		fmt = FS_FAT32;
 800a822:	2303      	movs	r3, #3
 800a824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a82e:	4293      	cmp	r3, r2
 800a830:	d802      	bhi.n	800a838 <find_volume+0x2e0>
 800a832:	2302      	movs	r3, #2
 800a834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a83e:	4293      	cmp	r3, r2
 800a840:	d802      	bhi.n	800a848 <find_volume+0x2f0>
 800a842:	2301      	movs	r3, #1
 800a844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	1c9a      	adds	r2, r3, #2
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a854:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a856:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a85a:	441a      	add	r2, r3
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a860:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	441a      	add	r2, r3
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a86a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d11e      	bne.n	800a8b0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	3330      	adds	r3, #48	; 0x30
 800a876:	332a      	adds	r3, #42	; 0x2a
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe fc4f 	bl	800911c <ld_word>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <find_volume+0x330>
 800a884:	230d      	movs	r3, #13
 800a886:	e0a8      	b.n	800a9da <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	891b      	ldrh	r3, [r3, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <find_volume+0x33c>
 800a890:	230d      	movs	r3, #13
 800a892:	e0a2      	b.n	800a9da <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	3330      	adds	r3, #48	; 0x30
 800a898:	332c      	adds	r3, #44	; 0x2c
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe fc56 	bl	800914c <ld_dword>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a8ae:	e01f      	b.n	800a8f0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	891b      	ldrh	r3, [r3, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <find_volume+0x364>
 800a8b8:	230d      	movs	r3, #13
 800a8ba:	e08e      	b.n	800a9da <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	6a1a      	ldr	r2, [r3, #32]
 800a8c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c2:	441a      	add	r2, r3
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a8c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d103      	bne.n	800a8d8 <find_volume+0x380>
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	e00a      	b.n	800a8ee <find_volume+0x396>
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	695a      	ldr	r2, [r3, #20]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	4413      	add	r3, r2
 800a8e2:	085a      	lsrs	r2, r3, #1
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a8ee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a8fa:	0a5b      	lsrs	r3, r3, #9
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d201      	bcs.n	800a904 <find_volume+0x3ac>
 800a900:	230d      	movs	r3, #13
 800a902:	e06a      	b.n	800a9da <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a90a:	611a      	str	r2, [r3, #16]
 800a90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	2280      	movs	r2, #128	; 0x80
 800a918:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a91a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d149      	bne.n	800a9b6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	3330      	adds	r3, #48	; 0x30
 800a926:	3330      	adds	r3, #48	; 0x30
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe fbf7 	bl	800911c <ld_word>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b01      	cmp	r3, #1
 800a932:	d140      	bne.n	800a9b6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a936:	3301      	adds	r3, #1
 800a938:	4619      	mov	r1, r3
 800a93a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a93c:	f7fe fe9e 	bl	800967c <move_window>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d137      	bne.n	800a9b6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	2200      	movs	r2, #0
 800a94a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	3330      	adds	r3, #48	; 0x30
 800a950:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fbe1 	bl	800911c <ld_word>
 800a95a:	4603      	mov	r3, r0
 800a95c:	461a      	mov	r2, r3
 800a95e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a962:	429a      	cmp	r2, r3
 800a964:	d127      	bne.n	800a9b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	3330      	adds	r3, #48	; 0x30
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fbee 	bl	800914c <ld_dword>
 800a970:	4603      	mov	r3, r0
 800a972:	4a1c      	ldr	r2, [pc, #112]	; (800a9e4 <find_volume+0x48c>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d11e      	bne.n	800a9b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	3330      	adds	r3, #48	; 0x30
 800a97c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe fbe3 	bl	800914c <ld_dword>
 800a986:	4603      	mov	r3, r0
 800a988:	4a17      	ldr	r2, [pc, #92]	; (800a9e8 <find_volume+0x490>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d113      	bne.n	800a9b6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	3330      	adds	r3, #48	; 0x30
 800a992:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe fbd8 	bl	800914c <ld_dword>
 800a99c:	4602      	mov	r2, r0
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	3330      	adds	r3, #48	; 0x30
 800a9a6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fbce 	bl	800914c <ld_dword>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a9bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a9be:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <find_volume+0x494>)
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <find_volume+0x494>)
 800a9c8:	801a      	strh	r2, [r3, #0]
 800a9ca:	4b08      	ldr	r3, [pc, #32]	; (800a9ec <find_volume+0x494>)
 800a9cc:	881a      	ldrh	r2, [r3, #0]
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a9d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9d4:	f7fe fdea 	bl	80095ac <clear_lock>
#endif
	return FR_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3758      	adds	r7, #88	; 0x58
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	41615252 	.word	0x41615252
 800a9e8:	61417272 	.word	0x61417272
 800a9ec:	20004a60 	.word	0x20004a60

0800a9f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a9fa:	2309      	movs	r3, #9
 800a9fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d01c      	beq.n	800aa3e <validate+0x4e>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d018      	beq.n	800aa3e <validate+0x4e>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d013      	beq.n	800aa3e <validate+0x4e>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	889a      	ldrh	r2, [r3, #4]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	88db      	ldrh	r3, [r3, #6]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d10c      	bne.n	800aa3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fad8 	bl	8008fe0 <disk_status>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <validate+0x4e>
			res = FR_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <validate+0x5a>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	e000      	b.n	800aa4c <validate+0x5c>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	6013      	str	r3, [r2, #0]
	return res;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aa6e:	f107 0310 	add.w	r3, r7, #16
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff fcd5 	bl	800a422 <get_ldnumber>
 800aa78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	da01      	bge.n	800aa84 <f_mount+0x28>
 800aa80:	230b      	movs	r3, #11
 800aa82:	e02b      	b.n	800aadc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aa84:	4a17      	ldr	r2, [pc, #92]	; (800aae4 <f_mount+0x88>)
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aa94:	69b8      	ldr	r0, [r7, #24]
 800aa96:	f7fe fd89 	bl	80095ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	490d      	ldr	r1, [pc, #52]	; (800aae4 <f_mount+0x88>)
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <f_mount+0x66>
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d001      	beq.n	800aac6 <f_mount+0x6a>
 800aac2:	2300      	movs	r3, #0
 800aac4:	e00a      	b.n	800aadc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aac6:	f107 010c 	add.w	r1, r7, #12
 800aaca:	f107 0308 	add.w	r3, r7, #8
 800aace:	2200      	movs	r2, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fd41 	bl	800a558 <find_volume>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aada:	7dfb      	ldrb	r3, [r7, #23]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3720      	adds	r7, #32
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20004a5c 	.word	0x20004a5c

0800aae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b098      	sub	sp, #96	; 0x60
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <f_open+0x18>
 800aafc:	2309      	movs	r3, #9
 800aafe:	e1ad      	b.n	800ae5c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ab08:	79fa      	ldrb	r2, [r7, #7]
 800ab0a:	f107 0110 	add.w	r1, r7, #16
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff fd20 	bl	800a558 <find_volume>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ab1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f040 8191 	bne.w	800ae4a <f_open+0x362>
		dj.obj.fs = fs;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	f107 0314 	add.w	r3, r7, #20
 800ab32:	4611      	mov	r1, r2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fc03 	bl	800a340 <follow_path>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ab40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11a      	bne.n	800ab7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ab48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab4c:	b25b      	sxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da03      	bge.n	800ab5a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ab52:	2306      	movs	r3, #6
 800ab54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab58:	e011      	b.n	800ab7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	f023 0301 	bic.w	r3, r3, #1
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bf14      	ite	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	2300      	moveq	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f107 0314 	add.w	r3, r7, #20
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fbd2 	bl	800931c <chk_lock>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	f003 031c 	and.w	r3, r3, #28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d07f      	beq.n	800ac88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ab88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d017      	beq.n	800abc0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ab90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d10e      	bne.n	800abb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ab98:	f7fe fc1c 	bl	80093d4 <enq_lock>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d006      	beq.n	800abb0 <f_open+0xc8>
 800aba2:	f107 0314 	add.w	r3, r7, #20
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fb03 	bl	800a1b2 <dir_register>
 800abac:	4603      	mov	r3, r0
 800abae:	e000      	b.n	800abb2 <f_open+0xca>
 800abb0:	2312      	movs	r3, #18
 800abb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	f043 0308 	orr.w	r3, r3, #8
 800abbc:	71fb      	strb	r3, [r7, #7]
 800abbe:	e010      	b.n	800abe2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800abc0:	7ebb      	ldrb	r3, [r7, #26]
 800abc2:	f003 0311 	and.w	r3, r3, #17
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <f_open+0xea>
					res = FR_DENIED;
 800abca:	2307      	movs	r3, #7
 800abcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abd0:	e007      	b.n	800abe2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <f_open+0xfa>
 800abdc:	2308      	movs	r3, #8
 800abde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800abe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d168      	bne.n	800acbc <f_open+0x1d4>
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	f003 0308 	and.w	r3, r3, #8
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d063      	beq.n	800acbc <f_open+0x1d4>
				dw = GET_FATTIME();
 800abf4:	f7fd ffa4 	bl	8008b40 <get_fattime>
 800abf8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	330e      	adds	r3, #14
 800abfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fae1 	bl	80091c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac08:	3316      	adds	r3, #22
 800ac0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe fadb 	bl	80091c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ac12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac14:	330b      	adds	r3, #11
 800ac16:	2220      	movs	r2, #32
 800ac18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac1e:	4611      	mov	r1, r2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fa32 	bl	800a08a <ld_clust>
 800ac26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff fa4a 	bl	800a0c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	331c      	adds	r3, #28
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe fac4 	bl	80091c8 <st_dword>
					fs->wflag = 1;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	2201      	movs	r2, #1
 800ac44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ac46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d037      	beq.n	800acbc <f_open+0x1d4>
						dw = fs->winsect;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ac52:	f107 0314 	add.w	r3, r7, #20
 800ac56:	2200      	movs	r2, #0
 800ac58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe ff5d 	bl	8009b1a <remove_chain>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ac66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d126      	bne.n	800acbc <f_open+0x1d4>
							res = move_window(fs, dw);
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe fd02 	bl	800967c <move_window>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac82:	3a01      	subs	r2, #1
 800ac84:	60da      	str	r2, [r3, #12]
 800ac86:	e019      	b.n	800acbc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ac88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d115      	bne.n	800acbc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ac90:	7ebb      	ldrb	r3, [r7, #26]
 800ac92:	f003 0310 	and.w	r3, r3, #16
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ac9a:	2304      	movs	r3, #4
 800ac9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aca0:	e00c      	b.n	800acbc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d007      	beq.n	800acbc <f_open+0x1d4>
 800acac:	7ebb      	ldrb	r3, [r7, #26]
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d002      	beq.n	800acbc <f_open+0x1d4>
						res = FR_DENIED;
 800acb6:	2307      	movs	r3, #7
 800acb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800acbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d128      	bne.n	800ad16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	f003 0308 	and.w	r3, r3, #8
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800acde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ace4:	79fb      	ldrb	r3, [r7, #7]
 800ace6:	f023 0301 	bic.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	bf14      	ite	ne
 800acee:	2301      	movne	r3, #1
 800acf0:	2300      	moveq	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	f107 0314 	add.w	r3, r7, #20
 800acfa:	4611      	mov	r1, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fb8b 	bl	8009418 <inc_lock>
 800ad02:	4602      	mov	r2, r0
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d102      	bne.n	800ad16 <f_open+0x22e>
 800ad10:	2302      	movs	r3, #2
 800ad12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f040 8095 	bne.w	800ae4a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff f9af 	bl	800a08a <ld_clust>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ad32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad34:	331c      	adds	r3, #28
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fa08 	bl	800914c <ld_dword>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	88da      	ldrh	r2, [r3, #6]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	79fa      	ldrb	r2, [r7, #7]
 800ad5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3330      	adds	r3, #48	; 0x30
 800ad72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fa72 	bl	8009262 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ad7e:	79fb      	ldrb	r3, [r7, #7]
 800ad80:	f003 0320 	and.w	r3, r3, #32
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d060      	beq.n	800ae4a <f_open+0x362>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d05c      	beq.n	800ae4a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	895b      	ldrh	r3, [r3, #10]
 800ad9c:	025b      	lsls	r3, r3, #9
 800ad9e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	657b      	str	r3, [r7, #84]	; 0x54
 800adac:	e016      	b.n	800addc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fd1d 	bl	80097f2 <get_fat>
 800adb8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800adba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d802      	bhi.n	800adc6 <f_open+0x2de>
 800adc0:	2302      	movs	r3, #2
 800adc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800adc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adcc:	d102      	bne.n	800add4 <f_open+0x2ec>
 800adce:	2301      	movs	r3, #1
 800add0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800add4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800add6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	657b      	str	r3, [r7, #84]	; 0x54
 800addc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <f_open+0x304>
 800ade4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ade6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ade8:	429a      	cmp	r2, r3
 800adea:	d8e0      	bhi.n	800adae <f_open+0x2c6>
				}
				fp->clust = clst;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adf0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800adf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d127      	bne.n	800ae4a <f_open+0x362>
 800adfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d022      	beq.n	800ae4a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fcd3 	bl	80097b4 <clust2sect>
 800ae0e:	6478      	str	r0, [r7, #68]	; 0x44
 800ae10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d103      	bne.n	800ae1e <f_open+0x336>
						res = FR_INT_ERR;
 800ae16:	2302      	movs	r3, #2
 800ae18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae1c:	e015      	b.n	800ae4a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ae1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae20:	0a5a      	lsrs	r2, r3, #9
 800ae22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae24:	441a      	add	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	7858      	ldrb	r0, [r3, #1]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6a1a      	ldr	r2, [r3, #32]
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f7fe f911 	bl	8009060 <disk_read>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <f_open+0x362>
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ae4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <f_open+0x370>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ae58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3760      	adds	r7, #96	; 0x60
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08c      	sub	sp, #48	; 0x30
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f107 0210 	add.w	r2, r7, #16
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fdb3 	bl	800a9f0 <validate>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ae90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d107      	bne.n	800aea8 <f_write+0x44>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	7d5b      	ldrb	r3, [r3, #21]
 800ae9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <f_write+0x4a>
 800aea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeac:	e14b      	b.n	800b146 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	7d1b      	ldrb	r3, [r3, #20]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <f_write+0x5a>
 800aeba:	2307      	movs	r3, #7
 800aebc:	e143      	b.n	800b146 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	441a      	add	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	f080 812d 	bcs.w	800b12a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	43db      	mvns	r3, r3
 800aed6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aed8:	e127      	b.n	800b12a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f040 80e3 	bne.w	800b0ae <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	0a5b      	lsrs	r3, r3, #9
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	8952      	ldrh	r2, [r2, #10]
 800aef2:	3a01      	subs	r2, #1
 800aef4:	4013      	ands	r3, r2
 800aef6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d143      	bne.n	800af86 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10c      	bne.n	800af20 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d11a      	bne.n	800af48 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2100      	movs	r1, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fe64 	bl	8009be4 <create_chain>
 800af1c:	62b8      	str	r0, [r7, #40]	; 0x28
 800af1e:	e013      	b.n	800af48 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d007      	beq.n	800af38 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	4619      	mov	r1, r3
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7fe fef0 	bl	8009d14 <clmt_clust>
 800af34:	62b8      	str	r0, [r7, #40]	; 0x28
 800af36:	e007      	b.n	800af48 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	4619      	mov	r1, r3
 800af40:	4610      	mov	r0, r2
 800af42:	f7fe fe4f 	bl	8009be4 <create_chain>
 800af46:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 80f2 	beq.w	800b134 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	2b01      	cmp	r3, #1
 800af54:	d104      	bne.n	800af60 <f_write+0xfc>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2202      	movs	r2, #2
 800af5a:	755a      	strb	r2, [r3, #21]
 800af5c:	2302      	movs	r3, #2
 800af5e:	e0f2      	b.n	800b146 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af66:	d104      	bne.n	800af72 <f_write+0x10e>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2201      	movs	r2, #1
 800af6c:	755a      	strb	r2, [r3, #21]
 800af6e:	2301      	movs	r3, #1
 800af70:	e0e9      	b.n	800b146 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af76:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <f_write+0x122>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af84:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	7d1b      	ldrb	r3, [r3, #20]
 800af8a:	b25b      	sxtb	r3, r3
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	da18      	bge.n	800afc2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	7858      	ldrb	r0, [r3, #1]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1a      	ldr	r2, [r3, #32]
 800af9e:	2301      	movs	r3, #1
 800afa0:	f7fe f87e 	bl	80090a0 <disk_write>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d004      	beq.n	800afb4 <f_write+0x150>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2201      	movs	r2, #1
 800afae:	755a      	strb	r2, [r3, #21]
 800afb0:	2301      	movs	r3, #1
 800afb2:	e0c8      	b.n	800b146 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	7d1b      	ldrb	r3, [r3, #20]
 800afb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	4619      	mov	r1, r3
 800afca:	4610      	mov	r0, r2
 800afcc:	f7fe fbf2 	bl	80097b4 <clust2sect>
 800afd0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d104      	bne.n	800afe2 <f_write+0x17e>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2202      	movs	r2, #2
 800afdc:	755a      	strb	r2, [r3, #21]
 800afde:	2302      	movs	r3, #2
 800afe0:	e0b1      	b.n	800b146 <f_write+0x2e2>
			sect += csect;
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	4413      	add	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	0a5b      	lsrs	r3, r3, #9
 800afee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d03c      	beq.n	800b070 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	4413      	add	r3, r2
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	8952      	ldrh	r2, [r2, #10]
 800b000:	4293      	cmp	r3, r2
 800b002:	d905      	bls.n	800b010 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	895b      	ldrh	r3, [r3, #10]
 800b008:	461a      	mov	r2, r3
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	7858      	ldrb	r0, [r3, #1]
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	69f9      	ldr	r1, [r7, #28]
 800b01a:	f7fe f841 	bl	80090a0 <disk_write>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <f_write+0x1ca>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	755a      	strb	r2, [r3, #21]
 800b02a:	2301      	movs	r3, #1
 800b02c:	e08b      	b.n	800b146 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a1a      	ldr	r2, [r3, #32]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	6a3a      	ldr	r2, [r7, #32]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d915      	bls.n	800b068 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a1a      	ldr	r2, [r3, #32]
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	025b      	lsls	r3, r3, #9
 800b04c:	69fa      	ldr	r2, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b054:	4619      	mov	r1, r3
 800b056:	f7fe f8e3 	bl	8009220 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	7d1b      	ldrb	r3, [r3, #20]
 800b05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b062:	b2da      	uxtb	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	025b      	lsls	r3, r3, #9
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b06e:	e03f      	b.n	800b0f0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	429a      	cmp	r2, r3
 800b078:	d016      	beq.n	800b0a8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b082:	429a      	cmp	r2, r3
 800b084:	d210      	bcs.n	800b0a8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	7858      	ldrb	r0, [r3, #1]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b090:	2301      	movs	r3, #1
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	f7fd ffe4 	bl	8009060 <disk_read>
 800b098:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	755a      	strb	r2, [r3, #21]
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e04e      	b.n	800b146 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d901      	bls.n	800b0c8 <f_write+0x264>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d6:	4413      	add	r3, r2
 800b0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0da:	69f9      	ldr	r1, [r7, #28]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe f89f 	bl	8009220 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	7d1b      	ldrb	r3, [r3, #20]
 800b0e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b0f0:	69fa      	ldr	r2, [r7, #28]
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	4413      	add	r3, r2
 800b0f6:	61fb      	str	r3, [r7, #28]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	699a      	ldr	r2, [r3, #24]
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	441a      	add	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	619a      	str	r2, [r3, #24]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	bf38      	it	cc
 800b110:	461a      	movcc	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	60da      	str	r2, [r3, #12]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	441a      	add	r2, r3
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f47f aed4 	bne.w	800aeda <f_write+0x76>
 800b132:	e000      	b.n	800b136 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b134:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	7d1b      	ldrb	r3, [r3, #20]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3730      	adds	r7, #48	; 0x30
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b086      	sub	sp, #24
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f107 0208 	add.w	r2, r7, #8
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff fc46 	bl	800a9f0 <validate>
 800b164:	4603      	mov	r3, r0
 800b166:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d168      	bne.n	800b240 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7d1b      	ldrb	r3, [r3, #20]
 800b172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d062      	beq.n	800b240 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	7d1b      	ldrb	r3, [r3, #20]
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	da15      	bge.n	800b1b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	7858      	ldrb	r0, [r3, #1]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1a      	ldr	r2, [r3, #32]
 800b192:	2301      	movs	r3, #1
 800b194:	f7fd ff84 	bl	80090a0 <disk_write>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <f_sync+0x54>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e04f      	b.n	800b242 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b1b0:	f7fd fcc6 	bl	8008b40 <get_fattime>
 800b1b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f7fe fa5c 	bl	800967c <move_window>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d138      	bne.n	800b240 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	330b      	adds	r3, #11
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	330b      	adds	r3, #11
 800b1de:	f042 0220 	orr.w	r2, r2, #32
 800b1e2:	b2d2      	uxtb	r2, r2
 800b1e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	68f9      	ldr	r1, [r7, #12]
 800b1f2:	f7fe ff69 	bl	800a0c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f103 021c 	add.w	r2, r3, #28
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7fd ffe0 	bl	80091c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3316      	adds	r3, #22
 800b20c:	6939      	ldr	r1, [r7, #16]
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fd ffda 	bl	80091c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3312      	adds	r3, #18
 800b218:	2100      	movs	r1, #0
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fd ffb9 	bl	8009192 <st_word>
					fs->wflag = 1;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2201      	movs	r2, #1
 800b224:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe fa55 	bl	80096d8 <sync_fs>
 800b22e:	4603      	mov	r3, r0
 800b230:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7d1b      	ldrb	r3, [r3, #20]
 800b236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b240:	7dfb      	ldrb	r3, [r7, #23]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff ff7b 	bl	800b14e <f_sync>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d118      	bne.n	800b294 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f107 0208 	add.w	r2, r7, #8
 800b268:	4611      	mov	r1, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff fbc0 	bl	800a9f0 <validate>
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10c      	bne.n	800b294 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe f958 	bl	8009534 <dec_lock>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b096      	sub	sp, #88	; 0x58
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b2a6:	f107 0108 	add.w	r1, r7, #8
 800b2aa:	1d3b      	adds	r3, r7, #4
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff f952 	bl	800a558 <find_volume>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b2be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f040 80ec 	bne.w	800b4a0 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	f107 030c 	add.w	r3, r7, #12
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff f835 	bl	800a340 <follow_path>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <f_mkdir+0x4c>
 800b2e4:	2308      	movs	r3, #8
 800b2e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b2ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	f040 80d6 	bne.w	800b4a0 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b2f4:	f107 030c 	add.w	r3, r7, #12
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fc72 	bl	8009be4 <create_chain>
 800b300:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	895b      	ldrh	r3, [r3, #10]
 800b306:	025b      	lsls	r3, r3, #9
 800b308:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b312:	2b00      	cmp	r3, #0
 800b314:	d102      	bne.n	800b31c <f_mkdir+0x7e>
 800b316:	2307      	movs	r3, #7
 800b318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d102      	bne.n	800b328 <f_mkdir+0x8a>
 800b322:	2302      	movs	r3, #2
 800b324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b32a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b32e:	d102      	bne.n	800b336 <f_mkdir+0x98>
 800b330:	2301      	movs	r3, #1
 800b332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <f_mkdir+0xae>
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe f957 	bl	80095f4 <sync_window>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b34c:	f7fd fbf8 	bl	8008b40 <get_fattime>
 800b350:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b356:	2b00      	cmp	r3, #0
 800b358:	d16a      	bne.n	800b430 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fa28 	bl	80097b4 <clust2sect>
 800b364:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	3330      	adds	r3, #48	; 0x30
 800b36a:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b36c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b370:	2100      	movs	r1, #0
 800b372:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b374:	f7fd ff75 	bl	8009262 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b378:	220b      	movs	r2, #11
 800b37a:	2120      	movs	r1, #32
 800b37c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b37e:	f7fd ff70 	bl	8009262 <mem_set>
					dir[DIR_Name] = '.';
 800b382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b384:	222e      	movs	r2, #46	; 0x2e
 800b386:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38a:	330b      	adds	r3, #11
 800b38c:	2210      	movs	r2, #16
 800b38e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b392:	3316      	adds	r3, #22
 800b394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b396:	4618      	mov	r0, r3
 800b398:	f7fd ff16 	bl	80091c8 <st_dword>
					st_clust(fs, dir, dcl);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fe90 	bl	800a0c8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3aa:	3320      	adds	r3, #32
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fd ff35 	bl	8009220 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b8:	3321      	adds	r3, #33	; 0x21
 800b3ba:	222e      	movs	r2, #46	; 0x2e
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d106      	bne.n	800b3d8 <f_mkdir+0x13a>
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d101      	bne.n	800b3d8 <f_mkdir+0x13a>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b3d8:	68b8      	ldr	r0, [r7, #8]
 800b3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3dc:	3320      	adds	r3, #32
 800b3de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	f7fe fe71 	bl	800a0c8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	895b      	ldrh	r3, [r3, #10]
 800b3ea:	653b      	str	r3, [r7, #80]	; 0x50
 800b3ec:	e01b      	b.n	800b426 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe f8f7 	bl	80095f4 <sync_window>
 800b406:	4603      	mov	r3, r0
 800b408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b40c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10c      	bne.n	800b42e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b414:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b418:	2100      	movs	r1, #0
 800b41a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b41c:	f7fd ff21 	bl	8009262 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b422:	3b01      	subs	r3, #1
 800b424:	653b      	str	r3, [r7, #80]	; 0x50
 800b426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e0      	bne.n	800b3ee <f_mkdir+0x150>
 800b42c:	e000      	b.n	800b430 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b42e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b434:	2b00      	cmp	r3, #0
 800b436:	d107      	bne.n	800b448 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b438:	f107 030c 	add.w	r3, r7, #12
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe feb8 	bl	800a1b2 <dir_register>
 800b442:	4603      	mov	r3, r0
 800b444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d120      	bne.n	800b492 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b456:	3316      	adds	r3, #22
 800b458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fd feb4 	bl	80091c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe fe2e 	bl	800a0c8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	330b      	adds	r3, #11
 800b470:	2210      	movs	r2, #16
 800b472:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2201      	movs	r2, #1
 800b478:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b47a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10e      	bne.n	800b4a0 <f_mkdir+0x202>
					res = sync_fs(fs);
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe f927 	bl	80096d8 <sync_fs>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b490:	e006      	b.n	800b4a0 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b492:	f107 030c 	add.w	r3, r7, #12
 800b496:	2200      	movs	r2, #0
 800b498:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fb3d 	bl	8009b1a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3758      	adds	r7, #88	; 0x58
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b4c2:	4b1f      	ldr	r3, [pc, #124]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4c4:	7a5b      	ldrb	r3, [r3, #9]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d131      	bne.n	800b530 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b4cc:	4b1c      	ldr	r3, [pc, #112]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4ce:	7a5b      	ldrb	r3, [r3, #9]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	4b1a      	ldr	r3, [pc, #104]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b4da:	4b19      	ldr	r3, [pc, #100]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4dc:	7a5b      	ldrb	r3, [r3, #9]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	4a17      	ldr	r2, [pc, #92]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4ec:	7a5b      	ldrb	r3, [r3, #9]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4b13      	ldr	r3, [pc, #76]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	79fa      	ldrb	r2, [r7, #7]
 800b4f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b4fa:	4b11      	ldr	r3, [pc, #68]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b4fc:	7a5b      	ldrb	r3, [r3, #9]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	b2d1      	uxtb	r1, r2
 800b504:	4a0e      	ldr	r2, [pc, #56]	; (800b540 <FATFS_LinkDriverEx+0x94>)
 800b506:	7251      	strb	r1, [r2, #9]
 800b508:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b50a:	7dbb      	ldrb	r3, [r7, #22]
 800b50c:	3330      	adds	r3, #48	; 0x30
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	3301      	adds	r3, #1
 800b518:	223a      	movs	r2, #58	; 0x3a
 800b51a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3302      	adds	r3, #2
 800b520:	222f      	movs	r2, #47	; 0x2f
 800b522:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	3303      	adds	r3, #3
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b530:	7dfb      	ldrb	r3, [r7, #23]
}
 800b532:	4618      	mov	r0, r3
 800b534:	371c      	adds	r7, #28
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20004a84 	.word	0x20004a84

0800b544 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b54e:	2200      	movs	r2, #0
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff ffaa 	bl	800b4ac <FATFS_LinkDriverEx>
 800b558:	4603      	mov	r3, r0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
	...

0800b564 <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800b568:	2200      	movs	r2, #0
 800b56a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b56e:	4836      	ldr	r0, [pc, #216]	; (800b648 <Preprocessing_Init+0xe4>)
 800b570:	f7f6 ff5e 	bl	8002430 <Window_Init>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d000      	beq.n	800b57c <Preprocessing_Init+0x18>
  {
    while(1);
 800b57a:	e7fe      	b.n	800b57a <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800b57c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b580:	4832      	ldr	r0, [pc, #200]	; (800b64c <Preprocessing_Init+0xe8>)
 800b582:	f000 fbe3 	bl	800bd4c <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800b586:	4b32      	ldr	r3, [pc, #200]	; (800b650 <Preprocessing_Init+0xec>)
 800b588:	4a30      	ldr	r2, [pc, #192]	; (800b64c <Preprocessing_Init+0xe8>)
 800b58a:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800b58c:	4b30      	ldr	r3, [pc, #192]	; (800b650 <Preprocessing_Init+0xec>)
 800b58e:	2201      	movs	r2, #1
 800b590:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800b592:	4b2f      	ldr	r3, [pc, #188]	; (800b650 <Preprocessing_Init+0xec>)
 800b594:	4a2c      	ldr	r2, [pc, #176]	; (800b648 <Preprocessing_Init+0xe4>)
 800b596:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800b598:	4b2d      	ldr	r3, [pc, #180]	; (800b650 <Preprocessing_Init+0xec>)
 800b59a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b59e:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800b5a0:	4b2b      	ldr	r3, [pc, #172]	; (800b650 <Preprocessing_Init+0xec>)
 800b5a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5a6:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800b5a8:	4b29      	ldr	r3, [pc, #164]	; (800b650 <Preprocessing_Init+0xec>)
 800b5aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5ae:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800b5b0:	4b27      	ldr	r3, [pc, #156]	; (800b650 <Preprocessing_Init+0xec>)
 800b5b2:	4a28      	ldr	r2, [pc, #160]	; (800b654 <Preprocessing_Init+0xf0>)
 800b5b4:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800b5b6:	4b28      	ldr	r3, [pc, #160]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5b8:	4a28      	ldr	r2, [pc, #160]	; (800b65c <Preprocessing_Init+0xf8>)
 800b5ba:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800b5bc:	4b26      	ldr	r3, [pc, #152]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5be:	4a28      	ldr	r2, [pc, #160]	; (800b660 <Preprocessing_Init+0xfc>)
 800b5c0:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800b5c2:	4b25      	ldr	r3, [pc, #148]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5c4:	4a27      	ldr	r2, [pc, #156]	; (800b664 <Preprocessing_Init+0x100>)
 800b5c6:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800b5c8:	4b23      	ldr	r3, [pc, #140]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5ca:	2280      	movs	r2, #128	; 0x80
 800b5cc:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800b5ce:	4b22      	ldr	r3, [pc, #136]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5d4:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800b5d6:	4b20      	ldr	r3, [pc, #128]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5d8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b5dc:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800b5de:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5e0:	f04f 0200 	mov.w	r2, #0
 800b5e4:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800b5e6:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <Preprocessing_Init+0xf4>)
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	ee07 3a90 	vmov	s15, r3
 800b5ee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800b5f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b5f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b5fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b5fe:	4b16      	ldr	r3, [pc, #88]	; (800b658 <Preprocessing_Init+0xf4>)
 800b600:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800b604:	4b14      	ldr	r3, [pc, #80]	; (800b658 <Preprocessing_Init+0xf4>)
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800b60c:	4b12      	ldr	r3, [pc, #72]	; (800b658 <Preprocessing_Init+0xf4>)
 800b60e:	2201      	movs	r2, #1
 800b610:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <Preprocessing_Init+0xf4>)
 800b614:	2201      	movs	r2, #1
 800b616:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800b618:	480f      	ldr	r0, [pc, #60]	; (800b658 <Preprocessing_Init+0xf4>)
 800b61a:	f7f6 fc2e 	bl	8001e7a <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800b61e:	4b12      	ldr	r3, [pc, #72]	; (800b668 <Preprocessing_Init+0x104>)
 800b620:	4a0b      	ldr	r2, [pc, #44]	; (800b650 <Preprocessing_Init+0xec>)
 800b622:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800b624:	4b10      	ldr	r3, [pc, #64]	; (800b668 <Preprocessing_Init+0x104>)
 800b626:	4a0c      	ldr	r2, [pc, #48]	; (800b658 <Preprocessing_Init+0xf4>)
 800b628:	605a      	str	r2, [r3, #4]

  S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 800b62a:	4b10      	ldr	r3, [pc, #64]	; (800b66c <Preprocessing_Init+0x108>)
 800b62c:	4a0e      	ldr	r2, [pc, #56]	; (800b668 <Preprocessing_Init+0x104>)
 800b62e:	601a      	str	r2, [r3, #0]
  S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800b630:	4b0e      	ldr	r3, [pc, #56]	; (800b66c <Preprocessing_Init+0x108>)
 800b632:	2200      	movs	r2, #0
 800b634:	711a      	strb	r2, [r3, #4]
  S_LogMelSpectr.Ref = 1;
 800b636:	4b0d      	ldr	r3, [pc, #52]	; (800b66c <Preprocessing_Init+0x108>)
 800b638:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b63c:	609a      	str	r2, [r3, #8]
  S_LogMelSpectr.TopdB = 80;
 800b63e:	4b0b      	ldr	r3, [pc, #44]	; (800b66c <Preprocessing_Init+0x108>)
 800b640:	4a0b      	ldr	r2, [pc, #44]	; (800b670 <Preprocessing_Init+0x10c>)
 800b642:	60da      	str	r2, [r3, #12]

}
 800b644:	bf00      	nop
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20005d0c 	.word	0x20005d0c
 800b64c:	20004a90 	.word	0x20004a90
 800b650:	20004ad8 	.word	0x20004ad8
 800b654:	20006d0c 	.word	0x20006d0c
 800b658:	20004aa8 	.word	0x20004aa8
 800b65c:	20008d0c 	.word	0x20008d0c
 800b660:	20008f0c 	.word	0x20008f0c
 800b664:	20007d0c 	.word	0x20007d0c
 800b668:	20004af4 	.word	0x20004af4
 800b66c:	20004afc 	.word	0x20004afc
 800b670:	42a00000 	.word	0x42a00000

0800b674 <AudioPreprocessing_RunMethod4>:
  }
}

//Method 4: Mel scale spectrogram without normalized input and with db scale output
void AudioPreprocessing_RunMethod4(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
	uint32_t num_frames;
	//zero pads at the end of the audio buffer
	if (END_ZERO_PADDING)
	{
	  memset(&pInSignal[signal_len], 0, FRAME_LEN);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b68c:	2100      	movs	r1, #0
 800b68e:	4618      	mov	r0, r3
 800b690:	f001 fc3c 	bl	800cf0c <memset>
	  num_frames = 1 + (signal_len) / HOP_LEN;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	0a1b      	lsrs	r3, r3, #8
 800b698:	3301      	adds	r3, #1
 800b69a:	617b      	str	r3, [r7, #20]
	else
	{
	  num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
	}

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800b69c:	2300      	movs	r3, #0
 800b69e:	61fb      	str	r3, [r7, #28]
 800b6a0:	e029      	b.n	800b6f6 <AudioPreprocessing_RunMethod4+0x82>
  {
    buf_to_float(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	025b      	lsls	r3, r3, #9
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6ae:	4916      	ldr	r1, [pc, #88]	; (800b708 <AudioPreprocessing_RunMethod4+0x94>)
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f6 fa68 	bl	8001b86 <buf_to_float>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800b6b6:	4a15      	ldr	r2, [pc, #84]	; (800b70c <AudioPreprocessing_RunMethod4+0x98>)
 800b6b8:	4913      	ldr	r1, [pc, #76]	; (800b708 <AudioPreprocessing_RunMethod4+0x94>)
 800b6ba:	4815      	ldr	r0, [pc, #84]	; (800b710 <AudioPreprocessing_RunMethod4+0x9c>)
 800b6bc:	f7f6 fb12 	bl	8001ce4 <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61bb      	str	r3, [r7, #24]
 800b6c4:	e011      	b.n	800b6ea <AudioPreprocessing_RunMethod4+0x76>
    {
    	pOut[num_frames * frame_index + i] = pOutColBuffer[i];
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	fb03 f202 	mul.w	r2, r3, r2
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	490c      	ldr	r1, [pc, #48]	; (800b70c <AudioPreprocessing_RunMethod4+0x98>)
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	0092      	lsls	r2, r2, #2
 800b6de:	440a      	add	r2, r1
 800b6e0:	6812      	ldr	r2, [r2, #0]
 800b6e2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b7f      	cmp	r3, #127	; 0x7f
 800b6ee:	d9ea      	bls.n	800b6c6 <AudioPreprocessing_RunMethod4+0x52>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	61fb      	str	r3, [r7, #28]
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d3d1      	bcc.n	800b6a2 <AudioPreprocessing_RunMethod4+0x2e>
    }
  }
}
 800b6fe:	bf00      	nop
 800b700:	bf00      	nop
 800b702:	3720      	adds	r7, #32
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20004b0c 	.word	0x20004b0c
 800b70c:	20005b0c 	.word	0x20005b0c
 800b710:	20004afc 	.word	0x20004afc

0800b714 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a08      	ldr	r2, [pc, #32]	; (800b740 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d103      	bne.n	800b72c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800b726:	2201      	movs	r2, #1
 800b728:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800b72a:	e002      	b.n	800b732 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800b72e:	2201      	movs	r2, #1
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	200000f8 	.word	0x200000f8
 800b744:	200042dc 	.word	0x200042dc
 800b748:	200042e4 	.word	0x200042e4

0800b74c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a08      	ldr	r2, [pc, #32]	; (800b778 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d103      	bne.n	800b764 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800b75c:	4b07      	ldr	r3, [pc, #28]	; (800b77c <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800b75e:	2201      	movs	r2, #1
 800b760:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800b762:	e002      	b.n	800b76a <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800b766:	2201      	movs	r2, #1
 800b768:	601a      	str	r2, [r3, #0]
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	200000f8 	.word	0x200000f8
 800b77c:	200042e0 	.word	0x200042e0
 800b780:	200042e8 	.word	0x200042e8

0800b784 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800b78a:	4b59      	ldr	r3, [pc, #356]	; (800b8f0 <checkMicrophone+0x16c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d151      	bne.n	800b836 <checkMicrophone+0xb2>
 800b792:	4b58      	ldr	r3, [pc, #352]	; (800b8f4 <checkMicrophone+0x170>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d14d      	bne.n	800b836 <checkMicrophone+0xb2>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800b79a:	2300      	movs	r3, #0
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	e040      	b.n	800b822 <checkMicrophone+0x9e>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b7a0:	4b55      	ldr	r3, [pc, #340]	; (800b8f8 <checkMicrophone+0x174>)
 800b7a2:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b7a6:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d028      	beq.n	800b800 <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b7ae:	4a53      	ldr	r2, [pc, #332]	; (800b8fc <checkMicrophone+0x178>)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b6:	121b      	asrs	r3, r3, #8
 800b7b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b7bc:	db0b      	blt.n	800b7d6 <checkMicrophone+0x52>
 800b7be:	4a4f      	ldr	r2, [pc, #316]	; (800b8fc <checkMicrophone+0x178>)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c6:	121b      	asrs	r3, r3, #8
 800b7c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	bfa8      	it	ge
 800b7d0:	4613      	movge	r3, r2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	e001      	b.n	800b7da <checkMicrophone+0x56>
 800b7d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b7da:	4b47      	ldr	r3, [pc, #284]	; (800b8f8 <checkMicrophone+0x174>)
 800b7dc:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b7e0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b7e4:	4944      	ldr	r1, [pc, #272]	; (800b8f8 <checkMicrophone+0x174>)
 800b7e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b7ea:	4b43      	ldr	r3, [pc, #268]	; (800b8f8 <checkMicrophone+0x174>)
 800b7ec:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b7f0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	4a40      	ldr	r2, [pc, #256]	; (800b8f8 <checkMicrophone+0x174>)
 800b7f8:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800b7fc:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b800:	4b3d      	ldr	r3, [pc, #244]	; (800b8f8 <checkMicrophone+0x174>)
 800b802:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b806:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b80a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800b80e:	d305      	bcc.n	800b81c <checkMicrophone+0x98>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800b810:	4b39      	ldr	r3, [pc, #228]	; (800b8f8 <checkMicrophone+0x174>)
 800b812:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 0; i < 1024; i++)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3301      	adds	r3, #1
 800b820:	607b      	str	r3, [r7, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b828:	dbba      	blt.n	800b7a0 <checkMicrophone+0x1c>
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800b82a:	4b31      	ldr	r3, [pc, #196]	; (800b8f0 <checkMicrophone+0x16c>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800b830:	4b30      	ldr	r3, [pc, #192]	; (800b8f4 <checkMicrophone+0x170>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800b836:	4b32      	ldr	r3, [pc, #200]	; (800b900 <checkMicrophone+0x17c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d152      	bne.n	800b8e4 <checkMicrophone+0x160>
 800b83e:	4b31      	ldr	r3, [pc, #196]	; (800b904 <checkMicrophone+0x180>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d14e      	bne.n	800b8e4 <checkMicrophone+0x160>
	{
		for(int i = 1024; i < 2048; i++)
 800b846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	e040      	b.n	800b8d0 <checkMicrophone+0x14c>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b84e:	4b2a      	ldr	r3, [pc, #168]	; (800b8f8 <checkMicrophone+0x174>)
 800b850:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b854:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d028      	beq.n	800b8ae <checkMicrophone+0x12a>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b85c:	4a27      	ldr	r2, [pc, #156]	; (800b8fc <checkMicrophone+0x178>)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b864:	121b      	asrs	r3, r3, #8
 800b866:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b86a:	db0b      	blt.n	800b884 <checkMicrophone+0x100>
 800b86c:	4a23      	ldr	r2, [pc, #140]	; (800b8fc <checkMicrophone+0x178>)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b874:	121b      	asrs	r3, r3, #8
 800b876:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b87a:	4293      	cmp	r3, r2
 800b87c:	bfa8      	it	ge
 800b87e:	4613      	movge	r3, r2
 800b880:	b29a      	uxth	r2, r3
 800b882:	e001      	b.n	800b888 <checkMicrophone+0x104>
 800b884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b888:	4b1b      	ldr	r3, [pc, #108]	; (800b8f8 <checkMicrophone+0x174>)
 800b88a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b88e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b892:	4919      	ldr	r1, [pc, #100]	; (800b8f8 <checkMicrophone+0x174>)
 800b894:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <checkMicrophone+0x174>)
 800b89a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b89e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	4a14      	ldr	r2, [pc, #80]	; (800b8f8 <checkMicrophone+0x174>)
 800b8a6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800b8aa:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b8ae:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <checkMicrophone+0x174>)
 800b8b0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b8b4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b8b8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800b8bc:	d305      	bcc.n	800b8ca <checkMicrophone+0x146>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800b8be:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <checkMicrophone+0x174>)
 800b8c0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 1024; i < 2048; i++)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	603b      	str	r3, [r7, #0]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8d6:	dbba      	blt.n	800b84e <checkMicrophone+0xca>
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <checkMicrophone+0x17c>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800b8de:	4b09      	ldr	r3, [pc, #36]	; (800b904 <checkMicrophone+0x180>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
	}
}
 800b8e4:	bf00      	nop
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	200042dc 	.word	0x200042dc
 800b8f4:	200042e4 	.word	0x200042e4
 800b8f8:	2000910c 	.word	0x2000910c
 800b8fc:	200002dc 	.word	0x200002dc
 800b900:	200042e0 	.word	0x200042e0
 800b904:	200042e8 	.word	0x200042e8

0800b908 <get_date>:
extern RTC_HandleTypeDef hrtc;


//returns a string containing current date
char* get_date( char* date)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800b910:	f107 030c 	add.w	r3, r7, #12
 800b914:	2200      	movs	r2, #0
 800b916:	4619      	mov	r1, r3
 800b918:	480a      	ldr	r0, [pc, #40]	; (800b944 <get_date+0x3c>)
 800b91a:	f7fa f8fd 	bl	8005b18 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	461a      	mov	r2, r3
 800b922:	7b7b      	ldrb	r3, [r7, #13]
 800b924:	4619      	mov	r1, r3
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	460b      	mov	r3, r1
 800b930:	4905      	ldr	r1, [pc, #20]	; (800b948 <get_date+0x40>)
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f001 fbe2 	bl	800d0fc <siprintf>

	 return date;
 800b938:	687b      	ldr	r3, [r7, #4]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	200042ec 	.word	0x200042ec
 800b948:	0800e7d8 	.word	0x0800e7d8

0800b94c <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08c      	sub	sp, #48	; 0x30
 800b950:	af02      	add	r7, sp, #8
 800b952:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800b954:	2364      	movs	r3, #100	; 0x64
 800b956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b95a:	236d      	movs	r3, #109	; 0x6d
 800b95c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b960:	2379      	movs	r3, #121	; 0x79
 800b962:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b966:	2368      	movs	r3, #104	; 0x68
 800b968:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800b96c:	236d      	movs	r3, #109	; 0x6d
 800b96e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b972:	2373      	movs	r3, #115	; 0x73
 800b974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800b978:	f107 030c 	add.w	r3, r7, #12
 800b97c:	2200      	movs	r2, #0
 800b97e:	4619      	mov	r1, r3
 800b980:	480c      	ldr	r0, [pc, #48]	; (800b9b4 <get_time_filename+0x68>)
 800b982:	f7f9 ffe7 	bl	8005954 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800b986:	f107 0308 	add.w	r3, r7, #8
 800b98a:	2200      	movs	r2, #0
 800b98c:	4619      	mov	r1, r3
 800b98e:	4809      	ldr	r0, [pc, #36]	; (800b9b4 <get_time_filename+0x68>)
 800b990:	f7fa f8c2 	bl	8005b18 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800b994:	7b3b      	ldrb	r3, [r7, #12]
 800b996:	461a      	mov	r2, r3
 800b998:	7b7b      	ldrb	r3, [r7, #13]
 800b99a:	4619      	mov	r1, r3
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4905      	ldr	r1, [pc, #20]	; (800b9b8 <get_time_filename+0x6c>)
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 fba9 	bl	800d0fc <siprintf>
	 return name;
 800b9aa:	687b      	ldr	r3, [r7, #4]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3728      	adds	r7, #40	; 0x28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200042ec 	.word	0x200042ec
 800b9b8:	0800e7d8 	.word	0x0800e7d8

0800b9bc <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4906      	ldr	r1, [pc, #24]	; (800b9dc <SDInit+0x20>)
 800b9c4:	4806      	ldr	r0, [pc, #24]	; (800b9e0 <SDInit+0x24>)
 800b9c6:	f7ff f849 	bl	800aa5c <f_mount>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <SDInit+0x18>
	      {
	          Error_Handler();
 800b9d0:	f7f5 fc4c 	bl	800126c <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200045f0 	.word	0x200045f0
 800b9e0:	200045f4 	.word	0x200045f4

0800b9e4 <createFile>:

int createFile(char* file_name)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800b9ec:	220a      	movs	r2, #10
 800b9ee:	6879      	ldr	r1, [r7, #4]
 800b9f0:	4807      	ldr	r0, [pc, #28]	; (800ba10 <createFile+0x2c>)
 800b9f2:	f7ff f879 	bl	800aae8 <f_open>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <createFile+0x22>
	  {
		  return -1;
 800ba00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba04:	e000      	b.n	800ba08 <createFile+0x24>
	  }
	  return 0;
 800ba06:	2300      	movs	r3, #0

}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20004824 	.word	0x20004824

0800ba14 <writeToFile>:
int writeToFile(char* text, int size)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	6879      	ldr	r1, [r7, #4]
 800ba26:	4804      	ldr	r0, [pc, #16]	; (800ba38 <writeToFile+0x24>)
 800ba28:	f7ff fa1c 	bl	800ae64 <f_write>
	return byteswritten;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20004824 	.word	0x20004824

0800ba3c <SDclose>:
int SDclose()
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800ba40:	4802      	ldr	r0, [pc, #8]	; (800ba4c <SDclose+0x10>)
 800ba42:	f7ff fc02 	bl	800b24a <f_close>
	return 0;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20004824 	.word	0x20004824

0800ba50 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800ba5a:	88fb      	ldrh	r3, [r7, #6]
 800ba5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba60:	d10a      	bne.n	800ba78 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800ba62:	4b09      	ldr	r3, [pc, #36]	; (800ba88 <HAL_GPIO_EXTI_Callback+0x38>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	bf0c      	ite	eq
 800ba6a:	2301      	moveq	r3, #1
 800ba6c:	2300      	movne	r3, #0
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	461a      	mov	r2, r3
 800ba72:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <HAL_GPIO_EXTI_Callback+0x38>)
 800ba74:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800ba76:	e000      	b.n	800ba7a <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800ba78:	bf00      	nop
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	200002d8 	.word	0x200002d8

0800ba8c <WavProcess_EncInit>:
extern AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800ba96:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <WavProcess_EncInit+0x90>)
 800ba98:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800ba9c:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800ba9e:	4b1f      	ldr	r3, [pc, #124]	; (800bb1c <WavProcess_EncInit+0x90>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800baa4:	4b1d      	ldr	r3, [pc, #116]	; (800bb1c <WavProcess_EncInit+0x90>)
 800baa6:	2210      	movs	r2, #16
 800baa8:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800baaa:	4b1c      	ldr	r3, [pc, #112]	; (800bb1c <WavProcess_EncInit+0x90>)
 800baac:	4a1c      	ldr	r2, [pc, #112]	; (800bb20 <WavProcess_EncInit+0x94>)
 800baae:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800bab0:	4b1a      	ldr	r3, [pc, #104]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bab2:	222c      	movs	r2, #44	; 0x2c
 800bab4:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bab6:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bab8:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800baba:	4a18      	ldr	r2, [pc, #96]	; (800bb1c <WavProcess_EncInit+0x90>)
 800babc:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800babe:	08d2      	lsrs	r2, r2, #3
 800bac0:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bac2:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800bac6:	4a15      	ldr	r2, [pc, #84]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bac8:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800baca:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bace:	4a13      	ldr	r2, [pc, #76]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bad0:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bad2:	4b12      	ldr	r3, [pc, #72]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bad4:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800bad6:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bad8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bada:	08db      	lsrs	r3, r3, #3
 800badc:	b29b      	uxth	r3, r3
 800bade:	fb12 f303 	smulbb	r3, r2, r3
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bae6:	841a      	strh	r2, [r3, #32]
  BufferCtl.size = BufferCtl.fptr * 2;
 800bae8:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <WavProcess_EncInit+0x98>)
 800baea:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800baee:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	4a0b      	ldr	r2, [pc, #44]	; (800bb24 <WavProcess_EncInit+0x98>)
 800baf6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800bafa:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800bafe:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <WavProcess_EncInit+0x98>)
 800bb00:	4906      	ldr	r1, [pc, #24]	; (800bb1c <WavProcess_EncInit+0x90>)
 800bb02:	6838      	ldr	r0, [r7, #0]
 800bb04:	f000 f810 	bl	800bb28 <WavProcess_HeaderInit>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <WavProcess_EncInit+0x86>
  {
    return 1;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <WavProcess_EncInit+0x88>
  }
  return 0;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	20018c20 	.word	0x20018c20
 800bb20:	001d4c00 	.word	0x001d4c00
 800bb24:	2000910c 	.word	0x2000910c

0800bb28 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2252      	movs	r2, #82	; 0x52
 800bb38:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	2249      	movs	r2, #73	; 0x49
 800bb40:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3302      	adds	r3, #2
 800bb46:	2246      	movs	r2, #70	; 0x46
 800bb48:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3303      	adds	r3, #3
 800bb4e:	2246      	movs	r2, #70	; 0x46
 800bb50:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->size);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bb58:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	b2d2      	uxtb	r2, r2
 800bb62:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->size >> 8);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bb6a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bb6e:	0a1a      	lsrs	r2, r3, #8
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3305      	adds	r3, #5
 800bb74:	b2d2      	uxtb	r2, r2
 800bb76:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->size >> 16);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bb7e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bb82:	0c1a      	lsrs	r2, r3, #16
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3306      	adds	r3, #6
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->size >> 24);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bb92:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bb96:	0e1a      	lsrs	r2, r3, #24
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3307      	adds	r3, #7
 800bb9c:	b2d2      	uxtb	r2, r2
 800bb9e:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3308      	adds	r3, #8
 800bba4:	2257      	movs	r2, #87	; 0x57
 800bba6:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3309      	adds	r3, #9
 800bbac:	2241      	movs	r2, #65	; 0x41
 800bbae:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	330a      	adds	r3, #10
 800bbb4:	2256      	movs	r2, #86	; 0x56
 800bbb6:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	330b      	adds	r3, #11
 800bbbc:	2245      	movs	r2, #69	; 0x45
 800bbbe:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	330c      	adds	r3, #12
 800bbc4:	2266      	movs	r2, #102	; 0x66
 800bbc6:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	330d      	adds	r3, #13
 800bbcc:	226d      	movs	r2, #109	; 0x6d
 800bbce:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	330e      	adds	r3, #14
 800bbd4:	2274      	movs	r2, #116	; 0x74
 800bbd6:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	330f      	adds	r3, #15
 800bbdc:	2220      	movs	r2, #32
 800bbde:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3310      	adds	r3, #16
 800bbe4:	2210      	movs	r2, #16
 800bbe6:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3311      	adds	r3, #17
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3312      	adds	r3, #18
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3313      	adds	r3, #19
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3314      	adds	r3, #20
 800bc04:	2201      	movs	r2, #1
 800bc06:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3315      	adds	r3, #21
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	8ada      	ldrh	r2, [r3, #22]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3316      	adds	r3, #22
 800bc18:	b2d2      	uxtb	r2, r2
 800bc1a:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3317      	adds	r3, #23
 800bc20:	2200      	movs	r2, #0
 800bc22:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	699a      	ldr	r2, [r3, #24]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3318      	adds	r3, #24
 800bc2c:	b2d2      	uxtb	r2, r2
 800bc2e:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	0a1a      	lsrs	r2, r3, #8
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3319      	adds	r3, #25
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	0c1a      	lsrs	r2, r3, #16
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	331a      	adds	r3, #26
 800bc48:	b2d2      	uxtb	r2, r2
 800bc4a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	0e1a      	lsrs	r2, r3, #24
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	331b      	adds	r3, #27
 800bc56:	b2d2      	uxtb	r2, r2
 800bc58:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	69da      	ldr	r2, [r3, #28]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	331c      	adds	r3, #28
 800bc62:	b2d2      	uxtb	r2, r2
 800bc64:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	0a1a      	lsrs	r2, r3, #8
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	331d      	adds	r3, #29
 800bc70:	b2d2      	uxtb	r2, r2
 800bc72:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	0c1a      	lsrs	r2, r3, #16
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	331e      	adds	r3, #30
 800bc7e:	b2d2      	uxtb	r2, r2
 800bc80:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	0e1a      	lsrs	r2, r3, #24
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	331f      	adds	r3, #31
 800bc8c:	b2d2      	uxtb	r2, r2
 800bc8e:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	8c1a      	ldrh	r2, [r3, #32]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3320      	adds	r3, #32
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3321      	adds	r3, #33	; 0x21
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3322      	adds	r3, #34	; 0x22
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	3323      	adds	r3, #35	; 0x23
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3324      	adds	r3, #36	; 0x24
 800bcbc:	2264      	movs	r2, #100	; 0x64
 800bcbe:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3325      	adds	r3, #37	; 0x25
 800bcc4:	2261      	movs	r2, #97	; 0x61
 800bcc6:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3326      	adds	r3, #38	; 0x26
 800bccc:	2274      	movs	r2, #116	; 0x74
 800bcce:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3327      	adds	r3, #39	; 0x27
 800bcd4:	2261      	movs	r2, #97	; 0x61
 800bcd6:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->size -=44;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bcde:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bce2:	3b2c      	subs	r3, #44	; 0x2c
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800bcea:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  pHeader[40] = (uint8_t)(BufferCtl->size);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bcf4:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3328      	adds	r3, #40	; 0x28
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->size >> 8);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bd06:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bd0a:	0a1a      	lsrs	r2, r3, #8
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	3329      	adds	r3, #41	; 0x29
 800bd10:	b2d2      	uxtb	r2, r2
 800bd12:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->size >> 16);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bd1a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bd1e:	0c1a      	lsrs	r2, r3, #16
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	332a      	adds	r3, #42	; 0x2a
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->size >> 24);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bd2e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bd32:	0e1a      	lsrs	r2, r3, #24
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	332b      	adds	r3, #43	; 0x2b
 800bd38:	b2d2      	uxtb	r2, r2
 800bd3a:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
	...

0800bd4c <arm_rfft_fast_init_f32>:
 800bd4c:	084b      	lsrs	r3, r1, #1
 800bd4e:	2b80      	cmp	r3, #128	; 0x80
 800bd50:	b430      	push	{r4, r5}
 800bd52:	8201      	strh	r1, [r0, #16]
 800bd54:	8003      	strh	r3, [r0, #0]
 800bd56:	d070      	beq.n	800be3a <arm_rfft_fast_init_f32+0xee>
 800bd58:	d916      	bls.n	800bd88 <arm_rfft_fast_init_f32+0x3c>
 800bd5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd5e:	d05f      	beq.n	800be20 <arm_rfft_fast_init_f32+0xd4>
 800bd60:	d936      	bls.n	800bdd0 <arm_rfft_fast_init_f32+0x84>
 800bd62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd66:	d026      	beq.n	800bdb6 <arm_rfft_fast_init_f32+0x6a>
 800bd68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd6c:	d112      	bne.n	800bd94 <arm_rfft_fast_init_f32+0x48>
 800bd6e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800bd72:	4c38      	ldr	r4, [pc, #224]	; (800be54 <arm_rfft_fast_init_f32+0x108>)
 800bd74:	4938      	ldr	r1, [pc, #224]	; (800be58 <arm_rfft_fast_init_f32+0x10c>)
 800bd76:	2300      	movs	r3, #0
 800bd78:	4a38      	ldr	r2, [pc, #224]	; (800be5c <arm_rfft_fast_init_f32+0x110>)
 800bd7a:	8185      	strh	r5, [r0, #12]
 800bd7c:	6084      	str	r4, [r0, #8]
 800bd7e:	6041      	str	r1, [r0, #4]
 800bd80:	6142      	str	r2, [r0, #20]
 800bd82:	4618      	mov	r0, r3
 800bd84:	bc30      	pop	{r4, r5}
 800bd86:	4770      	bx	lr
 800bd88:	2b20      	cmp	r3, #32
 800bd8a:	d031      	beq.n	800bdf0 <arm_rfft_fast_init_f32+0xa4>
 800bd8c:	2b40      	cmp	r3, #64	; 0x40
 800bd8e:	d006      	beq.n	800bd9e <arm_rfft_fast_init_f32+0x52>
 800bd90:	2b10      	cmp	r3, #16
 800bd92:	d039      	beq.n	800be08 <arm_rfft_fast_init_f32+0xbc>
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd98:	bc30      	pop	{r4, r5}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	4770      	bx	lr
 800bd9e:	2538      	movs	r5, #56	; 0x38
 800bda0:	4c2f      	ldr	r4, [pc, #188]	; (800be60 <arm_rfft_fast_init_f32+0x114>)
 800bda2:	4930      	ldr	r1, [pc, #192]	; (800be64 <arm_rfft_fast_init_f32+0x118>)
 800bda4:	2300      	movs	r3, #0
 800bda6:	4a30      	ldr	r2, [pc, #192]	; (800be68 <arm_rfft_fast_init_f32+0x11c>)
 800bda8:	8185      	strh	r5, [r0, #12]
 800bdaa:	6084      	str	r4, [r0, #8]
 800bdac:	6041      	str	r1, [r0, #4]
 800bdae:	6142      	str	r2, [r0, #20]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	bc30      	pop	{r4, r5}
 800bdb4:	4770      	bx	lr
 800bdb6:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800bdba:	4c2c      	ldr	r4, [pc, #176]	; (800be6c <arm_rfft_fast_init_f32+0x120>)
 800bdbc:	492c      	ldr	r1, [pc, #176]	; (800be70 <arm_rfft_fast_init_f32+0x124>)
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4a2c      	ldr	r2, [pc, #176]	; (800be74 <arm_rfft_fast_init_f32+0x128>)
 800bdc2:	8185      	strh	r5, [r0, #12]
 800bdc4:	6084      	str	r4, [r0, #8]
 800bdc6:	6041      	str	r1, [r0, #4]
 800bdc8:	6142      	str	r2, [r0, #20]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	bc30      	pop	{r4, r5}
 800bdce:	4770      	bx	lr
 800bdd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd4:	d1de      	bne.n	800bd94 <arm_rfft_fast_init_f32+0x48>
 800bdd6:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800bdda:	4c27      	ldr	r4, [pc, #156]	; (800be78 <arm_rfft_fast_init_f32+0x12c>)
 800bddc:	4927      	ldr	r1, [pc, #156]	; (800be7c <arm_rfft_fast_init_f32+0x130>)
 800bdde:	2300      	movs	r3, #0
 800bde0:	4a27      	ldr	r2, [pc, #156]	; (800be80 <arm_rfft_fast_init_f32+0x134>)
 800bde2:	8185      	strh	r5, [r0, #12]
 800bde4:	6084      	str	r4, [r0, #8]
 800bde6:	6041      	str	r1, [r0, #4]
 800bde8:	6142      	str	r2, [r0, #20]
 800bdea:	4618      	mov	r0, r3
 800bdec:	bc30      	pop	{r4, r5}
 800bdee:	4770      	bx	lr
 800bdf0:	2530      	movs	r5, #48	; 0x30
 800bdf2:	4c24      	ldr	r4, [pc, #144]	; (800be84 <arm_rfft_fast_init_f32+0x138>)
 800bdf4:	4924      	ldr	r1, [pc, #144]	; (800be88 <arm_rfft_fast_init_f32+0x13c>)
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4a24      	ldr	r2, [pc, #144]	; (800be8c <arm_rfft_fast_init_f32+0x140>)
 800bdfa:	8185      	strh	r5, [r0, #12]
 800bdfc:	6084      	str	r4, [r0, #8]
 800bdfe:	6041      	str	r1, [r0, #4]
 800be00:	6142      	str	r2, [r0, #20]
 800be02:	4618      	mov	r0, r3
 800be04:	bc30      	pop	{r4, r5}
 800be06:	4770      	bx	lr
 800be08:	2514      	movs	r5, #20
 800be0a:	4c21      	ldr	r4, [pc, #132]	; (800be90 <arm_rfft_fast_init_f32+0x144>)
 800be0c:	4921      	ldr	r1, [pc, #132]	; (800be94 <arm_rfft_fast_init_f32+0x148>)
 800be0e:	2300      	movs	r3, #0
 800be10:	4a21      	ldr	r2, [pc, #132]	; (800be98 <arm_rfft_fast_init_f32+0x14c>)
 800be12:	8185      	strh	r5, [r0, #12]
 800be14:	6084      	str	r4, [r0, #8]
 800be16:	6041      	str	r1, [r0, #4]
 800be18:	6142      	str	r2, [r0, #20]
 800be1a:	4618      	mov	r0, r3
 800be1c:	bc30      	pop	{r4, r5}
 800be1e:	4770      	bx	lr
 800be20:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800be24:	4c1d      	ldr	r4, [pc, #116]	; (800be9c <arm_rfft_fast_init_f32+0x150>)
 800be26:	491e      	ldr	r1, [pc, #120]	; (800bea0 <arm_rfft_fast_init_f32+0x154>)
 800be28:	2300      	movs	r3, #0
 800be2a:	4a1e      	ldr	r2, [pc, #120]	; (800bea4 <arm_rfft_fast_init_f32+0x158>)
 800be2c:	8185      	strh	r5, [r0, #12]
 800be2e:	6084      	str	r4, [r0, #8]
 800be30:	6041      	str	r1, [r0, #4]
 800be32:	6142      	str	r2, [r0, #20]
 800be34:	4618      	mov	r0, r3
 800be36:	bc30      	pop	{r4, r5}
 800be38:	4770      	bx	lr
 800be3a:	25d0      	movs	r5, #208	; 0xd0
 800be3c:	4c1a      	ldr	r4, [pc, #104]	; (800bea8 <arm_rfft_fast_init_f32+0x15c>)
 800be3e:	491b      	ldr	r1, [pc, #108]	; (800beac <arm_rfft_fast_init_f32+0x160>)
 800be40:	2300      	movs	r3, #0
 800be42:	4a1b      	ldr	r2, [pc, #108]	; (800beb0 <arm_rfft_fast_init_f32+0x164>)
 800be44:	8185      	strh	r5, [r0, #12]
 800be46:	6084      	str	r4, [r0, #8]
 800be48:	6041      	str	r1, [r0, #4]
 800be4a:	6142      	str	r2, [r0, #20]
 800be4c:	4618      	mov	r0, r3
 800be4e:	bc30      	pop	{r4, r5}
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	0801d6b8 	.word	0x0801d6b8
 800be58:	0800e8b0 	.word	0x0800e8b0
 800be5c:	08014a20 	.word	0x08014a20
 800be60:	080129b0 	.word	0x080129b0
 800be64:	0801f478 	.word	0x0801f478
 800be68:	08021968 	.word	0x08021968
 800be6c:	0801b3a0 	.word	0x0801b3a0
 800be70:	080192a0 	.word	0x080192a0
 800be74:	08012a20 	.word	0x08012a20
 800be78:	080215f8 	.word	0x080215f8
 800be7c:	08018a20 	.word	0x08018a20
 800be80:	0801f678 	.word	0x0801f678
 800be84:	0801c258 	.word	0x0801c258
 800be88:	0801b2a0 	.word	0x0801b2a0
 800be8c:	080128b0 	.word	0x080128b0
 800be90:	0801c1b0 	.word	0x0801c1b0
 800be94:	08019220 	.word	0x08019220
 800be98:	0801c1d8 	.word	0x0801c1d8
 800be9c:	0801fe78 	.word	0x0801fe78
 800bea0:	0801c6b8 	.word	0x0801c6b8
 800bea4:	080201f8 	.word	0x080201f8
 800bea8:	08021b68 	.word	0x08021b68
 800beac:	0801c2b8 	.word	0x0801c2b8
 800beb0:	080211f8 	.word	0x080211f8

0800beb4 <arm_rfft_fast_f32>:
 800beb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb8:	8a05      	ldrh	r5, [r0, #16]
 800beba:	4606      	mov	r6, r0
 800bebc:	4617      	mov	r7, r2
 800bebe:	460c      	mov	r4, r1
 800bec0:	086d      	lsrs	r5, r5, #1
 800bec2:	8005      	strh	r5, [r0, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d15e      	bne.n	800bf86 <arm_rfft_fast_f32+0xd2>
 800bec8:	461a      	mov	r2, r3
 800beca:	2301      	movs	r3, #1
 800becc:	f000 fbde 	bl	800c68c <arm_cfft_f32>
 800bed0:	edd4 7a00 	vldr	s15, [r4]
 800bed4:	ed94 7a01 	vldr	s14, [r4, #4]
 800bed8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bedc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bee0:	8832      	ldrh	r2, [r6, #0]
 800bee2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bee6:	6975      	ldr	r5, [r6, #20]
 800bee8:	3a01      	subs	r2, #1
 800beea:	eeb0 3a46 	vmov.f32	s6, s12
 800beee:	3510      	adds	r5, #16
 800bef0:	f107 0610 	add.w	r6, r7, #16
 800bef4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bef8:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800befc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf00:	f104 0310 	add.w	r3, r4, #16
 800bf04:	3808      	subs	r0, #8
 800bf06:	ee26 7a86 	vmul.f32	s14, s13, s12
 800bf0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bf0e:	ed87 7a00 	vstr	s14, [r7]
 800bf12:	edc7 7a01 	vstr	s15, [r7, #4]
 800bf16:	ed90 7a02 	vldr	s14, [r0, #8]
 800bf1a:	3a01      	subs	r2, #1
 800bf1c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800bf20:	f1a0 0008 	sub.w	r0, r0, #8
 800bf24:	ed15 6a02 	vldr	s12, [r5, #-8]
 800bf28:	f103 0308 	add.w	r3, r3, #8
 800bf2c:	ee77 7a66 	vsub.f32	s15, s14, s13
 800bf30:	edd0 3a05 	vldr	s7, [r0, #20]
 800bf34:	ed13 5a03 	vldr	s10, [r3, #-12]
 800bf38:	ee77 4a26 	vadd.f32	s9, s14, s13
 800bf3c:	ed55 5a01 	vldr	s11, [r5, #-4]
 800bf40:	f106 0608 	add.w	r6, r6, #8
 800bf44:	ee66 6a27 	vmul.f32	s13, s12, s15
 800bf48:	f105 0508 	add.w	r5, r5, #8
 800bf4c:	ee33 4a85 	vadd.f32	s8, s7, s10
 800bf50:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800bf54:	ee35 5a63 	vsub.f32	s10, s10, s7
 800bf58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bf5c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800bf60:	ee77 7a05 	vadd.f32	s15, s14, s10
 800bf64:	ee65 5a84 	vmul.f32	s11, s11, s8
 800bf68:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bf6c:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800bf70:	ee67 7a83 	vmul.f32	s15, s15, s6
 800bf74:	ee27 7a03 	vmul.f32	s14, s14, s6
 800bf78:	ed46 7a03 	vstr	s15, [r6, #-12]
 800bf7c:	ed06 7a04 	vstr	s14, [r6, #-16]
 800bf80:	d1c9      	bne.n	800bf16 <arm_rfft_fast_f32+0x62>
 800bf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf86:	edd1 7a00 	vldr	s15, [r1]
 800bf8a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800bf8e:	edd1 6a01 	vldr	s13, [r1, #4]
 800bf92:	1e68      	subs	r0, r5, #1
 800bf94:	6975      	ldr	r5, [r6, #20]
 800bf96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf9a:	00c1      	lsls	r1, r0, #3
 800bf9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bfa0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bfa4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bfa8:	ed82 7a00 	vstr	s14, [r2]
 800bfac:	edc2 7a01 	vstr	s15, [r2, #4]
 800bfb0:	b3e0      	cbz	r0, 800c02c <arm_rfft_fast_f32+0x178>
 800bfb2:	3908      	subs	r1, #8
 800bfb4:	f104 0210 	add.w	r2, r4, #16
 800bfb8:	3510      	adds	r5, #16
 800bfba:	440c      	add	r4, r1
 800bfbc:	f107 0110 	add.w	r1, r7, #16
 800bfc0:	ed94 7a02 	vldr	s14, [r4, #8]
 800bfc4:	3801      	subs	r0, #1
 800bfc6:	ed52 6a02 	vldr	s13, [r2, #-8]
 800bfca:	f1a4 0408 	sub.w	r4, r4, #8
 800bfce:	ed15 6a02 	vldr	s12, [r5, #-8]
 800bfd2:	f102 0208 	add.w	r2, r2, #8
 800bfd6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800bfda:	ed94 4a05 	vldr	s8, [r4, #20]
 800bfde:	ed12 5a03 	vldr	s10, [r2, #-12]
 800bfe2:	ee77 6a26 	vadd.f32	s13, s14, s13
 800bfe6:	ed55 5a01 	vldr	s11, [r5, #-4]
 800bfea:	f101 0108 	add.w	r1, r1, #8
 800bfee:	ee26 3a27 	vmul.f32	s6, s12, s15
 800bff2:	f105 0508 	add.w	r5, r5, #8
 800bff6:	ee74 4a05 	vadd.f32	s9, s8, s10
 800bffa:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800bffe:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c002:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c006:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c00a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800c00e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c012:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c016:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800c01a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c01e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c022:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c026:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c02a:	d1c9      	bne.n	800bfc0 <arm_rfft_fast_f32+0x10c>
 800c02c:	461a      	mov	r2, r3
 800c02e:	4639      	mov	r1, r7
 800c030:	4630      	mov	r0, r6
 800c032:	2301      	movs	r3, #1
 800c034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c038:	f000 bb28 	b.w	800c68c <arm_cfft_f32>

0800c03c <arm_cfft_radix8by2_f32>:
 800c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c040:	4607      	mov	r7, r0
 800c042:	4608      	mov	r0, r1
 800c044:	ed2d 8b06 	vpush	{d8-d10}
 800c048:	f8b7 e000 	ldrh.w	lr, [r7]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800c052:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800c056:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800c05a:	f000 80b0 	beq.w	800c1be <arm_cfft_radix8by2_f32+0x182>
 800c05e:	008b      	lsls	r3, r1, #2
 800c060:	3210      	adds	r2, #16
 800c062:	f100 0610 	add.w	r6, r0, #16
 800c066:	f108 0510 	add.w	r5, r8, #16
 800c06a:	3310      	adds	r3, #16
 800c06c:	18c4      	adds	r4, r0, r3
 800c06e:	4443      	add	r3, r8
 800c070:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c074:	f1be 0e01 	subs.w	lr, lr, #1
 800c078:	ed56 4a04 	vldr	s9, [r6, #-16]
 800c07c:	f104 0410 	add.w	r4, r4, #16
 800c080:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c084:	f106 0610 	add.w	r6, r6, #16
 800c088:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800c08c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800c090:	ed55 2a01 	vldr	s5, [r5, #-4]
 800c094:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c098:	ed53 0a04 	vldr	s1, [r3, #-16]
 800c09c:	f102 0210 	add.w	r2, r2, #16
 800c0a0:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c0a4:	f105 0510 	add.w	r5, r5, #16
 800c0a8:	ed13 3a02 	vldr	s6, [r3, #-8]
 800c0ac:	f103 0310 	add.w	r3, r3, #16
 800c0b0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800c0b4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800c0b8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800c0bc:	ee33 8a83 	vadd.f32	s16, s7, s6
 800c0c0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800c0c4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800c0c8:	ee34 0a06 	vadd.f32	s0, s8, s12
 800c0cc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800c0d0:	ee76 aa87 	vadd.f32	s21, s13, s14
 800c0d4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800c0d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c0dc:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800c0e0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800c0e4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800c0e8:	ee71 8a05 	vadd.f32	s17, s2, s10
 800c0ec:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800c0f0:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800c0f4:	ee72 9a22 	vadd.f32	s19, s4, s5
 800c0f8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c0fc:	ee35 5a41 	vsub.f32	s10, s10, s2
 800c100:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800c104:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800c108:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c10c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800c110:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800c114:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800c118:	ee72 7a62 	vsub.f32	s15, s4, s5
 800c11c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800c120:	ee73 2a63 	vsub.f32	s5, s6, s7
 800c124:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800c128:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800c12c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800c130:	ee24 3a84 	vmul.f32	s6, s9, s8
 800c134:	ee27 2a26 	vmul.f32	s4, s14, s13
 800c138:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800c13c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800c140:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c144:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c148:	ee65 6a26 	vmul.f32	s13, s10, s13
 800c14c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800c150:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c154:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c158:	ee33 4a02 	vadd.f32	s8, s6, s4
 800c15c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800c160:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800c164:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800c168:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800c16c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800c170:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800c174:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c178:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800c17c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800c180:	ee61 5a87 	vmul.f32	s11, s3, s14
 800c184:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c188:	ee22 5a87 	vmul.f32	s10, s5, s14
 800c18c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c190:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c194:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800c198:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c19c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c1a0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c1a4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c1a8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800c1ac:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800c1b0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800c1b4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800c1b8:	f47f af5a 	bne.w	800c070 <arm_cfft_radix8by2_f32+0x34>
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	b28c      	uxth	r4, r1
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	f000 fb78 	bl	800c8b8 <arm_radix8_butterfly_f32>
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	ecbd 8b06 	vpop	{d8-d10}
 800c1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	f000 bb6e 	b.w	800c8b8 <arm_radix8_butterfly_f32>

0800c1dc <arm_cfft_radix8by4_f32>:
 800c1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e0:	ed2d 8b06 	vpush	{d8-d10}
 800c1e4:	8804      	ldrh	r4, [r0, #0]
 800c1e6:	b08f      	sub	sp, #60	; 0x3c
 800c1e8:	ed91 6a00 	vldr	s12, [r1]
 800c1ec:	460a      	mov	r2, r1
 800c1ee:	0864      	lsrs	r4, r4, #1
 800c1f0:	ed91 7a01 	vldr	s14, [r1, #4]
 800c1f4:	9101      	str	r1, [sp, #4]
 800c1f6:	00a3      	lsls	r3, r4, #2
 800c1f8:	6841      	ldr	r1, [r0, #4]
 800c1fa:	0864      	lsrs	r4, r4, #1
 800c1fc:	900c      	str	r0, [sp, #48]	; 0x30
 800c1fe:	9205      	str	r2, [sp, #20]
 800c200:	f101 0610 	add.w	r6, r1, #16
 800c204:	4625      	mov	r5, r4
 800c206:	940b      	str	r4, [sp, #44]	; 0x2c
 800c208:	f101 0408 	add.w	r4, r1, #8
 800c20c:	9602      	str	r6, [sp, #8]
 800c20e:	9407      	str	r4, [sp, #28]
 800c210:	18d4      	adds	r4, r2, r3
 800c212:	1eaa      	subs	r2, r5, #2
 800c214:	f101 0518 	add.w	r5, r1, #24
 800c218:	18e0      	adds	r0, r4, r3
 800c21a:	edd4 4a00 	vldr	s9, [r4]
 800c21e:	ed94 4a01 	vldr	s8, [r4, #4]
 800c222:	46a6      	mov	lr, r4
 800c224:	edd0 6a00 	vldr	s13, [r0]
 800c228:	18c7      	adds	r7, r0, r3
 800c22a:	edd0 7a01 	vldr	s15, [r0, #4]
 800c22e:	46a0      	mov	r8, r4
 800c230:	ee76 5a26 	vadd.f32	s11, s12, s13
 800c234:	ed97 5a00 	vldr	s10, [r7]
 800c238:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c23c:	4604      	mov	r4, r0
 800c23e:	9506      	str	r5, [sp, #24]
 800c240:	4605      	mov	r5, r0
 800c242:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800c246:	900a      	str	r0, [sp, #40]	; 0x28
 800c248:	9801      	ldr	r0, [sp, #4]
 800c24a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c24e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c252:	ed97 3a01 	vldr	s6, [r7, #4]
 800c256:	ee72 2a85 	vadd.f32	s5, s5, s10
 800c25a:	46bc      	mov	ip, r7
 800c25c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800c260:	9704      	str	r7, [sp, #16]
 800c262:	ee36 7a44 	vsub.f32	s14, s12, s8
 800c266:	f8cd e00c 	str.w	lr, [sp, #12]
 800c26a:	ee12 9a90 	vmov	r9, s5
 800c26e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800c272:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c276:	1f3e      	subs	r6, r7, #4
 800c278:	f840 9b08 	str.w	r9, [r0], #8
 800c27c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800c280:	edde 2a01 	vldr	s5, [lr, #4]
 800c284:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c288:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c28c:	eddc 4a01 	vldr	s9, [ip, #4]
 800c290:	ee36 6a22 	vadd.f32	s12, s12, s5
 800c294:	9001      	str	r0, [sp, #4]
 800c296:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c29a:	9805      	ldr	r0, [sp, #20]
 800c29c:	ee13 9a90 	vmov	r9, s7
 800c2a0:	ee37 7a43 	vsub.f32	s14, s14, s6
 800c2a4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c2a8:	f1ae 0704 	sub.w	r7, lr, #4
 800c2ac:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c2b0:	ee76 6a83 	vadd.f32	s13, s13, s6
 800c2b4:	ed80 6a01 	vstr	s12, [r0, #4]
 800c2b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c2bc:	f848 9b08 	str.w	r9, [r8], #8
 800c2c0:	edce 4a01 	vstr	s9, [lr, #4]
 800c2c4:	ee15 ea90 	vmov	lr, s11
 800c2c8:	f844 eb08 	str.w	lr, [r4], #8
 800c2cc:	ee16 ea90 	vmov	lr, s13
 800c2d0:	9408      	str	r4, [sp, #32]
 800c2d2:	462c      	mov	r4, r5
 800c2d4:	ed85 7a01 	vstr	s14, [r5, #4]
 800c2d8:	9d04      	ldr	r5, [sp, #16]
 800c2da:	f84c eb08 	str.w	lr, [ip], #8
 800c2de:	edc5 7a01 	vstr	s15, [r5, #4]
 800c2e2:	0855      	lsrs	r5, r2, #1
 800c2e4:	9509      	str	r5, [sp, #36]	; 0x24
 800c2e6:	f000 8130 	beq.w	800c54a <arm_cfft_radix8by4_f32+0x36e>
 800c2ea:	9805      	ldr	r0, [sp, #20]
 800c2ec:	3b08      	subs	r3, #8
 800c2ee:	46ab      	mov	fp, r5
 800c2f0:	f1a4 020c 	sub.w	r2, r4, #12
 800c2f4:	f100 0510 	add.w	r5, r0, #16
 800c2f8:	f101 0920 	add.w	r9, r1, #32
 800c2fc:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800c300:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c304:	4433      	add	r3, r6
 800c306:	3410      	adds	r4, #16
 800c308:	4660      	mov	r0, ip
 800c30a:	4641      	mov	r1, r8
 800c30c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800c310:	ed54 6a02 	vldr	s13, [r4, #-8]
 800c314:	f1bb 0b01 	subs.w	fp, fp, #1
 800c318:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c31c:	f10a 0a08 	add.w	sl, sl, #8
 800c320:	edd1 7a00 	vldr	s15, [r1]
 800c324:	f105 0508 	add.w	r5, r5, #8
 800c328:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800c32c:	edd0 2a00 	vldr	s5, [r0]
 800c330:	ed14 7a01 	vldr	s14, [r4, #-4]
 800c334:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800c338:	ed55 6a03 	vldr	s13, [r5, #-12]
 800c33c:	f1a2 0208 	sub.w	r2, r2, #8
 800c340:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800c344:	ed90 2a01 	vldr	s4, [r0, #4]
 800c348:	ee36 5a87 	vadd.f32	s10, s13, s14
 800c34c:	ed91 6a01 	vldr	s12, [r1, #4]
 800c350:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c354:	f109 0910 	add.w	r9, r9, #16
 800c358:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800c35c:	f104 0408 	add.w	r4, r4, #8
 800c360:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800c364:	f10e 0e18 	add.w	lr, lr, #24
 800c368:	ee37 3a67 	vsub.f32	s6, s14, s15
 800c36c:	f1a3 0308 	sub.w	r3, r3, #8
 800c370:	ed45 6a04 	vstr	s13, [r5, #-16]
 800c374:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c378:	edd1 6a01 	vldr	s13, [r1, #4]
 800c37c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800c380:	edd0 4a01 	vldr	s9, [r0, #4]
 800c384:	ee33 3a22 	vadd.f32	s6, s6, s5
 800c388:	ee75 6a26 	vadd.f32	s13, s10, s13
 800c38c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c390:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c394:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c398:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800c39c:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c3a0:	ed45 6a03 	vstr	s13, [r5, #-12]
 800c3a4:	ee36 2a02 	vadd.f32	s4, s12, s4
 800c3a8:	edd6 7a00 	vldr	s15, [r6]
 800c3ac:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800c3b0:	ed97 1a00 	vldr	s2, [r7]
 800c3b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 800c3b8:	ed92 8a04 	vldr	s16, [r2, #16]
 800c3bc:	ee71 8a27 	vadd.f32	s17, s2, s15
 800c3c0:	ed93 aa04 	vldr	s20, [r3, #16]
 800c3c4:	ed16 7a01 	vldr	s14, [r6, #-4]
 800c3c8:	ee71 7a67 	vsub.f32	s15, s2, s15
 800c3cc:	ed57 0a01 	vldr	s1, [r7, #-4]
 800c3d0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800c3d4:	ee38 6a88 	vadd.f32	s12, s17, s16
 800c3d8:	edd3 9a03 	vldr	s19, [r3, #12]
 800c3dc:	ee30 0a87 	vadd.f32	s0, s1, s14
 800c3e0:	ed92 9a03 	vldr	s18, [r2, #12]
 800c3e4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800c3e8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800c3ec:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800c3f0:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800c3f4:	ee16 ca10 	vmov	ip, s12
 800c3f8:	ee30 6a49 	vsub.f32	s12, s0, s18
 800c3fc:	ee77 4a01 	vadd.f32	s9, s14, s2
 800c400:	f847 c908 	str.w	ip, [r7], #-8
 800c404:	ee34 4a29 	vadd.f32	s8, s8, s19
 800c408:	edd2 8a03 	vldr	s17, [r2, #12]
 800c40c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800c410:	ed93 8a03 	vldr	s16, [r3, #12]
 800c414:	ee71 0a47 	vsub.f32	s1, s2, s14
 800c418:	ee30 0a28 	vadd.f32	s0, s0, s17
 800c41c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800c420:	ee36 6a69 	vsub.f32	s12, s12, s19
 800c424:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c428:	ee75 5aca 	vsub.f32	s11, s11, s20
 800c42c:	ed87 0a01 	vstr	s0, [r7, #4]
 800c430:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800c434:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800c438:	ee21 8a80 	vmul.f32	s16, s3, s0
 800c43c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800c440:	ee64 7a26 	vmul.f32	s15, s8, s13
 800c444:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c448:	ee24 4a00 	vmul.f32	s8, s8, s0
 800c44c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800c450:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c454:	ee24 0a80 	vmul.f32	s0, s9, s0
 800c458:	ee38 7a07 	vadd.f32	s14, s16, s14
 800c45c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800c460:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c464:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c468:	ee17 ca10 	vmov	ip, s14
 800c46c:	f841 cb08 	str.w	ip, [r1], #8
 800c470:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c474:	ed82 0a04 	vstr	s0, [r2, #16]
 800c478:	edc2 6a03 	vstr	s13, [r2, #12]
 800c47c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800c480:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800c484:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800c488:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800c48c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800c490:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c494:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800c498:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c49c:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c4a0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c4a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a8:	ee34 6a24 	vadd.f32	s12, s8, s9
 800c4ac:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800c4b0:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c4b4:	ee17 ca90 	vmov	ip, s15
 800c4b8:	ed04 6a04 	vstr	s12, [r4, #-16]
 800c4bc:	ed04 5a03 	vstr	s10, [r4, #-12]
 800c4c0:	f846 c908 	str.w	ip, [r6], #-8
 800c4c4:	edc6 6a01 	vstr	s13, [r6, #4]
 800c4c8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800c4cc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800c4d0:	ee62 5a27 	vmul.f32	s11, s4, s15
 800c4d4:	ee22 6a87 	vmul.f32	s12, s5, s14
 800c4d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c4dc:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800c4e0:	ee61 6a07 	vmul.f32	s13, s2, s14
 800c4e4:	ee20 7a87 	vmul.f32	s14, s1, s14
 800c4e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c4ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 800c4f0:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c4f4:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800c4f8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800c4fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c500:	ee16 ca10 	vmov	ip, s12
 800c504:	f840 cb08 	str.w	ip, [r0], #8
 800c508:	ed40 2a01 	vstr	s5, [r0, #-4]
 800c50c:	edc3 0a04 	vstr	s1, [r3, #16]
 800c510:	edc3 7a03 	vstr	s15, [r3, #12]
 800c514:	f47f aefc 	bne.w	800c310 <arm_cfft_radix8by4_f32+0x134>
 800c518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c51a:	9802      	ldr	r0, [sp, #8]
 800c51c:	00cb      	lsls	r3, r1, #3
 800c51e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800c522:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c526:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c52a:	4498      	add	r8, r3
 800c52c:	449c      	add	ip, r3
 800c52e:	9102      	str	r1, [sp, #8]
 800c530:	9901      	ldr	r1, [sp, #4]
 800c532:	4419      	add	r1, r3
 800c534:	9101      	str	r1, [sp, #4]
 800c536:	9907      	ldr	r1, [sp, #28]
 800c538:	4419      	add	r1, r3
 800c53a:	9107      	str	r1, [sp, #28]
 800c53c:	9908      	ldr	r1, [sp, #32]
 800c53e:	4419      	add	r1, r3
 800c540:	9b06      	ldr	r3, [sp, #24]
 800c542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c546:	9108      	str	r1, [sp, #32]
 800c548:	9306      	str	r3, [sp, #24]
 800c54a:	9a01      	ldr	r2, [sp, #4]
 800c54c:	2304      	movs	r3, #4
 800c54e:	9e08      	ldr	r6, [sp, #32]
 800c550:	edd2 7a00 	vldr	s15, [r2]
 800c554:	ed96 7a00 	vldr	s14, [r6]
 800c558:	edd8 2a00 	vldr	s5, [r8]
 800c55c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800c560:	ed9c 3a00 	vldr	s6, [ip]
 800c564:	ed92 6a01 	vldr	s12, [r2, #4]
 800c568:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c56c:	edd6 6a01 	vldr	s13, [r6, #4]
 800c570:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800c574:	ed9c 2a01 	vldr	s4, [ip, #4]
 800c578:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c57c:	edd8 7a01 	vldr	s15, [r8, #4]
 800c580:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c584:	9d02      	ldr	r5, [sp, #8]
 800c586:	ee34 6a83 	vadd.f32	s12, s9, s6
 800c58a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800c58e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800c592:	9805      	ldr	r0, [sp, #20]
 800c594:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800c598:	4621      	mov	r1, r4
 800c59a:	ed82 6a00 	vstr	s12, [r2]
 800c59e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800c5a2:	edd8 3a01 	vldr	s7, [r8, #4]
 800c5a6:	ee75 5a67 	vsub.f32	s11, s10, s15
 800c5aa:	eddc 1a01 	vldr	s3, [ip, #4]
 800c5ae:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c5b2:	ee75 3a23 	vadd.f32	s7, s10, s7
 800c5b6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800c5ba:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800c5be:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800c5c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5c6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c5ca:	ed82 5a01 	vstr	s10, [r2, #4]
 800c5ce:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c5d2:	9a07      	ldr	r2, [sp, #28]
 800c5d4:	ee77 7a02 	vadd.f32	s15, s14, s4
 800c5d8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800c5dc:	edd2 2a00 	vldr	s5, [r2]
 800c5e0:	ed92 5a01 	vldr	s10, [r2, #4]
 800c5e4:	ee64 3a22 	vmul.f32	s7, s8, s5
 800c5e8:	ee24 4a05 	vmul.f32	s8, s8, s10
 800c5ec:	ee24 5a85 	vmul.f32	s10, s9, s10
 800c5f0:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800c5f4:	ee33 5a85 	vadd.f32	s10, s7, s10
 800c5f8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800c5fc:	ed88 5a00 	vstr	s10, [r8]
 800c600:	edc8 4a01 	vstr	s9, [r8, #4]
 800c604:	edd5 4a01 	vldr	s9, [r5, #4]
 800c608:	edd5 6a00 	vldr	s13, [r5]
 800c60c:	9d06      	ldr	r5, [sp, #24]
 800c60e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800c612:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c616:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800c61a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c61e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c622:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c626:	ed86 6a01 	vstr	s12, [r6, #4]
 800c62a:	edc6 5a00 	vstr	s11, [r6]
 800c62e:	edd5 5a01 	vldr	s11, [r5, #4]
 800c632:	edd5 6a00 	vldr	s13, [r5]
 800c636:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c638:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c63c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c640:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c644:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c648:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c64c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c650:	edcc 7a01 	vstr	s15, [ip, #4]
 800c654:	ed8c 7a00 	vstr	s14, [ip]
 800c658:	6872      	ldr	r2, [r6, #4]
 800c65a:	f000 f92d 	bl	800c8b8 <arm_radix8_butterfly_f32>
 800c65e:	9803      	ldr	r0, [sp, #12]
 800c660:	4621      	mov	r1, r4
 800c662:	6872      	ldr	r2, [r6, #4]
 800c664:	2304      	movs	r3, #4
 800c666:	f000 f927 	bl	800c8b8 <arm_radix8_butterfly_f32>
 800c66a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c66c:	4621      	mov	r1, r4
 800c66e:	6872      	ldr	r2, [r6, #4]
 800c670:	2304      	movs	r3, #4
 800c672:	f000 f921 	bl	800c8b8 <arm_radix8_butterfly_f32>
 800c676:	4621      	mov	r1, r4
 800c678:	6872      	ldr	r2, [r6, #4]
 800c67a:	2304      	movs	r3, #4
 800c67c:	9804      	ldr	r0, [sp, #16]
 800c67e:	b00f      	add	sp, #60	; 0x3c
 800c680:	ecbd 8b06 	vpop	{d8-d10}
 800c684:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	f000 b916 	b.w	800c8b8 <arm_radix8_butterfly_f32>

0800c68c <arm_cfft_f32>:
 800c68c:	2a01      	cmp	r2, #1
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	4606      	mov	r6, r0
 800c694:	4617      	mov	r7, r2
 800c696:	460c      	mov	r4, r1
 800c698:	4698      	mov	r8, r3
 800c69a:	8805      	ldrh	r5, [r0, #0]
 800c69c:	d053      	beq.n	800c746 <arm_cfft_f32+0xba>
 800c69e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c6a2:	d04b      	beq.n	800c73c <arm_cfft_f32+0xb0>
 800c6a4:	d916      	bls.n	800c6d4 <arm_cfft_f32+0x48>
 800c6a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c6aa:	d01a      	beq.n	800c6e2 <arm_cfft_f32+0x56>
 800c6ac:	d95a      	bls.n	800c764 <arm_cfft_f32+0xd8>
 800c6ae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c6b2:	d043      	beq.n	800c73c <arm_cfft_f32+0xb0>
 800c6b4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c6b8:	d105      	bne.n	800c6c6 <arm_cfft_f32+0x3a>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6872      	ldr	r2, [r6, #4]
 800c6be:	4629      	mov	r1, r5
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 f8f9 	bl	800c8b8 <arm_radix8_butterfly_f32>
 800c6c6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ca:	d111      	bne.n	800c6f0 <arm_cfft_f32+0x64>
 800c6cc:	2f01      	cmp	r7, #1
 800c6ce:	d016      	beq.n	800c6fe <arm_cfft_f32+0x72>
 800c6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d4:	2d20      	cmp	r5, #32
 800c6d6:	d031      	beq.n	800c73c <arm_cfft_f32+0xb0>
 800c6d8:	d948      	bls.n	800c76c <arm_cfft_f32+0xe0>
 800c6da:	2d40      	cmp	r5, #64	; 0x40
 800c6dc:	d0ed      	beq.n	800c6ba <arm_cfft_f32+0x2e>
 800c6de:	2d80      	cmp	r5, #128	; 0x80
 800c6e0:	d1f1      	bne.n	800c6c6 <arm_cfft_f32+0x3a>
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff fca9 	bl	800c03c <arm_cfft_radix8by2_f32>
 800c6ea:	f1b8 0f00 	cmp.w	r8, #0
 800c6ee:	d0ed      	beq.n	800c6cc <arm_cfft_f32+0x40>
 800c6f0:	68b2      	ldr	r2, [r6, #8]
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	89b1      	ldrh	r1, [r6, #12]
 800c6f6:	f7f3 fda3 	bl	8000240 <arm_bitreversal_32>
 800c6fa:	2f01      	cmp	r7, #1
 800c6fc:	d1e8      	bne.n	800c6d0 <arm_cfft_f32+0x44>
 800c6fe:	ee07 5a90 	vmov	s15, r5
 800c702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c70e:	2d00      	cmp	r5, #0
 800c710:	d0de      	beq.n	800c6d0 <arm_cfft_f32+0x44>
 800c712:	f104 0108 	add.w	r1, r4, #8
 800c716:	2300      	movs	r3, #0
 800c718:	ed11 7a02 	vldr	s14, [r1, #-8]
 800c71c:	3301      	adds	r3, #1
 800c71e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c722:	3108      	adds	r1, #8
 800c724:	429d      	cmp	r5, r3
 800c726:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c72a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c72e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c732:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c736:	d1ef      	bne.n	800c718 <arm_cfft_f32+0x8c>
 800c738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73c:	4621      	mov	r1, r4
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff fd4c 	bl	800c1dc <arm_cfft_radix8by4_f32>
 800c744:	e7bf      	b.n	800c6c6 <arm_cfft_f32+0x3a>
 800c746:	b1a5      	cbz	r5, 800c772 <arm_cfft_f32+0xe6>
 800c748:	f101 030c 	add.w	r3, r1, #12
 800c74c:	2200      	movs	r2, #0
 800c74e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c752:	3201      	adds	r2, #1
 800c754:	3308      	adds	r3, #8
 800c756:	eef1 7a67 	vneg.f32	s15, s15
 800c75a:	4295      	cmp	r5, r2
 800c75c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c760:	d1f5      	bne.n	800c74e <arm_cfft_f32+0xc2>
 800c762:	e79c      	b.n	800c69e <arm_cfft_f32+0x12>
 800c764:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c768:	d0a7      	beq.n	800c6ba <arm_cfft_f32+0x2e>
 800c76a:	e7ac      	b.n	800c6c6 <arm_cfft_f32+0x3a>
 800c76c:	2d10      	cmp	r5, #16
 800c76e:	d0b8      	beq.n	800c6e2 <arm_cfft_f32+0x56>
 800c770:	e7a9      	b.n	800c6c6 <arm_cfft_f32+0x3a>
 800c772:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c776:	d896      	bhi.n	800c6a6 <arm_cfft_f32+0x1a>
 800c778:	e7ac      	b.n	800c6d4 <arm_cfft_f32+0x48>
 800c77a:	bf00      	nop

0800c77c <arm_cmplx_mag_squared_f32>:
 800c77c:	b470      	push	{r4, r5, r6}
 800c77e:	0896      	lsrs	r6, r2, #2
 800c780:	d03e      	beq.n	800c800 <arm_cmplx_mag_squared_f32+0x84>
 800c782:	f100 0320 	add.w	r3, r0, #32
 800c786:	f101 0410 	add.w	r4, r1, #16
 800c78a:	4635      	mov	r5, r6
 800c78c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800c790:	3d01      	subs	r5, #1
 800c792:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800c796:	f104 0410 	add.w	r4, r4, #16
 800c79a:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 800c79e:	ee27 5a07 	vmul.f32	s10, s14, s14
 800c7a2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800c7a6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c7aa:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c7ae:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800c7b2:	ed13 4a03 	vldr	s8, [r3, #-12]
 800c7b6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c7ba:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c7be:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c7c2:	ed53 4a01 	vldr	s9, [r3, #-4]
 800c7c6:	ee24 4a04 	vmul.f32	s8, s8, s8
 800c7ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7ce:	f103 0320 	add.w	r3, r3, #32
 800c7d2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800c7d6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c7da:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c7de:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c7e2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c7e6:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 800c7ea:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800c7ee:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 800c7f2:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c7f6:	d1c9      	bne.n	800c78c <arm_cmplx_mag_squared_f32+0x10>
 800c7f8:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800c7fc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c800:	f012 0203 	ands.w	r2, r2, #3
 800c804:	d010      	beq.n	800c828 <arm_cmplx_mag_squared_f32+0xac>
 800c806:	3008      	adds	r0, #8
 800c808:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c80c:	3a01      	subs	r2, #1
 800c80e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c812:	f100 0008 	add.w	r0, r0, #8
 800c816:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c81a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c81e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c822:	ece1 7a01 	vstmia	r1!, {s15}
 800c826:	d1ef      	bne.n	800c808 <arm_cmplx_mag_squared_f32+0x8c>
 800c828:	bc70      	pop	{r4, r5, r6}
 800c82a:	4770      	bx	lr

0800c82c <arm_mult_f32>:
 800c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c832:	d033      	beq.n	800c89c <arm_mult_f32+0x70>
 800c834:	f100 0610 	add.w	r6, r0, #16
 800c838:	f101 0510 	add.w	r5, r1, #16
 800c83c:	f102 0410 	add.w	r4, r2, #16
 800c840:	4677      	mov	r7, lr
 800c842:	ed16 7a04 	vldr	s14, [r6, #-16]
 800c846:	3f01      	subs	r7, #1
 800c848:	ed15 6a04 	vldr	s12, [r5, #-16]
 800c84c:	f106 0610 	add.w	r6, r6, #16
 800c850:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800c854:	f105 0510 	add.w	r5, r5, #16
 800c858:	ee27 6a06 	vmul.f32	s12, s14, s12
 800c85c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800c860:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800c864:	f104 0410 	add.w	r4, r4, #16
 800c868:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800c86c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c870:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800c874:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800c878:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c87c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800c880:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800c884:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c888:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800c88c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c890:	d1d7      	bne.n	800c842 <arm_mult_f32+0x16>
 800c892:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c896:	4420      	add	r0, r4
 800c898:	4421      	add	r1, r4
 800c89a:	4422      	add	r2, r4
 800c89c:	f013 0303 	ands.w	r3, r3, #3
 800c8a0:	d009      	beq.n	800c8b6 <arm_mult_f32+0x8a>
 800c8a2:	ecf0 7a01 	vldmia	r0!, {s15}
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	ecb1 7a01 	vldmia	r1!, {s14}
 800c8ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8b0:	ece2 7a01 	vstmia	r2!, {s15}
 800c8b4:	d1f5      	bne.n	800c8a2 <arm_mult_f32+0x76>
 800c8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8b8 <arm_radix8_butterfly_f32>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4603      	mov	r3, r0
 800c8c0:	468a      	mov	sl, r1
 800c8c2:	468b      	mov	fp, r1
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	ed2d 8b10 	vpush	{d8-d15}
 800c8ca:	469c      	mov	ip, r3
 800c8cc:	b09d      	sub	sp, #116	; 0x74
 800c8ce:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800cbdc <arm_radix8_butterfly_f32+0x324>
 800c8d2:	9019      	str	r0, [sp, #100]	; 0x64
 800c8d4:	921a      	str	r2, [sp, #104]	; 0x68
 800c8d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c8d8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c8dc:	f04f 0800 	mov.w	r8, #0
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	9311      	str	r3, [sp, #68]	; 0x44
 800c8e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	0053      	lsls	r3, r2, #1
 800c8f2:	18d5      	adds	r5, r2, r3
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	0113      	lsls	r3, r2, #4
 800c8f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8fa:	194c      	adds	r4, r1, r5
 800c8fc:	eb02 0609 	add.w	r6, r2, r9
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c906:	4613      	mov	r3, r2
 800c908:	190a      	adds	r2, r1, r4
 800c90a:	eb06 0709 	add.w	r7, r6, r9
 800c90e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c912:	1888      	adds	r0, r1, r2
 800c914:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c918:	4401      	add	r1, r0
 800c91a:	3204      	adds	r2, #4
 800c91c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c920:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c924:	9b00      	ldr	r3, [sp, #0]
 800c926:	3104      	adds	r1, #4
 800c928:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800c92c:	44d8      	add	r8, fp
 800c92e:	ed90 7a00 	vldr	s14, [r0]
 800c932:	ed94 5a00 	vldr	s10, [r4]
 800c936:	45c2      	cmp	sl, r8
 800c938:	edd7 3a00 	vldr	s7, [r7]
 800c93c:	ed96 6a00 	vldr	s12, [r6]
 800c940:	ee37 1a85 	vadd.f32	s2, s15, s10
 800c944:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c948:	ee73 4a87 	vadd.f32	s9, s7, s14
 800c94c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800c950:	edd5 7a00 	vldr	s15, [r5]
 800c954:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800c958:	ed11 7a01 	vldr	s14, [r1, #-4]
 800c95c:	ee36 2a26 	vadd.f32	s4, s12, s13
 800c960:	ee37 4a87 	vadd.f32	s8, s15, s14
 800c964:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c968:	ee71 5a24 	vadd.f32	s11, s2, s9
 800c96c:	ee32 6a04 	vadd.f32	s12, s4, s8
 800c970:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c974:	ee31 1a64 	vsub.f32	s2, s2, s9
 800c978:	ee75 4a86 	vadd.f32	s9, s11, s12
 800c97c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c980:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800c984:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800c988:	ee32 2a44 	vsub.f32	s4, s4, s8
 800c98c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c990:	ed94 0a01 	vldr	s0, [r4, #4]
 800c994:	edc4 5a00 	vstr	s11, [r4]
 800c998:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c99c:	edd6 5a01 	vldr	s11, [r6, #4]
 800c9a0:	edd5 2a01 	vldr	s5, [r5, #4]
 800c9a4:	ee75 1a27 	vadd.f32	s3, s10, s15
 800c9a8:	ed92 4a00 	vldr	s8, [r2]
 800c9ac:	ee75 7a67 	vsub.f32	s15, s10, s15
 800c9b0:	edd1 4a00 	vldr	s9, [r1]
 800c9b4:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c9b8:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800c9bc:	ed9c 6a00 	vldr	s12, [ip]
 800c9c0:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800c9c4:	edd0 0a01 	vldr	s1, [r0, #4]
 800c9c8:	ed97 5a01 	vldr	s10, [r7, #4]
 800c9cc:	ee35 4a84 	vadd.f32	s8, s11, s8
 800c9d0:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800c9d4:	ee73 5a26 	vadd.f32	s11, s6, s13
 800c9d8:	ee76 2a00 	vadd.f32	s5, s12, s0
 800c9dc:	ee73 6a66 	vsub.f32	s13, s6, s13
 800c9e0:	ee36 6a40 	vsub.f32	s12, s12, s0
 800c9e4:	ee35 0a20 	vadd.f32	s0, s10, s1
 800c9e8:	ee65 5a89 	vmul.f32	s11, s11, s18
 800c9ec:	ee35 5a60 	vsub.f32	s10, s10, s1
 800c9f0:	ee32 3a80 	vadd.f32	s6, s5, s0
 800c9f4:	ee74 0a24 	vadd.f32	s1, s8, s9
 800c9f8:	ee66 6a89 	vmul.f32	s13, s13, s18
 800c9fc:	ee74 4a64 	vsub.f32	s9, s8, s9
 800ca00:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800ca04:	ee75 2a25 	vadd.f32	s5, s10, s11
 800ca08:	ee33 0a20 	vadd.f32	s0, s6, s1
 800ca0c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ca10:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ca14:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ca18:	ed8c 0a00 	vstr	s0, [ip]
 800ca1c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ca20:	449c      	add	ip, r3
 800ca22:	ee33 6a87 	vadd.f32	s12, s7, s14
 800ca26:	ed84 3a01 	vstr	s6, [r4, #4]
 800ca2a:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800ca2e:	441c      	add	r4, r3
 800ca30:	ee71 3a24 	vadd.f32	s7, s2, s9
 800ca34:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ca38:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800ca3c:	edc7 3a00 	vstr	s7, [r7]
 800ca40:	ee34 1a42 	vsub.f32	s2, s8, s4
 800ca44:	edc0 4a00 	vstr	s9, [r0]
 800ca48:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800ca4c:	ee75 4a46 	vsub.f32	s9, s10, s12
 800ca50:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ca54:	ed87 1a01 	vstr	s2, [r7, #4]
 800ca58:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800ca5c:	441f      	add	r7, r3
 800ca5e:	ee32 4a04 	vadd.f32	s8, s4, s8
 800ca62:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800ca66:	ee36 6a05 	vadd.f32	s12, s12, s10
 800ca6a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ca6e:	ed80 4a01 	vstr	s8, [r0, #4]
 800ca72:	ed86 3a00 	vstr	s6, [r6]
 800ca76:	4418      	add	r0, r3
 800ca78:	ed41 1a01 	vstr	s3, [r1, #-4]
 800ca7c:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ca80:	edc5 7a00 	vstr	s15, [r5]
 800ca84:	edc6 4a01 	vstr	s9, [r6, #4]
 800ca88:	441e      	add	r6, r3
 800ca8a:	ed81 6a00 	vstr	s12, [r1]
 800ca8e:	4419      	add	r1, r3
 800ca90:	edc2 5a00 	vstr	s11, [r2]
 800ca94:	441a      	add	r2, r3
 800ca96:	ed85 7a01 	vstr	s14, [r5, #4]
 800ca9a:	441d      	add	r5, r3
 800ca9c:	f63f af44 	bhi.w	800c928 <arm_radix8_butterfly_f32+0x70>
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800caa4:	2b07      	cmp	r3, #7
 800caa6:	f240 81f4 	bls.w	800ce92 <arm_radix8_butterfly_f32+0x5da>
 800caaa:	9901      	ldr	r1, [sp, #4]
 800caac:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800cab0:	9d02      	ldr	r5, [sp, #8]
 800cab2:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800cab6:	3101      	adds	r1, #1
 800cab8:	eb04 000e 	add.w	r0, r4, lr
 800cabc:	00e4      	lsls	r4, r4, #3
 800cabe:	3508      	adds	r5, #8
 800cac0:	4419      	add	r1, r3
 800cac2:	eb00 0c0e 	add.w	ip, r0, lr
 800cac6:	9413      	str	r4, [sp, #76]	; 0x4c
 800cac8:	00c0      	lsls	r0, r0, #3
 800caca:	185e      	adds	r6, r3, r1
 800cacc:	4617      	mov	r7, r2
 800cace:	9218      	str	r2, [sp, #96]	; 0x60
 800cad0:	f109 0908 	add.w	r9, r9, #8
 800cad4:	199c      	adds	r4, r3, r6
 800cad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cad8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cada:	9012      	str	r0, [sp, #72]	; 0x48
 800cadc:	195d      	adds	r5, r3, r5
 800cade:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cae0:	443a      	add	r2, r7
 800cae2:	950c      	str	r5, [sp, #48]	; 0x30
 800cae4:	4698      	mov	r8, r3
 800cae6:	4420      	add	r0, r4
 800cae8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800caea:	19d7      	adds	r7, r2, r7
 800caec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800caf0:	4405      	add	r5, r0
 800caf2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800caf6:	9710      	str	r7, [sp, #64]	; 0x40
 800caf8:	eb0c 070e 	add.w	r7, ip, lr
 800cafc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800cb00:	3404      	adds	r4, #4
 800cb02:	3004      	adds	r0, #4
 800cb04:	44c8      	add	r8, r9
 800cb06:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800cb0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb0c:	940a      	str	r4, [sp, #40]	; 0x28
 800cb0e:	9009      	str	r0, [sp, #36]	; 0x24
 800cb10:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cb14:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800cb16:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cb1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cb1c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800cb20:	eb07 080e 	add.w	r8, r7, lr
 800cb24:	eb04 0900 	add.w	r9, r4, r0
 800cb28:	00f8      	lsls	r0, r7, #3
 800cb2a:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800cb2e:	3504      	adds	r5, #4
 800cb30:	4607      	mov	r7, r0
 800cb32:	9017      	str	r0, [sp, #92]	; 0x5c
 800cb34:	910b      	str	r1, [sp, #44]	; 0x2c
 800cb36:	4618      	mov	r0, r3
 800cb38:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800cb3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb3e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800cb42:	18e3      	adds	r3, r4, r3
 800cb44:	9508      	str	r5, [sp, #32]
 800cb46:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800cb48:	910e      	str	r1, [sp, #56]	; 0x38
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	eb04 0805 	add.w	r8, r4, r5
 800cb50:	9304      	str	r3, [sp, #16]
 800cb52:	19e5      	adds	r5, r4, r7
 800cb54:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800cb58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800cb5a:	9316      	str	r3, [sp, #88]	; 0x58
 800cb5c:	190b      	adds	r3, r1, r4
 800cb5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cb60:	9505      	str	r5, [sp, #20]
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	f100 0308 	add.w	r3, r0, #8
 800cb68:	9707      	str	r7, [sp, #28]
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb6e:	2301      	movs	r3, #1
 800cb70:	9306      	str	r3, [sp, #24]
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	ed90 fa00 	vldr	s30, [r0]
 800cb78:	edd0 ba01 	vldr	s23, [r0, #4]
 800cb7c:	9803      	ldr	r0, [sp, #12]
 800cb7e:	9903      	ldr	r1, [sp, #12]
 800cb80:	ed90 ba01 	vldr	s22, [r0, #4]
 800cb84:	9804      	ldr	r0, [sp, #16]
 800cb86:	edd1 ea00 	vldr	s29, [r1]
 800cb8a:	edd0 aa01 	vldr	s21, [r0, #4]
 800cb8e:	9805      	ldr	r0, [sp, #20]
 800cb90:	9905      	ldr	r1, [sp, #20]
 800cb92:	edd0 7a01 	vldr	s15, [r0, #4]
 800cb96:	ed91 da00 	vldr	s26, [r1]
 800cb9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cb9c:	9c04      	ldr	r4, [sp, #16]
 800cb9e:	edcd 7a01 	vstr	s15, [sp, #4]
 800cba2:	edd8 7a01 	vldr	s15, [r8, #4]
 800cba6:	9100      	str	r1, [sp, #0]
 800cba8:	edd2 fa00 	vldr	s31, [r2]
 800cbac:	ed94 ea00 	vldr	s28, [r4]
 800cbb0:	ed92 ca01 	vldr	s24, [r2, #4]
 800cbb4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800cbb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cbbc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cbbe:	edd9 da00 	vldr	s27, [r9]
 800cbc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cbc4:	edd8 ca00 	vldr	s25, [r8]
 800cbc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cbca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbcc:	f8dd c018 	ldr.w	ip, [sp, #24]
 800cbd0:	ed99 aa01 	vldr	s20, [r9, #4]
 800cbd4:	edcd 7a02 	vstr	s15, [sp, #8]
 800cbd8:	9800      	ldr	r0, [sp, #0]
 800cbda:	e001      	b.n	800cbe0 <arm_radix8_butterfly_f32+0x328>
 800cbdc:	3f3504f3 	.word	0x3f3504f3
 800cbe0:	edd5 3a00 	vldr	s7, [r5]
 800cbe4:	44dc      	add	ip, fp
 800cbe6:	ed91 7a00 	vldr	s14, [r1]
 800cbea:	edd4 8a00 	vldr	s17, [r4]
 800cbee:	45e2      	cmp	sl, ip
 800cbf0:	ed57 7a01 	vldr	s15, [r7, #-4]
 800cbf4:	ed90 5a00 	vldr	s10, [r0]
 800cbf8:	ed56 5a01 	vldr	s11, [r6, #-4]
 800cbfc:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800cc00:	ed92 1a00 	vldr	s2, [r2]
 800cc04:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800cc08:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800cc0c:	ee75 9a25 	vadd.f32	s19, s10, s11
 800cc10:	ee31 3a07 	vadd.f32	s6, s2, s14
 800cc14:	ed92 8a01 	vldr	s16, [r2, #4]
 800cc18:	ee73 6a84 	vadd.f32	s13, s7, s8
 800cc1c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cc20:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800cc24:	ee73 1a06 	vadd.f32	s3, s6, s12
 800cc28:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800cc2c:	ee75 7a84 	vadd.f32	s15, s11, s8
 800cc30:	ee31 1a47 	vsub.f32	s2, s2, s14
 800cc34:	ee31 7a85 	vadd.f32	s14, s3, s10
 800cc38:	ee67 7a89 	vmul.f32	s15, s15, s18
 800cc3c:	ee33 3a46 	vsub.f32	s6, s6, s12
 800cc40:	ed82 7a00 	vstr	s14, [r2]
 800cc44:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800cc48:	ed96 6a00 	vldr	s12, [r6]
 800cc4c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800cc50:	edd5 3a01 	vldr	s7, [r5, #4]
 800cc54:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800cc58:	ed90 7a01 	vldr	s14, [r0, #4]
 800cc5c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800cc60:	edde 4a00 	vldr	s9, [lr]
 800cc64:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800cc68:	ee77 2a46 	vsub.f32	s5, s14, s12
 800cc6c:	edd1 6a01 	vldr	s13, [r1, #4]
 800cc70:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800cc74:	edd7 0a00 	vldr	s1, [r7]
 800cc78:	ee77 5a06 	vadd.f32	s11, s14, s12
 800cc7c:	ed94 7a01 	vldr	s14, [r4, #4]
 800cc80:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800cc84:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800cc88:	ee78 4a66 	vsub.f32	s9, s16, s13
 800cc8c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800cc90:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800cc94:	ee77 6a20 	vadd.f32	s13, s14, s1
 800cc98:	ee24 4a09 	vmul.f32	s8, s8, s18
 800cc9c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800cca0:	ee20 8a09 	vmul.f32	s16, s0, s18
 800cca4:	ee75 0a86 	vadd.f32	s1, s11, s12
 800cca8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800ccac:	ee62 2a89 	vmul.f32	s5, s5, s18
 800ccb0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ccb4:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800ccb8:	ee77 7a62 	vsub.f32	s15, s14, s5
 800ccbc:	ee74 5a88 	vadd.f32	s11, s9, s16
 800ccc0:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800ccc4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800ccc8:	ee71 2a04 	vadd.f32	s5, s2, s8
 800cccc:	ee31 7a44 	vsub.f32	s14, s2, s8
 800ccd0:	ee30 1a60 	vsub.f32	s2, s0, s1
 800ccd4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800ccd8:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ccdc:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800cce0:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800cce4:	ee38 4a68 	vsub.f32	s8, s16, s17
 800cce8:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800ccec:	ee72 5a25 	vadd.f32	s11, s4, s11
 800ccf0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800ccf4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800ccf8:	ee77 2a27 	vadd.f32	s5, s14, s15
 800ccfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd00:	ee78 7a88 	vadd.f32	s15, s17, s16
 800cd04:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800cd08:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800cd0c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800cd10:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800cd14:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800cd18:	ee70 0a20 	vadd.f32	s1, s0, s1
 800cd1c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800cd20:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800cd24:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800cd28:	edc2 0a01 	vstr	s1, [r2, #4]
 800cd2c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800cd30:	441a      	add	r2, r3
 800cd32:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800cd36:	ee31 5a45 	vsub.f32	s10, s2, s10
 800cd3a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800cd3e:	ed81 8a00 	vstr	s16, [r1]
 800cd42:	ee39 0a80 	vadd.f32	s0, s19, s0
 800cd46:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cd4a:	ed81 5a01 	vstr	s10, [r1, #4]
 800cd4e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800cd52:	edcd 3a00 	vstr	s7, [sp]
 800cd56:	ed9d 5a02 	vldr	s10, [sp, #8]
 800cd5a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800cd5e:	eddd 3a01 	vldr	s7, [sp, #4]
 800cd62:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800cd66:	ed84 0a00 	vstr	s0, [r4]
 800cd6a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800cd6e:	ed84 3a01 	vstr	s6, [r4, #4]
 800cd72:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800cd76:	ee23 6a86 	vmul.f32	s12, s7, s12
 800cd7a:	eddd 3a00 	vldr	s7, [sp]
 800cd7e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800cd82:	4419      	add	r1, r3
 800cd84:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800cd88:	441c      	add	r4, r3
 800cd8a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800cd8e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800cd92:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800cd96:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800cd9a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800cd9e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800cda2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800cda6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800cdaa:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800cdae:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800cdb2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800cdb6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800cdba:	ee38 8a01 	vadd.f32	s16, s16, s2
 800cdbe:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800cdc2:	ee39 5a85 	vadd.f32	s10, s19, s10
 800cdc6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800cdca:	ed07 8a01 	vstr	s16, [r7, #-4]
 800cdce:	ee30 0a21 	vadd.f32	s0, s0, s3
 800cdd2:	ed87 6a00 	vstr	s12, [r7]
 800cdd6:	ee74 2a62 	vsub.f32	s5, s8, s5
 800cdda:	edc0 0a00 	vstr	s1, [r0]
 800cdde:	ee33 3a28 	vadd.f32	s6, s6, s17
 800cde2:	edc0 3a01 	vstr	s7, [r0, #4]
 800cde6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cdea:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800cdee:	edce 4a00 	vstr	s9, [lr]
 800cdf2:	4418      	add	r0, r3
 800cdf4:	ed06 0a01 	vstr	s0, [r6, #-4]
 800cdf8:	441f      	add	r7, r3
 800cdfa:	edc6 2a00 	vstr	s5, [r6]
 800cdfe:	449e      	add	lr, r3
 800ce00:	ed85 3a00 	vstr	s6, [r5]
 800ce04:	441e      	add	r6, r3
 800ce06:	ed85 7a01 	vstr	s14, [r5, #4]
 800ce0a:	441d      	add	r5, r3
 800ce0c:	f63f aee8 	bhi.w	800cbe0 <arm_radix8_butterfly_f32+0x328>
 800ce10:	9a06      	ldr	r2, [sp, #24]
 800ce12:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ce14:	3201      	adds	r2, #1
 800ce16:	4611      	mov	r1, r2
 800ce18:	9206      	str	r2, [sp, #24]
 800ce1a:	9a07      	ldr	r2, [sp, #28]
 800ce1c:	4402      	add	r2, r0
 800ce1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ce20:	9207      	str	r2, [sp, #28]
 800ce22:	9a03      	ldr	r2, [sp, #12]
 800ce24:	4402      	add	r2, r0
 800ce26:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ce28:	9203      	str	r2, [sp, #12]
 800ce2a:	9a04      	ldr	r2, [sp, #16]
 800ce2c:	4402      	add	r2, r0
 800ce2e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce30:	9204      	str	r2, [sp, #16]
 800ce32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce34:	4491      	add	r9, r2
 800ce36:	9a05      	ldr	r2, [sp, #20]
 800ce38:	4402      	add	r2, r0
 800ce3a:	9205      	str	r2, [sp, #20]
 800ce3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce3e:	4490      	add	r8, r2
 800ce40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce42:	3208      	adds	r2, #8
 800ce44:	920f      	str	r2, [sp, #60]	; 0x3c
 800ce46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce48:	3208      	adds	r2, #8
 800ce4a:	920e      	str	r2, [sp, #56]	; 0x38
 800ce4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce4e:	3208      	adds	r2, #8
 800ce50:	920d      	str	r2, [sp, #52]	; 0x34
 800ce52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce54:	3208      	adds	r2, #8
 800ce56:	920c      	str	r2, [sp, #48]	; 0x30
 800ce58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce5a:	3208      	adds	r2, #8
 800ce5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce60:	3208      	adds	r2, #8
 800ce62:	920a      	str	r2, [sp, #40]	; 0x28
 800ce64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce66:	3208      	adds	r2, #8
 800ce68:	9209      	str	r2, [sp, #36]	; 0x24
 800ce6a:	9a08      	ldr	r2, [sp, #32]
 800ce6c:	3208      	adds	r2, #8
 800ce6e:	9208      	str	r2, [sp, #32]
 800ce70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ce72:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ce74:	4622      	mov	r2, r4
 800ce76:	4288      	cmp	r0, r1
 800ce78:	d005      	beq.n	800ce86 <arm_radix8_butterfly_f32+0x5ce>
 800ce7a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4401      	add	r1, r0
 800ce80:	9807      	ldr	r0, [sp, #28]
 800ce82:	9110      	str	r1, [sp, #64]	; 0x40
 800ce84:	e676      	b.n	800cb74 <arm_radix8_butterfly_f32+0x2bc>
 800ce86:	4683      	mov	fp, r0
 800ce88:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800ce8c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800ce90:	e522      	b.n	800c8d8 <arm_radix8_butterfly_f32+0x20>
 800ce92:	b01d      	add	sp, #116	; 0x74
 800ce94:	ecbd 8b10 	vpop	{d8-d15}
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce9c <__errno>:
 800ce9c:	4b01      	ldr	r3, [pc, #4]	; (800cea4 <__errno+0x8>)
 800ce9e:	6818      	ldr	r0, [r3, #0]
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	2000000c 	.word	0x2000000c

0800cea8 <__libc_init_array>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	4d0d      	ldr	r5, [pc, #52]	; (800cee0 <__libc_init_array+0x38>)
 800ceac:	4c0d      	ldr	r4, [pc, #52]	; (800cee4 <__libc_init_array+0x3c>)
 800ceae:	1b64      	subs	r4, r4, r5
 800ceb0:	10a4      	asrs	r4, r4, #2
 800ceb2:	2600      	movs	r6, #0
 800ceb4:	42a6      	cmp	r6, r4
 800ceb6:	d109      	bne.n	800cecc <__libc_init_array+0x24>
 800ceb8:	4d0b      	ldr	r5, [pc, #44]	; (800cee8 <__libc_init_array+0x40>)
 800ceba:	4c0c      	ldr	r4, [pc, #48]	; (800ceec <__libc_init_array+0x44>)
 800cebc:	f001 fc54 	bl	800e768 <_init>
 800cec0:	1b64      	subs	r4, r4, r5
 800cec2:	10a4      	asrs	r4, r4, #2
 800cec4:	2600      	movs	r6, #0
 800cec6:	42a6      	cmp	r6, r4
 800cec8:	d105      	bne.n	800ced6 <__libc_init_array+0x2e>
 800ceca:	bd70      	pop	{r4, r5, r6, pc}
 800cecc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced0:	4798      	blx	r3
 800ced2:	3601      	adds	r6, #1
 800ced4:	e7ee      	b.n	800ceb4 <__libc_init_array+0xc>
 800ced6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceda:	4798      	blx	r3
 800cedc:	3601      	adds	r6, #1
 800cede:	e7f2      	b.n	800cec6 <__libc_init_array+0x1e>
 800cee0:	08022188 	.word	0x08022188
 800cee4:	08022188 	.word	0x08022188
 800cee8:	08022188 	.word	0x08022188
 800ceec:	0802218c 	.word	0x0802218c

0800cef0 <memcpy>:
 800cef0:	440a      	add	r2, r1
 800cef2:	4291      	cmp	r1, r2
 800cef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cef8:	d100      	bne.n	800cefc <memcpy+0xc>
 800cefa:	4770      	bx	lr
 800cefc:	b510      	push	{r4, lr}
 800cefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf06:	4291      	cmp	r1, r2
 800cf08:	d1f9      	bne.n	800cefe <memcpy+0xe>
 800cf0a:	bd10      	pop	{r4, pc}

0800cf0c <memset>:
 800cf0c:	4402      	add	r2, r0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d100      	bne.n	800cf16 <memset+0xa>
 800cf14:	4770      	bx	lr
 800cf16:	f803 1b01 	strb.w	r1, [r3], #1
 800cf1a:	e7f9      	b.n	800cf10 <memset+0x4>

0800cf1c <_free_r>:
 800cf1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf1e:	2900      	cmp	r1, #0
 800cf20:	d044      	beq.n	800cfac <_free_r+0x90>
 800cf22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf26:	9001      	str	r0, [sp, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf2e:	bfb8      	it	lt
 800cf30:	18e4      	addlt	r4, r4, r3
 800cf32:	f000 f903 	bl	800d13c <__malloc_lock>
 800cf36:	4a1e      	ldr	r2, [pc, #120]	; (800cfb0 <_free_r+0x94>)
 800cf38:	9801      	ldr	r0, [sp, #4]
 800cf3a:	6813      	ldr	r3, [r2, #0]
 800cf3c:	b933      	cbnz	r3, 800cf4c <_free_r+0x30>
 800cf3e:	6063      	str	r3, [r4, #4]
 800cf40:	6014      	str	r4, [r2, #0]
 800cf42:	b003      	add	sp, #12
 800cf44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf48:	f000 b8fe 	b.w	800d148 <__malloc_unlock>
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	d908      	bls.n	800cf62 <_free_r+0x46>
 800cf50:	6825      	ldr	r5, [r4, #0]
 800cf52:	1961      	adds	r1, r4, r5
 800cf54:	428b      	cmp	r3, r1
 800cf56:	bf01      	itttt	eq
 800cf58:	6819      	ldreq	r1, [r3, #0]
 800cf5a:	685b      	ldreq	r3, [r3, #4]
 800cf5c:	1949      	addeq	r1, r1, r5
 800cf5e:	6021      	streq	r1, [r4, #0]
 800cf60:	e7ed      	b.n	800cf3e <_free_r+0x22>
 800cf62:	461a      	mov	r2, r3
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	b10b      	cbz	r3, 800cf6c <_free_r+0x50>
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	d9fa      	bls.n	800cf62 <_free_r+0x46>
 800cf6c:	6811      	ldr	r1, [r2, #0]
 800cf6e:	1855      	adds	r5, r2, r1
 800cf70:	42a5      	cmp	r5, r4
 800cf72:	d10b      	bne.n	800cf8c <_free_r+0x70>
 800cf74:	6824      	ldr	r4, [r4, #0]
 800cf76:	4421      	add	r1, r4
 800cf78:	1854      	adds	r4, r2, r1
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	6011      	str	r1, [r2, #0]
 800cf7e:	d1e0      	bne.n	800cf42 <_free_r+0x26>
 800cf80:	681c      	ldr	r4, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	6053      	str	r3, [r2, #4]
 800cf86:	4421      	add	r1, r4
 800cf88:	6011      	str	r1, [r2, #0]
 800cf8a:	e7da      	b.n	800cf42 <_free_r+0x26>
 800cf8c:	d902      	bls.n	800cf94 <_free_r+0x78>
 800cf8e:	230c      	movs	r3, #12
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	e7d6      	b.n	800cf42 <_free_r+0x26>
 800cf94:	6825      	ldr	r5, [r4, #0]
 800cf96:	1961      	adds	r1, r4, r5
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	bf04      	itt	eq
 800cf9c:	6819      	ldreq	r1, [r3, #0]
 800cf9e:	685b      	ldreq	r3, [r3, #4]
 800cfa0:	6063      	str	r3, [r4, #4]
 800cfa2:	bf04      	itt	eq
 800cfa4:	1949      	addeq	r1, r1, r5
 800cfa6:	6021      	streq	r1, [r4, #0]
 800cfa8:	6054      	str	r4, [r2, #4]
 800cfaa:	e7ca      	b.n	800cf42 <_free_r+0x26>
 800cfac:	b003      	add	sp, #12
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	20018c78 	.word	0x20018c78

0800cfb4 <sbrk_aligned>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	4e0e      	ldr	r6, [pc, #56]	; (800cff0 <sbrk_aligned+0x3c>)
 800cfb8:	460c      	mov	r4, r1
 800cfba:	6831      	ldr	r1, [r6, #0]
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	b911      	cbnz	r1, 800cfc6 <sbrk_aligned+0x12>
 800cfc0:	f000 f88c 	bl	800d0dc <_sbrk_r>
 800cfc4:	6030      	str	r0, [r6, #0]
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f000 f887 	bl	800d0dc <_sbrk_r>
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	d00a      	beq.n	800cfe8 <sbrk_aligned+0x34>
 800cfd2:	1cc4      	adds	r4, r0, #3
 800cfd4:	f024 0403 	bic.w	r4, r4, #3
 800cfd8:	42a0      	cmp	r0, r4
 800cfda:	d007      	beq.n	800cfec <sbrk_aligned+0x38>
 800cfdc:	1a21      	subs	r1, r4, r0
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f000 f87c 	bl	800d0dc <_sbrk_r>
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d101      	bne.n	800cfec <sbrk_aligned+0x38>
 800cfe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cfec:	4620      	mov	r0, r4
 800cfee:	bd70      	pop	{r4, r5, r6, pc}
 800cff0:	20018c7c 	.word	0x20018c7c

0800cff4 <_malloc_r>:
 800cff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff8:	1ccd      	adds	r5, r1, #3
 800cffa:	f025 0503 	bic.w	r5, r5, #3
 800cffe:	3508      	adds	r5, #8
 800d000:	2d0c      	cmp	r5, #12
 800d002:	bf38      	it	cc
 800d004:	250c      	movcc	r5, #12
 800d006:	2d00      	cmp	r5, #0
 800d008:	4607      	mov	r7, r0
 800d00a:	db01      	blt.n	800d010 <_malloc_r+0x1c>
 800d00c:	42a9      	cmp	r1, r5
 800d00e:	d905      	bls.n	800d01c <_malloc_r+0x28>
 800d010:	230c      	movs	r3, #12
 800d012:	603b      	str	r3, [r7, #0]
 800d014:	2600      	movs	r6, #0
 800d016:	4630      	mov	r0, r6
 800d018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01c:	4e2e      	ldr	r6, [pc, #184]	; (800d0d8 <_malloc_r+0xe4>)
 800d01e:	f000 f88d 	bl	800d13c <__malloc_lock>
 800d022:	6833      	ldr	r3, [r6, #0]
 800d024:	461c      	mov	r4, r3
 800d026:	bb34      	cbnz	r4, 800d076 <_malloc_r+0x82>
 800d028:	4629      	mov	r1, r5
 800d02a:	4638      	mov	r0, r7
 800d02c:	f7ff ffc2 	bl	800cfb4 <sbrk_aligned>
 800d030:	1c43      	adds	r3, r0, #1
 800d032:	4604      	mov	r4, r0
 800d034:	d14d      	bne.n	800d0d2 <_malloc_r+0xde>
 800d036:	6834      	ldr	r4, [r6, #0]
 800d038:	4626      	mov	r6, r4
 800d03a:	2e00      	cmp	r6, #0
 800d03c:	d140      	bne.n	800d0c0 <_malloc_r+0xcc>
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	4631      	mov	r1, r6
 800d042:	4638      	mov	r0, r7
 800d044:	eb04 0803 	add.w	r8, r4, r3
 800d048:	f000 f848 	bl	800d0dc <_sbrk_r>
 800d04c:	4580      	cmp	r8, r0
 800d04e:	d13a      	bne.n	800d0c6 <_malloc_r+0xd2>
 800d050:	6821      	ldr	r1, [r4, #0]
 800d052:	3503      	adds	r5, #3
 800d054:	1a6d      	subs	r5, r5, r1
 800d056:	f025 0503 	bic.w	r5, r5, #3
 800d05a:	3508      	adds	r5, #8
 800d05c:	2d0c      	cmp	r5, #12
 800d05e:	bf38      	it	cc
 800d060:	250c      	movcc	r5, #12
 800d062:	4629      	mov	r1, r5
 800d064:	4638      	mov	r0, r7
 800d066:	f7ff ffa5 	bl	800cfb4 <sbrk_aligned>
 800d06a:	3001      	adds	r0, #1
 800d06c:	d02b      	beq.n	800d0c6 <_malloc_r+0xd2>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	442b      	add	r3, r5
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	e00e      	b.n	800d094 <_malloc_r+0xa0>
 800d076:	6822      	ldr	r2, [r4, #0]
 800d078:	1b52      	subs	r2, r2, r5
 800d07a:	d41e      	bmi.n	800d0ba <_malloc_r+0xc6>
 800d07c:	2a0b      	cmp	r2, #11
 800d07e:	d916      	bls.n	800d0ae <_malloc_r+0xba>
 800d080:	1961      	adds	r1, r4, r5
 800d082:	42a3      	cmp	r3, r4
 800d084:	6025      	str	r5, [r4, #0]
 800d086:	bf18      	it	ne
 800d088:	6059      	strne	r1, [r3, #4]
 800d08a:	6863      	ldr	r3, [r4, #4]
 800d08c:	bf08      	it	eq
 800d08e:	6031      	streq	r1, [r6, #0]
 800d090:	5162      	str	r2, [r4, r5]
 800d092:	604b      	str	r3, [r1, #4]
 800d094:	4638      	mov	r0, r7
 800d096:	f104 060b 	add.w	r6, r4, #11
 800d09a:	f000 f855 	bl	800d148 <__malloc_unlock>
 800d09e:	f026 0607 	bic.w	r6, r6, #7
 800d0a2:	1d23      	adds	r3, r4, #4
 800d0a4:	1af2      	subs	r2, r6, r3
 800d0a6:	d0b6      	beq.n	800d016 <_malloc_r+0x22>
 800d0a8:	1b9b      	subs	r3, r3, r6
 800d0aa:	50a3      	str	r3, [r4, r2]
 800d0ac:	e7b3      	b.n	800d016 <_malloc_r+0x22>
 800d0ae:	6862      	ldr	r2, [r4, #4]
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	bf0c      	ite	eq
 800d0b4:	6032      	streq	r2, [r6, #0]
 800d0b6:	605a      	strne	r2, [r3, #4]
 800d0b8:	e7ec      	b.n	800d094 <_malloc_r+0xa0>
 800d0ba:	4623      	mov	r3, r4
 800d0bc:	6864      	ldr	r4, [r4, #4]
 800d0be:	e7b2      	b.n	800d026 <_malloc_r+0x32>
 800d0c0:	4634      	mov	r4, r6
 800d0c2:	6876      	ldr	r6, [r6, #4]
 800d0c4:	e7b9      	b.n	800d03a <_malloc_r+0x46>
 800d0c6:	230c      	movs	r3, #12
 800d0c8:	603b      	str	r3, [r7, #0]
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f000 f83c 	bl	800d148 <__malloc_unlock>
 800d0d0:	e7a1      	b.n	800d016 <_malloc_r+0x22>
 800d0d2:	6025      	str	r5, [r4, #0]
 800d0d4:	e7de      	b.n	800d094 <_malloc_r+0xa0>
 800d0d6:	bf00      	nop
 800d0d8:	20018c78 	.word	0x20018c78

0800d0dc <_sbrk_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d06      	ldr	r5, [pc, #24]	; (800d0f8 <_sbrk_r+0x1c>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	f7f4 fc2a 	bl	8001940 <_sbrk>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_sbrk_r+0x1a>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_sbrk_r+0x1a>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20018c80 	.word	0x20018c80

0800d0fc <siprintf>:
 800d0fc:	b40e      	push	{r1, r2, r3}
 800d0fe:	b500      	push	{lr}
 800d100:	b09c      	sub	sp, #112	; 0x70
 800d102:	ab1d      	add	r3, sp, #116	; 0x74
 800d104:	9002      	str	r0, [sp, #8]
 800d106:	9006      	str	r0, [sp, #24]
 800d108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d10c:	4809      	ldr	r0, [pc, #36]	; (800d134 <siprintf+0x38>)
 800d10e:	9107      	str	r1, [sp, #28]
 800d110:	9104      	str	r1, [sp, #16]
 800d112:	4909      	ldr	r1, [pc, #36]	; (800d138 <siprintf+0x3c>)
 800d114:	f853 2b04 	ldr.w	r2, [r3], #4
 800d118:	9105      	str	r1, [sp, #20]
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	a902      	add	r1, sp, #8
 800d120:	f000 f8a2 	bl	800d268 <_svfiprintf_r>
 800d124:	9b02      	ldr	r3, [sp, #8]
 800d126:	2200      	movs	r2, #0
 800d128:	701a      	strb	r2, [r3, #0]
 800d12a:	b01c      	add	sp, #112	; 0x70
 800d12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d130:	b003      	add	sp, #12
 800d132:	4770      	bx	lr
 800d134:	2000000c 	.word	0x2000000c
 800d138:	ffff0208 	.word	0xffff0208

0800d13c <__malloc_lock>:
 800d13c:	4801      	ldr	r0, [pc, #4]	; (800d144 <__malloc_lock+0x8>)
 800d13e:	f000 bb27 	b.w	800d790 <__retarget_lock_acquire_recursive>
 800d142:	bf00      	nop
 800d144:	20018c84 	.word	0x20018c84

0800d148 <__malloc_unlock>:
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__malloc_unlock+0x8>)
 800d14a:	f000 bb22 	b.w	800d792 <__retarget_lock_release_recursive>
 800d14e:	bf00      	nop
 800d150:	20018c84 	.word	0x20018c84

0800d154 <_realloc_r>:
 800d154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d158:	4680      	mov	r8, r0
 800d15a:	4614      	mov	r4, r2
 800d15c:	460e      	mov	r6, r1
 800d15e:	b921      	cbnz	r1, 800d16a <_realloc_r+0x16>
 800d160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d164:	4611      	mov	r1, r2
 800d166:	f7ff bf45 	b.w	800cff4 <_malloc_r>
 800d16a:	b92a      	cbnz	r2, 800d178 <_realloc_r+0x24>
 800d16c:	f7ff fed6 	bl	800cf1c <_free_r>
 800d170:	4625      	mov	r5, r4
 800d172:	4628      	mov	r0, r5
 800d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d178:	f000 fb26 	bl	800d7c8 <_malloc_usable_size_r>
 800d17c:	4284      	cmp	r4, r0
 800d17e:	4607      	mov	r7, r0
 800d180:	d802      	bhi.n	800d188 <_realloc_r+0x34>
 800d182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d186:	d812      	bhi.n	800d1ae <_realloc_r+0x5a>
 800d188:	4621      	mov	r1, r4
 800d18a:	4640      	mov	r0, r8
 800d18c:	f7ff ff32 	bl	800cff4 <_malloc_r>
 800d190:	4605      	mov	r5, r0
 800d192:	2800      	cmp	r0, #0
 800d194:	d0ed      	beq.n	800d172 <_realloc_r+0x1e>
 800d196:	42bc      	cmp	r4, r7
 800d198:	4622      	mov	r2, r4
 800d19a:	4631      	mov	r1, r6
 800d19c:	bf28      	it	cs
 800d19e:	463a      	movcs	r2, r7
 800d1a0:	f7ff fea6 	bl	800cef0 <memcpy>
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	f7ff feb8 	bl	800cf1c <_free_r>
 800d1ac:	e7e1      	b.n	800d172 <_realloc_r+0x1e>
 800d1ae:	4635      	mov	r5, r6
 800d1b0:	e7df      	b.n	800d172 <_realloc_r+0x1e>

0800d1b2 <__ssputs_r>:
 800d1b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b6:	688e      	ldr	r6, [r1, #8]
 800d1b8:	429e      	cmp	r6, r3
 800d1ba:	4682      	mov	sl, r0
 800d1bc:	460c      	mov	r4, r1
 800d1be:	4690      	mov	r8, r2
 800d1c0:	461f      	mov	r7, r3
 800d1c2:	d838      	bhi.n	800d236 <__ssputs_r+0x84>
 800d1c4:	898a      	ldrh	r2, [r1, #12]
 800d1c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1ca:	d032      	beq.n	800d232 <__ssputs_r+0x80>
 800d1cc:	6825      	ldr	r5, [r4, #0]
 800d1ce:	6909      	ldr	r1, [r1, #16]
 800d1d0:	eba5 0901 	sub.w	r9, r5, r1
 800d1d4:	6965      	ldr	r5, [r4, #20]
 800d1d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1de:	3301      	adds	r3, #1
 800d1e0:	444b      	add	r3, r9
 800d1e2:	106d      	asrs	r5, r5, #1
 800d1e4:	429d      	cmp	r5, r3
 800d1e6:	bf38      	it	cc
 800d1e8:	461d      	movcc	r5, r3
 800d1ea:	0553      	lsls	r3, r2, #21
 800d1ec:	d531      	bpl.n	800d252 <__ssputs_r+0xa0>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7ff ff00 	bl	800cff4 <_malloc_r>
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	b950      	cbnz	r0, 800d20e <__ssputs_r+0x5c>
 800d1f8:	230c      	movs	r3, #12
 800d1fa:	f8ca 3000 	str.w	r3, [sl]
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d204:	81a3      	strh	r3, [r4, #12]
 800d206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20e:	6921      	ldr	r1, [r4, #16]
 800d210:	464a      	mov	r2, r9
 800d212:	f7ff fe6d 	bl	800cef0 <memcpy>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	6126      	str	r6, [r4, #16]
 800d224:	6165      	str	r5, [r4, #20]
 800d226:	444e      	add	r6, r9
 800d228:	eba5 0509 	sub.w	r5, r5, r9
 800d22c:	6026      	str	r6, [r4, #0]
 800d22e:	60a5      	str	r5, [r4, #8]
 800d230:	463e      	mov	r6, r7
 800d232:	42be      	cmp	r6, r7
 800d234:	d900      	bls.n	800d238 <__ssputs_r+0x86>
 800d236:	463e      	mov	r6, r7
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	4632      	mov	r2, r6
 800d23c:	4641      	mov	r1, r8
 800d23e:	f000 faa9 	bl	800d794 <memmove>
 800d242:	68a3      	ldr	r3, [r4, #8]
 800d244:	1b9b      	subs	r3, r3, r6
 800d246:	60a3      	str	r3, [r4, #8]
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	4433      	add	r3, r6
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	2000      	movs	r0, #0
 800d250:	e7db      	b.n	800d20a <__ssputs_r+0x58>
 800d252:	462a      	mov	r2, r5
 800d254:	f7ff ff7e 	bl	800d154 <_realloc_r>
 800d258:	4606      	mov	r6, r0
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d1e1      	bne.n	800d222 <__ssputs_r+0x70>
 800d25e:	6921      	ldr	r1, [r4, #16]
 800d260:	4650      	mov	r0, sl
 800d262:	f7ff fe5b 	bl	800cf1c <_free_r>
 800d266:	e7c7      	b.n	800d1f8 <__ssputs_r+0x46>

0800d268 <_svfiprintf_r>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4698      	mov	r8, r3
 800d26e:	898b      	ldrh	r3, [r1, #12]
 800d270:	061b      	lsls	r3, r3, #24
 800d272:	b09d      	sub	sp, #116	; 0x74
 800d274:	4607      	mov	r7, r0
 800d276:	460d      	mov	r5, r1
 800d278:	4614      	mov	r4, r2
 800d27a:	d50e      	bpl.n	800d29a <_svfiprintf_r+0x32>
 800d27c:	690b      	ldr	r3, [r1, #16]
 800d27e:	b963      	cbnz	r3, 800d29a <_svfiprintf_r+0x32>
 800d280:	2140      	movs	r1, #64	; 0x40
 800d282:	f7ff feb7 	bl	800cff4 <_malloc_r>
 800d286:	6028      	str	r0, [r5, #0]
 800d288:	6128      	str	r0, [r5, #16]
 800d28a:	b920      	cbnz	r0, 800d296 <_svfiprintf_r+0x2e>
 800d28c:	230c      	movs	r3, #12
 800d28e:	603b      	str	r3, [r7, #0]
 800d290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d294:	e0d1      	b.n	800d43a <_svfiprintf_r+0x1d2>
 800d296:	2340      	movs	r3, #64	; 0x40
 800d298:	616b      	str	r3, [r5, #20]
 800d29a:	2300      	movs	r3, #0
 800d29c:	9309      	str	r3, [sp, #36]	; 0x24
 800d29e:	2320      	movs	r3, #32
 800d2a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a8:	2330      	movs	r3, #48	; 0x30
 800d2aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d454 <_svfiprintf_r+0x1ec>
 800d2ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2b2:	f04f 0901 	mov.w	r9, #1
 800d2b6:	4623      	mov	r3, r4
 800d2b8:	469a      	mov	sl, r3
 800d2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2be:	b10a      	cbz	r2, 800d2c4 <_svfiprintf_r+0x5c>
 800d2c0:	2a25      	cmp	r2, #37	; 0x25
 800d2c2:	d1f9      	bne.n	800d2b8 <_svfiprintf_r+0x50>
 800d2c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c8:	d00b      	beq.n	800d2e2 <_svfiprintf_r+0x7a>
 800d2ca:	465b      	mov	r3, fp
 800d2cc:	4622      	mov	r2, r4
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7ff ff6e 	bl	800d1b2 <__ssputs_r>
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	f000 80aa 	beq.w	800d430 <_svfiprintf_r+0x1c8>
 800d2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2de:	445a      	add	r2, fp
 800d2e0:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 80a2 	beq.w	800d430 <_svfiprintf_r+0x1c8>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f6:	f10a 0a01 	add.w	sl, sl, #1
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	9307      	str	r3, [sp, #28]
 800d2fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d302:	931a      	str	r3, [sp, #104]	; 0x68
 800d304:	4654      	mov	r4, sl
 800d306:	2205      	movs	r2, #5
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	4851      	ldr	r0, [pc, #324]	; (800d454 <_svfiprintf_r+0x1ec>)
 800d30e:	f7f2 fff7 	bl	8000300 <memchr>
 800d312:	9a04      	ldr	r2, [sp, #16]
 800d314:	b9d8      	cbnz	r0, 800d34e <_svfiprintf_r+0xe6>
 800d316:	06d0      	lsls	r0, r2, #27
 800d318:	bf44      	itt	mi
 800d31a:	2320      	movmi	r3, #32
 800d31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d320:	0711      	lsls	r1, r2, #28
 800d322:	bf44      	itt	mi
 800d324:	232b      	movmi	r3, #43	; 0x2b
 800d326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d32a:	f89a 3000 	ldrb.w	r3, [sl]
 800d32e:	2b2a      	cmp	r3, #42	; 0x2a
 800d330:	d015      	beq.n	800d35e <_svfiprintf_r+0xf6>
 800d332:	9a07      	ldr	r2, [sp, #28]
 800d334:	4654      	mov	r4, sl
 800d336:	2000      	movs	r0, #0
 800d338:	f04f 0c0a 	mov.w	ip, #10
 800d33c:	4621      	mov	r1, r4
 800d33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d342:	3b30      	subs	r3, #48	; 0x30
 800d344:	2b09      	cmp	r3, #9
 800d346:	d94e      	bls.n	800d3e6 <_svfiprintf_r+0x17e>
 800d348:	b1b0      	cbz	r0, 800d378 <_svfiprintf_r+0x110>
 800d34a:	9207      	str	r2, [sp, #28]
 800d34c:	e014      	b.n	800d378 <_svfiprintf_r+0x110>
 800d34e:	eba0 0308 	sub.w	r3, r0, r8
 800d352:	fa09 f303 	lsl.w	r3, r9, r3
 800d356:	4313      	orrs	r3, r2
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	46a2      	mov	sl, r4
 800d35c:	e7d2      	b.n	800d304 <_svfiprintf_r+0x9c>
 800d35e:	9b03      	ldr	r3, [sp, #12]
 800d360:	1d19      	adds	r1, r3, #4
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	9103      	str	r1, [sp, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	bfbb      	ittet	lt
 800d36a:	425b      	neglt	r3, r3
 800d36c:	f042 0202 	orrlt.w	r2, r2, #2
 800d370:	9307      	strge	r3, [sp, #28]
 800d372:	9307      	strlt	r3, [sp, #28]
 800d374:	bfb8      	it	lt
 800d376:	9204      	strlt	r2, [sp, #16]
 800d378:	7823      	ldrb	r3, [r4, #0]
 800d37a:	2b2e      	cmp	r3, #46	; 0x2e
 800d37c:	d10c      	bne.n	800d398 <_svfiprintf_r+0x130>
 800d37e:	7863      	ldrb	r3, [r4, #1]
 800d380:	2b2a      	cmp	r3, #42	; 0x2a
 800d382:	d135      	bne.n	800d3f0 <_svfiprintf_r+0x188>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	1d1a      	adds	r2, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	9203      	str	r2, [sp, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	bfb8      	it	lt
 800d390:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d394:	3402      	adds	r4, #2
 800d396:	9305      	str	r3, [sp, #20]
 800d398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d464 <_svfiprintf_r+0x1fc>
 800d39c:	7821      	ldrb	r1, [r4, #0]
 800d39e:	2203      	movs	r2, #3
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	f7f2 ffad 	bl	8000300 <memchr>
 800d3a6:	b140      	cbz	r0, 800d3ba <_svfiprintf_r+0x152>
 800d3a8:	2340      	movs	r3, #64	; 0x40
 800d3aa:	eba0 000a 	sub.w	r0, r0, sl
 800d3ae:	fa03 f000 	lsl.w	r0, r3, r0
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	4303      	orrs	r3, r0
 800d3b6:	3401      	adds	r4, #1
 800d3b8:	9304      	str	r3, [sp, #16]
 800d3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3be:	4826      	ldr	r0, [pc, #152]	; (800d458 <_svfiprintf_r+0x1f0>)
 800d3c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3c4:	2206      	movs	r2, #6
 800d3c6:	f7f2 ff9b 	bl	8000300 <memchr>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d038      	beq.n	800d440 <_svfiprintf_r+0x1d8>
 800d3ce:	4b23      	ldr	r3, [pc, #140]	; (800d45c <_svfiprintf_r+0x1f4>)
 800d3d0:	bb1b      	cbnz	r3, 800d41a <_svfiprintf_r+0x1b2>
 800d3d2:	9b03      	ldr	r3, [sp, #12]
 800d3d4:	3307      	adds	r3, #7
 800d3d6:	f023 0307 	bic.w	r3, r3, #7
 800d3da:	3308      	adds	r3, #8
 800d3dc:	9303      	str	r3, [sp, #12]
 800d3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e0:	4433      	add	r3, r6
 800d3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e4:	e767      	b.n	800d2b6 <_svfiprintf_r+0x4e>
 800d3e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	e7a5      	b.n	800d33c <_svfiprintf_r+0xd4>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	3401      	adds	r4, #1
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f04f 0c0a 	mov.w	ip, #10
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d402:	3a30      	subs	r2, #48	; 0x30
 800d404:	2a09      	cmp	r2, #9
 800d406:	d903      	bls.n	800d410 <_svfiprintf_r+0x1a8>
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0c5      	beq.n	800d398 <_svfiprintf_r+0x130>
 800d40c:	9105      	str	r1, [sp, #20]
 800d40e:	e7c3      	b.n	800d398 <_svfiprintf_r+0x130>
 800d410:	fb0c 2101 	mla	r1, ip, r1, r2
 800d414:	4604      	mov	r4, r0
 800d416:	2301      	movs	r3, #1
 800d418:	e7f0      	b.n	800d3fc <_svfiprintf_r+0x194>
 800d41a:	ab03      	add	r3, sp, #12
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	462a      	mov	r2, r5
 800d420:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <_svfiprintf_r+0x1f8>)
 800d422:	a904      	add	r1, sp, #16
 800d424:	4638      	mov	r0, r7
 800d426:	f3af 8000 	nop.w
 800d42a:	1c42      	adds	r2, r0, #1
 800d42c:	4606      	mov	r6, r0
 800d42e:	d1d6      	bne.n	800d3de <_svfiprintf_r+0x176>
 800d430:	89ab      	ldrh	r3, [r5, #12]
 800d432:	065b      	lsls	r3, r3, #25
 800d434:	f53f af2c 	bmi.w	800d290 <_svfiprintf_r+0x28>
 800d438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d43a:	b01d      	add	sp, #116	; 0x74
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	ab03      	add	r3, sp, #12
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	462a      	mov	r2, r5
 800d446:	4b06      	ldr	r3, [pc, #24]	; (800d460 <_svfiprintf_r+0x1f8>)
 800d448:	a904      	add	r1, sp, #16
 800d44a:	4638      	mov	r0, r7
 800d44c:	f000 f87a 	bl	800d544 <_printf_i>
 800d450:	e7eb      	b.n	800d42a <_svfiprintf_r+0x1c2>
 800d452:	bf00      	nop
 800d454:	08021d08 	.word	0x08021d08
 800d458:	08021d12 	.word	0x08021d12
 800d45c:	00000000 	.word	0x00000000
 800d460:	0800d1b3 	.word	0x0800d1b3
 800d464:	08021d0e 	.word	0x08021d0e

0800d468 <_printf_common>:
 800d468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d46c:	4616      	mov	r6, r2
 800d46e:	4699      	mov	r9, r3
 800d470:	688a      	ldr	r2, [r1, #8]
 800d472:	690b      	ldr	r3, [r1, #16]
 800d474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d478:	4293      	cmp	r3, r2
 800d47a:	bfb8      	it	lt
 800d47c:	4613      	movlt	r3, r2
 800d47e:	6033      	str	r3, [r6, #0]
 800d480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d484:	4607      	mov	r7, r0
 800d486:	460c      	mov	r4, r1
 800d488:	b10a      	cbz	r2, 800d48e <_printf_common+0x26>
 800d48a:	3301      	adds	r3, #1
 800d48c:	6033      	str	r3, [r6, #0]
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	0699      	lsls	r1, r3, #26
 800d492:	bf42      	ittt	mi
 800d494:	6833      	ldrmi	r3, [r6, #0]
 800d496:	3302      	addmi	r3, #2
 800d498:	6033      	strmi	r3, [r6, #0]
 800d49a:	6825      	ldr	r5, [r4, #0]
 800d49c:	f015 0506 	ands.w	r5, r5, #6
 800d4a0:	d106      	bne.n	800d4b0 <_printf_common+0x48>
 800d4a2:	f104 0a19 	add.w	sl, r4, #25
 800d4a6:	68e3      	ldr	r3, [r4, #12]
 800d4a8:	6832      	ldr	r2, [r6, #0]
 800d4aa:	1a9b      	subs	r3, r3, r2
 800d4ac:	42ab      	cmp	r3, r5
 800d4ae:	dc26      	bgt.n	800d4fe <_printf_common+0x96>
 800d4b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4b4:	1e13      	subs	r3, r2, #0
 800d4b6:	6822      	ldr	r2, [r4, #0]
 800d4b8:	bf18      	it	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	0692      	lsls	r2, r2, #26
 800d4be:	d42b      	bmi.n	800d518 <_printf_common+0xb0>
 800d4c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	47c0      	blx	r8
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	d01e      	beq.n	800d50c <_printf_common+0xa4>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	68e5      	ldr	r5, [r4, #12]
 800d4d2:	6832      	ldr	r2, [r6, #0]
 800d4d4:	f003 0306 	and.w	r3, r3, #6
 800d4d8:	2b04      	cmp	r3, #4
 800d4da:	bf08      	it	eq
 800d4dc:	1aad      	subeq	r5, r5, r2
 800d4de:	68a3      	ldr	r3, [r4, #8]
 800d4e0:	6922      	ldr	r2, [r4, #16]
 800d4e2:	bf0c      	ite	eq
 800d4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4e8:	2500      	movne	r5, #0
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	bfc4      	itt	gt
 800d4ee:	1a9b      	subgt	r3, r3, r2
 800d4f0:	18ed      	addgt	r5, r5, r3
 800d4f2:	2600      	movs	r6, #0
 800d4f4:	341a      	adds	r4, #26
 800d4f6:	42b5      	cmp	r5, r6
 800d4f8:	d11a      	bne.n	800d530 <_printf_common+0xc8>
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	e008      	b.n	800d510 <_printf_common+0xa8>
 800d4fe:	2301      	movs	r3, #1
 800d500:	4652      	mov	r2, sl
 800d502:	4649      	mov	r1, r9
 800d504:	4638      	mov	r0, r7
 800d506:	47c0      	blx	r8
 800d508:	3001      	adds	r0, #1
 800d50a:	d103      	bne.n	800d514 <_printf_common+0xac>
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d514:	3501      	adds	r5, #1
 800d516:	e7c6      	b.n	800d4a6 <_printf_common+0x3e>
 800d518:	18e1      	adds	r1, r4, r3
 800d51a:	1c5a      	adds	r2, r3, #1
 800d51c:	2030      	movs	r0, #48	; 0x30
 800d51e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d522:	4422      	add	r2, r4
 800d524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d52c:	3302      	adds	r3, #2
 800d52e:	e7c7      	b.n	800d4c0 <_printf_common+0x58>
 800d530:	2301      	movs	r3, #1
 800d532:	4622      	mov	r2, r4
 800d534:	4649      	mov	r1, r9
 800d536:	4638      	mov	r0, r7
 800d538:	47c0      	blx	r8
 800d53a:	3001      	adds	r0, #1
 800d53c:	d0e6      	beq.n	800d50c <_printf_common+0xa4>
 800d53e:	3601      	adds	r6, #1
 800d540:	e7d9      	b.n	800d4f6 <_printf_common+0x8e>
	...

0800d544 <_printf_i>:
 800d544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d548:	7e0f      	ldrb	r7, [r1, #24]
 800d54a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d54c:	2f78      	cmp	r7, #120	; 0x78
 800d54e:	4691      	mov	r9, r2
 800d550:	4680      	mov	r8, r0
 800d552:	460c      	mov	r4, r1
 800d554:	469a      	mov	sl, r3
 800d556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d55a:	d807      	bhi.n	800d56c <_printf_i+0x28>
 800d55c:	2f62      	cmp	r7, #98	; 0x62
 800d55e:	d80a      	bhi.n	800d576 <_printf_i+0x32>
 800d560:	2f00      	cmp	r7, #0
 800d562:	f000 80d8 	beq.w	800d716 <_printf_i+0x1d2>
 800d566:	2f58      	cmp	r7, #88	; 0x58
 800d568:	f000 80a3 	beq.w	800d6b2 <_printf_i+0x16e>
 800d56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d574:	e03a      	b.n	800d5ec <_printf_i+0xa8>
 800d576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d57a:	2b15      	cmp	r3, #21
 800d57c:	d8f6      	bhi.n	800d56c <_printf_i+0x28>
 800d57e:	a101      	add	r1, pc, #4	; (adr r1, 800d584 <_printf_i+0x40>)
 800d580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d584:	0800d5dd 	.word	0x0800d5dd
 800d588:	0800d5f1 	.word	0x0800d5f1
 800d58c:	0800d56d 	.word	0x0800d56d
 800d590:	0800d56d 	.word	0x0800d56d
 800d594:	0800d56d 	.word	0x0800d56d
 800d598:	0800d56d 	.word	0x0800d56d
 800d59c:	0800d5f1 	.word	0x0800d5f1
 800d5a0:	0800d56d 	.word	0x0800d56d
 800d5a4:	0800d56d 	.word	0x0800d56d
 800d5a8:	0800d56d 	.word	0x0800d56d
 800d5ac:	0800d56d 	.word	0x0800d56d
 800d5b0:	0800d6fd 	.word	0x0800d6fd
 800d5b4:	0800d621 	.word	0x0800d621
 800d5b8:	0800d6df 	.word	0x0800d6df
 800d5bc:	0800d56d 	.word	0x0800d56d
 800d5c0:	0800d56d 	.word	0x0800d56d
 800d5c4:	0800d71f 	.word	0x0800d71f
 800d5c8:	0800d56d 	.word	0x0800d56d
 800d5cc:	0800d621 	.word	0x0800d621
 800d5d0:	0800d56d 	.word	0x0800d56d
 800d5d4:	0800d56d 	.word	0x0800d56d
 800d5d8:	0800d6e7 	.word	0x0800d6e7
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	1d1a      	adds	r2, r3, #4
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	602a      	str	r2, [r5, #0]
 800d5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e0a3      	b.n	800d738 <_printf_i+0x1f4>
 800d5f0:	6820      	ldr	r0, [r4, #0]
 800d5f2:	6829      	ldr	r1, [r5, #0]
 800d5f4:	0606      	lsls	r6, r0, #24
 800d5f6:	f101 0304 	add.w	r3, r1, #4
 800d5fa:	d50a      	bpl.n	800d612 <_printf_i+0xce>
 800d5fc:	680e      	ldr	r6, [r1, #0]
 800d5fe:	602b      	str	r3, [r5, #0]
 800d600:	2e00      	cmp	r6, #0
 800d602:	da03      	bge.n	800d60c <_printf_i+0xc8>
 800d604:	232d      	movs	r3, #45	; 0x2d
 800d606:	4276      	negs	r6, r6
 800d608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d60c:	485e      	ldr	r0, [pc, #376]	; (800d788 <_printf_i+0x244>)
 800d60e:	230a      	movs	r3, #10
 800d610:	e019      	b.n	800d646 <_printf_i+0x102>
 800d612:	680e      	ldr	r6, [r1, #0]
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d61a:	bf18      	it	ne
 800d61c:	b236      	sxthne	r6, r6
 800d61e:	e7ef      	b.n	800d600 <_printf_i+0xbc>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	6820      	ldr	r0, [r4, #0]
 800d624:	1d19      	adds	r1, r3, #4
 800d626:	6029      	str	r1, [r5, #0]
 800d628:	0601      	lsls	r1, r0, #24
 800d62a:	d501      	bpl.n	800d630 <_printf_i+0xec>
 800d62c:	681e      	ldr	r6, [r3, #0]
 800d62e:	e002      	b.n	800d636 <_printf_i+0xf2>
 800d630:	0646      	lsls	r6, r0, #25
 800d632:	d5fb      	bpl.n	800d62c <_printf_i+0xe8>
 800d634:	881e      	ldrh	r6, [r3, #0]
 800d636:	4854      	ldr	r0, [pc, #336]	; (800d788 <_printf_i+0x244>)
 800d638:	2f6f      	cmp	r7, #111	; 0x6f
 800d63a:	bf0c      	ite	eq
 800d63c:	2308      	moveq	r3, #8
 800d63e:	230a      	movne	r3, #10
 800d640:	2100      	movs	r1, #0
 800d642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d646:	6865      	ldr	r5, [r4, #4]
 800d648:	60a5      	str	r5, [r4, #8]
 800d64a:	2d00      	cmp	r5, #0
 800d64c:	bfa2      	ittt	ge
 800d64e:	6821      	ldrge	r1, [r4, #0]
 800d650:	f021 0104 	bicge.w	r1, r1, #4
 800d654:	6021      	strge	r1, [r4, #0]
 800d656:	b90e      	cbnz	r6, 800d65c <_printf_i+0x118>
 800d658:	2d00      	cmp	r5, #0
 800d65a:	d04d      	beq.n	800d6f8 <_printf_i+0x1b4>
 800d65c:	4615      	mov	r5, r2
 800d65e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d662:	fb03 6711 	mls	r7, r3, r1, r6
 800d666:	5dc7      	ldrb	r7, [r0, r7]
 800d668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d66c:	4637      	mov	r7, r6
 800d66e:	42bb      	cmp	r3, r7
 800d670:	460e      	mov	r6, r1
 800d672:	d9f4      	bls.n	800d65e <_printf_i+0x11a>
 800d674:	2b08      	cmp	r3, #8
 800d676:	d10b      	bne.n	800d690 <_printf_i+0x14c>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	07de      	lsls	r6, r3, #31
 800d67c:	d508      	bpl.n	800d690 <_printf_i+0x14c>
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6861      	ldr	r1, [r4, #4]
 800d682:	4299      	cmp	r1, r3
 800d684:	bfde      	ittt	le
 800d686:	2330      	movle	r3, #48	; 0x30
 800d688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d68c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d690:	1b52      	subs	r2, r2, r5
 800d692:	6122      	str	r2, [r4, #16]
 800d694:	f8cd a000 	str.w	sl, [sp]
 800d698:	464b      	mov	r3, r9
 800d69a:	aa03      	add	r2, sp, #12
 800d69c:	4621      	mov	r1, r4
 800d69e:	4640      	mov	r0, r8
 800d6a0:	f7ff fee2 	bl	800d468 <_printf_common>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d14c      	bne.n	800d742 <_printf_i+0x1fe>
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6ac:	b004      	add	sp, #16
 800d6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b2:	4835      	ldr	r0, [pc, #212]	; (800d788 <_printf_i+0x244>)
 800d6b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d6b8:	6829      	ldr	r1, [r5, #0]
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6c0:	6029      	str	r1, [r5, #0]
 800d6c2:	061d      	lsls	r5, r3, #24
 800d6c4:	d514      	bpl.n	800d6f0 <_printf_i+0x1ac>
 800d6c6:	07df      	lsls	r7, r3, #31
 800d6c8:	bf44      	itt	mi
 800d6ca:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ce:	6023      	strmi	r3, [r4, #0]
 800d6d0:	b91e      	cbnz	r6, 800d6da <_printf_i+0x196>
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	f023 0320 	bic.w	r3, r3, #32
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	2310      	movs	r3, #16
 800d6dc:	e7b0      	b.n	800d640 <_printf_i+0xfc>
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	f043 0320 	orr.w	r3, r3, #32
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	2378      	movs	r3, #120	; 0x78
 800d6e8:	4828      	ldr	r0, [pc, #160]	; (800d78c <_printf_i+0x248>)
 800d6ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6ee:	e7e3      	b.n	800d6b8 <_printf_i+0x174>
 800d6f0:	0659      	lsls	r1, r3, #25
 800d6f2:	bf48      	it	mi
 800d6f4:	b2b6      	uxthmi	r6, r6
 800d6f6:	e7e6      	b.n	800d6c6 <_printf_i+0x182>
 800d6f8:	4615      	mov	r5, r2
 800d6fa:	e7bb      	b.n	800d674 <_printf_i+0x130>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	6826      	ldr	r6, [r4, #0]
 800d700:	6961      	ldr	r1, [r4, #20]
 800d702:	1d18      	adds	r0, r3, #4
 800d704:	6028      	str	r0, [r5, #0]
 800d706:	0635      	lsls	r5, r6, #24
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	d501      	bpl.n	800d710 <_printf_i+0x1cc>
 800d70c:	6019      	str	r1, [r3, #0]
 800d70e:	e002      	b.n	800d716 <_printf_i+0x1d2>
 800d710:	0670      	lsls	r0, r6, #25
 800d712:	d5fb      	bpl.n	800d70c <_printf_i+0x1c8>
 800d714:	8019      	strh	r1, [r3, #0]
 800d716:	2300      	movs	r3, #0
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	4615      	mov	r5, r2
 800d71c:	e7ba      	b.n	800d694 <_printf_i+0x150>
 800d71e:	682b      	ldr	r3, [r5, #0]
 800d720:	1d1a      	adds	r2, r3, #4
 800d722:	602a      	str	r2, [r5, #0]
 800d724:	681d      	ldr	r5, [r3, #0]
 800d726:	6862      	ldr	r2, [r4, #4]
 800d728:	2100      	movs	r1, #0
 800d72a:	4628      	mov	r0, r5
 800d72c:	f7f2 fde8 	bl	8000300 <memchr>
 800d730:	b108      	cbz	r0, 800d736 <_printf_i+0x1f2>
 800d732:	1b40      	subs	r0, r0, r5
 800d734:	6060      	str	r0, [r4, #4]
 800d736:	6863      	ldr	r3, [r4, #4]
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	2300      	movs	r3, #0
 800d73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d740:	e7a8      	b.n	800d694 <_printf_i+0x150>
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	462a      	mov	r2, r5
 800d746:	4649      	mov	r1, r9
 800d748:	4640      	mov	r0, r8
 800d74a:	47d0      	blx	sl
 800d74c:	3001      	adds	r0, #1
 800d74e:	d0ab      	beq.n	800d6a8 <_printf_i+0x164>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	079b      	lsls	r3, r3, #30
 800d754:	d413      	bmi.n	800d77e <_printf_i+0x23a>
 800d756:	68e0      	ldr	r0, [r4, #12]
 800d758:	9b03      	ldr	r3, [sp, #12]
 800d75a:	4298      	cmp	r0, r3
 800d75c:	bfb8      	it	lt
 800d75e:	4618      	movlt	r0, r3
 800d760:	e7a4      	b.n	800d6ac <_printf_i+0x168>
 800d762:	2301      	movs	r3, #1
 800d764:	4632      	mov	r2, r6
 800d766:	4649      	mov	r1, r9
 800d768:	4640      	mov	r0, r8
 800d76a:	47d0      	blx	sl
 800d76c:	3001      	adds	r0, #1
 800d76e:	d09b      	beq.n	800d6a8 <_printf_i+0x164>
 800d770:	3501      	adds	r5, #1
 800d772:	68e3      	ldr	r3, [r4, #12]
 800d774:	9903      	ldr	r1, [sp, #12]
 800d776:	1a5b      	subs	r3, r3, r1
 800d778:	42ab      	cmp	r3, r5
 800d77a:	dcf2      	bgt.n	800d762 <_printf_i+0x21e>
 800d77c:	e7eb      	b.n	800d756 <_printf_i+0x212>
 800d77e:	2500      	movs	r5, #0
 800d780:	f104 0619 	add.w	r6, r4, #25
 800d784:	e7f5      	b.n	800d772 <_printf_i+0x22e>
 800d786:	bf00      	nop
 800d788:	08021d19 	.word	0x08021d19
 800d78c:	08021d2a 	.word	0x08021d2a

0800d790 <__retarget_lock_acquire_recursive>:
 800d790:	4770      	bx	lr

0800d792 <__retarget_lock_release_recursive>:
 800d792:	4770      	bx	lr

0800d794 <memmove>:
 800d794:	4288      	cmp	r0, r1
 800d796:	b510      	push	{r4, lr}
 800d798:	eb01 0402 	add.w	r4, r1, r2
 800d79c:	d902      	bls.n	800d7a4 <memmove+0x10>
 800d79e:	4284      	cmp	r4, r0
 800d7a0:	4623      	mov	r3, r4
 800d7a2:	d807      	bhi.n	800d7b4 <memmove+0x20>
 800d7a4:	1e43      	subs	r3, r0, #1
 800d7a6:	42a1      	cmp	r1, r4
 800d7a8:	d008      	beq.n	800d7bc <memmove+0x28>
 800d7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7b2:	e7f8      	b.n	800d7a6 <memmove+0x12>
 800d7b4:	4402      	add	r2, r0
 800d7b6:	4601      	mov	r1, r0
 800d7b8:	428a      	cmp	r2, r1
 800d7ba:	d100      	bne.n	800d7be <memmove+0x2a>
 800d7bc:	bd10      	pop	{r4, pc}
 800d7be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7c6:	e7f7      	b.n	800d7b8 <memmove+0x24>

0800d7c8 <_malloc_usable_size_r>:
 800d7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7cc:	1f18      	subs	r0, r3, #4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bfbc      	itt	lt
 800d7d2:	580b      	ldrlt	r3, [r1, r0]
 800d7d4:	18c0      	addlt	r0, r0, r3
 800d7d6:	4770      	bx	lr

0800d7d8 <with_errnof>:
 800d7d8:	b513      	push	{r0, r1, r4, lr}
 800d7da:	4604      	mov	r4, r0
 800d7dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d7e0:	f7ff fb5c 	bl	800ce9c <__errno>
 800d7e4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d7e8:	6004      	str	r4, [r0, #0]
 800d7ea:	b002      	add	sp, #8
 800d7ec:	bd10      	pop	{r4, pc}

0800d7ee <xflowf>:
 800d7ee:	b130      	cbz	r0, 800d7fe <xflowf+0x10>
 800d7f0:	eef1 7a40 	vneg.f32	s15, s0
 800d7f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d7f8:	2022      	movs	r0, #34	; 0x22
 800d7fa:	f7ff bfed 	b.w	800d7d8 <with_errnof>
 800d7fe:	eef0 7a40 	vmov.f32	s15, s0
 800d802:	e7f7      	b.n	800d7f4 <xflowf+0x6>

0800d804 <__math_uflowf>:
 800d804:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d80c <__math_uflowf+0x8>
 800d808:	f7ff bff1 	b.w	800d7ee <xflowf>
 800d80c:	10000000 	.word	0x10000000

0800d810 <__math_may_uflowf>:
 800d810:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d818 <__math_may_uflowf+0x8>
 800d814:	f7ff bfeb 	b.w	800d7ee <xflowf>
 800d818:	1a200000 	.word	0x1a200000

0800d81c <__math_oflowf>:
 800d81c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d824 <__math_oflowf+0x8>
 800d820:	f7ff bfe5 	b.w	800d7ee <xflowf>
 800d824:	70000000 	.word	0x70000000

0800d828 <__math_divzerof>:
 800d828:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d82c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d830:	2800      	cmp	r0, #0
 800d832:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d836:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d844 <__math_divzerof+0x1c>
 800d83a:	2022      	movs	r0, #34	; 0x22
 800d83c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d840:	f7ff bfca 	b.w	800d7d8 <with_errnof>
 800d844:	00000000 	.word	0x00000000

0800d848 <__math_invalidf>:
 800d848:	eef0 7a40 	vmov.f32	s15, s0
 800d84c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d850:	eef4 7a67 	vcmp.f32	s15, s15
 800d854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d858:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d85c:	d602      	bvs.n	800d864 <__math_invalidf+0x1c>
 800d85e:	2021      	movs	r0, #33	; 0x21
 800d860:	f7ff bfba 	b.w	800d7d8 <with_errnof>
 800d864:	4770      	bx	lr
	...

0800d868 <cos>:
 800d868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d86a:	eeb0 7b40 	vmov.f64	d7, d0
 800d86e:	ee17 3a90 	vmov	r3, s15
 800d872:	4a21      	ldr	r2, [pc, #132]	; (800d8f8 <cos+0x90>)
 800d874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d878:	4293      	cmp	r3, r2
 800d87a:	dc06      	bgt.n	800d88a <cos+0x22>
 800d87c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800d8f0 <cos+0x88>
 800d880:	b005      	add	sp, #20
 800d882:	f85d eb04 	ldr.w	lr, [sp], #4
 800d886:	f000 bb03 	b.w	800de90 <__kernel_cos>
 800d88a:	4a1c      	ldr	r2, [pc, #112]	; (800d8fc <cos+0x94>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	dd04      	ble.n	800d89a <cos+0x32>
 800d890:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d894:	b005      	add	sp, #20
 800d896:	f85d fb04 	ldr.w	pc, [sp], #4
 800d89a:	4668      	mov	r0, sp
 800d89c:	f000 f958 	bl	800db50 <__ieee754_rem_pio2>
 800d8a0:	f000 0003 	and.w	r0, r0, #3
 800d8a4:	2801      	cmp	r0, #1
 800d8a6:	d009      	beq.n	800d8bc <cos+0x54>
 800d8a8:	2802      	cmp	r0, #2
 800d8aa:	d010      	beq.n	800d8ce <cos+0x66>
 800d8ac:	b9b0      	cbnz	r0, 800d8dc <cos+0x74>
 800d8ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8b2:	ed9d 0b00 	vldr	d0, [sp]
 800d8b6:	f000 faeb 	bl	800de90 <__kernel_cos>
 800d8ba:	e7eb      	b.n	800d894 <cos+0x2c>
 800d8bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8c0:	ed9d 0b00 	vldr	d0, [sp]
 800d8c4:	f000 fde8 	bl	800e498 <__kernel_sin>
 800d8c8:	eeb1 0b40 	vneg.f64	d0, d0
 800d8cc:	e7e2      	b.n	800d894 <cos+0x2c>
 800d8ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8d2:	ed9d 0b00 	vldr	d0, [sp]
 800d8d6:	f000 fadb 	bl	800de90 <__kernel_cos>
 800d8da:	e7f5      	b.n	800d8c8 <cos+0x60>
 800d8dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8e0:	ed9d 0b00 	vldr	d0, [sp]
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f000 fdd7 	bl	800e498 <__kernel_sin>
 800d8ea:	e7d3      	b.n	800d894 <cos+0x2c>
 800d8ec:	f3af 8000 	nop.w
	...
 800d8f8:	3fe921fb 	.word	0x3fe921fb
 800d8fc:	7fefffff 	.word	0x7fefffff

0800d900 <expf>:
 800d900:	ee10 2a10 	vmov	r2, s0
 800d904:	f240 412a 	movw	r1, #1066	; 0x42a
 800d908:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800d90c:	428b      	cmp	r3, r1
 800d90e:	b430      	push	{r4, r5}
 800d910:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800d914:	d92a      	bls.n	800d96c <expf+0x6c>
 800d916:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800d91a:	d058      	beq.n	800d9ce <expf+0xce>
 800d91c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800d920:	d303      	bcc.n	800d92a <expf+0x2a>
 800d922:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d926:	bc30      	pop	{r4, r5}
 800d928:	4770      	bx	lr
 800d92a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d9d4 <expf+0xd4>
 800d92e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d936:	dd03      	ble.n	800d940 <expf+0x40>
 800d938:	bc30      	pop	{r4, r5}
 800d93a:	2000      	movs	r0, #0
 800d93c:	f7ff bf6e 	b.w	800d81c <__math_oflowf>
 800d940:	eddf 7a25 	vldr	s15, [pc, #148]	; 800d9d8 <expf+0xd8>
 800d944:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94c:	d503      	bpl.n	800d956 <expf+0x56>
 800d94e:	bc30      	pop	{r4, r5}
 800d950:	2000      	movs	r0, #0
 800d952:	f7ff bf57 	b.w	800d804 <__math_uflowf>
 800d956:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d9dc <expf+0xdc>
 800d95a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d962:	d503      	bpl.n	800d96c <expf+0x6c>
 800d964:	bc30      	pop	{r4, r5}
 800d966:	2000      	movs	r0, #0
 800d968:	f7ff bf52 	b.w	800d810 <__math_may_uflowf>
 800d96c:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <expf+0xe0>)
 800d96e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d972:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800d976:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800d97a:	eeb0 7b44 	vmov.f64	d7, d4
 800d97e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d982:	ee17 0a10 	vmov	r0, s14
 800d986:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d98a:	f000 021f 	and.w	r2, r0, #31
 800d98e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800d992:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800d996:	ee27 4b07 	vmul.f64	d4, d7, d7
 800d99a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800d99e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800d9a2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d9a6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800d9aa:	684d      	ldr	r5, [r1, #4]
 800d9ac:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	190a      	adds	r2, r1, r4
 800d9b4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800d9b8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d9bc:	ec43 2b17 	vmov	d7, r2, r3
 800d9c0:	eea6 0b04 	vfma.f64	d0, d6, d4
 800d9c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d9c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d9cc:	e7ab      	b.n	800d926 <expf+0x26>
 800d9ce:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800d9e4 <expf+0xe4>
 800d9d2:	e7a8      	b.n	800d926 <expf+0x26>
 800d9d4:	42b17217 	.word	0x42b17217
 800d9d8:	c2cff1b4 	.word	0xc2cff1b4
 800d9dc:	c2ce8ecf 	.word	0xc2ce8ecf
 800d9e0:	08021d40 	.word	0x08021d40
 800d9e4:	00000000 	.word	0x00000000

0800d9e8 <logf>:
 800d9e8:	ee10 3a10 	vmov	r3, s0
 800d9ec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d9f0:	b410      	push	{r4}
 800d9f2:	d055      	beq.n	800daa0 <logf+0xb8>
 800d9f4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800d9f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800d9fc:	d31a      	bcc.n	800da34 <logf+0x4c>
 800d9fe:	005a      	lsls	r2, r3, #1
 800da00:	d104      	bne.n	800da0c <logf+0x24>
 800da02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da06:	2001      	movs	r0, #1
 800da08:	f7ff bf0e 	b.w	800d828 <__math_divzerof>
 800da0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da10:	d043      	beq.n	800da9a <logf+0xb2>
 800da12:	2b00      	cmp	r3, #0
 800da14:	db02      	blt.n	800da1c <logf+0x34>
 800da16:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800da1a:	d303      	bcc.n	800da24 <logf+0x3c>
 800da1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da20:	f7ff bf12 	b.w	800d848 <__math_invalidf>
 800da24:	eddf 7a20 	vldr	s15, [pc, #128]	; 800daa8 <logf+0xc0>
 800da28:	ee20 0a27 	vmul.f32	s0, s0, s15
 800da2c:	ee10 3a10 	vmov	r3, s0
 800da30:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800da34:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800da38:	491c      	ldr	r1, [pc, #112]	; (800daac <logf+0xc4>)
 800da3a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800da3e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800da42:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800da46:	0dd4      	lsrs	r4, r2, #23
 800da48:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800da4c:	05e4      	lsls	r4, r4, #23
 800da4e:	ed90 6b00 	vldr	d6, [r0]
 800da52:	1b1b      	subs	r3, r3, r4
 800da54:	ee07 3a90 	vmov	s15, r3
 800da58:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800da5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800da60:	15d2      	asrs	r2, r2, #23
 800da62:	eea6 0b07 	vfma.f64	d0, d6, d7
 800da66:	ed90 6b02 	vldr	d6, [r0, #8]
 800da6a:	ee20 4b00 	vmul.f64	d4, d0, d0
 800da6e:	ee07 2a90 	vmov	s15, r2
 800da72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da76:	eea7 6b05 	vfma.f64	d6, d7, d5
 800da7a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800da7e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800da82:	eea5 7b00 	vfma.f64	d7, d5, d0
 800da86:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800da8a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800da8e:	eea5 7b04 	vfma.f64	d7, d5, d4
 800da92:	eea4 0b07 	vfma.f64	d0, d4, d7
 800da96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800da9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da9e:	4770      	bx	lr
 800daa0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800dab0 <logf+0xc8>
 800daa4:	e7f9      	b.n	800da9a <logf+0xb2>
 800daa6:	bf00      	nop
 800daa8:	4b000000 	.word	0x4b000000
 800daac:	08021e88 	.word	0x08021e88
 800dab0:	00000000 	.word	0x00000000

0800dab4 <log10f>:
 800dab4:	b508      	push	{r3, lr}
 800dab6:	ed2d 8b02 	vpush	{d8}
 800daba:	eeb0 8a40 	vmov.f32	s16, s0
 800dabe:	f000 f98b 	bl	800ddd8 <__ieee754_log10f>
 800dac2:	eeb4 8a48 	vcmp.f32	s16, s16
 800dac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daca:	d60f      	bvs.n	800daec <log10f+0x38>
 800dacc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad4:	d80a      	bhi.n	800daec <log10f+0x38>
 800dad6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dade:	d108      	bne.n	800daf2 <log10f+0x3e>
 800dae0:	f7ff f9dc 	bl	800ce9c <__errno>
 800dae4:	2322      	movs	r3, #34	; 0x22
 800dae6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800db08 <log10f+0x54>
 800daea:	6003      	str	r3, [r0, #0]
 800daec:	ecbd 8b02 	vpop	{d8}
 800daf0:	bd08      	pop	{r3, pc}
 800daf2:	f7ff f9d3 	bl	800ce9c <__errno>
 800daf6:	ecbd 8b02 	vpop	{d8}
 800dafa:	2321      	movs	r3, #33	; 0x21
 800dafc:	6003      	str	r3, [r0, #0]
 800dafe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db02:	4802      	ldr	r0, [pc, #8]	; (800db0c <log10f+0x58>)
 800db04:	f000 be2a 	b.w	800e75c <nanf>
 800db08:	ff800000 	.word	0xff800000
 800db0c:	08021d0d 	.word	0x08021d0d

0800db10 <sqrtf>:
 800db10:	b508      	push	{r3, lr}
 800db12:	ed2d 8b02 	vpush	{d8}
 800db16:	eeb0 8a40 	vmov.f32	s16, s0
 800db1a:	f000 f9b5 	bl	800de88 <__ieee754_sqrtf>
 800db1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800db22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db26:	d60c      	bvs.n	800db42 <sqrtf+0x32>
 800db28:	eddf 8a07 	vldr	s17, [pc, #28]	; 800db48 <sqrtf+0x38>
 800db2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800db30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db34:	d505      	bpl.n	800db42 <sqrtf+0x32>
 800db36:	f7ff f9b1 	bl	800ce9c <__errno>
 800db3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db3e:	2321      	movs	r3, #33	; 0x21
 800db40:	6003      	str	r3, [r0, #0]
 800db42:	ecbd 8b02 	vpop	{d8}
 800db46:	bd08      	pop	{r3, pc}
	...

0800db50 <__ieee754_rem_pio2>:
 800db50:	b570      	push	{r4, r5, r6, lr}
 800db52:	eeb0 7b40 	vmov.f64	d7, d0
 800db56:	ee17 5a90 	vmov	r5, s15
 800db5a:	4b99      	ldr	r3, [pc, #612]	; (800ddc0 <__ieee754_rem_pio2+0x270>)
 800db5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db60:	429e      	cmp	r6, r3
 800db62:	b088      	sub	sp, #32
 800db64:	4604      	mov	r4, r0
 800db66:	dc07      	bgt.n	800db78 <__ieee754_rem_pio2+0x28>
 800db68:	2200      	movs	r2, #0
 800db6a:	2300      	movs	r3, #0
 800db6c:	ed84 0b00 	vstr	d0, [r4]
 800db70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db74:	2000      	movs	r0, #0
 800db76:	e01b      	b.n	800dbb0 <__ieee754_rem_pio2+0x60>
 800db78:	4b92      	ldr	r3, [pc, #584]	; (800ddc4 <__ieee754_rem_pio2+0x274>)
 800db7a:	429e      	cmp	r6, r3
 800db7c:	dc3b      	bgt.n	800dbf6 <__ieee754_rem_pio2+0xa6>
 800db7e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800db82:	2d00      	cmp	r5, #0
 800db84:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800dd80 <__ieee754_rem_pio2+0x230>
 800db88:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800db8c:	dd19      	ble.n	800dbc2 <__ieee754_rem_pio2+0x72>
 800db8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800db92:	429e      	cmp	r6, r3
 800db94:	d00e      	beq.n	800dbb4 <__ieee754_rem_pio2+0x64>
 800db96:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800dd88 <__ieee754_rem_pio2+0x238>
 800db9a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800db9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dba2:	ed84 5b00 	vstr	d5, [r4]
 800dba6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dbaa:	ed84 7b02 	vstr	d7, [r4, #8]
 800dbae:	2001      	movs	r0, #1
 800dbb0:	b008      	add	sp, #32
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}
 800dbb4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dd90 <__ieee754_rem_pio2+0x240>
 800dbb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dbbc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dd98 <__ieee754_rem_pio2+0x248>
 800dbc0:	e7eb      	b.n	800db9a <__ieee754_rem_pio2+0x4a>
 800dbc2:	429e      	cmp	r6, r3
 800dbc4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dbc8:	d00e      	beq.n	800dbe8 <__ieee754_rem_pio2+0x98>
 800dbca:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800dd88 <__ieee754_rem_pio2+0x238>
 800dbce:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dbd2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dbd6:	ed84 5b00 	vstr	d5, [r4]
 800dbda:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dbde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbe2:	ed84 7b02 	vstr	d7, [r4, #8]
 800dbe6:	e7e3      	b.n	800dbb0 <__ieee754_rem_pio2+0x60>
 800dbe8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dd90 <__ieee754_rem_pio2+0x240>
 800dbec:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dbf0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dd98 <__ieee754_rem_pio2+0x248>
 800dbf4:	e7eb      	b.n	800dbce <__ieee754_rem_pio2+0x7e>
 800dbf6:	4b74      	ldr	r3, [pc, #464]	; (800ddc8 <__ieee754_rem_pio2+0x278>)
 800dbf8:	429e      	cmp	r6, r3
 800dbfa:	dc70      	bgt.n	800dcde <__ieee754_rem_pio2+0x18e>
 800dbfc:	f000 fca4 	bl	800e548 <fabs>
 800dc00:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dc04:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800dda0 <__ieee754_rem_pio2+0x250>
 800dc08:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dc0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dc10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dc14:	ee17 0a90 	vmov	r0, s15
 800dc18:	eeb1 4b45 	vneg.f64	d4, d5
 800dc1c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dd80 <__ieee754_rem_pio2+0x230>
 800dc20:	eea5 0b47 	vfms.f64	d0, d5, d7
 800dc24:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800dd88 <__ieee754_rem_pio2+0x238>
 800dc28:	281f      	cmp	r0, #31
 800dc2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dc2e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dc32:	dc08      	bgt.n	800dc46 <__ieee754_rem_pio2+0xf6>
 800dc34:	4b65      	ldr	r3, [pc, #404]	; (800ddcc <__ieee754_rem_pio2+0x27c>)
 800dc36:	1e42      	subs	r2, r0, #1
 800dc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc3c:	42b3      	cmp	r3, r6
 800dc3e:	d002      	beq.n	800dc46 <__ieee754_rem_pio2+0xf6>
 800dc40:	ed84 6b00 	vstr	d6, [r4]
 800dc44:	e026      	b.n	800dc94 <__ieee754_rem_pio2+0x144>
 800dc46:	ee16 3a90 	vmov	r3, s13
 800dc4a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dc4e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800dc52:	2b10      	cmp	r3, #16
 800dc54:	ea4f 5226 	mov.w	r2, r6, asr #20
 800dc58:	ddf2      	ble.n	800dc40 <__ieee754_rem_pio2+0xf0>
 800dc5a:	eeb0 6b40 	vmov.f64	d6, d0
 800dc5e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800dd90 <__ieee754_rem_pio2+0x240>
 800dc62:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dd98 <__ieee754_rem_pio2+0x248>
 800dc66:	eea4 6b07 	vfma.f64	d6, d4, d7
 800dc6a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dc6e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dc72:	eeb0 7b40 	vmov.f64	d7, d0
 800dc76:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dc7a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dc7e:	ee13 3a90 	vmov	r3, s7
 800dc82:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	2b31      	cmp	r3, #49	; 0x31
 800dc8a:	dc17      	bgt.n	800dcbc <__ieee754_rem_pio2+0x16c>
 800dc8c:	eeb0 0b46 	vmov.f64	d0, d6
 800dc90:	ed84 3b00 	vstr	d3, [r4]
 800dc94:	ed94 6b00 	vldr	d6, [r4]
 800dc98:	2d00      	cmp	r5, #0
 800dc9a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dc9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dca2:	ed84 0b02 	vstr	d0, [r4, #8]
 800dca6:	da83      	bge.n	800dbb0 <__ieee754_rem_pio2+0x60>
 800dca8:	eeb1 6b46 	vneg.f64	d6, d6
 800dcac:	eeb1 0b40 	vneg.f64	d0, d0
 800dcb0:	ed84 6b00 	vstr	d6, [r4]
 800dcb4:	ed84 0b02 	vstr	d0, [r4, #8]
 800dcb8:	4240      	negs	r0, r0
 800dcba:	e779      	b.n	800dbb0 <__ieee754_rem_pio2+0x60>
 800dcbc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800dda8 <__ieee754_rem_pio2+0x258>
 800dcc0:	eeb0 0b46 	vmov.f64	d0, d6
 800dcc4:	eea4 0b03 	vfma.f64	d0, d4, d3
 800dcc8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800dccc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800ddb0 <__ieee754_rem_pio2+0x260>
 800dcd0:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dcd4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800dcd8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dcdc:	e7b0      	b.n	800dc40 <__ieee754_rem_pio2+0xf0>
 800dcde:	4b3c      	ldr	r3, [pc, #240]	; (800ddd0 <__ieee754_rem_pio2+0x280>)
 800dce0:	429e      	cmp	r6, r3
 800dce2:	dd06      	ble.n	800dcf2 <__ieee754_rem_pio2+0x1a2>
 800dce4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800dce8:	ed80 7b02 	vstr	d7, [r0, #8]
 800dcec:	ed80 7b00 	vstr	d7, [r0]
 800dcf0:	e740      	b.n	800db74 <__ieee754_rem_pio2+0x24>
 800dcf2:	1532      	asrs	r2, r6, #20
 800dcf4:	ee10 0a10 	vmov	r0, s0
 800dcf8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800dcfc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800dd00:	ec41 0b17 	vmov	d7, r0, r1
 800dd04:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dd08:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800ddb8 <__ieee754_rem_pio2+0x268>
 800dd0c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dd10:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd14:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dd18:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dd1c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dd20:	a902      	add	r1, sp, #8
 800dd22:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dd26:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dd2a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dd2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dd32:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dd36:	2603      	movs	r6, #3
 800dd38:	4608      	mov	r0, r1
 800dd3a:	ed91 7b04 	vldr	d7, [r1, #16]
 800dd3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd46:	4633      	mov	r3, r6
 800dd48:	f1a1 0108 	sub.w	r1, r1, #8
 800dd4c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800dd50:	d0f3      	beq.n	800dd3a <__ieee754_rem_pio2+0x1ea>
 800dd52:	4920      	ldr	r1, [pc, #128]	; (800ddd4 <__ieee754_rem_pio2+0x284>)
 800dd54:	9101      	str	r1, [sp, #4]
 800dd56:	2102      	movs	r1, #2
 800dd58:	9100      	str	r1, [sp, #0]
 800dd5a:	4621      	mov	r1, r4
 800dd5c:	f000 f904 	bl	800df68 <__kernel_rem_pio2>
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	f6bf af25 	bge.w	800dbb0 <__ieee754_rem_pio2+0x60>
 800dd66:	ed94 7b00 	vldr	d7, [r4]
 800dd6a:	eeb1 7b47 	vneg.f64	d7, d7
 800dd6e:	ed84 7b00 	vstr	d7, [r4]
 800dd72:	ed94 7b02 	vldr	d7, [r4, #8]
 800dd76:	eeb1 7b47 	vneg.f64	d7, d7
 800dd7a:	ed84 7b02 	vstr	d7, [r4, #8]
 800dd7e:	e79b      	b.n	800dcb8 <__ieee754_rem_pio2+0x168>
 800dd80:	54400000 	.word	0x54400000
 800dd84:	3ff921fb 	.word	0x3ff921fb
 800dd88:	1a626331 	.word	0x1a626331
 800dd8c:	3dd0b461 	.word	0x3dd0b461
 800dd90:	1a600000 	.word	0x1a600000
 800dd94:	3dd0b461 	.word	0x3dd0b461
 800dd98:	2e037073 	.word	0x2e037073
 800dd9c:	3ba3198a 	.word	0x3ba3198a
 800dda0:	6dc9c883 	.word	0x6dc9c883
 800dda4:	3fe45f30 	.word	0x3fe45f30
 800dda8:	2e000000 	.word	0x2e000000
 800ddac:	3ba3198a 	.word	0x3ba3198a
 800ddb0:	252049c1 	.word	0x252049c1
 800ddb4:	397b839a 	.word	0x397b839a
 800ddb8:	00000000 	.word	0x00000000
 800ddbc:	41700000 	.word	0x41700000
 800ddc0:	3fe921fb 	.word	0x3fe921fb
 800ddc4:	4002d97b 	.word	0x4002d97b
 800ddc8:	413921fb 	.word	0x413921fb
 800ddcc:	08021fa8 	.word	0x08021fa8
 800ddd0:	7fefffff 	.word	0x7fefffff
 800ddd4:	08022028 	.word	0x08022028

0800ddd8 <__ieee754_log10f>:
 800ddd8:	b508      	push	{r3, lr}
 800ddda:	ee10 2a10 	vmov	r2, s0
 800ddde:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dde2:	ed2d 8b02 	vpush	{d8}
 800dde6:	d108      	bne.n	800ddfa <__ieee754_log10f+0x22>
 800dde8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800de70 <__ieee754_log10f+0x98>
 800ddec:	eddf 7a21 	vldr	s15, [pc, #132]	; 800de74 <__ieee754_log10f+0x9c>
 800ddf0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ddf4:	ecbd 8b02 	vpop	{d8}
 800ddf8:	bd08      	pop	{r3, pc}
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	da02      	bge.n	800de04 <__ieee754_log10f+0x2c>
 800ddfe:	ee30 7a40 	vsub.f32	s14, s0, s0
 800de02:	e7f3      	b.n	800ddec <__ieee754_log10f+0x14>
 800de04:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800de08:	db02      	blt.n	800de10 <__ieee754_log10f+0x38>
 800de0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de0e:	e7f1      	b.n	800ddf4 <__ieee754_log10f+0x1c>
 800de10:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800de14:	bfbf      	itttt	lt
 800de16:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800de78 <__ieee754_log10f+0xa0>
 800de1a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800de1e:	f06f 0118 	mvnlt.w	r1, #24
 800de22:	ee17 2a90 	vmovlt	r2, s15
 800de26:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800de2a:	bfa8      	it	ge
 800de2c:	2100      	movge	r1, #0
 800de2e:	3b7f      	subs	r3, #127	; 0x7f
 800de30:	440b      	add	r3, r1
 800de32:	0fd9      	lsrs	r1, r3, #31
 800de34:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800de38:	ee07 3a90 	vmov	s15, r3
 800de3c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800de40:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800de44:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800de48:	ee00 3a10 	vmov	s0, r3
 800de4c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800de50:	f7ff fdca 	bl	800d9e8 <logf>
 800de54:	eddf 7a09 	vldr	s15, [pc, #36]	; 800de7c <__ieee754_log10f+0xa4>
 800de58:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de5c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800de80 <__ieee754_log10f+0xa8>
 800de60:	eea8 0a27 	vfma.f32	s0, s16, s15
 800de64:	eddf 7a07 	vldr	s15, [pc, #28]	; 800de84 <__ieee754_log10f+0xac>
 800de68:	eea8 0a27 	vfma.f32	s0, s16, s15
 800de6c:	e7c2      	b.n	800ddf4 <__ieee754_log10f+0x1c>
 800de6e:	bf00      	nop
 800de70:	cc000000 	.word	0xcc000000
 800de74:	00000000 	.word	0x00000000
 800de78:	4c000000 	.word	0x4c000000
 800de7c:	3ede5bd9 	.word	0x3ede5bd9
 800de80:	355427db 	.word	0x355427db
 800de84:	3e9a2080 	.word	0x3e9a2080

0800de88 <__ieee754_sqrtf>:
 800de88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800de8c:	4770      	bx	lr
	...

0800de90 <__kernel_cos>:
 800de90:	ee10 1a90 	vmov	r1, s1
 800de94:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800de98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de9c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dea0:	da05      	bge.n	800deae <__kernel_cos+0x1e>
 800dea2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dea6:	ee17 3a90 	vmov	r3, s15
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d03d      	beq.n	800df2a <__kernel_cos+0x9a>
 800deae:	ee20 3b00 	vmul.f64	d3, d0, d0
 800deb2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800df30 <__kernel_cos+0xa0>
 800deb6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800df38 <__kernel_cos+0xa8>
 800deba:	eea3 6b07 	vfma.f64	d6, d3, d7
 800debe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800df40 <__kernel_cos+0xb0>
 800dec2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dec6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800df48 <__kernel_cos+0xb8>
 800deca:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dece:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800df50 <__kernel_cos+0xc0>
 800ded2:	4b23      	ldr	r3, [pc, #140]	; (800df60 <__kernel_cos+0xd0>)
 800ded4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ded8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800df58 <__kernel_cos+0xc8>
 800dedc:	4299      	cmp	r1, r3
 800dede:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dee2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dee6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800deea:	ee23 7b07 	vmul.f64	d7, d3, d7
 800deee:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800def2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800def6:	dc04      	bgt.n	800df02 <__kernel_cos+0x72>
 800def8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800defc:	ee34 0b46 	vsub.f64	d0, d4, d6
 800df00:	4770      	bx	lr
 800df02:	4b18      	ldr	r3, [pc, #96]	; (800df64 <__kernel_cos+0xd4>)
 800df04:	4299      	cmp	r1, r3
 800df06:	dc0d      	bgt.n	800df24 <__kernel_cos+0x94>
 800df08:	2200      	movs	r2, #0
 800df0a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800df0e:	ec43 2b15 	vmov	d5, r2, r3
 800df12:	ee34 0b45 	vsub.f64	d0, d4, d5
 800df16:	ee37 7b45 	vsub.f64	d7, d7, d5
 800df1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800df1e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800df22:	4770      	bx	lr
 800df24:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800df28:	e7f3      	b.n	800df12 <__kernel_cos+0x82>
 800df2a:	eeb0 0b44 	vmov.f64	d0, d4
 800df2e:	4770      	bx	lr
 800df30:	be8838d4 	.word	0xbe8838d4
 800df34:	bda8fae9 	.word	0xbda8fae9
 800df38:	bdb4b1c4 	.word	0xbdb4b1c4
 800df3c:	3e21ee9e 	.word	0x3e21ee9e
 800df40:	809c52ad 	.word	0x809c52ad
 800df44:	be927e4f 	.word	0xbe927e4f
 800df48:	19cb1590 	.word	0x19cb1590
 800df4c:	3efa01a0 	.word	0x3efa01a0
 800df50:	16c15177 	.word	0x16c15177
 800df54:	bf56c16c 	.word	0xbf56c16c
 800df58:	5555554c 	.word	0x5555554c
 800df5c:	3fa55555 	.word	0x3fa55555
 800df60:	3fd33332 	.word	0x3fd33332
 800df64:	3fe90000 	.word	0x3fe90000

0800df68 <__kernel_rem_pio2>:
 800df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6c:	ed2d 8b06 	vpush	{d8-d10}
 800df70:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800df74:	460f      	mov	r7, r1
 800df76:	9002      	str	r0, [sp, #8]
 800df78:	49c5      	ldr	r1, [pc, #788]	; (800e290 <__kernel_rem_pio2+0x328>)
 800df7a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800df7c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800df80:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	f112 0f14 	cmn.w	r2, #20
 800df8a:	bfa8      	it	ge
 800df8c:	2018      	movge	r0, #24
 800df8e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800df92:	bfb8      	it	lt
 800df94:	2000      	movlt	r0, #0
 800df96:	f06f 0417 	mvn.w	r4, #23
 800df9a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e278 <__kernel_rem_pio2+0x310>
 800df9e:	bfa4      	itt	ge
 800dfa0:	f1a2 0a03 	subge.w	sl, r2, #3
 800dfa4:	fb9a f0f0 	sdivge	r0, sl, r0
 800dfa8:	fb00 4404 	mla	r4, r0, r4, r4
 800dfac:	1a46      	subs	r6, r0, r1
 800dfae:	4414      	add	r4, r2
 800dfb0:	eb09 0c01 	add.w	ip, r9, r1
 800dfb4:	ad1a      	add	r5, sp, #104	; 0x68
 800dfb6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4562      	cmp	r2, ip
 800dfbe:	dd10      	ble.n	800dfe2 <__kernel_rem_pio2+0x7a>
 800dfc0:	9a01      	ldr	r2, [sp, #4]
 800dfc2:	ab1a      	add	r3, sp, #104	; 0x68
 800dfc4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dfc8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800dfcc:	f04f 0c00 	mov.w	ip, #0
 800dfd0:	45cc      	cmp	ip, r9
 800dfd2:	dc26      	bgt.n	800e022 <__kernel_rem_pio2+0xba>
 800dfd4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e278 <__kernel_rem_pio2+0x310>
 800dfd8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dfdc:	4616      	mov	r6, r2
 800dfde:	2500      	movs	r5, #0
 800dfe0:	e015      	b.n	800e00e <__kernel_rem_pio2+0xa6>
 800dfe2:	42d6      	cmn	r6, r2
 800dfe4:	d409      	bmi.n	800dffa <__kernel_rem_pio2+0x92>
 800dfe6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800dfea:	ee07 3a90 	vmov	s15, r3
 800dfee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dff2:	eca5 7b02 	vstmia	r5!, {d7}
 800dff6:	3201      	adds	r2, #1
 800dff8:	e7e0      	b.n	800dfbc <__kernel_rem_pio2+0x54>
 800dffa:	eeb0 7b46 	vmov.f64	d7, d6
 800dffe:	e7f8      	b.n	800dff2 <__kernel_rem_pio2+0x8a>
 800e000:	ecb8 5b02 	vldmia	r8!, {d5}
 800e004:	ed96 6b00 	vldr	d6, [r6]
 800e008:	3501      	adds	r5, #1
 800e00a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e00e:	428d      	cmp	r5, r1
 800e010:	f1a6 0608 	sub.w	r6, r6, #8
 800e014:	ddf4      	ble.n	800e000 <__kernel_rem_pio2+0x98>
 800e016:	ecaa 7b02 	vstmia	sl!, {d7}
 800e01a:	f10c 0c01 	add.w	ip, ip, #1
 800e01e:	3208      	adds	r2, #8
 800e020:	e7d6      	b.n	800dfd0 <__kernel_rem_pio2+0x68>
 800e022:	ab06      	add	r3, sp, #24
 800e024:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e280 <__kernel_rem_pio2+0x318>
 800e028:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e288 <__kernel_rem_pio2+0x320>
 800e02c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e030:	9303      	str	r3, [sp, #12]
 800e032:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800e036:	464d      	mov	r5, r9
 800e038:	00eb      	lsls	r3, r5, #3
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	ab92      	add	r3, sp, #584	; 0x248
 800e03e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e042:	f10d 0b18 	add.w	fp, sp, #24
 800e046:	ab6a      	add	r3, sp, #424	; 0x1a8
 800e048:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800e04c:	465e      	mov	r6, fp
 800e04e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e052:	4628      	mov	r0, r5
 800e054:	2800      	cmp	r0, #0
 800e056:	f1a2 0208 	sub.w	r2, r2, #8
 800e05a:	dc4c      	bgt.n	800e0f6 <__kernel_rem_pio2+0x18e>
 800e05c:	4620      	mov	r0, r4
 800e05e:	9105      	str	r1, [sp, #20]
 800e060:	f000 faf2 	bl	800e648 <scalbn>
 800e064:	eeb0 8b40 	vmov.f64	d8, d0
 800e068:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e06c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e070:	f000 fa76 	bl	800e560 <floor>
 800e074:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e078:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e07c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e080:	2c00      	cmp	r4, #0
 800e082:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800e086:	ee17 8a90 	vmov	r8, s15
 800e08a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e08e:	9905      	ldr	r1, [sp, #20]
 800e090:	dd43      	ble.n	800e11a <__kernel_rem_pio2+0x1b2>
 800e092:	1e68      	subs	r0, r5, #1
 800e094:	ab06      	add	r3, sp, #24
 800e096:	f1c4 0c18 	rsb	ip, r4, #24
 800e09a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e09e:	fa46 f20c 	asr.w	r2, r6, ip
 800e0a2:	4490      	add	r8, r2
 800e0a4:	fa02 f20c 	lsl.w	r2, r2, ip
 800e0a8:	1ab6      	subs	r6, r6, r2
 800e0aa:	f1c4 0217 	rsb	r2, r4, #23
 800e0ae:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800e0b2:	4116      	asrs	r6, r2
 800e0b4:	2e00      	cmp	r6, #0
 800e0b6:	dd3f      	ble.n	800e138 <__kernel_rem_pio2+0x1d0>
 800e0b8:	f04f 0c00 	mov.w	ip, #0
 800e0bc:	f108 0801 	add.w	r8, r8, #1
 800e0c0:	4660      	mov	r0, ip
 800e0c2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800e0c6:	4565      	cmp	r5, ip
 800e0c8:	dc6e      	bgt.n	800e1a8 <__kernel_rem_pio2+0x240>
 800e0ca:	2c00      	cmp	r4, #0
 800e0cc:	dd04      	ble.n	800e0d8 <__kernel_rem_pio2+0x170>
 800e0ce:	2c01      	cmp	r4, #1
 800e0d0:	d07f      	beq.n	800e1d2 <__kernel_rem_pio2+0x26a>
 800e0d2:	2c02      	cmp	r4, #2
 800e0d4:	f000 8087 	beq.w	800e1e6 <__kernel_rem_pio2+0x27e>
 800e0d8:	2e02      	cmp	r6, #2
 800e0da:	d12d      	bne.n	800e138 <__kernel_rem_pio2+0x1d0>
 800e0dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e0e0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e0e4:	b340      	cbz	r0, 800e138 <__kernel_rem_pio2+0x1d0>
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	9105      	str	r1, [sp, #20]
 800e0ea:	f000 faad 	bl	800e648 <scalbn>
 800e0ee:	9905      	ldr	r1, [sp, #20]
 800e0f0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e0f4:	e020      	b.n	800e138 <__kernel_rem_pio2+0x1d0>
 800e0f6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e0fa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e0fe:	3801      	subs	r0, #1
 800e100:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e104:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e108:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e10c:	eca6 0a01 	vstmia	r6!, {s0}
 800e110:	ed92 0b00 	vldr	d0, [r2]
 800e114:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e118:	e79c      	b.n	800e054 <__kernel_rem_pio2+0xec>
 800e11a:	d105      	bne.n	800e128 <__kernel_rem_pio2+0x1c0>
 800e11c:	1e6a      	subs	r2, r5, #1
 800e11e:	ab06      	add	r3, sp, #24
 800e120:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e124:	15f6      	asrs	r6, r6, #23
 800e126:	e7c5      	b.n	800e0b4 <__kernel_rem_pio2+0x14c>
 800e128:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e12c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e134:	da36      	bge.n	800e1a4 <__kernel_rem_pio2+0x23c>
 800e136:	2600      	movs	r6, #0
 800e138:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e140:	f040 80aa 	bne.w	800e298 <__kernel_rem_pio2+0x330>
 800e144:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800e148:	4658      	mov	r0, fp
 800e14a:	2200      	movs	r2, #0
 800e14c:	4548      	cmp	r0, r9
 800e14e:	da52      	bge.n	800e1f6 <__kernel_rem_pio2+0x28e>
 800e150:	2a00      	cmp	r2, #0
 800e152:	f000 8081 	beq.w	800e258 <__kernel_rem_pio2+0x2f0>
 800e156:	ab06      	add	r3, sp, #24
 800e158:	3c18      	subs	r4, #24
 800e15a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 8087 	beq.w	800e272 <__kernel_rem_pio2+0x30a>
 800e164:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 fa6d 	bl	800e648 <scalbn>
 800e16e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e172:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e280 <__kernel_rem_pio2+0x318>
 800e176:	a96a      	add	r1, sp, #424	; 0x1a8
 800e178:	f103 0208 	add.w	r2, r3, #8
 800e17c:	1888      	adds	r0, r1, r2
 800e17e:	4659      	mov	r1, fp
 800e180:	2900      	cmp	r1, #0
 800e182:	f280 80b7 	bge.w	800e2f4 <__kernel_rem_pio2+0x38c>
 800e186:	4659      	mov	r1, fp
 800e188:	2900      	cmp	r1, #0
 800e18a:	f2c0 80d5 	blt.w	800e338 <__kernel_rem_pio2+0x3d0>
 800e18e:	a86a      	add	r0, sp, #424	; 0x1a8
 800e190:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800e194:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e278 <__kernel_rem_pio2+0x310>
 800e198:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e294 <__kernel_rem_pio2+0x32c>
 800e19c:	2400      	movs	r4, #0
 800e19e:	ebab 0001 	sub.w	r0, fp, r1
 800e1a2:	e0be      	b.n	800e322 <__kernel_rem_pio2+0x3ba>
 800e1a4:	2602      	movs	r6, #2
 800e1a6:	e787      	b.n	800e0b8 <__kernel_rem_pio2+0x150>
 800e1a8:	f8db 2000 	ldr.w	r2, [fp]
 800e1ac:	b958      	cbnz	r0, 800e1c6 <__kernel_rem_pio2+0x25e>
 800e1ae:	b122      	cbz	r2, 800e1ba <__kernel_rem_pio2+0x252>
 800e1b0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e1b4:	f8cb 2000 	str.w	r2, [fp]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f10c 0c01 	add.w	ip, ip, #1
 800e1be:	f10b 0b04 	add.w	fp, fp, #4
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	e77f      	b.n	800e0c6 <__kernel_rem_pio2+0x15e>
 800e1c6:	ebae 0202 	sub.w	r2, lr, r2
 800e1ca:	f8cb 2000 	str.w	r2, [fp]
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	e7f3      	b.n	800e1ba <__kernel_rem_pio2+0x252>
 800e1d2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e1d6:	ab06      	add	r3, sp, #24
 800e1d8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e1dc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e1e0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e1e4:	e778      	b.n	800e0d8 <__kernel_rem_pio2+0x170>
 800e1e6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e1ea:	ab06      	add	r3, sp, #24
 800e1ec:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e1f0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e1f4:	e7f4      	b.n	800e1e0 <__kernel_rem_pio2+0x278>
 800e1f6:	ab06      	add	r3, sp, #24
 800e1f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e1fc:	3801      	subs	r0, #1
 800e1fe:	431a      	orrs	r2, r3
 800e200:	e7a4      	b.n	800e14c <__kernel_rem_pio2+0x1e4>
 800e202:	f10c 0c01 	add.w	ip, ip, #1
 800e206:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d0f9      	beq.n	800e202 <__kernel_rem_pio2+0x29a>
 800e20e:	9b04      	ldr	r3, [sp, #16]
 800e210:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e214:	eb0d 0203 	add.w	r2, sp, r3
 800e218:	9b01      	ldr	r3, [sp, #4]
 800e21a:	18e8      	adds	r0, r5, r3
 800e21c:	ab1a      	add	r3, sp, #104	; 0x68
 800e21e:	1c6e      	adds	r6, r5, #1
 800e220:	3a98      	subs	r2, #152	; 0x98
 800e222:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e226:	4465      	add	r5, ip
 800e228:	42b5      	cmp	r5, r6
 800e22a:	f6ff af05 	blt.w	800e038 <__kernel_rem_pio2+0xd0>
 800e22e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800e232:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e236:	ee07 3a90 	vmov	s15, r3
 800e23a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e23e:	f04f 0c00 	mov.w	ip, #0
 800e242:	eca0 7b02 	vstmia	r0!, {d7}
 800e246:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e278 <__kernel_rem_pio2+0x310>
 800e24a:	4680      	mov	r8, r0
 800e24c:	458c      	cmp	ip, r1
 800e24e:	dd07      	ble.n	800e260 <__kernel_rem_pio2+0x2f8>
 800e250:	eca2 7b02 	vstmia	r2!, {d7}
 800e254:	3601      	adds	r6, #1
 800e256:	e7e7      	b.n	800e228 <__kernel_rem_pio2+0x2c0>
 800e258:	9a03      	ldr	r2, [sp, #12]
 800e25a:	f04f 0c01 	mov.w	ip, #1
 800e25e:	e7d2      	b.n	800e206 <__kernel_rem_pio2+0x29e>
 800e260:	ecbe 5b02 	vldmia	lr!, {d5}
 800e264:	ed38 6b02 	vldmdb	r8!, {d6}
 800e268:	f10c 0c01 	add.w	ip, ip, #1
 800e26c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e270:	e7ec      	b.n	800e24c <__kernel_rem_pio2+0x2e4>
 800e272:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e276:	e76e      	b.n	800e156 <__kernel_rem_pio2+0x1ee>
	...
 800e284:	3e700000 	.word	0x3e700000
 800e288:	00000000 	.word	0x00000000
 800e28c:	41700000 	.word	0x41700000
 800e290:	08022170 	.word	0x08022170
 800e294:	08022130 	.word	0x08022130
 800e298:	4260      	negs	r0, r4
 800e29a:	eeb0 0b48 	vmov.f64	d0, d8
 800e29e:	f000 f9d3 	bl	800e648 <scalbn>
 800e2a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e480 <__kernel_rem_pio2+0x518>
 800e2a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ae:	db18      	blt.n	800e2e2 <__kernel_rem_pio2+0x37a>
 800e2b0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e488 <__kernel_rem_pio2+0x520>
 800e2b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e2b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e2bc:	aa06      	add	r2, sp, #24
 800e2be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e2c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e2c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e2ca:	f105 0b01 	add.w	fp, r5, #1
 800e2ce:	ee10 3a10 	vmov	r3, s0
 800e2d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e2d6:	ee17 3a10 	vmov	r3, s14
 800e2da:	3418      	adds	r4, #24
 800e2dc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e2e0:	e740      	b.n	800e164 <__kernel_rem_pio2+0x1fc>
 800e2e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e2e6:	aa06      	add	r2, sp, #24
 800e2e8:	ee10 3a10 	vmov	r3, s0
 800e2ec:	46ab      	mov	fp, r5
 800e2ee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e2f2:	e737      	b.n	800e164 <__kernel_rem_pio2+0x1fc>
 800e2f4:	ac06      	add	r4, sp, #24
 800e2f6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e2fa:	9401      	str	r4, [sp, #4]
 800e2fc:	ee07 4a90 	vmov	s15, r4
 800e300:	3901      	subs	r1, #1
 800e302:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e306:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e30a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e30e:	ed20 7b02 	vstmdb	r0!, {d7}
 800e312:	e735      	b.n	800e180 <__kernel_rem_pio2+0x218>
 800e314:	ecbc 5b02 	vldmia	ip!, {d5}
 800e318:	ecb5 6b02 	vldmia	r5!, {d6}
 800e31c:	3401      	adds	r4, #1
 800e31e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e322:	454c      	cmp	r4, r9
 800e324:	dc01      	bgt.n	800e32a <__kernel_rem_pio2+0x3c2>
 800e326:	4284      	cmp	r4, r0
 800e328:	ddf4      	ble.n	800e314 <__kernel_rem_pio2+0x3ac>
 800e32a:	ac42      	add	r4, sp, #264	; 0x108
 800e32c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e330:	ed80 7b00 	vstr	d7, [r0]
 800e334:	3901      	subs	r1, #1
 800e336:	e727      	b.n	800e188 <__kernel_rem_pio2+0x220>
 800e338:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e33a:	2902      	cmp	r1, #2
 800e33c:	dc0a      	bgt.n	800e354 <__kernel_rem_pio2+0x3ec>
 800e33e:	2900      	cmp	r1, #0
 800e340:	dc2c      	bgt.n	800e39c <__kernel_rem_pio2+0x434>
 800e342:	d045      	beq.n	800e3d0 <__kernel_rem_pio2+0x468>
 800e344:	f008 0007 	and.w	r0, r8, #7
 800e348:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e34c:	ecbd 8b06 	vpop	{d8-d10}
 800e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e354:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e356:	2a03      	cmp	r2, #3
 800e358:	d1f4      	bne.n	800e344 <__kernel_rem_pio2+0x3dc>
 800e35a:	aa42      	add	r2, sp, #264	; 0x108
 800e35c:	4413      	add	r3, r2
 800e35e:	461a      	mov	r2, r3
 800e360:	4619      	mov	r1, r3
 800e362:	4658      	mov	r0, fp
 800e364:	2800      	cmp	r0, #0
 800e366:	f1a1 0108 	sub.w	r1, r1, #8
 800e36a:	dc54      	bgt.n	800e416 <__kernel_rem_pio2+0x4ae>
 800e36c:	4659      	mov	r1, fp
 800e36e:	2901      	cmp	r1, #1
 800e370:	f1a2 0208 	sub.w	r2, r2, #8
 800e374:	dc5f      	bgt.n	800e436 <__kernel_rem_pio2+0x4ce>
 800e376:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e490 <__kernel_rem_pio2+0x528>
 800e37a:	3308      	adds	r3, #8
 800e37c:	f1bb 0f01 	cmp.w	fp, #1
 800e380:	dc69      	bgt.n	800e456 <__kernel_rem_pio2+0x4ee>
 800e382:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e386:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	d16a      	bne.n	800e464 <__kernel_rem_pio2+0x4fc>
 800e38e:	ed87 5b00 	vstr	d5, [r7]
 800e392:	ed87 6b02 	vstr	d6, [r7, #8]
 800e396:	ed87 7b04 	vstr	d7, [r7, #16]
 800e39a:	e7d3      	b.n	800e344 <__kernel_rem_pio2+0x3dc>
 800e39c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e490 <__kernel_rem_pio2+0x528>
 800e3a0:	ab42      	add	r3, sp, #264	; 0x108
 800e3a2:	441a      	add	r2, r3
 800e3a4:	465b      	mov	r3, fp
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da26      	bge.n	800e3f8 <__kernel_rem_pio2+0x490>
 800e3aa:	b35e      	cbz	r6, 800e404 <__kernel_rem_pio2+0x49c>
 800e3ac:	eeb1 7b46 	vneg.f64	d7, d6
 800e3b0:	ed87 7b00 	vstr	d7, [r7]
 800e3b4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e3b8:	aa44      	add	r2, sp, #272	; 0x110
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3c0:	459b      	cmp	fp, r3
 800e3c2:	da22      	bge.n	800e40a <__kernel_rem_pio2+0x4a2>
 800e3c4:	b10e      	cbz	r6, 800e3ca <__kernel_rem_pio2+0x462>
 800e3c6:	eeb1 7b47 	vneg.f64	d7, d7
 800e3ca:	ed87 7b02 	vstr	d7, [r7, #8]
 800e3ce:	e7b9      	b.n	800e344 <__kernel_rem_pio2+0x3dc>
 800e3d0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e490 <__kernel_rem_pio2+0x528>
 800e3d4:	ab42      	add	r3, sp, #264	; 0x108
 800e3d6:	441a      	add	r2, r3
 800e3d8:	f1bb 0f00 	cmp.w	fp, #0
 800e3dc:	da05      	bge.n	800e3ea <__kernel_rem_pio2+0x482>
 800e3de:	b10e      	cbz	r6, 800e3e4 <__kernel_rem_pio2+0x47c>
 800e3e0:	eeb1 7b47 	vneg.f64	d7, d7
 800e3e4:	ed87 7b00 	vstr	d7, [r7]
 800e3e8:	e7ac      	b.n	800e344 <__kernel_rem_pio2+0x3dc>
 800e3ea:	ed32 6b02 	vldmdb	r2!, {d6}
 800e3ee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e3f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e3f6:	e7ef      	b.n	800e3d8 <__kernel_rem_pio2+0x470>
 800e3f8:	ed32 7b02 	vldmdb	r2!, {d7}
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e402:	e7d0      	b.n	800e3a6 <__kernel_rem_pio2+0x43e>
 800e404:	eeb0 7b46 	vmov.f64	d7, d6
 800e408:	e7d2      	b.n	800e3b0 <__kernel_rem_pio2+0x448>
 800e40a:	ecb2 6b02 	vldmia	r2!, {d6}
 800e40e:	3301      	adds	r3, #1
 800e410:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e414:	e7d4      	b.n	800e3c0 <__kernel_rem_pio2+0x458>
 800e416:	ed91 7b00 	vldr	d7, [r1]
 800e41a:	ed91 5b02 	vldr	d5, [r1, #8]
 800e41e:	3801      	subs	r0, #1
 800e420:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e424:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e428:	ed81 6b00 	vstr	d6, [r1]
 800e42c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e430:	ed81 7b02 	vstr	d7, [r1, #8]
 800e434:	e796      	b.n	800e364 <__kernel_rem_pio2+0x3fc>
 800e436:	ed92 7b00 	vldr	d7, [r2]
 800e43a:	ed92 5b02 	vldr	d5, [r2, #8]
 800e43e:	3901      	subs	r1, #1
 800e440:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e444:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e448:	ed82 6b00 	vstr	d6, [r2]
 800e44c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e450:	ed82 7b02 	vstr	d7, [r2, #8]
 800e454:	e78b      	b.n	800e36e <__kernel_rem_pio2+0x406>
 800e456:	ed33 6b02 	vldmdb	r3!, {d6}
 800e45a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e45e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e462:	e78b      	b.n	800e37c <__kernel_rem_pio2+0x414>
 800e464:	eeb1 5b45 	vneg.f64	d5, d5
 800e468:	eeb1 6b46 	vneg.f64	d6, d6
 800e46c:	ed87 5b00 	vstr	d5, [r7]
 800e470:	eeb1 7b47 	vneg.f64	d7, d7
 800e474:	ed87 6b02 	vstr	d6, [r7, #8]
 800e478:	e78d      	b.n	800e396 <__kernel_rem_pio2+0x42e>
 800e47a:	bf00      	nop
 800e47c:	f3af 8000 	nop.w
 800e480:	00000000 	.word	0x00000000
 800e484:	41700000 	.word	0x41700000
 800e488:	00000000 	.word	0x00000000
 800e48c:	3e700000 	.word	0x3e700000
	...

0800e498 <__kernel_sin>:
 800e498:	ee10 3a90 	vmov	r3, s1
 800e49c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4a0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e4a4:	da04      	bge.n	800e4b0 <__kernel_sin+0x18>
 800e4a6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e4aa:	ee17 3a90 	vmov	r3, s15
 800e4ae:	b35b      	cbz	r3, 800e508 <__kernel_sin+0x70>
 800e4b0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e4b4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e4b8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e510 <__kernel_sin+0x78>
 800e4bc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e518 <__kernel_sin+0x80>
 800e4c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e4c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e520 <__kernel_sin+0x88>
 800e4c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e4cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e528 <__kernel_sin+0x90>
 800e4d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e4d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e530 <__kernel_sin+0x98>
 800e4d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e4dc:	b930      	cbnz	r0, 800e4ec <__kernel_sin+0x54>
 800e4de:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e538 <__kernel_sin+0xa0>
 800e4e2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e4e6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e4ea:	4770      	bx	lr
 800e4ec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e4f0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e4f4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e4f8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e4fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e540 <__kernel_sin+0xa8>
 800e500:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e504:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	f3af 8000 	nop.w
 800e510:	5acfd57c 	.word	0x5acfd57c
 800e514:	3de5d93a 	.word	0x3de5d93a
 800e518:	8a2b9ceb 	.word	0x8a2b9ceb
 800e51c:	be5ae5e6 	.word	0xbe5ae5e6
 800e520:	57b1fe7d 	.word	0x57b1fe7d
 800e524:	3ec71de3 	.word	0x3ec71de3
 800e528:	19c161d5 	.word	0x19c161d5
 800e52c:	bf2a01a0 	.word	0xbf2a01a0
 800e530:	1110f8a6 	.word	0x1110f8a6
 800e534:	3f811111 	.word	0x3f811111
 800e538:	55555549 	.word	0x55555549
 800e53c:	bfc55555 	.word	0xbfc55555
 800e540:	55555549 	.word	0x55555549
 800e544:	3fc55555 	.word	0x3fc55555

0800e548 <fabs>:
 800e548:	ec51 0b10 	vmov	r0, r1, d0
 800e54c:	ee10 2a10 	vmov	r2, s0
 800e550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e554:	ec43 2b10 	vmov	d0, r2, r3
 800e558:	4770      	bx	lr
 800e55a:	0000      	movs	r0, r0
 800e55c:	0000      	movs	r0, r0
	...

0800e560 <floor>:
 800e560:	ee10 1a90 	vmov	r1, s1
 800e564:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e568:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e56c:	2b13      	cmp	r3, #19
 800e56e:	b530      	push	{r4, r5, lr}
 800e570:	ee10 0a10 	vmov	r0, s0
 800e574:	ee10 5a10 	vmov	r5, s0
 800e578:	dc31      	bgt.n	800e5de <floor+0x7e>
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	da15      	bge.n	800e5aa <floor+0x4a>
 800e57e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e638 <floor+0xd8>
 800e582:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e586:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58e:	dd07      	ble.n	800e5a0 <floor+0x40>
 800e590:	2900      	cmp	r1, #0
 800e592:	da4e      	bge.n	800e632 <floor+0xd2>
 800e594:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e598:	4318      	orrs	r0, r3
 800e59a:	d001      	beq.n	800e5a0 <floor+0x40>
 800e59c:	4928      	ldr	r1, [pc, #160]	; (800e640 <floor+0xe0>)
 800e59e:	2000      	movs	r0, #0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	ec43 2b10 	vmov	d0, r2, r3
 800e5a8:	e020      	b.n	800e5ec <floor+0x8c>
 800e5aa:	4a26      	ldr	r2, [pc, #152]	; (800e644 <floor+0xe4>)
 800e5ac:	411a      	asrs	r2, r3
 800e5ae:	ea01 0402 	and.w	r4, r1, r2
 800e5b2:	4304      	orrs	r4, r0
 800e5b4:	d01a      	beq.n	800e5ec <floor+0x8c>
 800e5b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e638 <floor+0xd8>
 800e5ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e5be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c6:	ddeb      	ble.n	800e5a0 <floor+0x40>
 800e5c8:	2900      	cmp	r1, #0
 800e5ca:	bfbe      	ittt	lt
 800e5cc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e5d0:	fa40 f303 	asrlt.w	r3, r0, r3
 800e5d4:	18c9      	addlt	r1, r1, r3
 800e5d6:	ea21 0102 	bic.w	r1, r1, r2
 800e5da:	2000      	movs	r0, #0
 800e5dc:	e7e0      	b.n	800e5a0 <floor+0x40>
 800e5de:	2b33      	cmp	r3, #51	; 0x33
 800e5e0:	dd05      	ble.n	800e5ee <floor+0x8e>
 800e5e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5e6:	d101      	bne.n	800e5ec <floor+0x8c>
 800e5e8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e5ec:	bd30      	pop	{r4, r5, pc}
 800e5ee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5f6:	40e2      	lsrs	r2, r4
 800e5f8:	4202      	tst	r2, r0
 800e5fa:	d0f7      	beq.n	800e5ec <floor+0x8c>
 800e5fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e638 <floor+0xd8>
 800e600:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e604:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e60c:	ddc8      	ble.n	800e5a0 <floor+0x40>
 800e60e:	2900      	cmp	r1, #0
 800e610:	da02      	bge.n	800e618 <floor+0xb8>
 800e612:	2b14      	cmp	r3, #20
 800e614:	d103      	bne.n	800e61e <floor+0xbe>
 800e616:	3101      	adds	r1, #1
 800e618:	ea20 0002 	bic.w	r0, r0, r2
 800e61c:	e7c0      	b.n	800e5a0 <floor+0x40>
 800e61e:	2401      	movs	r4, #1
 800e620:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e624:	fa04 f303 	lsl.w	r3, r4, r3
 800e628:	4418      	add	r0, r3
 800e62a:	42a8      	cmp	r0, r5
 800e62c:	bf38      	it	cc
 800e62e:	1909      	addcc	r1, r1, r4
 800e630:	e7f2      	b.n	800e618 <floor+0xb8>
 800e632:	2000      	movs	r0, #0
 800e634:	4601      	mov	r1, r0
 800e636:	e7b3      	b.n	800e5a0 <floor+0x40>
 800e638:	8800759c 	.word	0x8800759c
 800e63c:	7e37e43c 	.word	0x7e37e43c
 800e640:	bff00000 	.word	0xbff00000
 800e644:	000fffff 	.word	0x000fffff

0800e648 <scalbn>:
 800e648:	ee10 1a90 	vmov	r1, s1
 800e64c:	b510      	push	{r4, lr}
 800e64e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e652:	b98c      	cbnz	r4, 800e678 <scalbn+0x30>
 800e654:	ee10 3a10 	vmov	r3, s0
 800e658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e65c:	430b      	orrs	r3, r1
 800e65e:	d011      	beq.n	800e684 <scalbn+0x3c>
 800e660:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800e728 <scalbn+0xe0>
 800e664:	4b3c      	ldr	r3, [pc, #240]	; (800e758 <scalbn+0x110>)
 800e666:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e66a:	4298      	cmp	r0, r3
 800e66c:	da0b      	bge.n	800e686 <scalbn+0x3e>
 800e66e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e730 <scalbn+0xe8>
 800e672:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e676:	e005      	b.n	800e684 <scalbn+0x3c>
 800e678:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e67c:	429c      	cmp	r4, r3
 800e67e:	d107      	bne.n	800e690 <scalbn+0x48>
 800e680:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e684:	bd10      	pop	{r4, pc}
 800e686:	ee10 1a90 	vmov	r1, s1
 800e68a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e68e:	3c36      	subs	r4, #54	; 0x36
 800e690:	4404      	add	r4, r0
 800e692:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e696:	429c      	cmp	r4, r3
 800e698:	dd0d      	ble.n	800e6b6 <scalbn+0x6e>
 800e69a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e738 <scalbn+0xf0>
 800e69e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e740 <scalbn+0xf8>
 800e6a2:	eeb0 6b47 	vmov.f64	d6, d7
 800e6a6:	ee10 3a90 	vmov	r3, s1
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e6b0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e6b4:	e7e6      	b.n	800e684 <scalbn+0x3c>
 800e6b6:	2c00      	cmp	r4, #0
 800e6b8:	dd0a      	ble.n	800e6d0 <scalbn+0x88>
 800e6ba:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e6be:	ec53 2b10 	vmov	r2, r3, d0
 800e6c2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e6c6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e6ca:	ec43 2b10 	vmov	d0, r2, r3
 800e6ce:	e7d9      	b.n	800e684 <scalbn+0x3c>
 800e6d0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800e6d4:	da19      	bge.n	800e70a <scalbn+0xc2>
 800e6d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e6da:	4298      	cmp	r0, r3
 800e6dc:	ee10 3a90 	vmov	r3, s1
 800e6e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6e4:	dd09      	ble.n	800e6fa <scalbn+0xb2>
 800e6e6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800e738 <scalbn+0xf0>
 800e6ea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e740 <scalbn+0xf8>
 800e6ee:	eeb0 7b40 	vmov.f64	d7, d0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800e6f8:	e7bb      	b.n	800e672 <scalbn+0x2a>
 800e6fa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e730 <scalbn+0xe8>
 800e6fe:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e748 <scalbn+0x100>
 800e702:	eeb0 7b40 	vmov.f64	d7, d0
 800e706:	2b00      	cmp	r3, #0
 800e708:	e7f4      	b.n	800e6f4 <scalbn+0xac>
 800e70a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e70e:	ec53 2b10 	vmov	r2, r3, d0
 800e712:	3436      	adds	r4, #54	; 0x36
 800e714:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e718:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e71c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e750 <scalbn+0x108>
 800e720:	ec43 2b10 	vmov	d0, r2, r3
 800e724:	e7a5      	b.n	800e672 <scalbn+0x2a>
 800e726:	bf00      	nop
 800e728:	00000000 	.word	0x00000000
 800e72c:	43500000 	.word	0x43500000
 800e730:	c2f8f359 	.word	0xc2f8f359
 800e734:	01a56e1f 	.word	0x01a56e1f
 800e738:	8800759c 	.word	0x8800759c
 800e73c:	7e37e43c 	.word	0x7e37e43c
 800e740:	8800759c 	.word	0x8800759c
 800e744:	fe37e43c 	.word	0xfe37e43c
 800e748:	c2f8f359 	.word	0xc2f8f359
 800e74c:	81a56e1f 	.word	0x81a56e1f
 800e750:	00000000 	.word	0x00000000
 800e754:	3c900000 	.word	0x3c900000
 800e758:	ffff3cb0 	.word	0xffff3cb0

0800e75c <nanf>:
 800e75c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e764 <nanf+0x8>
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	7fc00000 	.word	0x7fc00000

0800e768 <_init>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	bf00      	nop
 800e76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e76e:	bc08      	pop	{r3}
 800e770:	469e      	mov	lr, r3
 800e772:	4770      	bx	lr

0800e774 <_fini>:
 800e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e776:	bf00      	nop
 800e778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77a:	bc08      	pop	{r3}
 800e77c:	469e      	mov	lr, r3
 800e77e:	4770      	bx	lr
