
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008120  08008120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008128  08008128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064d0  2000000c  0800813c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200064dc  0800813c  000264dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a934  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ab  00000000  00000000  0003a96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0003ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00040060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000328c9  00000000  00000000  000412b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5a8  00000000  00000000  00073b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125321  00000000  00000000  00091121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  001b6494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080080d4 	.word	0x080080d4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080080d4 	.word	0x080080d4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <MX_ADC1_Init+0x9c>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_ADC1_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ADC1_Init+0x98>)
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <MX_ADC1_Init+0xa0>)
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_ADC1_Init+0x98>)
 800058a:	2201      	movs	r2, #1
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_ADC1_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x98>)
 800059e:	f001 f8c3 	bl	8001728 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a8:	f000 fc94 	bl	8000ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_ADC1_Init+0xa4>)
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_ADC1_Init+0x98>)
 80005be:	f001 f8f7 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c8:	f000 fc84 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40012000 	.word	0x40012000
 80005dc:	0f000001 	.word	0x0f000001
 80005e0:	10000012 	.word	0x10000012

080005e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_ADC_MspInit+0x38>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d10b      	bne.n	800060e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <HAL_ADC_MspInit+0x3c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40012000 	.word	0x40012000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_CRC_Init+0x3c>)
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_CRC_Init+0x40>)
 800062c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_CRC_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_CRC_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_CRC_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_CRC_Init+0x3c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_CRC_Init+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_CRC_Init+0x3c>)
 800064e:	f001 fc11 	bl	8001e74 <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000658:	f000 fc3c 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000070 	.word	0x20000070
 8000664:	40023000 	.word	0x40023000

08000668 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_CRC_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_CRC_MspInit+0x3c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023000 	.word	0x40023000
 80006a4:	40023800 	.word	0x40023800

080006a8 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80006ac:	4b63      	ldr	r3, [pc, #396]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ae:	4a64      	ldr	r2, [pc, #400]	; (8000840 <MX_DFSDM1_Init+0x198>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006b2:	4b62      	ldr	r3, [pc, #392]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80006b8:	4b60      	ldr	r3, [pc, #384]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80006be:	4b5f      	ldr	r3, [pc, #380]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 80006ca:	4b5c      	ldr	r3, [pc, #368]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80006d6:	4b59      	ldr	r3, [pc, #356]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80006dc:	4b57      	ldr	r3, [pc, #348]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80006ec:	4b53      	ldr	r3, [pc, #332]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80006f2:	4b52      	ldr	r3, [pc, #328]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <MX_DFSDM1_Init+0x194>)
 80006fa:	f001 fd65 	bl	80021c8 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <MX_DFSDM1_Init+0x1a0>)
 8000702:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000704:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 800070a:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800070c:	2201      	movs	r2, #1
 800070e:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000710:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000712:	2201      	movs	r2, #1
 8000714:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000716:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 800071c:	4b49      	ldr	r3, [pc, #292]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800071e:	2201      	movs	r2, #1
 8000720:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 8000722:	4b48      	ldr	r3, [pc, #288]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000724:	2200      	movs	r2, #0
 8000726:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000728:	4b46      	ldr	r3, [pc, #280]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800072e:	4b45      	ldr	r3, [pc, #276]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000734:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000736:	4b43      	ldr	r3, [pc, #268]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000738:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800073c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000744:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000746:	2201      	movs	r2, #1
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800074a:	483e      	ldr	r0, [pc, #248]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800074c:	f001 fd3c 	bl	80021c8 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_DFSDM1_Init+0x1a8>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000762:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000766:	2204      	movs	r2, #4
 8000768:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000786:	2204      	movs	r2, #4
 8000788:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80007a2:	482a      	ldr	r0, [pc, #168]	; (800084c <MX_DFSDM1_Init+0x1a4>)
 80007a4:	f001 fc50 	bl	8002048 <HAL_DFSDM_ChannelInit>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 80007ae:	f000 fb91 	bl	8000ed4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_DFSDM1_Init+0x1b0>)
 80007b6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f2:	220a      	movs	r2, #10
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 80007fe:	2202      	movs	r2, #2
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_DFSDM1_Init+0x1ac>)
 8000804:	f001 fc20 	bl	8002048 <HAL_DFSDM_ChannelInit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 800080e:	f000 fb61 	bl	8000ed4 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000812:	2201      	movs	r2, #1
 8000814:	4911      	ldr	r1, [pc, #68]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000818:	f001 fdb0 	bl	800237c <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 800081c:	490f      	ldr	r1, [pc, #60]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_DFSDM1_Init+0x194>)
 8000820:	f001 fdf2 	bl	8002408 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 8000824:	2201      	movs	r2, #1
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <MX_DFSDM1_Init+0x1b4>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 800082a:	f001 fda7 	bl	800237c <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 800082e:	2101      	movs	r1, #1
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_DFSDM1_Init+0x19c>)
 8000832:	f001 fde9 	bl	8002408 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	40017500 	.word	0x40017500
 8000844:	200000e8 	.word	0x200000e8
 8000848:	40017580 	.word	0x40017580
 800084c:	2000013c 	.word	0x2000013c
 8000850:	40017400 	.word	0x40017400
 8000854:	20000174 	.word	0x20000174
 8000858:	40017420 	.word	0x40017420
 800085c:	00010002 	.word	0x00010002

08000860 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000878:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d145      	bne.n	800090c <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000880:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x1ac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10b      	bne.n	80008aa <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000892:	4b5f      	ldr	r3, [pc, #380]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a5e      	ldr	r2, [pc, #376]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a58      	ldr	r2, [pc, #352]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80008d2:	230a      	movs	r3, #10
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	484d      	ldr	r0, [pc, #308]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008de:	f002 fae5 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e2:	2308      	movs	r3, #8
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4845      	ldr	r0, [pc, #276]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80008fe:	f002 fad5 	bl	8002eac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800090a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a41      	ldr	r2, [pc, #260]	; (8000a18 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d137      	bne.n	8000986 <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000918:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <HAL_DFSDM_FilterMspInit+0x1c0>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000922:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000936:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800093a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000956:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800095e:	482f      	ldr	r0, [pc, #188]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000960:	f001 fefe 	bl	8002760 <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 800096a:	f000 fab3 	bl	8000ed4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
 8000980:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_DFSDM_FilterMspInit+0x1c4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d137      	bne.n	8000a00 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009da:	f001 fec1 	bl	8002760 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 80009e4:	f000 fa76 	bl	8000ed4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000270 	.word	0x20000270
 8000a0c:	2000026c 	.word	0x2000026c
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40017500 	.word	0x40017500
 8000a1c:	200001ac 	.word	0x200001ac
 8000a20:	40026410 	.word	0x40026410
 8000a24:	40017580 	.word	0x40017580
 8000a28:	2000020c 	.word	0x2000020c
 8000a2c:	40026488 	.word	0x40026488

08000a30 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d145      	bne.n	8000adc <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10b      	bne.n	8000a7a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000aae:	f002 f9fd 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ace:	f002 f9ed 	bl	8002eac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ada:	6013      	str	r3, [r2, #0]
  }
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000270 	.word	0x20000270
 8000ae8:	2000026c 	.word	0x2000026c
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_DMA_Init+0x58>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_DMA_Init+0x58>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_DMA_Init+0x58>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2038      	movs	r0, #56	; 0x38
 8000b18:	f001 f975 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1c:	2038      	movs	r0, #56	; 0x38
 8000b1e:	f001 f98e 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2044      	movs	r0, #68	; 0x44
 8000b28:	f001 f96d 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000b2c:	2044      	movs	r0, #68	; 0x44
 8000b2e:	f001 f986 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2045      	movs	r0, #69	; 0x45
 8000b38:	f001 f965 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b3c:	2045      	movs	r0, #69	; 0x45
 8000b3e:	f001 f97e 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0xe4>)
 8000c24:	f002 f942 	bl	8002eac <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3c:	f3bf 8f4f 	dsb	sy
}
 8000c40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c42:	f3bf 8f6f 	isb	sy
}
 8000c46:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <SCB_EnableICache+0x48>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c50:	f3bf 8f4f 	dsb	sy
}
 8000c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c56:	f3bf 8f6f 	isb	sy
}
 8000c5a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <SCB_EnableICache+0x48>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <SCB_EnableICache+0x48>)
 8000c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c66:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c68:	f3bf 8f4f 	dsb	sy
}
 8000c6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c6e:	f3bf 8f6f 	isb	sy
}
 8000c72:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c92:	f3bf 8f4f 	dsb	sy
}
 8000c96:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c9e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	0b5b      	lsrs	r3, r3, #13
 8000ca4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ca8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cb2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	015a      	lsls	r2, r3, #5
 8000cb8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cbc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cc2:	4911      	ldr	r1, [pc, #68]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1ef      	bne.n	8000cb4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	60fa      	str	r2, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1e5      	bne.n	8000caa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cde:	f3bf 8f4f 	dsb	sy
}
 8000ce2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SCB_EnableDCache+0x84>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf0:	f3bf 8f4f 	dsb	sy
}
 8000cf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cf6:	f3bf 8f6f 	isb	sy
}
 8000cfa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d10:	f7ff ff92 	bl	8000c38 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d14:	f7ff ffb6 	bl	8000c84 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fc85 	bl	8001626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f838 	bl	8000d90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d20:	f000 f8a8 	bl	8000e74 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f7ff ff14 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d28:	f7ff fee4 	bl	8000af4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000d2c:	f7ff fcbc 	bl	80006a8 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000d30:	f000 f95e 	bl	8000ff0 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000d34:	f7ff fc02 	bl	800053c <MX_ADC1_Init>
  MX_UART4_Init();
 8000d38:	f000 fb9a 	bl	8001470 <MX_UART4_Init>
  MX_CRC_Init();
 8000d3c:	f7ff fc72 	bl	8000624 <MX_CRC_Init>
  MX_RTC_Init();
 8000d40:	f000 f8ce 	bl	8000ee0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000d44:	f000 fa5e 	bl	8001204 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000d48:	f006 fdf6 	bl	8007938 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d50:	490b      	ldr	r1, [pc, #44]	; (8000d80 <main+0x74>)
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <main+0x78>)
 8000d54:	f001 fb88 	bl	8002468 <HAL_DFSDM_FilterRegularStart_DMA>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <main+0x56>
    {
      Error_Handler();
 8000d5e:	f000 f8b9 	bl	8000ed4 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <main+0x7c>)
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <main+0x80>)
 8000d6a:	f001 fb7d 	bl	8002468 <HAL_DFSDM_FilterRegularStart_DMA>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <main+0x6c>
    {
      Error_Handler();
 8000d74:	f000 f8ae 	bl	8000ed4 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  checkMicrophone();
 8000d78:	f007 f8cc 	bl	8007f14 <checkMicrophone>
 8000d7c:	e7fc      	b.n	8000d78 <main+0x6c>
 8000d7e:	bf00      	nop
 8000d80:	20002274 	.word	0x20002274
 8000d84:	200000e8 	.word	0x200000e8
 8000d88:	20000274 	.word	0x20000274
 8000d8c:	20000094 	.word	0x20000094

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	2234      	movs	r2, #52	; 0x34
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 f990 	bl	80080c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <SystemClock_Config+0xdc>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <SystemClock_Config+0xdc>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <SystemClock_Config+0xdc>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <SystemClock_Config+0xe0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <SystemClock_Config+0xe0>)
 8000dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <SystemClock_Config+0xe0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000de4:	2309      	movs	r3, #9
 8000de6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dfc:	2319      	movs	r3, #25
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e00:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000e04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e0a:	2309      	movs	r3, #9
 8000e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fa5c 	bl	80032d4 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e22:	f000 f857 	bl	8000ed4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e26:	f002 fa05 	bl	8003234 <HAL_PWREx_EnableOverDrive>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000e30:	f000 f850 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2107      	movs	r1, #7
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fcec 	bl	8003830 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e5e:	f000 f839 	bl	8000ed4 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0a4      	sub	sp, #144	; 0x90
 8000e78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2290      	movs	r2, #144	; 0x90
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 f91f 	bl	80080c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <PeriphCommonClock_Config+0x5c>)
 8000e88:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8000e8a:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000e8e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8000e94:	2306      	movs	r3, #6
 8000e96:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8000ea8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fe9f 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000ec4:	f000 f806 	bl	8000ed4 <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3790      	adds	r7, #144	; 0x90
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	18300000 	.word	0x18300000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <MX_RTC_Init+0xac>)
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <MX_RTC_Init+0xb0>)
 8000efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f06:	227f      	movs	r2, #127	; 0x7f
 8000f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f22:	481a      	ldr	r0, [pc, #104]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f24:	f003 fc04 	bl	8004730 <HAL_RTC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f7ff ffd1 	bl	8000ed4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f4e:	f003 fc73 	bl	8004838 <HAL_RTC_SetTime>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f58:	f7ff ffbc 	bl	8000ed4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f60:	2301      	movs	r3, #1
 8000f62:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f74:	f003 fcfa 	bl	800496c <HAL_RTC_SetDate>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f7e:	f7ff ffa9 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20006284 	.word	0x20006284
 8000f90:	40002800 	.word	0x40002800

08000f94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0a6      	sub	sp, #152	; 0x98
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2290      	movs	r2, #144	; 0x90
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f007 f88d 	bl	80080c4 <memset>
  if(rtcHandle->Instance==RTC)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_RTC_MspInit+0x54>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d114      	bne.n	8000fde <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fe1a 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000fce:	f7ff ff81 	bl	8000ed4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_RTC_MspInit+0x58>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_RTC_MspInit+0x58>)
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fdc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3798      	adds	r7, #152	; 0x98
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40002800 	.word	0x40002800
 8000fec:	40023800 	.word	0x40023800

08000ff0 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <MX_SAI2_Init+0xb4>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800100e:	2200      	movs	r2, #0
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001014:	2200      	movs	r2, #0
 8001016:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001020:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001024:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800102e:	2201      	movs	r2, #1
 8001030:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001034:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <MX_SAI2_Init+0xb8>)
 8001036:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001052:	2220      	movs	r2, #32
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001058:	2210      	movs	r2, #16
 800105a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001066:	2200      	movs	r2, #0
 8001068:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800106c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001070:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001074:	2200      	movs	r2, #0
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800107a:	2200      	movs	r2, #0
 800107c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001080:	2202      	movs	r2, #2
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SAI2_Init+0xb0>)
 8001086:	2203      	movs	r2, #3
 8001088:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_SAI2_Init+0xb0>)
 800108c:	f003 fd94 	bl	8004bb8 <HAL_SAI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8001096:	f7ff ff1d 	bl	8000ed4 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200062a4 	.word	0x200062a4
 80010a4:	40015c24 	.word	0x40015c24
 80010a8:	0002ee00 	.word	0x0002ee00

080010ac <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <HAL_SAI_MspInit+0x138>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	f040 808e 	bne.w	80011dc <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80010c0:	4b49      	ldr	r3, [pc, #292]	; (80011e8 <HAL_SAI_MspInit+0x13c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10b      	bne.n	80010e0 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <HAL_SAI_MspInit+0x140>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	4a47      	ldr	r2, [pc, #284]	; (80011ec <HAL_SAI_MspInit+0x140>)
 80010ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d2:	6453      	str	r3, [r2, #68]	; 0x44
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <HAL_SAI_MspInit+0x140>)
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80010e0:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <HAL_SAI_MspInit+0x13c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <HAL_SAI_MspInit+0x13c>)
 80010e8:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80010fa:	230a      	movs	r3, #10
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	483a      	ldr	r0, [pc, #232]	; (80011f0 <HAL_SAI_MspInit+0x144>)
 8001106:	f001 fed1 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800111c:	230a      	movs	r3, #10
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	4833      	ldr	r0, [pc, #204]	; (80011f4 <HAL_SAI_MspInit+0x148>)
 8001128:	f001 fec0 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800112c:	2301      	movs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800113c:	230a      	movs	r3, #10
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	482c      	ldr	r0, [pc, #176]	; (80011f8 <HAL_SAI_MspInit+0x14c>)
 8001148:	f001 feb0 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114c:	2304      	movs	r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 800115c:	2308      	movs	r3, #8
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4824      	ldr	r0, [pc, #144]	; (80011f8 <HAL_SAI_MspInit+0x14c>)
 8001168:	f001 fea0 	bl	8002eac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_SAI_MspInit+0x150>)
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <HAL_SAI_MspInit+0x154>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_SAI_MspInit+0x150>)
 8001174:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001178:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_SAI_MspInit+0x150>)
 800117c:	2240      	movs	r2, #64	; 0x40
 800117e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_SAI_MspInit+0x150>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_SAI_MspInit+0x150>)
 8001188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_SAI_MspInit+0x150>)
 8001190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001194:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_SAI_MspInit+0x150>)
 8001198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119c:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a4:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ac:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011b6:	f001 fad3 	bl	8002760 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80011c0:	f7ff fe88 	bl	8000ed4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011c8:	671a      	str	r2, [r3, #112]	; 0x70
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_SAI_MspInit+0x150>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40015c24 	.word	0x40015c24
 80011e8:	20006388 	.word	0x20006388
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	20006328 	.word	0x20006328
 8001200:	400264a0 	.word	0x400264a0

08001204 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <MX_SDMMC1_SD_Init+0x3c>)
 800120c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <MX_SDMMC1_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000638c 	.word	0x2000638c
 8001240:	40012c00 	.word	0x40012c00

08001244 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ae      	sub	sp, #184	; 0xb8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2290      	movs	r2, #144	; 0x90
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 ff2d 	bl	80080c4 <memset>
  if(sdHandle->Instance==SDMMC1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_SD_MspInit+0x10c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d169      	bne.n	8001348 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001274:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001278:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fcb6 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001296:	f7ff fe1d 	bl	8000ed4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_SD_MspInit+0x110>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_SD_MspInit+0x110>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80012e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012fc:	230c      	movs	r3, #12
 80012fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <HAL_SD_MspInit+0x114>)
 800130a:	f001 fdcf 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800130e:	2304      	movs	r3, #4
 8001310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001326:	230c      	movs	r3, #12
 8001328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <HAL_SD_MspInit+0x118>)
 8001334:	f001 fdba 	bl	8002eac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2031      	movs	r0, #49	; 0x31
 800133e:	f000 fd62 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001342:	2031      	movs	r0, #49	; 0x31
 8001344:	f000 fd7b 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001348:	bf00      	nop
 800134a:	37b8      	adds	r7, #184	; 0xb8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40012c00 	.word	0x40012c00
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x44>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x44>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x44>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x44>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x44>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f954 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <SDMMC1_IRQHandler+0x10>)
 8001402:	f004 f80f 	bl	8005424 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000638c 	.word	0x2000638c

08001410 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <DMA2_Stream0_IRQHandler+0x10>)
 8001416:	f001 fad3 	bl	80029c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001ac 	.word	0x200001ac

08001424 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA2_Stream5_IRQHandler+0x10>)
 800142a:	f001 fac9 	bl	80029c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000020c 	.word	0x2000020c

08001438 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA2_Stream6_IRQHandler+0x10>)
 800143e:	f001 fabf 	bl	80029c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20006328 	.word	0x20006328

0800144c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <SystemInit+0x20>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <SystemInit+0x20>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_UART4_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <MX_UART4_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_UART4_Init+0x58>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_UART4_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_UART4_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_UART4_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_UART4_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_UART4_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_UART4_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_UART4_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_UART4_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_UART4_Init+0x58>)
 80014b4:	f005 f861 	bl	800657a <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80014be:	f7ff fd09 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20006410 	.word	0x20006410
 80014cc:	40004c00 	.word	0x40004c00

080014d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ae      	sub	sp, #184	; 0xb8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2290      	movs	r2, #144	; 0x90
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 fde7 	bl	80080c4 <memset>
  if(uartHandle->Instance==UART4)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_UART_MspInit+0xf4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d15d      	bne.n	80015bc <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001504:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001506:	2300      	movs	r3, #0
 8001508:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fb74 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800151a:	f7ff fcdb 	bl	8000ed4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 8001524:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_UART_MspInit+0xf8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001566:	2301      	movs	r3, #1
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800157e:	2308      	movs	r3, #8
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001588:	4619      	mov	r1, r3
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <HAL_UART_MspInit+0xfc>)
 800158c:	f001 fc8e 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80015aa:	2306      	movs	r3, #6
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <HAL_UART_MspInit+0x100>)
 80015b8:	f001 fc78 	bl	8002eac <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	37b8      	adds	r7, #184	; 0xb8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004c00 	.word	0x40004c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40020000 	.word	0x40020000

080015d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015da:	490e      	ldr	r1, [pc, #56]	; (8001614 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f0:	4c0b      	ldr	r4, [pc, #44]	; (8001620 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015fe:	f7ff ff25 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001602:	f006 fd3b 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001606:	f7ff fb81 	bl	8000d0c <main>
  bx  lr    
 800160a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001618:	08008130 	.word	0x08008130
  ldr r2, =_sbss
 800161c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001620:	200064dc 	.word	0x200064dc

08001624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC_IRQHandler>

08001626 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162a:	2003      	movs	r0, #3
 800162c:	f000 fbe0 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001630:	200f      	movs	r0, #15
 8001632:	f000 f805 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001636:	f7ff fe93 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fbfb 	bl	8001e5a <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800167c:	f000 fbc3 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000
 8001698:	20000008 	.word	0x20000008
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20006498 	.word	0x20006498

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20006498 	.word	0x20006498

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008

08001728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e031      	b.n	80017a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe ff4c 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_ADC_Init+0x84>)
 800176c:	4013      	ands	r3, r2
 800176e:	f043 0202 	orr.w	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f970 	bl	8001a5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
 8001792:	e001      	b.n	8001798 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	ffffeefd 	.word	0xffffeefd

080017b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1c>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e136      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x28a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b09      	cmp	r3, #9
 80017da:	d93a      	bls.n	8001852 <HAL_ADC_ConfigChannel+0xa2>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017e4:	d035      	beq.n	8001852 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68d9      	ldr	r1, [r3, #12]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	3b1e      	subs	r3, #30
 80017fc:	2207      	movs	r2, #7
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	400a      	ands	r2, r1
 800180a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a8d      	ldr	r2, [pc, #564]	; (8001a48 <HAL_ADC_ConfigChannel+0x298>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10a      	bne.n	800182c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	061a      	lsls	r2, r3, #24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800182a:	e035      	b.n	8001898 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68d9      	ldr	r1, [r3, #12]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	4603      	mov	r3, r0
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4403      	add	r3, r0
 8001844:	3b1e      	subs	r3, #30
 8001846:	409a      	lsls	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001850:	e022      	b.n	8001898 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6919      	ldr	r1, [r3, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	2207      	movs	r2, #7
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43da      	mvns	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	400a      	ands	r2, r1
 8001874:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6919      	ldr	r1, [r3, #16]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4403      	add	r3, r0
 800188e:	409a      	lsls	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b06      	cmp	r3, #6
 800189e:	d824      	bhi.n	80018ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b05      	subs	r3, #5
 80018b2:	221f      	movs	r2, #31
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43da      	mvns	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	400a      	ands	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b05      	subs	r3, #5
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34
 80018e8:	e04c      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d824      	bhi.n	800193c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b23      	subs	r3, #35	; 0x23
 8001904:	221f      	movs	r2, #31
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b23      	subs	r3, #35	; 0x23
 800192e:	fa00 f203 	lsl.w	r2, r0, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
 800193a:	e023      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b41      	subs	r3, #65	; 0x41
 800194e:	221f      	movs	r2, #31
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	3b41      	subs	r3, #65	; 0x41
 8001978:	fa00 f203 	lsl.w	r2, r0, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <HAL_ADC_ConfigChannel+0x29c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1f4>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a2c      	ldr	r2, [pc, #176]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 800199e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <HAL_ADC_ConfigChannel+0x29c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10f      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d10b      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_ADC_ConfigChannel+0x29c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d12b      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x280>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_ADC_ConfigChannel+0x298>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d003      	beq.n	80019ea <HAL_ADC_ConfigChannel+0x23a>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b11      	cmp	r3, #17
 80019e8:	d122      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a00:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_ADC_ConfigChannel+0x298>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d111      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9a      	lsrs	r2, r3, #18
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a22:	e002      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	10000012 	.word	0x10000012
 8001a4c:	40012000 	.word	0x40012000
 8001a50:	40012300 	.word	0x40012300
 8001a54:	20000000 	.word	0x20000000
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a64:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <ADC_Init+0x1ec>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a77      	ldr	r2, [pc, #476]	; (8001c48 <ADC_Init+0x1ec>)
 8001a6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a6e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a70:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <ADC_Init+0x1ec>)
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4973      	ldr	r1, [pc, #460]	; (8001c48 <ADC_Init+0x1ec>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <ADC_Init+0x1f0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00f      	b.n	8001b56 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0202 	bic.w	r2, r2, #2
 8001b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	005a      	lsls	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	035a      	lsls	r2, r3, #13
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e007      	b.n	8001bcc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	051a      	lsls	r2, r3, #20
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c0e:	025a      	lsls	r2, r3, #9
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	029a      	lsls	r2, r3, #10
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40012300 	.word	0x40012300
 8001c4c:	0f000001 	.word	0x0f000001

08001c50 <__NVIC_SetPriorityGrouping>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	05fa0000 	.word	0x05fa0000

08001c98 <__NVIC_GetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e054      	b.n	8001f30 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7f5b      	ldrb	r3, [r3, #29]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fbe6 	bl	8000668 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_CRC_Init+0xc4>)
 8001eb0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0218 	bic.w	r2, r2, #24
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	e00c      	b.n	8001ede <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f834 	bl	8001f3c <HAL_CRCEx_Polynomial_Set>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e028      	b.n	8001f30 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	795b      	ldrb	r3, [r3, #5]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	e004      	b.n	8001efc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6912      	ldr	r2, [r2, #16]
 8001efa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699a      	ldr	r2, [r3, #24]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	04c11db7 	.word	0x04c11db7

08001f3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f4c:	231f      	movs	r3, #31
 8001f4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f50:	bf00      	nop
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	613a      	str	r2, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_CRCEx_Polynomial_Set+0x34>
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b18      	cmp	r3, #24
 8001f74:	d846      	bhi.n	8002004 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	0800200b 	.word	0x0800200b
 8001f80:	08002005 	.word	0x08002005
 8001f84:	08002005 	.word	0x08002005
 8001f88:	08002005 	.word	0x08002005
 8001f8c:	08002005 	.word	0x08002005
 8001f90:	08002005 	.word	0x08002005
 8001f94:	08002005 	.word	0x08002005
 8001f98:	08002005 	.word	0x08002005
 8001f9c:	08001ff9 	.word	0x08001ff9
 8001fa0:	08002005 	.word	0x08002005
 8001fa4:	08002005 	.word	0x08002005
 8001fa8:	08002005 	.word	0x08002005
 8001fac:	08002005 	.word	0x08002005
 8001fb0:	08002005 	.word	0x08002005
 8001fb4:	08002005 	.word	0x08002005
 8001fb8:	08002005 	.word	0x08002005
 8001fbc:	08001fed 	.word	0x08001fed
 8001fc0:	08002005 	.word	0x08002005
 8001fc4:	08002005 	.word	0x08002005
 8001fc8:	08002005 	.word	0x08002005
 8001fcc:	08002005 	.word	0x08002005
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	08002005 	.word	0x08002005
 8001fd8:	08002005 	.word	0x08002005
 8001fdc:	08001fe1 	.word	0x08001fe1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d913      	bls.n	800200e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fea:	e010      	b.n	800200e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d90f      	bls.n	8002012 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ff6:	e00c      	b.n	8002012 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	d90b      	bls.n	8002016 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002002:	e008      	b.n	8002016 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	75fb      	strb	r3, [r7, #23]
      break;
 8002008:	e006      	b.n	8002018 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800200a:	bf00      	nop
 800200c:	e004      	b.n	8002018 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800200e:	bf00      	nop
 8002010:	e002      	b.n	8002018 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002012:	bf00      	nop
 8002014:	e000      	b.n	8002018 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002016:	bf00      	nop
  }
  if (status == HAL_OK)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 0118 	bic.w	r1, r3, #24
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0ac      	b.n	80021b4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fadc 	bl	800261c <DFSDM_GetChannelFromInstance>
 8002064:	4603      	mov	r3, r0
 8002066:	4a55      	ldr	r2, [pc, #340]	; (80021bc <HAL_DFSDM_ChannelInit+0x174>)
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e09f      	b.n	80021b4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7fe fcdb 	bl	8000a30 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800207a:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <HAL_DFSDM_ChannelInit+0x178>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_DFSDM_ChannelInit+0x178>)
 8002082:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8002084:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <HAL_DFSDM_ChannelInit+0x178>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d125      	bne.n	80020d8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800208c:	4b4d      	ldr	r3, [pc, #308]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a4c      	ldr	r2, [pc, #304]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002096:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002098:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4948      	ldr	r1, [pc, #288]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020ac:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80020b0:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	791b      	ldrb	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d108      	bne.n	80020cc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	493f      	ldr	r1, [pc, #252]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020d6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80020e6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020f6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80020fc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 020f 	bic.w	r2, r2, #15
 8002114:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800213c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f002 0207 	and.w	r2, r2, #7
 8002168:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002194:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa3a 	bl	800261c <DFSDM_GetChannelFromInstance>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4904      	ldr	r1, [pc, #16]	; (80021bc <HAL_DFSDM_ChannelInit+0x174>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200064a0 	.word	0x200064a0
 80021c0:	2000649c 	.word	0x2000649c
 80021c4:	40017400 	.word	0x40017400

080021c8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0c6      	b.n	8002368 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a64      	ldr	r2, [pc, #400]	; (8002370 <HAL_DFSDM_FilterInit+0x1a8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d003      	beq.n	80021f4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b7      	b.n	8002368 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe fb25 	bl	8000860 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002224:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7a1b      	ldrb	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e007      	b.n	8002250 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800224e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7a5b      	ldrb	r3, [r3, #9]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e007      	b.n	800227a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_DFSDM_FilterInit+0x1ac>)
 8002286:	400b      	ands	r3, r1
 8002288:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d108      	bne.n	80022a4 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7c1b      	ldrb	r3, [r3, #16]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d108      	bne.n	80022be <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0210 	orr.w	r2, r2, #16
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e007      	b.n	80022ce <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0210 	bic.w	r2, r2, #16
 80022cc:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7c5b      	ldrb	r3, [r3, #17]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d108      	bne.n	80022e8 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e007      	b.n	80022f8 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0220 	bic.w	r2, r2, #32
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6959      	ldr	r1, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_DFSDM_FilterInit+0x1b0>)
 8002304:	400b      	ands	r3, r1
 8002306:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6959      	ldr	r1, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	3b01      	subs	r3, #1
 8002318:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800231a:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002322:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7c1a      	ldrb	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40017500 	.word	0x40017500
 8002374:	ffff80f7 	.word	0xffff80f7
 8002378:	1c00ff00 	.word	0x1c00ff00

0800237c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d02c      	beq.n	80023f0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d027      	beq.n	80023f0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80023ac:	400b      	ands	r3, r1
 80023ae:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10d      	bne.n	80023d2 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e00a      	b.n	80023e8 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
 80023ee:	e001      	b.n	80023f4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	f8fbffff 	.word	0xf8fbffff

08002408 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d016      	beq.n	8002458 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	b292      	uxth	r2, r2
 8002432:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	f000 f8d2 	bl	80025de <DFSDM_GetInjChannelsNbr>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	e000      	b.n	8002452 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8002450:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6493      	str	r3, [r2, #72]	; 0x48
 8002456:	e001      	b.n	800245c <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	75fb      	strb	r3, [r7, #23]
 8002488:	e066      	b.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002498:	d002      	beq.n	80024a0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
 800249e:	e05b      	b.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10e      	bne.n	80024c6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d002      	beq.n	80024c6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
 80024c4:	e048      	b.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d102      	bne.n	80024e8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
 80024e6:	e037      	b.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d004      	beq.n	80024fc <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d12b      	bne.n	8002554 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800250a:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002516:	d101      	bne.n	800251c <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800251a:	e000      	b.n	800251e <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 800251c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	331c      	adds	r3, #28
 800252e:	4619      	mov	r1, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f000 f9c2 	bl	80028bc <HAL_DMA_Start_IT>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	22ff      	movs	r2, #255	; 0xff
 8002542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800254a:	e005      	b.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f8b1 	bl	80026b4 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002552:	e001      	b.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	080025a1 	.word	0x080025a1
 8002568:	080025bd 	.word	0x080025bd
 800256c:	08002585 	.word	0x08002585

08002570 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f005 fc86 	bl	8007ea4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f005 fc94 	bl	8007edc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2203      	movs	r2, #3
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff ffcd 	bl	8002570 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80025f0:	e00a      	b.n	8002608 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f1      	bne.n	80025f2 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <DFSDM_GetChannelFromInstance+0x7c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d102      	bne.n	8002632 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e02b      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <DFSDM_GetChannelFromInstance+0x80>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d102      	bne.n	8002640 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800263a:	2301      	movs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e024      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <DFSDM_GetChannelFromInstance+0x84>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d102      	bne.n	800264e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002648:	2302      	movs	r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e01d      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <DFSDM_GetChannelFromInstance+0x88>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d102      	bne.n	800265c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002656:	2303      	movs	r3, #3
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e016      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d102      	bne.n	800266a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002664:	2304      	movs	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e00f      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <DFSDM_GetChannelFromInstance+0x90>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d102      	bne.n	8002678 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002672:	2305      	movs	r3, #5
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e008      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <DFSDM_GetChannelFromInstance+0x94>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d102      	bne.n	8002686 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002680:	2306      	movs	r3, #6
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e001      	b.n	800268a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002686:	2307      	movs	r3, #7
 8002688:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40017400 	.word	0x40017400
 800269c:	40017420 	.word	0x40017420
 80026a0:	40017440 	.word	0x40017440
 80026a4:	40017460 	.word	0x40017460
 80026a8:	40017480 	.word	0x40017480
 80026ac:	400174a0 	.word	0x400174a0
 80026b0:	400174c0 	.word	0x400174c0

080026b4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e033      	b.n	800273e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80026f4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800270c:	2b03      	cmp	r3, #3
 800270e:	d116      	bne.n	800273e <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0202 	orr.w	r2, r2, #2
 8002726:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <DFSDM_RegConvStart+0x84>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	e000      	b.n	800273a <DFSDM_RegConvStart+0x86>
 8002738:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <DFSDM_RegConvStart+0x98>
 8002748:	2202      	movs	r2, #2
 800274a:	e000      	b.n	800274e <DFSDM_RegConvStart+0x9a>
 800274c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7fe ffac 	bl	80016c8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e099      	b.n	80028b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279c:	e00f      	b.n	80027be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800279e:	f7fe ff93 	bl	80016c8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d908      	bls.n	80027be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2203      	movs	r2, #3
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e078      	b.n	80028b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e8      	bne.n	800279e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_DMA_Init+0x158>)
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b04      	cmp	r3, #4
 8002816:	d107      	bne.n	8002828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4313      	orrs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0307 	bic.w	r3, r3, #7
 800283e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2b04      	cmp	r3, #4
 8002850:	d117      	bne.n	8002882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 faa5 	bl	8002db4 <DMA_CheckFifoParam>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800287e:	2301      	movs	r3, #1
 8002880:	e016      	b.n	80028b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa5c 	bl	8002d48 <DMA_CalcBaseAndBitshift>
 8002890:	4603      	mov	r3, r0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	223f      	movs	r2, #63	; 0x3f
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	e010803f 	.word	0xe010803f

080028bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_DMA_Start_IT+0x26>
 80028de:	2302      	movs	r3, #2
 80028e0:	e048      	b.n	8002974 <HAL_DMA_Start_IT+0xb8>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d137      	bne.n	8002966 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f9ee 	bl	8002cec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	223f      	movs	r2, #63	; 0x3f
 8002916:	409a      	lsls	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0216 	orr.w	r2, r2, #22
 800292a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800293a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e005      	b.n	8002972 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800296e:	2302      	movs	r3, #2
 8002970:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002972:	7dfb      	ldrb	r3, [r7, #23]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d004      	beq.n	800299a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e00c      	b.n	80029b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2205      	movs	r2, #5
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029cc:	4b8e      	ldr	r3, [pc, #568]	; (8002c08 <HAL_DMA_IRQHandler+0x248>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a8e      	ldr	r2, [pc, #568]	; (8002c0c <HAL_DMA_IRQHandler+0x24c>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	2208      	movs	r2, #8
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01a      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2208      	movs	r2, #8
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	2201      	movs	r2, #1
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d012      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	2201      	movs	r2, #1
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	2204      	movs	r2, #4
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d012      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2204      	movs	r2, #4
 8002a86:	409a      	lsls	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d043      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d03c      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2210      	movs	r2, #16
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d018      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d024      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
 8002aee:	e01f      	b.n	8002b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
 8002b00:	e016      	b.n	8002b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0208 	bic.w	r2, r2, #8
 8002b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	2220      	movs	r2, #32
 8002b36:	409a      	lsls	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 808f 	beq.w	8002c60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8087 	beq.w	8002c60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	2220      	movs	r2, #32
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d136      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0216 	bic.w	r2, r2, #22
 8002b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <HAL_DMA_IRQHandler+0x1da>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0208 	bic.w	r2, r2, #8
 8002ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	223f      	movs	r2, #63	; 0x3f
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d07e      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
        }
        return;
 8002bd6:	e079      	b.n	8002ccc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01d      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10d      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d031      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
 8002c04:	e02c      	b.n	8002c60 <HAL_DMA_IRQHandler+0x2a0>
 8002c06:	bf00      	nop
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d023      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
 8002c20:	e01e      	b.n	8002c60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0210 	bic.w	r2, r2, #16
 8002c3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d032      	beq.n	8002cce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d022      	beq.n	8002cba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2205      	movs	r2, #5
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d307      	bcc.n	8002ca8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f2      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x2cc>
 8002ca6:	e000      	b.n	8002caa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ca8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e000      	b.n	8002cce <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ccc:	bf00      	nop
    }
  }
}
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d108      	bne.n	8002d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d2a:	e007      	b.n	8002d3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3b10      	subs	r3, #16
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <DMA_CalcBaseAndBitshift+0x60>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <DMA_CalcBaseAndBitshift+0x64>)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d908      	bls.n	8002d88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	1d1a      	adds	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	659a      	str	r2, [r3, #88]	; 0x58
 8002d86:	e006      	b.n	8002d96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	aaaaaaab 	.word	0xaaaaaaab
 8002dac:	08008104 	.word	0x08008104
 8002db0:	fffffc00 	.word	0xfffffc00

08002db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11f      	bne.n	8002e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d856      	bhi.n	8002e82 <DMA_CheckFifoParam+0xce>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <DMA_CheckFifoParam+0x28>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002dff 	.word	0x08002dff
 8002de4:	08002ded 	.word	0x08002ded
 8002de8:	08002e83 	.word	0x08002e83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d046      	beq.n	8002e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e043      	b.n	8002e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e06:	d140      	bne.n	8002e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0c:	e03d      	b.n	8002e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d121      	bne.n	8002e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d837      	bhi.n	8002e8e <DMA_CheckFifoParam+0xda>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <DMA_CheckFifoParam+0x70>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e3b 	.word	0x08002e3b
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002e4d 	.word	0x08002e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e030      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d025      	beq.n	8002e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4a:	e022      	b.n	8002e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e54:	d11f      	bne.n	8002e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e5a:	e01c      	b.n	8002e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d903      	bls.n	8002e6a <DMA_CheckFifoParam+0xb6>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d003      	beq.n	8002e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e68:	e018      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e6e:	e015      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e00b      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e82:	bf00      	nop
 8002e84:	e00a      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e86:	bf00      	nop
 8002e88:	e008      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e006      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e004      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e175      	b.n	80031b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f040 8164 	bne.w	80031b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d005      	beq.n	8002f02 <HAL_GPIO_Init+0x56>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d130      	bne.n	8002f64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 0201 	and.w	r2, r3, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d017      	beq.n	8002fa0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d123      	bne.n	8002ff4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	69b9      	ldr	r1, [r7, #24]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80be 	beq.w	80031b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_GPIO_Init+0x324>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4a65      	ldr	r2, [pc, #404]	; (80031d0 <HAL_GPIO_Init+0x324>)
 800303c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003040:	6453      	str	r3, [r2, #68]	; 0x44
 8003042:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_GPIO_Init+0x324>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800304e:	4a61      	ldr	r2, [pc, #388]	; (80031d4 <HAL_GPIO_Init+0x328>)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_GPIO_Init+0x32c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d037      	beq.n	80030ea <HAL_GPIO_Init+0x23e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_GPIO_Init+0x330>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_GPIO_Init+0x23a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_GPIO_Init+0x334>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02b      	beq.n	80030e2 <HAL_GPIO_Init+0x236>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <HAL_GPIO_Init+0x338>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d025      	beq.n	80030de <HAL_GPIO_Init+0x232>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a54      	ldr	r2, [pc, #336]	; (80031e8 <HAL_GPIO_Init+0x33c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01f      	beq.n	80030da <HAL_GPIO_Init+0x22e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a53      	ldr	r2, [pc, #332]	; (80031ec <HAL_GPIO_Init+0x340>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d019      	beq.n	80030d6 <HAL_GPIO_Init+0x22a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a52      	ldr	r2, [pc, #328]	; (80031f0 <HAL_GPIO_Init+0x344>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_GPIO_Init+0x226>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a51      	ldr	r2, [pc, #324]	; (80031f4 <HAL_GPIO_Init+0x348>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00d      	beq.n	80030ce <HAL_GPIO_Init+0x222>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_GPIO_Init+0x34c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <HAL_GPIO_Init+0x21e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	; (80031fc <HAL_GPIO_Init+0x350>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_GPIO_Init+0x21a>
 80030c2:	2309      	movs	r3, #9
 80030c4:	e012      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030c6:	230a      	movs	r3, #10
 80030c8:	e010      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ca:	2308      	movs	r3, #8
 80030cc:	e00e      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x328>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_GPIO_Init+0x354>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003158:	4a29      	ldr	r2, [pc, #164]	; (8003200 <HAL_GPIO_Init+0x354>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315e:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_GPIO_Init+0x354>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_GPIO_Init+0x354>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <HAL_GPIO_Init+0x354>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae86 	bls.w	8002ecc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40022400 	.word	0x40022400
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_PWREx_EnableOverDrive+0x98>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003262:	f7fe fa31 	bl	80016c8 <HAL_GetTick>
 8003266:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003268:	e009      	b.n	800327e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800326a:	f7fe fa2d 	bl	80016c8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003278:	d901      	bls.n	800327e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e022      	b.n	80032c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d1ee      	bne.n	800326a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003296:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003298:	f7fe fa16 	bl	80016c8 <HAL_GetTick>
 800329c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800329e:	e009      	b.n	80032b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a0:	f7fe fa12 	bl	80016c8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ae:	d901      	bls.n	80032b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e007      	b.n	80032c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c0:	d1ee      	bne.n	80032a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e29b      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f8:	4b96      	ldr	r3, [pc, #600]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00c      	beq.n	800331e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003304:	4b93      	ldr	r3, [pc, #588]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d112      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
 8003310:	4b90      	ldr	r3, [pc, #576]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06c      	beq.n	8003404 <HAL_RCC_OscConfig+0x130>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d168      	bne.n	8003404 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e275      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x7a>
 8003340:	4b84      	ldr	r3, [pc, #528]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e02e      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x9c>
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7b      	ldr	r2, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xc0>
 800337a:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a72      	ldr	r2, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6b      	ldr	r2, [pc, #428]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f988 	bl	80016c8 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe f984 	bl	80016c8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e229      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xe8>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe f974 	bl	80016c8 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f970 	bl	80016c8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e215      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x110>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d069      	beq.n	80034e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003412:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x190>
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1e9      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	493d      	ldr	r1, [pc, #244]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e040      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a38      	ldr	r2, [pc, #224]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe f926 	bl	80016c8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe f922 	bl	80016c8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1c7      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4929      	ldr	r1, [pc, #164]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
 80034b2:	e018      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe f902 	bl	80016c8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe f8fe 	bl	80016c8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1a3      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d038      	beq.n	8003564 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fe f8df 	bl	80016c8 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe f8db 	bl	80016c8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e180      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x23a>
 800352c:	e01a      	b.n	8003564 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe f8c5 	bl	80016c8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe f8c1 	bl	80016c8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d903      	bls.n	8003558 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e166      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
 8003554:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b92      	ldr	r3, [pc, #584]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a4 	beq.w	80036ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b8c      	ldr	r3, [pc, #560]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b89      	ldr	r3, [pc, #548]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a88      	ldr	r2, [pc, #544]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	4b83      	ldr	r3, [pc, #524]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7f      	ldr	r2, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fe f889 	bl	80016c8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fe f885 	bl	80016c8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e12a      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035cc:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x31a>
 80035e0:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a6f      	ldr	r2, [pc, #444]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	e02d      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x33c>
 80035f6:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a6a      	ldr	r2, [pc, #424]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a67      	ldr	r2, [pc, #412]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e01c      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10c      	bne.n	8003632 <HAL_RCC_OscConfig+0x35e>
 8003618:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a5e      	ldr	r2, [pc, #376]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e00b      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 8003632:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d015      	beq.n	800367e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe f839 	bl	80016c8 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe f835 	bl	80016c8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0d8      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCC_OscConfig+0x386>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe f823 	bl	80016c8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe f81f 	bl	80016c8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0c2      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80ae 	beq.w	8003820 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d06d      	beq.n	80037ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d14b      	bne.n	8003770 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fff0 	bl	80016c8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd ffec 	bl	80016c8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e091      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	491b      	ldr	r1, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fd ffbe 	bl	80016c8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd ffba 	bl	80016c8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e05f      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x47c>
 800376e:	e057      	b.n	8003820 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd ffa4 	bl	80016c8 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd ffa0 	bl	80016c8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e045      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x4b0>
 80037a2:	e03d      	b.n	8003820 <HAL_RCC_OscConfig+0x54c>
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_RCC_OscConfig+0x558>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d030      	beq.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d129      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d122      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d119      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10f      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 020f 	bic.w	r2, r3, #15
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fd fed0 	bl	80016c8 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fd fecc 	bl	80016c8 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1cc>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1d0>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fe2c 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023c00 	.word	0x40023c00
 80039f8:	40023800 	.word	0x40023800
 80039fc:	080080ec 	.word	0x080080ec
 8003a00:	20000000 	.word	0x20000000
 8003a04:	20000004 	.word	0x20000004

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b090      	sub	sp, #64	; 0x40
 8003a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
 8003a14:	2300      	movs	r3, #0
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	f200 80a1 	bhi.w	8003b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3a:	e09b      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a40:	e09b      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a42:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a46:	e098      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a52:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	2200      	movs	r2, #0
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	627a      	str	r2, [r7, #36]	; 0x24
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a70:	2100      	movs	r1, #0
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a74:	fb03 f201 	mul.w	r2, r3, r1
 8003a78:	2300      	movs	r3, #0
 8003a7a:	fb00 f303 	mul.w	r3, r0, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a82:	fba0 1202 	umull	r1, r2, r0, r2
 8003a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a88:	460a      	mov	r2, r1
 8003a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8e:	4413      	add	r3, r2
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	2200      	movs	r2, #0
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aa2:	f7fc fbc9 	bl	8000238 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4613      	mov	r3, r2
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aae:	e053      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab0:	4b35      	ldr	r3, [pc, #212]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	617a      	str	r2, [r7, #20]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ac2:	f04f 0b00 	mov.w	fp, #0
 8003ac6:	4652      	mov	r2, sl
 8003ac8:	465b      	mov	r3, fp
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	0159      	lsls	r1, r3, #5
 8003ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad8:	0150      	lsls	r0, r2, #5
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	ebb2 080a 	subs.w	r8, r2, sl
 8003ae2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003af2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003af6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003afa:	ebb2 0408 	subs.w	r4, r2, r8
 8003afe:	eb63 0509 	sbc.w	r5, r3, r9
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	00eb      	lsls	r3, r5, #3
 8003b0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b10:	00e2      	lsls	r2, r4, #3
 8003b12:	4614      	mov	r4, r2
 8003b14:	461d      	mov	r5, r3
 8003b16:	eb14 030a 	adds.w	r3, r4, sl
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	eb45 030b 	adc.w	r3, r5, fp
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b2e:	4629      	mov	r1, r5
 8003b30:	028b      	lsls	r3, r1, #10
 8003b32:	4621      	mov	r1, r4
 8003b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b38:	4621      	mov	r1, r4
 8003b3a:	028a      	lsls	r2, r1, #10
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	2200      	movs	r2, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	60fa      	str	r2, [r7, #12]
 8003b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b4c:	f7fc fb74 	bl	8000238 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	3301      	adds	r3, #1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b72:	e002      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3740      	adds	r7, #64	; 0x40
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	017d7840 	.word	0x017d7840

08003b94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	080080fc 	.word	0x080080fc

08003bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd8:	f7ff ffdc 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0b5b      	lsrs	r3, r3, #13
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	080080fc 	.word	0x080080fc

08003bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d012      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c24:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c2e:	6093      	str	r3, [r2, #8]
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	4964      	ldr	r1, [pc, #400]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d017      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	4959      	ldr	r1, [pc, #356]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c92:	4b4e      	ldr	r3, [pc, #312]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	494a      	ldr	r1, [pc, #296]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 808b 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	4a39      	ldr	r2, [pc, #228]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6413      	str	r3, [r2, #64]	; 0x40
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd fce0 	bl	80016c8 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fd fcdc 	bl	80016c8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e38f      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d2a:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d035      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d02e      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d52:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d114      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fca4 	bl	80016c8 <HAL_GetTick>
 8003d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fd fca0 	bl	80016c8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e351      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ee      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db2:	d111      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	4901      	ldr	r1, [pc, #4]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	0ffffcff 	.word	0x0ffffcff
 8003dd8:	4bac      	ldr	r3, [pc, #688]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4aab      	ldr	r2, [pc, #684]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	4ba9      	ldr	r3, [pc, #676]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	49a6      	ldr	r1, [pc, #664]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d010      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e02:	4ba2      	ldr	r3, [pc, #648]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e08:	4aa0      	ldr	r2, [pc, #640]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e12:	4b9e      	ldr	r3, [pc, #632]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	499b      	ldr	r1, [pc, #620]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e30:	4b96      	ldr	r3, [pc, #600]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3e:	4993      	ldr	r1, [pc, #588]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e52:	4b8e      	ldr	r3, [pc, #568]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e60:	498a      	ldr	r1, [pc, #552]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e74:	4b85      	ldr	r3, [pc, #532]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e82:	4982      	ldr	r1, [pc, #520]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e96:	4b7d      	ldr	r3, [pc, #500]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4979      	ldr	r1, [pc, #484]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb8:	4b74      	ldr	r3, [pc, #464]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	4971      	ldr	r1, [pc, #452]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eda:	4b6c      	ldr	r3, [pc, #432]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	f023 020c 	bic.w	r2, r3, #12
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	4968      	ldr	r1, [pc, #416]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003efc:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	4960      	ldr	r1, [pc, #384]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2c:	4957      	ldr	r1, [pc, #348]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f40:	4b52      	ldr	r3, [pc, #328]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	494f      	ldr	r1, [pc, #316]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	4946      	ldr	r1, [pc, #280]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	493e      	ldr	r1, [pc, #248]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	4935      	ldr	r1, [pc, #212]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fea:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	4924      	ldr	r1, [pc, #144]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004038:	4914      	ldr	r1, [pc, #80]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405c:	490b      	ldr	r1, [pc, #44]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004080:	4902      	ldr	r1, [pc, #8]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800409c:	4b8a      	ldr	r3, [pc, #552]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	4986      	ldr	r1, [pc, #536]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040c0:	4b81      	ldr	r3, [pc, #516]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	497d      	ldr	r1, [pc, #500]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d006      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80d6 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040ec:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a75      	ldr	r2, [pc, #468]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f8:	f7fd fae6 	bl	80016c8 <HAL_GetTick>
 80040fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004100:	f7fd fae2 	bl	80016c8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e195      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004112:	4b6d      	ldr	r3, [pc, #436]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d021      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11d      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004132:	4b65      	ldr	r3, [pc, #404]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004146:	0e1b      	lsrs	r3, r3, #24
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	019a      	lsls	r2, r3, #6
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	061b      	lsls	r3, r3, #24
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	071b      	lsls	r3, r3, #28
 8004166:	4958      	ldr	r1, [pc, #352]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800418c:	2b00      	cmp	r3, #0
 800418e:	d02e      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004198:	d129      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800419a:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041a8:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ae:	0f1b      	lsrs	r3, r3, #28
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	019a      	lsls	r2, r3, #6
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	431a      	orrs	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	493e      	ldr	r1, [pc, #248]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041d6:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f023 021f 	bic.w	r2, r3, #31
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4938      	ldr	r1, [pc, #224]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041fa:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004208:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420e:	0f1b      	lsrs	r3, r3, #28
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	431a      	orrs	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	4926      	ldr	r1, [pc, #152]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d011      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	019a      	lsls	r2, r3, #6
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	491a      	ldr	r1, [pc, #104]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004272:	f7fd fa29 	bl	80016c8 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800427a:	f7fd fa25 	bl	80016c8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	; 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0d8      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b01      	cmp	r3, #1
 800429c:	f040 80ce 	bne.w	800443c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fd fa0c 	bl	80016c8 <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042b2:	e00b      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042b4:	f7fd fa08 	bl	80016c8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d904      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0bb      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042cc:	4b5e      	ldr	r3, [pc, #376]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d8:	d0ec      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d02e      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d12a      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004302:	4b51      	ldr	r3, [pc, #324]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004310:	4b4d      	ldr	r3, [pc, #308]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	0f1b      	lsrs	r3, r3, #28
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	019a      	lsls	r2, r3, #6
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	071b      	lsls	r3, r3, #28
 8004336:	4944      	ldr	r1, [pc, #272]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800433e:	4b42      	ldr	r3, [pc, #264]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	493d      	ldr	r1, [pc, #244]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d022      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436c:	d11d      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	0e1b      	lsrs	r3, r3, #24
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	0f1b      	lsrs	r3, r3, #28
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	019a      	lsls	r2, r3, #6
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	431a      	orrs	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	4929      	ldr	r1, [pc, #164]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d028      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	0e1b      	lsrs	r3, r3, #24
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	019a      	lsls	r2, r3, #6
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	431a      	orrs	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	4917      	ldr	r1, [pc, #92]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4911      	ldr	r1, [pc, #68]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004414:	f7fd f958 	bl	80016c8 <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800441c:	f7fd f954 	bl	80016c8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e007      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443a:	d1ef      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800

0800444c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800446a:	f040 80a3 	bne.w	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800446e:	4ba8      	ldr	r3, [pc, #672]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004474:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800447c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004484:	f000 808a 	beq.w	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800448e:	f200 8093 	bhi.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004498:	d07d      	beq.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a0:	f200 808a 	bhi.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b0:	d039      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80044b2:	e081      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044b4:	4b96      	ldr	r3, [pc, #600]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d108      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044c0:	4b93      	ldr	r3, [pc, #588]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c8:	4a92      	ldr	r2, [pc, #584]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e007      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80044d2:	4b8f      	ldr	r3, [pc, #572]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044da:	4a8f      	ldr	r2, [pc, #572]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80044e2:	4b8b      	ldr	r3, [pc, #556]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	0e1b      	lsrs	r3, r3, #24
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80044f0:	4b87      	ldr	r3, [pc, #540]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	fb03 f202 	mul.w	r2, r3, r2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800450a:	4b81      	ldr	r3, [pc, #516]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	617b      	str	r3, [r7, #20]
        break;
 8004524:	e049      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004526:	4b7a      	ldr	r3, [pc, #488]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004532:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453a:	4a76      	ldr	r2, [pc, #472]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e007      	b.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004544:	4b72      	ldr	r3, [pc, #456]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454c:	4a72      	ldr	r2, [pc, #456]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004554:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455a:	0e1b      	lsrs	r3, r3, #24
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004562:	4b6b      	ldr	r3, [pc, #428]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004568:	099b      	lsrs	r3, r3, #6
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	fb03 f202 	mul.w	r2, r3, r2
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800457c:	4b64      	ldr	r3, [pc, #400]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800457e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	617b      	str	r3, [r7, #20]
        break;
 8004594:	e011      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004596:	4b61      	ldr	r3, [pc, #388]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004598:	617b      	str	r3, [r7, #20]
        break;
 800459a:	e00e      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800459c:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80045a8:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80045aa:	617b      	str	r3, [r7, #20]
        break;
 80045ac:	e005      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80045ae:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045b0:	617b      	str	r3, [r7, #20]
        break;
 80045b2:	e002      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80045b8:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c0:	f040 80a3 	bne.w	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80045c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ca:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80045d2:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045da:	f000 808a 	beq.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045e4:	f200 809c 	bhi.w	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ee:	d07d      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f6:	f200 8093 	bhi.w	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004606:	d039      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004608:	e08a      	b.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800460a:	4b41      	ldr	r3, [pc, #260]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004616:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461e:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e007      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004628:	4b39      	ldr	r3, [pc, #228]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004630:	4a39      	ldr	r2, [pc, #228]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004638:	4b35      	ldr	r3, [pc, #212]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	0e1b      	lsrs	r3, r3, #24
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	fb03 f202 	mul.w	r2, r3, r2
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004660:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
        break;
 800467a:	e052      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004690:	4a20      	ldr	r2, [pc, #128]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e007      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800469a:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	0e1b      	lsrs	r3, r3, #24
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	fb03 f202 	mul.w	r2, r3, r2
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
        break;
 80046ea:	e01a      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80046ee:	617b      	str	r3, [r7, #20]
        break;
 80046f0:	e017      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046f2:	4b07      	ldr	r3, [pc, #28]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004700:	617b      	str	r3, [r7, #20]
        break;
 8004702:	e00e      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e00b      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800470a:	bf00      	nop
 800470c:	e009      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800
 8004714:	00f42400 	.word	0x00f42400
 8004718:	017d7840 	.word	0x017d7840
 800471c:	00bb8000 	.word	0x00bb8000
        break;
 8004720:	bf00      	nop

  return frequency;
 8004722:	697b      	ldr	r3, [r7, #20]
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e071      	b.n	800482a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	7f5b      	ldrb	r3, [r3, #29]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fc1c 	bl	8000f94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b10      	cmp	r3, #16
 800476e:	d053      	beq.n	8004818 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	22ca      	movs	r2, #202	; 0xca
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2253      	movs	r2, #83	; 0x53
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f99f 	bl	8004ac4 <RTC_EnterInitMode>
 8004786:	4603      	mov	r3, r0
 8004788:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d12a      	bne.n	80047e6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RTC_Init+0x104>)
 800479c:	400b      	ands	r3, r1
 800479e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6919      	ldr	r1, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	041a      	lsls	r2, r3, #16
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f9a8 	bl	8004b32 <RTC_ExitInitMode>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0208 	bic.w	r2, r2, #8
 80047fa:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	22ff      	movs	r2, #255	; 0xff
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
 8004816:	e001      	b.n	800481c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	ff8fffbf 	.word	0xff8fffbf

08004838 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	7f1b      	ldrb	r3, [r3, #28]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_RTC_SetTime+0x1c>
 8004850:	2302      	movs	r3, #2
 8004852:	e085      	b.n	8004960 <HAL_RTC_SetTime+0x128>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d126      	bne.n	80048b4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f97c 	bl	8004b7c <RTC_ByteToBcd2>
 8004884:	4603      	mov	r3, r0
 8004886:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f975 	bl	8004b7c <RTC_ByteToBcd2>
 8004892:	4603      	mov	r3, r0
 8004894:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004896:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	789b      	ldrb	r3, [r3, #2]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f96d 	bl	8004b7c <RTC_ByteToBcd2>
 80048a2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	78db      	ldrb	r3, [r3, #3]
 80048ac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e018      	b.n	80048e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2200      	movs	r2, #0
 80048c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048d4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80048da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	78db      	ldrb	r3, [r3, #3]
 80048e0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	22ca      	movs	r2, #202	; 0xca
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2253      	movs	r2, #83	; 0x53
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8e4 	bl	8004ac4 <RTC_EnterInitMode>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11e      	bne.n	8004944 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_RTC_SetTime+0x130>)
 800490e:	400b      	ands	r3, r1
 8004910:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004920:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f8f9 	bl	8004b32 <RTC_ExitInitMode>
 8004940:	4603      	mov	r3, r0
 8004942:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	22ff      	movs	r2, #255	; 0xff
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]

  return status;
 800495e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004960:	4618      	mov	r0, r3
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd90      	pop	{r4, r7, pc}
 8004968:	007f7f7f 	.word	0x007f7f7f

0800496c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	7f1b      	ldrb	r3, [r3, #28]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_RTC_SetDate+0x1c>
 8004984:	2302      	movs	r3, #2
 8004986:	e06f      	b.n	8004a68 <HAL_RTC_SetDate+0xfc>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2202      	movs	r2, #2
 8004992:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10e      	bne.n	80049b8 <HAL_RTC_SetDate+0x4c>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	330a      	adds	r3, #10
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11c      	bne.n	80049f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f8da 	bl	8004b7c <RTC_ByteToBcd2>
 80049c8:	4603      	mov	r3, r0
 80049ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f8d3 	bl	8004b7c <RTC_ByteToBcd2>
 80049d6:	4603      	mov	r3, r0
 80049d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	789b      	ldrb	r3, [r3, #2]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f8cb 	bl	8004b7c <RTC_ByteToBcd2>
 80049e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80049e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e00e      	b.n	8004a16 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	78db      	ldrb	r3, [r3, #3]
 80049fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a04:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a0a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	22ca      	movs	r2, #202	; 0xca
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2253      	movs	r2, #83	; 0x53
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f84c 	bl	8004ac4 <RTC_EnterInitMode>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <HAL_RTC_SetDate+0x104>)
 8004a3e:	400b      	ands	r3, r1
 8004a40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f875 	bl	8004b32 <RTC_ExitInitMode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]

  return status;
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}
 8004a70:	00ffff3f 	.word	0x00ffff3f

08004a74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a90:	f7fc fe1a 	bl	80016c8 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a96:	e009      	b.n	8004aac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a98:	f7fc fe16 	bl	80016c8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa6:	d901      	bls.n	8004aac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e007      	b.n	8004abc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ee      	beq.n	8004a98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d122      	bne.n	8004b28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fc fde9 	bl	80016c8 <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004af8:	e00c      	b.n	8004b14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004afa:	f7fc fde5 	bl	80016c8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b08:	d904      	bls.n	8004b14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <RTC_EnterInitMode+0x64>
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d1e8      	bne.n	8004afa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff89 	bl	8004a74 <HAL_RTC_WaitForSynchro>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004b8a:	e005      	b.n	8004b98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	3b0a      	subs	r3, #10
 8004b96:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b09      	cmp	r3, #9
 8004b9c:	d8f6      	bhi.n	8004b8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b2db      	uxtb	r3, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e156      	b.n	8004e84 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fa5e 	bl	80010ac <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f95b 	bl	8004eb4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d00c      	beq.n	8004c20 <HAL_SAI_Init+0x68>
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d80d      	bhi.n	8004c26 <HAL_SAI_Init+0x6e>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_SAI_Init+0x5c>
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d003      	beq.n	8004c1a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004c12:	e008      	b.n	8004c26 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
      break;
 8004c18:	e006      	b.n	8004c28 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	61fb      	str	r3, [r7, #28]
      break;
 8004c1e:	e003      	b.n	8004c28 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004c20:	2320      	movs	r3, #32
 8004c22:	61fb      	str	r3, [r7, #28]
      break;
 8004c24:	e000      	b.n	8004c28 <HAL_SAI_Init+0x70>
      break;
 8004c26:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d81e      	bhi.n	8004c6e <HAL_SAI_Init+0xb6>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_SAI_Init+0x80>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c4f 	.word	0x08004c4f
 8004c40:	08004c57 	.word	0x08004c57
 8004c44:	08004c5f 	.word	0x08004c5f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004c4c:	e010      	b.n	8004c70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c52:	617b      	str	r3, [r7, #20]
    }
    break;
 8004c54:	e00c      	b.n	8004c70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c5a:	617b      	str	r3, [r7, #20]
    }
    break;
 8004c5c:	e008      	b.n	8004c70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c62:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004c6c:	e000      	b.n	8004c70 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004c6e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a85      	ldr	r2, [pc, #532]	; (8004e8c <HAL_SAI_Init+0x2d4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_SAI_Init+0xcc>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a84      	ldr	r2, [pc, #528]	; (8004e90 <HAL_SAI_Init+0x2d8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d103      	bne.n	8004c8c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004c84:	4a83      	ldr	r2, [pc, #524]	; (8004e94 <HAL_SAI_Init+0x2dc>)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e002      	b.n	8004c92 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004c8c:	4a82      	ldr	r2, [pc, #520]	; (8004e98 <HAL_SAI_Init+0x2e0>)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04c      	beq.n	8004d34 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7a      	ldr	r2, [pc, #488]	; (8004e8c <HAL_SAI_Init+0x2d4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_SAI_Init+0xfa>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a78      	ldr	r2, [pc, #480]	; (8004e90 <HAL_SAI_Init+0x2d8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d104      	bne.n	8004cbc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004cb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004cb6:	f7ff fbc9 	bl	800444c <HAL_RCCEx_GetPeriphCLKFreq>
 8004cba:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a76      	ldr	r2, [pc, #472]	; (8004e9c <HAL_SAI_Init+0x2e4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_SAI_Init+0x118>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a75      	ldr	r2, [pc, #468]	; (8004ea0 <HAL_SAI_Init+0x2e8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d104      	bne.n	8004cda <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004cd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004cd4:	f7ff fbba 	bl	800444c <HAL_RCCEx_GetPeriphCLKFreq>
 8004cd8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	025b      	lsls	r3, r3, #9
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a6b      	ldr	r2, [pc, #428]	; (8004ea4 <HAL_SAI_Init+0x2ec>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	08da      	lsrs	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	4b68      	ldr	r3, [pc, #416]	; (8004ea4 <HAL_SAI_Init+0x2ec>)
 8004d04:	fba3 2301 	umull	r2, r3, r3, r1
 8004d08:	08da      	lsrs	r2, r3, #3
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	1aca      	subs	r2, r1, r3
 8004d14:	2a08      	cmp	r2, #8
 8004d16:	d904      	bls.n	8004d22 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d104      	bne.n	8004d34 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	085a      	lsrs	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_SAI_Init+0x18c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d109      	bne.n	8004d58 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_SAI_Init+0x198>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e001      	b.n	8004d54 <HAL_SAI_Init+0x19c>
 8004d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e008      	b.n	8004d6a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d102      	bne.n	8004d66 <HAL_SAI_Init+0x1ae>
 8004d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d64:	e000      	b.n	8004d68 <HAL_SAI_Init+0x1b0>
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b4c      	ldr	r3, [pc, #304]	; (8004ea8 <HAL_SAI_Init+0x2f0>)
 8004d76:	400b      	ands	r3, r1
 8004d78:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d8e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	431a      	orrs	r2, r3
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004da2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004dae:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	051b      	lsls	r3, r3, #20
 8004db6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_SAI_Init+0x2f4>)
 8004dcc:	400b      	ands	r3, r1
 8004dce:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6899      	ldr	r1, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <HAL_SAI_Init+0x2f8>)
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6899      	ldr	r1, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004e0e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004e14:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004e1a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	3b01      	subs	r3, #1
 8004e22:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004e24:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68d9      	ldr	r1, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004e3c:	400b      	ands	r3, r1
 8004e3e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68d9      	ldr	r1, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40015804 	.word	0x40015804
 8004e90:	40015824 	.word	0x40015824
 8004e94:	40015800 	.word	0x40015800
 8004e98:	40015c00 	.word	0x40015c00
 8004e9c:	40015c04 	.word	0x40015c04
 8004ea0:	40015c24 	.word	0x40015c24
 8004ea4:	cccccccd 	.word	0xcccccccd
 8004ea8:	ff05c010 	.word	0xff05c010
 8004eac:	ffff1ff0 	.word	0xffff1ff0
 8004eb0:	fff88000 	.word	0xfff88000

08004eb4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <SAI_Disable+0x68>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <SAI_Disable+0x6c>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0b1b      	lsrs	r3, r3, #12
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ede:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1e5a      	subs	r2, r3, #1
 8004ee4:	60fa      	str	r2, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	72fb      	strb	r3, [r7, #11]
      break;
 8004efe:	e006      	b.n	8004f0e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e8      	bne.n	8004ee0 <SAI_Disable+0x2c>

  return status;
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	95cbec1b 	.word	0x95cbec1b

08004f24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e022      	b.n	8004f7c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fc f97b 	bl	8001244 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2203      	movs	r2, #3
 8004f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f814 	bl	8004f84 <HAL_SD_InitCard>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e00a      	b.n	8004f7c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004fa0:	2376      	movs	r3, #118	; 0x76
 8004fa2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681d      	ldr	r5, [r3, #0]
 8004fa8:	466c      	mov	r4, sp
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f001 ff45 	bl	8006e4c <SDMMC_Init>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e059      	b.n	8005088 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 ff79 	bl	8006ee0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004ffe:	2002      	movs	r0, #2
 8005000:	f7fc fb6e 	bl	80016e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fff3 	bl	8005ff0 <SD_PowerON>
 800500a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e02e      	b.n	8005088 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 ff12 	bl	8005e54 <SD_InitCard>
 8005030:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e01b      	b.n	8005088 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005058:	4618      	mov	r0, r3
 800505a:	f001 ffd3 	bl	8007004 <SDMMC_CmdBlockLength>
 800505e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00f      	beq.n	8005086 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <HAL_SD_InitCard+0x10c>)
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3728      	adds	r7, #40	; 0x28
 800508c:	46bd      	mov	sp, r7
 800508e:	bdb0      	pop	{r4, r5, r7, pc}
 8005090:	004005ff 	.word	0x004005ff

08005094 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d107      	bne.n	80050bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0c3      	b.n	8005244 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f040 80bc 	bne.w	8005242 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80050d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d907      	bls.n	80050ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0aa      	b.n	8005244 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2203      	movs	r2, #3
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a4e      	ldr	r2, [pc, #312]	; (800524c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a4d      	ldr	r2, [pc, #308]	; (8005250 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800511c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2200      	movs	r2, #0
 8005124:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3380      	adds	r3, #128	; 0x80
 8005154:	4619      	mov	r1, r3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	025b      	lsls	r3, r3, #9
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	f7fd fbad 	bl	80028bc <HAL_DMA_Start_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d017      	beq.n	8005198 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a35      	ldr	r2, [pc, #212]	; (8005254 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e055      	b.n	8005244 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	025b      	lsls	r3, r3, #9
 80051c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80051c2:	2390      	movs	r3, #144	; 0x90
 80051c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051c6:	2302      	movs	r3, #2
 80051c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f107 0210 	add.w	r2, r7, #16
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 fee5 	bl	8006fac <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d90a      	bls.n	80051fe <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2282      	movs	r2, #130	; 0x82
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 ff49 	bl	800708c <SDMMC_CmdReadMultiBlock>
 80051fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80051fc:	e009      	b.n	8005212 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2281      	movs	r2, #129	; 0x81
 8005202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	4618      	mov	r0, r3
 800520c:	f001 ff1c 	bl	8007048 <SDMMC_CmdReadSingleBlock>
 8005210:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d012      	beq.n	800523e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	431a      	orrs	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e002      	b.n	8005244 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3730      	adds	r7, #48	; 0x30
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	08005c63 	.word	0x08005c63
 8005250:	08005cd5 	.word	0x08005cd5
 8005254:	004005ff 	.word	0x004005ff

08005258 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	; 0x30
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d107      	bne.n	8005280 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0c6      	b.n	800540e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	f040 80bf 	bne.w	800540c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	441a      	add	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529e:	429a      	cmp	r2, r3
 80052a0:	d907      	bls.n	80052b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0ad      	b.n	800540e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2203      	movs	r2, #3
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 021a 	orr.w	r2, r2, #26
 80052d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	4a50      	ldr	r2, [pc, #320]	; (8005418 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80052d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	4a4f      	ldr	r2, [pc, #316]	; (800541c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80052e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	2200      	movs	r2, #0
 80052e8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d002      	beq.n	80052f8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	025b      	lsls	r3, r3, #9
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d90a      	bls.n	8005314 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	22a0      	movs	r2, #160	; 0xa0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530a:	4618      	mov	r0, r3
 800530c:	f001 ff02 	bl	8007114 <SDMMC_CmdWriteMultiBlock>
 8005310:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005312:	e009      	b.n	8005328 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2290      	movs	r2, #144	; 0x90
 8005318:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fed5 	bl	80070d0 <SDMMC_CmdWriteSingleBlock>
 8005326:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d012      	beq.n	8005354 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e05c      	b.n	800540e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	2240      	movs	r2, #64	; 0x40
 800536a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3380      	adds	r3, #128	; 0x80
 8005394:	461a      	mov	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	f7fd fa8e 	bl	80028bc <HAL_DMA_Start_IT>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01a      	beq.n	80053dc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 021a 	bic.w	r2, r2, #26
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a19      	ldr	r2, [pc, #100]	; (8005420 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e018      	b.n	800540e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	025b      	lsls	r3, r3, #9
 80053e6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80053e8:	2390      	movs	r3, #144	; 0x90
 80053ea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f107 0210 	add.w	r2, r7, #16
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fdd2 	bl	8006fac <SDMMC_ConfigData>

      return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3730      	adds	r7, #48	; 0x30
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	08005c39 	.word	0x08005c39
 800541c:	08005cd5 	.word	0x08005cd5
 8005420:	004005ff 	.word	0x004005ff

08005424 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_SD_IRQHandler+0x2e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ffef 	bl	800642e <SD_Read_IT>
 8005450:	e15a      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 808d 	beq.w	800557c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800546a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b9a      	ldr	r3, [pc, #616]	; (80056e0 <HAL_SD_IRQHandler+0x2bc>)
 8005478:	400b      	ands	r3, r1
 800547a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d039      	beq.n	800550a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_SD_IRQHandler+0x86>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fe52 	bl	8007158 <SDMMC_CmdStopTransfer>
 80054b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f921 	bl	8005710 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <HAL_SD_IRQHandler+0xd6>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f002 faba 	bl	8007a74 <HAL_SD_RxCpltCallback>
 8005500:	e102      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 faac 	bl	8007a60 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005508:	e0fe      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80f9 	beq.w	8005708 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d011      	beq.n	8005544 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f001 fe17 	bl	8007158 <SDMMC_CmdStopTransfer>
 800552a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8e6 	bl	8005710 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 80dc 	bne.w	8005708 <HAL_SD_IRQHandler+0x2e4>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 80d6 	bne.w	8005708 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0208 	bic.w	r2, r2, #8
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f002 fa73 	bl	8007a60 <HAL_SD_TxCpltCallback>
}
 800557a:	e0c5      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <HAL_SD_IRQHandler+0x178>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 ff9b 	bl	80064d0 <SD_Write_IT>
 800559a:	e0b5      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80ae 	beq.w	8005708 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	f043 0202 	orr.w	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	f043 0208 	orr.w	r2, r3, #8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f240 523a 	movw	r2, #1338	; 0x53a
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f001 fd90 	bl	8007158 <SDMMC_CmdStopTransfer>
 8005638:	4602      	mov	r2, r0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f857 	bl	8005710 <HAL_SD_ErrorCallback>
}
 8005662:	e051      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d04c      	beq.n	8005708 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_SD_IRQHandler+0x25e>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d011      	beq.n	80056a6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005686:	4a17      	ldr	r2, [pc, #92]	; (80056e4 <HAL_SD_IRQHandler+0x2c0>)
 8005688:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd f974 	bl	800297c <HAL_DMA_Abort_IT>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d036      	beq.n	8005708 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fb6a 	bl	8005d78 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80056a4:	e030      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_SD_IRQHandler+0x296>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d018      	beq.n	80056ec <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <HAL_SD_IRQHandler+0x2c4>)
 80056c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd f958 	bl	800297c <HAL_DMA_Abort_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01a      	beq.n	8005708 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb85 	bl	8005de6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80056dc:	e014      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
 80056de:	bf00      	nop
 80056e0:	ffff3ec5 	.word	0xffff3ec5
 80056e4:	08005d79 	.word	0x08005d79
 80056e8:	08005de7 	.word	0x08005de7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f002 f9a3 	bl	8007a4c <HAL_SD_AbortCallback>
}
 8005706:	e7ff      	b.n	8005708 <HAL_SD_IRQHandler+0x2e4>
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005732:	0f9b      	lsrs	r3, r3, #30
 8005734:	b2da      	uxtb	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573e:	0e9b      	lsrs	r3, r3, #26
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	b2da      	uxtb	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005750:	0e1b      	lsrs	r3, r3, #24
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	b2da      	uxtb	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	b2da      	uxtb	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	b2da      	uxtb	r2, r3
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005784:	0d1b      	lsrs	r3, r3, #20
 8005786:	b29a      	uxth	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	b2da      	uxtb	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a2:	0bdb      	lsrs	r3, r3, #15
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b4:	0b9b      	lsrs	r3, r3, #14
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c6:	0b5b      	lsrs	r3, r3, #13
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d8:	0b1b      	lsrs	r3, r3, #12
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d163      	bne.n	80058bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f8:	009a      	lsls	r2, r3, #2
 80057fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057fe:	4013      	ands	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005804:	0f92      	lsrs	r2, r2, #30
 8005806:	431a      	orrs	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005810:	0edb      	lsrs	r3, r3, #27
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	b2da      	uxtb	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005822:	0e1b      	lsrs	r3, r3, #24
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	b2da      	uxtb	r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005834:	0d5b      	lsrs	r3, r3, #21
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	b2da      	uxtb	r2, r3
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005846:	0c9b      	lsrs	r3, r3, #18
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	b2da      	uxtb	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005858:	0bdb      	lsrs	r3, r3, #15
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	b2da      	uxtb	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	7e1b      	ldrb	r3, [r3, #24]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	3302      	adds	r3, #2
 800587c:	2201      	movs	r2, #1
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005886:	fb03 f202 	mul.w	r2, r3, r2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	7a1b      	ldrb	r3, [r3, #8]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80058a8:	0a52      	lsrs	r2, r2, #9
 80058aa:	fb03 f202 	mul.w	r2, r3, r2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60
 80058ba:	e031      	b.n	8005920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d11d      	bne.n	8005900 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	431a      	orrs	r2, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	3301      	adds	r3, #1
 80058e0:	029a      	lsls	r2, r3, #10
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	661a      	str	r2, [r3, #96]	; 0x60
 80058fe:	e00f      	b.n	8005920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a58      	ldr	r2, [pc, #352]	; (8005a68 <HAL_SD_GetCardCSD+0x344>)
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e09d      	b.n	8005a5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005924:	0b9b      	lsrs	r3, r3, #14
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	b2da      	uxtb	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005936:	09db      	lsrs	r3, r3, #7
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593e:	b2da      	uxtb	r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594e:	b2da      	uxtb	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	0fdb      	lsrs	r3, r3, #31
 800595a:	b2da      	uxtb	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	0f5b      	lsrs	r3, r3, #29
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	b2da      	uxtb	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	0e9b      	lsrs	r3, r3, #26
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	0d9b      	lsrs	r3, r3, #22
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	b2da      	uxtb	r2, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	0d5b      	lsrs	r3, r3, #21
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	0bdb      	lsrs	r3, r3, #15
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	0b9b      	lsrs	r3, r3, #14
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	0b5b      	lsrs	r3, r3, #13
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	0b1b      	lsrs	r3, r3, #12
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	0a9b      	lsrs	r3, r3, #10
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	004005ff 	.word	0x004005ff

08005a6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005ac4:	b5b0      	push	{r4, r5, r7, lr}
 8005ac6:	b08e      	sub	sp, #56	; 0x38
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d02e      	beq.n	8005b42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d106      	bne.n	8005afa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
 8005af8:	e029      	b.n	8005b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b00:	d10a      	bne.n	8005b18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb2a 	bl	800615c <SD_WideBus_Enable>
 8005b08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
 8005b16:	e01a      	b.n	8005b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb67 	bl	80061f2 <SD_WideBus_Disable>
 8005b24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
 8005b32:	e00c      	b.n	8005b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8005b40:	e005      	b.n	8005b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b6c:	e01f      	b.n	8005bae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681d      	ldr	r5, [r3, #0]
 8005b94:	466c      	mov	r4, sp
 8005b96:	f107 0314 	add.w	r3, r7, #20
 8005b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f001 f94f 	bl	8006e4c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fa24 	bl	8007004 <SDMMC_CmdBlockLength>
 8005bbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00c      	beq.n	8005bde <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3728      	adds	r7, #40	; 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	004005ff 	.word	0x004005ff

08005bf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa7e 	bl	800610c <SD_SendStatus>
 8005c10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	0a5b      	lsrs	r3, r3, #9
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005c2e:	693b      	ldr	r3, [r7, #16]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	2b82      	cmp	r3, #130	; 0x82
 8005c76:	d111      	bne.n	8005c9c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f001 fa6b 	bl	8007158 <SDMMC_CmdStopTransfer>
 8005c82:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fd3a 	bl	8005710 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0208 	bic.w	r2, r2, #8
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f240 523a 	movw	r2, #1338	; 0x53a
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f001 fed5 	bl	8007a74 <HAL_SD_RxCpltCallback>
#endif
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fc fff6 	bl	8002cd4 <HAL_DMA_GetError>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d03e      	beq.n	8005d6c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d002      	beq.n	8005d0a <SD_DMAError+0x36>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d12d      	bne.n	8005d66 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <SD_DMAError+0xa0>)
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7ff ff62 	bl	8005bf8 <HAL_SD_GetCardState>
 8005d34:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b06      	cmp	r3, #6
 8005d3a:	d002      	beq.n	8005d42 <SD_DMAError+0x6e>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d10a      	bne.n	8005d58 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fa06 	bl	8007158 <SDMMC_CmdStopTransfer>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	431a      	orrs	r2, r3
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff fcd2 	bl	8005710 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	004005ff 	.word	0x004005ff

08005d78 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff ff31 	bl	8005bf8 <HAL_SD_GetCardState>
 8005d96:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d002      	beq.n	8005db2 <SD_DMATxAbort+0x3a>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d10a      	bne.n	8005dc8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f9ce 	bl	8007158 <SDMMC_CmdStopTransfer>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f001 fe3b 	bl	8007a4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005dd6:	e002      	b.n	8005dde <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff fc99 	bl	8005710 <HAL_SD_ErrorCallback>
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f240 523a 	movw	r2, #1338	; 0x53a
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff fefa 	bl	8005bf8 <HAL_SD_GetCardState>
 8005e04:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b06      	cmp	r3, #6
 8005e18:	d002      	beq.n	8005e20 <SD_DMARxAbort+0x3a>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d10a      	bne.n	8005e36 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f997 	bl	8007158 <SDMMC_CmdStopTransfer>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f001 fe04 	bl	8007a4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005e44:	e002      	b.n	8005e4c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff fc62 	bl	8005710 <HAL_SD_ErrorCallback>
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e54:	b5b0      	push	{r4, r5, r7, lr}
 8005e56:	b094      	sub	sp, #80	; 0x50
 8005e58:	af04      	add	r7, sp, #16
 8005e5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 f849 	bl	8006efc <SDMMC_GetPowerState>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e74:	e0b8      	b.n	8005fe8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d02f      	beq.n	8005ede <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fa73 	bl	800736e <SDMMC_CmdSendCID>
 8005e88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <SD_InitCard+0x40>
    {
      return errorstate;
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	e0a9      	b.n	8005fe8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 f873 	bl	8006f86 <SDMMC_GetResponse>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2104      	movs	r1, #4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 f86a 	bl	8006f86 <SDMMC_GetResponse>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2108      	movs	r1, #8
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 f861 	bl	8006f86 <SDMMC_GetResponse>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	210c      	movs	r1, #12
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 f858 	bl	8006f86 <SDMMC_GetResponse>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d00d      	beq.n	8005f02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f107 020e 	add.w	r2, r7, #14
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fa79 	bl	80073e8 <SDMMC_CmdSetRelAdd>
 8005ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <SD_InitCard+0xae>
    {
      return errorstate;
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	e072      	b.n	8005fe8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d036      	beq.n	8005f78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005f0a:	89fb      	ldrh	r3, [r7, #14]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f001 fa43 	bl	80073aa <SDMMC_CmdSendCSD>
 8005f24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2e:	e05b      	b.n	8005fe8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f825 	bl	8006f86 <SDMMC_GetResponse>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2104      	movs	r1, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 f81c 	bl	8006f86 <SDMMC_GetResponse>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2108      	movs	r1, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f813 	bl	8006f86 <SDMMC_GetResponse>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	210c      	movs	r1, #12
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f80a 	bl	8006f86 <SDMMC_GetResponse>
 8005f72:	4602      	mov	r2, r0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f801 	bl	8006f86 <SDMMC_GetResponse>
 8005f84:	4603      	mov	r3, r0
 8005f86:	0d1a      	lsrs	r2, r3, #20
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005f8c:	f107 0310 	add.w	r3, r7, #16
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fbc6 	bl	8005724 <HAL_SD_GetCardCSD>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fa2:	e021      	b.n	8005fe8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	2200      	movs	r2, #0
 8005fb0:	461c      	mov	r4, r3
 8005fb2:	4615      	mov	r5, r2
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	4608      	mov	r0, r1
 8005fba:	f001 f8ef 	bl	800719c <SDMMC_CmdSelDesel>
 8005fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <SD_InitCard+0x176>
  {
    return errorstate;
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	e00e      	b.n	8005fe8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681d      	ldr	r5, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	466c      	mov	r4, sp
 8005fd2:	f103 0210 	add.w	r2, r3, #16
 8005fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fdc:	3304      	adds	r3, #4
 8005fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 ff33 	bl	8006e4c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3740      	adds	r7, #64	; 0x40
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bdb0      	pop	{r4, r5, r7, pc}

08005ff0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	2300      	movs	r3, #0
 8006002:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f8ea 	bl	80071e2 <SDMMC_CmdGoIdleState>
 800600e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	e072      	b.n	8006100 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f001 f8fd 	bl	800721e <SDMMC_CmdOperCond>
 8006024:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f001 f8d3 	bl	80071e2 <SDMMC_CmdGoIdleState>
 800603c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	e05b      	b.n	8006100 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006052:	2b01      	cmp	r3, #1
 8006054:	d137      	bne.n	80060c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f001 f8fd 	bl	800725c <SDMMC_CmdAppCommand>
 8006062:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d02d      	beq.n	80060c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800606a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800606e:	e047      	b.n	8006100 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f8f0 	bl	800725c <SDMMC_CmdAppCommand>
 800607c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <SD_PowerON+0x98>
    {
      return errorstate;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	e03b      	b.n	8006100 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	491e      	ldr	r1, [pc, #120]	; (8006108 <SD_PowerON+0x118>)
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f906 	bl	80072a0 <SDMMC_CmdAppOperCommand>
 8006094:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800609c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060a0:	e02e      	b.n	8006100 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 ff6c 	bl	8006f86 <SDMMC_GetResponse>
 80060ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	0fdb      	lsrs	r3, r3, #31
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <SD_PowerON+0xcc>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <SD_PowerON+0xce>
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]

    count++;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3301      	adds	r3, #1
 80060c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d802      	bhi.n	80060d6 <SD_PowerON+0xe6>
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0cc      	beq.n	8006070 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80060dc:	4293      	cmp	r3, r2
 80060de:	d902      	bls.n	80060e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80060e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060e4:	e00c      	b.n	8006100 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
 80060f6:	e002      	b.n	80060fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	c1100000 	.word	0xc1100000

0800610c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800611c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006120:	e018      	b.n	8006154 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f001 f97b 	bl	800742a <SDMMC_CmdSendStatus>
 8006134:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <SD_SendStatus+0x34>
  {
    return errorstate;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	e009      	b.n	8006154 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2100      	movs	r1, #0
 8006146:	4618      	mov	r0, r3
 8006148:	f000 ff1d 	bl	8006f86 <SDMMC_GetResponse>
 800614c:	4602      	mov	r2, r0
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f000 ff07 	bl	8006f86 <SDMMC_GetResponse>
 8006178:	4603      	mov	r3, r0
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006182:	d102      	bne.n	800618a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006188:	e02f      	b.n	80061ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f879 	bl	8006288 <SD_FindSCR>
 8006196:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	e023      	b.n	80061ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01c      	beq.n	80061e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f001 f84f 	bl	800725c <SDMMC_CmdAppCommand>
 80061be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	e00f      	b.n	80061ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2102      	movs	r1, #2
 80061d0:	4618      	mov	r0, r3
 80061d2:	f001 f889 	bl	80072e8 <SDMMC_CmdBusWidth>
 80061d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	e003      	b.n	80061ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e001      	b.n	80061ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2100      	movs	r1, #0
 8006208:	4618      	mov	r0, r3
 800620a:	f000 febc 	bl	8006f86 <SDMMC_GetResponse>
 800620e:	4603      	mov	r3, r0
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006218:	d102      	bne.n	8006220 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800621a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800621e:	e02f      	b.n	8006280 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006220:	f107 030c 	add.w	r3, r7, #12
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f82e 	bl	8006288 <SD_FindSCR>
 800622c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	e023      	b.n	8006280 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01c      	beq.n	800627c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f001 f804 	bl	800725c <SDMMC_CmdAppCommand>
 8006254:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	e00f      	b.n	8006280 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f001 f83e 	bl	80072e8 <SDMMC_CmdBusWidth>
 800626c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	e003      	b.n	8006280 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006278:	2300      	movs	r3, #0
 800627a:	e001      	b.n	8006280 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800627c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b08f      	sub	sp, #60	; 0x3c
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006292:	f7fb fa19 	bl	80016c8 <HAL_GetTick>
 8006296:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2108      	movs	r1, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fea8 	bl	8007004 <SDMMC_CmdBlockLength>
 80062b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	e0b2      	b.n	8006426 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	041b      	lsls	r3, r3, #16
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f000 ffc5 	bl	800725c <SDMMC_CmdAppCommand>
 80062d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <SD_FindSCR+0x56>
  {
    return errorstate;
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	e0a3      	b.n	8006426 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80062e4:	2308      	movs	r3, #8
 80062e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80062e8:	2330      	movs	r3, #48	; 0x30
 80062ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062ec:	2302      	movs	r3, #2
 80062ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f107 0210 	add.w	r2, r7, #16
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fe52 	bl	8006fac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f001 f80d 	bl	800732c <SDMMC_CmdSendSCR>
 8006312:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	d02a      	beq.n	8006370 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	e083      	b.n	8006426 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00f      	beq.n	800634c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	f107 0208 	add.w	r2, r7, #8
 8006338:	18d4      	adds	r4, r2, r3
 800633a:	4608      	mov	r0, r1
 800633c:	f000 fdb2 	bl	8006ea4 <SDMMC_ReadFIFO>
 8006340:	4603      	mov	r3, r0
 8006342:	6023      	str	r3, [r4, #0]
      index++;
 8006344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006346:	3301      	adds	r3, #1
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
 800634a:	e006      	b.n	800635a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d012      	beq.n	8006380 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800635a:	f7fb f9b5 	bl	80016c8 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006368:	d102      	bne.n	8006370 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800636a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800636e:	e05a      	b.n	8006426 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0cf      	beq.n	800631e <SD_FindSCR+0x96>
 800637e:	e000      	b.n	8006382 <SD_FindSCR+0xfa>
      break;
 8006380:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2208      	movs	r2, #8
 8006396:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006398:	2308      	movs	r3, #8
 800639a:	e044      	b.n	8006426 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2202      	movs	r2, #2
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063b2:	2302      	movs	r3, #2
 80063b4:	e037      	b.n	8006426 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2220      	movs	r2, #32
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80063cc:	2320      	movs	r3, #32
 80063ce:	e02a      	b.n	8006426 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	061a      	lsls	r2, r3, #24
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	0e1b      	lsrs	r3, r3, #24
 80063f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	601a      	str	r2, [r3, #0]
    scr++;
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	3304      	adds	r3, #4
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	061a      	lsls	r2, r3, #24
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800640e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006418:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	0e1b      	lsrs	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	373c      	adds	r7, #60	; 0x3c
 800642a:	46bd      	mov	sp, r7
 800642c:	bd90      	pop	{r4, r7, pc}

0800642e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d03f      	beq.n	80064c8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e033      	b.n	80064b6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fd26 	bl	8006ea4 <SDMMC_ReadFIFO>
 8006458:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3b01      	subs	r3, #1
 800646c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	b2da      	uxtb	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3b01      	subs	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	0c1b      	lsrs	r3, r3, #16
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	3b01      	subs	r3, #1
 8006498:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	0e1b      	lsrs	r3, r3, #24
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b07      	cmp	r3, #7
 80064ba:	d9c8      	bls.n	800644e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80064c8:	bf00      	nop
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d043      	beq.n	8006572 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e037      	b.n	8006560 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3b01      	subs	r3, #1
 8006500:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	021a      	lsls	r2, r3, #8
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	3b01      	subs	r3, #1
 8006518:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	041a      	lsls	r2, r3, #16
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4313      	orrs	r3, r2
 8006524:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3b01      	subs	r3, #1
 8006530:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	061a      	lsls	r2, r3, #24
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4313      	orrs	r3, r2
 800653c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	3b01      	subs	r3, #1
 8006548:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f107 0208 	add.w	r2, r7, #8
 8006552:	4611      	mov	r1, r2
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fcb2 	bl	8006ebe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	3301      	adds	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b07      	cmp	r3, #7
 8006564:	d9c4      	bls.n	80064f0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006572:	bf00      	nop
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e040      	b.n	800660e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fa ff97 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2224      	movs	r2, #36	; 0x24
 80065a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f82d 	bl	8006618 <UART_SetConfig>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e022      	b.n	800660e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa85 	bl	8006ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb0c 	bl	8006c24 <UART_CheckIdleState>
 800660c:	4603      	mov	r3, r0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4ba6      	ldr	r3, [pc, #664]	; (80068dc <UART_SetConfig+0x2c4>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	430b      	orrs	r3, r1
 800664e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a94      	ldr	r2, [pc, #592]	; (80068e0 <UART_SetConfig+0x2c8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d120      	bne.n	80066d6 <UART_SetConfig+0xbe>
 8006694:	4b93      	ldr	r3, [pc, #588]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d816      	bhi.n	80066d0 <UART_SetConfig+0xb8>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0x90>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066bf 	.word	0x080066bf
 80066b4:	080066cb 	.word	0x080066cb
 80066b8:	2301      	movs	r3, #1
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e150      	b.n	8006960 <UART_SetConfig+0x348>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e14d      	b.n	8006960 <UART_SetConfig+0x348>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e14a      	b.n	8006960 <UART_SetConfig+0x348>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e147      	b.n	8006960 <UART_SetConfig+0x348>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e144      	b.n	8006960 <UART_SetConfig+0x348>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a83      	ldr	r2, [pc, #524]	; (80068e8 <UART_SetConfig+0x2d0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d132      	bne.n	8006746 <UART_SetConfig+0x12e>
 80066e0:	4b80      	ldr	r3, [pc, #512]	; (80068e4 <UART_SetConfig+0x2cc>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	f003 030c 	and.w	r3, r3, #12
 80066ea:	2b0c      	cmp	r3, #12
 80066ec:	d828      	bhi.n	8006740 <UART_SetConfig+0x128>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0xdc>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006741 	.word	0x08006741
 8006700:	08006741 	.word	0x08006741
 8006704:	08006735 	.word	0x08006735
 8006708:	08006741 	.word	0x08006741
 800670c:	08006741 	.word	0x08006741
 8006710:	08006741 	.word	0x08006741
 8006714:	0800672f 	.word	0x0800672f
 8006718:	08006741 	.word	0x08006741
 800671c:	08006741 	.word	0x08006741
 8006720:	08006741 	.word	0x08006741
 8006724:	0800673b 	.word	0x0800673b
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e118      	b.n	8006960 <UART_SetConfig+0x348>
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e115      	b.n	8006960 <UART_SetConfig+0x348>
 8006734:	2304      	movs	r3, #4
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e112      	b.n	8006960 <UART_SetConfig+0x348>
 800673a:	2308      	movs	r3, #8
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e10f      	b.n	8006960 <UART_SetConfig+0x348>
 8006740:	2310      	movs	r3, #16
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e10c      	b.n	8006960 <UART_SetConfig+0x348>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a68      	ldr	r2, [pc, #416]	; (80068ec <UART_SetConfig+0x2d4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d120      	bne.n	8006792 <UART_SetConfig+0x17a>
 8006750:	4b64      	ldr	r3, [pc, #400]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800675a:	2b30      	cmp	r3, #48	; 0x30
 800675c:	d013      	beq.n	8006786 <UART_SetConfig+0x16e>
 800675e:	2b30      	cmp	r3, #48	; 0x30
 8006760:	d814      	bhi.n	800678c <UART_SetConfig+0x174>
 8006762:	2b20      	cmp	r3, #32
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x162>
 8006766:	2b20      	cmp	r3, #32
 8006768:	d810      	bhi.n	800678c <UART_SetConfig+0x174>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x15c>
 800676e:	2b10      	cmp	r3, #16
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x168>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x174>
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e0f2      	b.n	8006960 <UART_SetConfig+0x348>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e0ef      	b.n	8006960 <UART_SetConfig+0x348>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e0ec      	b.n	8006960 <UART_SetConfig+0x348>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e0e9      	b.n	8006960 <UART_SetConfig+0x348>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e0e6      	b.n	8006960 <UART_SetConfig+0x348>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a56      	ldr	r2, [pc, #344]	; (80068f0 <UART_SetConfig+0x2d8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d120      	bne.n	80067de <UART_SetConfig+0x1c6>
 800679c:	4b51      	ldr	r3, [pc, #324]	; (80068e4 <UART_SetConfig+0x2cc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067a6:	2bc0      	cmp	r3, #192	; 0xc0
 80067a8:	d013      	beq.n	80067d2 <UART_SetConfig+0x1ba>
 80067aa:	2bc0      	cmp	r3, #192	; 0xc0
 80067ac:	d814      	bhi.n	80067d8 <UART_SetConfig+0x1c0>
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d009      	beq.n	80067c6 <UART_SetConfig+0x1ae>
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d810      	bhi.n	80067d8 <UART_SetConfig+0x1c0>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <UART_SetConfig+0x1a8>
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d006      	beq.n	80067cc <UART_SetConfig+0x1b4>
 80067be:	e00b      	b.n	80067d8 <UART_SetConfig+0x1c0>
 80067c0:	2300      	movs	r3, #0
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e0cc      	b.n	8006960 <UART_SetConfig+0x348>
 80067c6:	2302      	movs	r3, #2
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e0c9      	b.n	8006960 <UART_SetConfig+0x348>
 80067cc:	2304      	movs	r3, #4
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e0c6      	b.n	8006960 <UART_SetConfig+0x348>
 80067d2:	2308      	movs	r3, #8
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e0c3      	b.n	8006960 <UART_SetConfig+0x348>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e0c0      	b.n	8006960 <UART_SetConfig+0x348>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a44      	ldr	r2, [pc, #272]	; (80068f4 <UART_SetConfig+0x2dc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d125      	bne.n	8006834 <UART_SetConfig+0x21c>
 80067e8:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <UART_SetConfig+0x2cc>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f6:	d017      	beq.n	8006828 <UART_SetConfig+0x210>
 80067f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fc:	d817      	bhi.n	800682e <UART_SetConfig+0x216>
 80067fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006802:	d00b      	beq.n	800681c <UART_SetConfig+0x204>
 8006804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006808:	d811      	bhi.n	800682e <UART_SetConfig+0x216>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <UART_SetConfig+0x1fe>
 800680e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006812:	d006      	beq.n	8006822 <UART_SetConfig+0x20a>
 8006814:	e00b      	b.n	800682e <UART_SetConfig+0x216>
 8006816:	2300      	movs	r3, #0
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e0a1      	b.n	8006960 <UART_SetConfig+0x348>
 800681c:	2302      	movs	r3, #2
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e09e      	b.n	8006960 <UART_SetConfig+0x348>
 8006822:	2304      	movs	r3, #4
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e09b      	b.n	8006960 <UART_SetConfig+0x348>
 8006828:	2308      	movs	r3, #8
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e098      	b.n	8006960 <UART_SetConfig+0x348>
 800682e:	2310      	movs	r3, #16
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e095      	b.n	8006960 <UART_SetConfig+0x348>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2f      	ldr	r2, [pc, #188]	; (80068f8 <UART_SetConfig+0x2e0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d125      	bne.n	800688a <UART_SetConfig+0x272>
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684c:	d017      	beq.n	800687e <UART_SetConfig+0x266>
 800684e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006852:	d817      	bhi.n	8006884 <UART_SetConfig+0x26c>
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d00b      	beq.n	8006872 <UART_SetConfig+0x25a>
 800685a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685e:	d811      	bhi.n	8006884 <UART_SetConfig+0x26c>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <UART_SetConfig+0x254>
 8006864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006868:	d006      	beq.n	8006878 <UART_SetConfig+0x260>
 800686a:	e00b      	b.n	8006884 <UART_SetConfig+0x26c>
 800686c:	2301      	movs	r3, #1
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e076      	b.n	8006960 <UART_SetConfig+0x348>
 8006872:	2302      	movs	r3, #2
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e073      	b.n	8006960 <UART_SetConfig+0x348>
 8006878:	2304      	movs	r3, #4
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e070      	b.n	8006960 <UART_SetConfig+0x348>
 800687e:	2308      	movs	r3, #8
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e06d      	b.n	8006960 <UART_SetConfig+0x348>
 8006884:	2310      	movs	r3, #16
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e06a      	b.n	8006960 <UART_SetConfig+0x348>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <UART_SetConfig+0x2e4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d138      	bne.n	8006906 <UART_SetConfig+0x2ee>
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800689e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a2:	d017      	beq.n	80068d4 <UART_SetConfig+0x2bc>
 80068a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a8:	d82a      	bhi.n	8006900 <UART_SetConfig+0x2e8>
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	d00b      	beq.n	80068c8 <UART_SetConfig+0x2b0>
 80068b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b4:	d824      	bhi.n	8006900 <UART_SetConfig+0x2e8>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <UART_SetConfig+0x2aa>
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068be:	d006      	beq.n	80068ce <UART_SetConfig+0x2b6>
 80068c0:	e01e      	b.n	8006900 <UART_SetConfig+0x2e8>
 80068c2:	2300      	movs	r3, #0
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e04b      	b.n	8006960 <UART_SetConfig+0x348>
 80068c8:	2302      	movs	r3, #2
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e048      	b.n	8006960 <UART_SetConfig+0x348>
 80068ce:	2304      	movs	r3, #4
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e045      	b.n	8006960 <UART_SetConfig+0x348>
 80068d4:	2308      	movs	r3, #8
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e042      	b.n	8006960 <UART_SetConfig+0x348>
 80068da:	bf00      	nop
 80068dc:	efff69f3 	.word	0xefff69f3
 80068e0:	40011000 	.word	0x40011000
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40004400 	.word	0x40004400
 80068ec:	40004800 	.word	0x40004800
 80068f0:	40004c00 	.word	0x40004c00
 80068f4:	40005000 	.word	0x40005000
 80068f8:	40011400 	.word	0x40011400
 80068fc:	40007800 	.word	0x40007800
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e02c      	b.n	8006960 <UART_SetConfig+0x348>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a72      	ldr	r2, [pc, #456]	; (8006ad4 <UART_SetConfig+0x4bc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d125      	bne.n	800695c <UART_SetConfig+0x344>
 8006910:	4b71      	ldr	r3, [pc, #452]	; (8006ad8 <UART_SetConfig+0x4c0>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800691a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800691e:	d017      	beq.n	8006950 <UART_SetConfig+0x338>
 8006920:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006924:	d817      	bhi.n	8006956 <UART_SetConfig+0x33e>
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692a:	d00b      	beq.n	8006944 <UART_SetConfig+0x32c>
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d811      	bhi.n	8006956 <UART_SetConfig+0x33e>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <UART_SetConfig+0x326>
 8006936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693a:	d006      	beq.n	800694a <UART_SetConfig+0x332>
 800693c:	e00b      	b.n	8006956 <UART_SetConfig+0x33e>
 800693e:	2300      	movs	r3, #0
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e00d      	b.n	8006960 <UART_SetConfig+0x348>
 8006944:	2302      	movs	r3, #2
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e00a      	b.n	8006960 <UART_SetConfig+0x348>
 800694a:	2304      	movs	r3, #4
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e007      	b.n	8006960 <UART_SetConfig+0x348>
 8006950:	2308      	movs	r3, #8
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e004      	b.n	8006960 <UART_SetConfig+0x348>
 8006956:	2310      	movs	r3, #16
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e001      	b.n	8006960 <UART_SetConfig+0x348>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006968:	d15b      	bne.n	8006a22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800696a:	7ffb      	ldrb	r3, [r7, #31]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d828      	bhi.n	80069c2 <UART_SetConfig+0x3aa>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <UART_SetConfig+0x360>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069a5 	.word	0x080069a5
 8006980:	080069ad 	.word	0x080069ad
 8006984:	080069c3 	.word	0x080069c3
 8006988:	080069b3 	.word	0x080069b3
 800698c:	080069c3 	.word	0x080069c3
 8006990:	080069c3 	.word	0x080069c3
 8006994:	080069c3 	.word	0x080069c3
 8006998:	080069bb 	.word	0x080069bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800699c:	f7fd f906 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 80069a0:	61b8      	str	r0, [r7, #24]
        break;
 80069a2:	e013      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7fd f916 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 80069a8:	61b8      	str	r0, [r7, #24]
        break;
 80069aa:	e00f      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ac:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <UART_SetConfig+0x4c4>)
 80069ae:	61bb      	str	r3, [r7, #24]
        break;
 80069b0:	e00c      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b2:	f7fd f829 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80069b6:	61b8      	str	r0, [r7, #24]
        break;
 80069b8:	e008      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069be:	61bb      	str	r3, [r7, #24]
        break;
 80069c0:	e004      	b.n	80069cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	77bb      	strb	r3, [r7, #30]
        break;
 80069ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d074      	beq.n	8006abc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	005a      	lsls	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	441a      	add	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b0f      	cmp	r3, #15
 80069ec:	d916      	bls.n	8006a1c <UART_SetConfig+0x404>
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f4:	d212      	bcs.n	8006a1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f023 030f 	bic.w	r3, r3, #15
 80069fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	89fb      	ldrh	r3, [r7, #14]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	89fa      	ldrh	r2, [r7, #14]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e04f      	b.n	8006abc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	77bb      	strb	r3, [r7, #30]
 8006a20:	e04c      	b.n	8006abc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a22:	7ffb      	ldrb	r3, [r7, #31]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d828      	bhi.n	8006a7a <UART_SetConfig+0x462>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0x418>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7b 	.word	0x08006a7b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a73 	.word	0x08006a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fd f8aa 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8006a58:	61b8      	str	r0, [r7, #24]
        break;
 8006a5a:	e013      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fd f8ba 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 8006a60:	61b8      	str	r0, [r7, #24]
        break;
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <UART_SetConfig+0x4c4>)
 8006a66:	61bb      	str	r3, [r7, #24]
        break;
 8006a68:	e00c      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fc ffcd 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 8006a6e:	61b8      	str	r0, [r7, #24]
        break;
 8006a70:	e008      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a76:	61bb      	str	r3, [r7, #24]
        break;
 8006a78:	e004      	b.n	8006a84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	77bb      	strb	r3, [r7, #30]
        break;
 8006a82:	bf00      	nop
    }

    if (pclk != 0U)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085a      	lsrs	r2, r3, #1
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	441a      	add	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d909      	bls.n	8006ab8 <UART_SetConfig+0x4a0>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aaa:	d205      	bcs.n	8006ab8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	e001      	b.n	8006abc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ac8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40007c00 	.word	0x40007c00
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	00f42400 	.word	0x00f42400

08006ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bde:	d10a      	bne.n	8006bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c34:	f7fa fd48 	bl	80016c8 <HAL_GetTick>
 8006c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d10e      	bne.n	8006c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f831 	bl	8006cbe <UART_WaitOnFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e027      	b.n	8006cb6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d10e      	bne.n	8006c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f81b 	bl	8006cbe <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e011      	b.n	8006cb6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b09c      	sub	sp, #112	; 0x70
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cce:	e0a7      	b.n	8006e20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd6:	f000 80a3 	beq.w	8006e20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cda:	f7fa fcf5 	bl	80016c8 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d13f      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d04:	667b      	str	r3, [r7, #100]	; 0x64
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e6      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	663b      	str	r3, [r7, #96]	; 0x60
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e068      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d050      	beq.n	8006e20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d148      	bne.n	8006e20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dea:	623a      	str	r2, [r7, #32]
 8006dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	69f9      	ldr	r1, [r7, #28]
 8006df0:	6a3a      	ldr	r2, [r7, #32]
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e010      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69da      	ldr	r2, [r3, #28]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	bf0c      	ite	eq
 8006e30:	2301      	moveq	r3, #1
 8006e32:	2300      	movne	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	f43f af48 	beq.w	8006cd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3770      	adds	r7, #112	; 0x70
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	f107 001c 	add.w	r0, r7, #28
 8006e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006e62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006e64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006e66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006e6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006e6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006e72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006e76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <SDMMC_Init+0x54>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	b004      	add	sp, #16
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	ffff8100 	.word	0xffff8100

08006ea4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2203      	movs	r2, #3
 8006eec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0303 	and.w	r3, r3, #3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006f3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006f42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <SDMMC_SendCommand+0x50>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	fffff000 	.word	0xfffff000

08006f6c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	b2db      	uxtb	r3, r3
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3314      	adds	r3, #20
 8006f94:	461a      	mov	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	4413      	add	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
}  
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fd2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006fd8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006fde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0

}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007012:	2310      	movs	r3, #16
 8007014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007016:	2340      	movs	r3, #64	; 0x40
 8007018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800701e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007022:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff ff74 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007030:	f241 3288 	movw	r2, #5000	; 0x1388
 8007034:	2110      	movs	r1, #16
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa1a 	bl	8007470 <SDMMC_GetCmdResp1>
 800703c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800703e:	69fb      	ldr	r3, [r7, #28]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007056:	2311      	movs	r3, #17
 8007058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800705a:	2340      	movs	r3, #64	; 0x40
 800705c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007066:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007068:	f107 0308 	add.w	r3, r7, #8
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff ff52 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007074:	f241 3288 	movw	r2, #5000	; 0x1388
 8007078:	2111      	movs	r1, #17
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9f8 	bl	8007470 <SDMMC_GetCmdResp1>
 8007080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007082:	69fb      	ldr	r3, [r7, #28]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3720      	adds	r7, #32
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800709a:	2312      	movs	r3, #18
 800709c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800709e:	2340      	movs	r3, #64	; 0x40
 80070a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070ac:	f107 0308 	add.w	r3, r7, #8
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff ff30 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80070b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070bc:	2112      	movs	r1, #18
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9d6 	bl	8007470 <SDMMC_GetCmdResp1>
 80070c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070c6:	69fb      	ldr	r3, [r7, #28]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80070de:	2318      	movs	r3, #24
 80070e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070e2:	2340      	movs	r3, #64	; 0x40
 80070e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070f0:	f107 0308 	add.w	r3, r7, #8
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff0e 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80070fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007100:	2118      	movs	r1, #24
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9b4 	bl	8007470 <SDMMC_GetCmdResp1>
 8007108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800710a:	69fb      	ldr	r3, [r7, #28]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3720      	adds	r7, #32
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007122:	2319      	movs	r3, #25
 8007124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007126:	2340      	movs	r3, #64	; 0x40
 8007128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800712e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007134:	f107 0308 	add.w	r3, r7, #8
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff feec 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	2119      	movs	r1, #25
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f992 	bl	8007470 <SDMMC_GetCmdResp1>
 800714c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800714e:	69fb      	ldr	r3, [r7, #28]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3720      	adds	r7, #32
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007164:	230c      	movs	r3, #12
 8007166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff fecb 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007182:	4a05      	ldr	r2, [pc, #20]	; (8007198 <SDMMC_CmdStopTransfer+0x40>)
 8007184:	210c      	movs	r1, #12
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f972 	bl	8007470 <SDMMC_GetCmdResp1>
 800718c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800718e:	69fb      	ldr	r3, [r7, #28]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	05f5e100 	.word	0x05f5e100

0800719c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80071ac:	2307      	movs	r3, #7
 80071ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071bc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071be:	f107 0310 	add.w	r3, r7, #16
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fea7 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80071ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ce:	2107      	movs	r1, #7
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f94d 	bl	8007470 <SDMMC_GetCmdResp1>
 80071d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3728      	adds	r7, #40	; 0x28
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b088      	sub	sp, #32
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fe86 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fb67 	bl	80078e0 <SDMMC_GetCmdError>
 8007212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007214:	69fb      	ldr	r3, [r7, #28]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b088      	sub	sp, #32
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007226:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800722a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800722c:	2308      	movs	r3, #8
 800722e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800723e:	f107 0308 	add.w	r3, r7, #8
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff fe67 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fafa 	bl	8007844 <SDMMC_GetCmdResp7>
 8007250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007252:	69fb      	ldr	r3, [r7, #28]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800726a:	2337      	movs	r3, #55	; 0x37
 800726c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800727a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800727c:	f107 0308 	add.w	r3, r7, #8
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fe48 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007288:	f241 3288 	movw	r2, #5000	; 0x1388
 800728c:	2137      	movs	r1, #55	; 0x37
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8ee 	bl	8007470 <SDMMC_GetCmdResp1>
 8007294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007296:	69fb      	ldr	r3, [r7, #28]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <SDMMC_CmdAppOperCommand+0x44>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80072b2:	2329      	movs	r3, #41	; 0x29
 80072b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072b6:	2340      	movs	r3, #64	; 0x40
 80072b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c4:	f107 0308 	add.w	r3, r7, #8
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fe24 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fa03 	bl	80076dc <SDMMC_GetCmdResp3>
 80072d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d8:	69fb      	ldr	r3, [r7, #28]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	80100000 	.word	0x80100000

080072e8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80072f6:	2306      	movs	r3, #6
 80072f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fe02 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007314:	f241 3288 	movw	r2, #5000	; 0x1388
 8007318:	2106      	movs	r1, #6
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8a8 	bl	8007470 <SDMMC_GetCmdResp1>
 8007320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007338:	2333      	movs	r3, #51	; 0x33
 800733a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800733c:	2340      	movs	r3, #64	; 0x40
 800733e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fde1 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007356:	f241 3288 	movw	r2, #5000	; 0x1388
 800735a:	2133      	movs	r1, #51	; 0x33
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f887 	bl	8007470 <SDMMC_GetCmdResp1>
 8007362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007364:	69fb      	ldr	r3, [r7, #28]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b088      	sub	sp, #32
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800737a:	2302      	movs	r3, #2
 800737c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800737e:	23c0      	movs	r3, #192	; 0xc0
 8007380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800738a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800738c:	f107 0308 	add.w	r3, r7, #8
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fdc0 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f957 	bl	800764c <SDMMC_GetCmdResp2>
 800739e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073a0:	69fb      	ldr	r3, [r7, #28]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b088      	sub	sp, #32
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80073b8:	2309      	movs	r3, #9
 80073ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073bc:	23c0      	movs	r3, #192	; 0xc0
 80073be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff fda1 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f938 	bl	800764c <SDMMC_GetCmdResp2>
 80073dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073de:	69fb      	ldr	r3, [r7, #28]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80073f6:	2303      	movs	r3, #3
 80073f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073fa:	2340      	movs	r3, #64	; 0x40
 80073fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007406:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007408:	f107 0308 	add.w	r3, r7, #8
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fd82 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	2103      	movs	r1, #3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f99d 	bl	8007758 <SDMMC_GetCmdResp6>
 800741e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007420:	69fb      	ldr	r3, [r7, #28]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b088      	sub	sp, #32
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007438:	230d      	movs	r3, #13
 800743a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800743c:	2340      	movs	r3, #64	; 0x40
 800743e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fd61 	bl	8006f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	210d      	movs	r1, #13
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f807 	bl	8007470 <SDMMC_GetCmdResp1>
 8007462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007464:	69fb      	ldr	r3, [r7, #28]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	460b      	mov	r3, r1
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800747e:	4b70      	ldr	r3, [pc, #448]	; (8007640 <SDMMC_GetCmdResp1+0x1d0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a70      	ldr	r2, [pc, #448]	; (8007644 <SDMMC_GetCmdResp1+0x1d4>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	0a5a      	lsrs	r2, r3, #9
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	fb02 f303 	mul.w	r3, r2, r3
 8007490:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	1e5a      	subs	r2, r3, #1
 8007496:	61fa      	str	r2, [r7, #28]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800749c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074a0:	e0c9      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0ef      	beq.n	8007492 <SDMMC_GetCmdResp1+0x22>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1ea      	bne.n	8007492 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d004      	beq.n	80074d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2204      	movs	r2, #4
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074ce:	2304      	movs	r3, #4
 80074d0:	e0b1      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d004      	beq.n	80074e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0a6      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	22c5      	movs	r2, #197	; 0xc5
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff fd3c 	bl	8006f6c <SDMMC_GetCommandResponse>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d001      	beq.n	8007502 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074fe:	2301      	movs	r3, #1
 8007500:	e099      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007502:	2100      	movs	r1, #0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff fd3e 	bl	8006f86 <SDMMC_GetResponse>
 800750a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4b4e      	ldr	r3, [pc, #312]	; (8007648 <SDMMC_GetCmdResp1+0x1d8>)
 8007510:	4013      	ands	r3, r2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007516:	2300      	movs	r3, #0
 8007518:	e08d      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	da02      	bge.n	8007526 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007524:	e087      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	e080      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800753e:	2380      	movs	r3, #128	; 0x80
 8007540:	e079      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800754c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007550:	e071      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800755c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007560:	e069      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800756c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007570:	e061      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800757c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007580:	e059      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800758c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007590:	e051      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800759c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075a0:	e049      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80075ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075b0:	e041      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80075bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c0:	e039      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80075cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075d0:	e031      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80075dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80075e0:	e029      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80075ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075f0:	e021      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80075fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007600:	e019      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800760c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007610:	e011      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800761c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007620:	e009      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800762c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007630:	e001      	b.n	8007636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000000 	.word	0x20000000
 8007644:	10624dd3 	.word	0x10624dd3
 8007648:	fdffe008 	.word	0xfdffe008

0800764c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007654:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <SDMMC_GetCmdResp2+0x88>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <SDMMC_GetCmdResp2+0x8c>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0a5b      	lsrs	r3, r3, #9
 8007660:	f241 3288 	movw	r2, #5000	; 0x1388
 8007664:	fb02 f303 	mul.w	r3, r2, r3
 8007668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	60fa      	str	r2, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007678:	e026      	b.n	80076c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0ef      	beq.n	800766a <SDMMC_GetCmdResp2+0x1e>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1ea      	bne.n	800766a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2204      	movs	r2, #4
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076a6:	2304      	movs	r3, #4
 80076a8:	e00e      	b.n	80076c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076bc:	2301      	movs	r3, #1
 80076be:	e003      	b.n	80076c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	22c5      	movs	r2, #197	; 0xc5
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	20000000 	.word	0x20000000
 80076d8:	10624dd3 	.word	0x10624dd3

080076dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076e4:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <SDMMC_GetCmdResp3+0x74>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <SDMMC_GetCmdResp3+0x78>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	0a5b      	lsrs	r3, r3, #9
 80076f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	1e5a      	subs	r2, r3, #1
 80076fe:	60fa      	str	r2, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007708:	e01b      	b.n	8007742 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0ef      	beq.n	80076fa <SDMMC_GetCmdResp3+0x1e>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1ea      	bne.n	80076fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2204      	movs	r2, #4
 8007734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007736:	2304      	movs	r3, #4
 8007738:	e003      	b.n	8007742 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	22c5      	movs	r2, #197	; 0xc5
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20000000 	.word	0x20000000
 8007754:	10624dd3 	.word	0x10624dd3

08007758 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	460b      	mov	r3, r1
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007766:	4b35      	ldr	r3, [pc, #212]	; (800783c <SDMMC_GetCmdResp6+0xe4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a35      	ldr	r2, [pc, #212]	; (8007840 <SDMMC_GetCmdResp6+0xe8>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	0a5b      	lsrs	r3, r3, #9
 8007772:	f241 3288 	movw	r2, #5000	; 0x1388
 8007776:	fb02 f303 	mul.w	r3, r2, r3
 800777a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	61fa      	str	r2, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800778a:	e052      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007790:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0ef      	beq.n	800777c <SDMMC_GetCmdResp6+0x24>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ea      	bne.n	800777c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2204      	movs	r2, #4
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077b8:	2304      	movs	r3, #4
 80077ba:	e03a      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e02f      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff fbca 	bl	8006f6c <SDMMC_GetCommandResponse>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	4293      	cmp	r3, r2
 80077e0:	d001      	beq.n	80077e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e025      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	22c5      	movs	r2, #197	; 0xc5
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80077ec:	2100      	movs	r1, #0
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff fbc9 	bl	8006f86 <SDMMC_GetResponse>
 80077f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	b29a      	uxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800780a:	2300      	movs	r3, #0
 800780c:	e011      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800781c:	e009      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800782c:	e001      	b.n	8007832 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800782e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000000 	.word	0x20000000
 8007840:	10624dd3 	.word	0x10624dd3

08007844 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800784c:	4b22      	ldr	r3, [pc, #136]	; (80078d8 <SDMMC_GetCmdResp7+0x94>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a22      	ldr	r2, [pc, #136]	; (80078dc <SDMMC_GetCmdResp7+0x98>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	0a5b      	lsrs	r3, r3, #9
 8007858:	f241 3288 	movw	r2, #5000	; 0x1388
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1e5a      	subs	r2, r3, #1
 8007866:	60fa      	str	r2, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800786c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007870:	e02c      	b.n	80078cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007876:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ef      	beq.n	8007862 <SDMMC_GetCmdResp7+0x1e>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1ea      	bne.n	8007862 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2204      	movs	r2, #4
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800789e:	2304      	movs	r3, #4
 80078a0:	e014      	b.n	80078cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e009      	b.n	80078cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2240      	movs	r2, #64	; 0x40
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078ca:	2300      	movs	r3, #0
  
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	20000000 	.word	0x20000000
 80078dc:	10624dd3 	.word	0x10624dd3

080078e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <SDMMC_GetCmdError+0x50>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a11      	ldr	r2, [pc, #68]	; (8007934 <SDMMC_GetCmdError+0x54>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	0a5b      	lsrs	r3, r3, #9
 80078f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f8:	fb02 f303 	mul.w	r3, r2, r3
 80078fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1e5a      	subs	r2, r3, #1
 8007902:	60fa      	str	r2, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800790c:	e009      	b.n	8007922 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f1      	beq.n	80078fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	22c5      	movs	r2, #197	; 0xc5
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000000 	.word	0x20000000
 8007934:	10624dd3 	.word	0x10624dd3

08007938 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800793c:	4904      	ldr	r1, [pc, #16]	; (8007950 <MX_FATFS_Init+0x18>)
 800793e:	4805      	ldr	r0, [pc, #20]	; (8007954 <MX_FATFS_Init+0x1c>)
 8007940:	f000 faa0 	bl	8007e84 <FATFS_LinkDriver>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <MX_FATFS_Init+0x20>)
 800794a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800794c:	bf00      	nop
 800794e:	bd80      	pop	{r7, pc}
 8007950:	200064c4 	.word	0x200064c4
 8007954:	0800810c 	.word	0x0800810c
 8007958:	200064c0 	.word	0x200064c0

0800795c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007966:	f000 f896 	bl	8007a96 <BSP_SD_IsDetected>
 800796a:	4603      	mov	r3, r0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007970:	2302      	movs	r3, #2
 8007972:	e012      	b.n	800799a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007974:	480b      	ldr	r0, [pc, #44]	; (80079a4 <BSP_SD_Init+0x48>)
 8007976:	f7fd fad5 	bl	8004f24 <HAL_SD_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007988:	4806      	ldr	r0, [pc, #24]	; (80079a4 <BSP_SD_Init+0x48>)
 800798a:	f7fe f89b 	bl	8005ac4 <HAL_SD_ConfigWideBusOperation>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007998:	79fb      	ldrb	r3, [r7, #7]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	2000638c 	.word	0x2000638c

080079a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	68f9      	ldr	r1, [r7, #12]
 80079be:	4806      	ldr	r0, [pc, #24]	; (80079d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80079c0:	f7fd fb68 	bl	8005094 <HAL_SD_ReadBlocks_DMA>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	2000638c 	.word	0x2000638c

080079dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	4806      	ldr	r0, [pc, #24]	; (8007a0c <BSP_SD_WriteBlocks_DMA+0x30>)
 80079f4:	f7fd fc30 	bl	8005258 <HAL_SD_WriteBlocks_DMA>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	2000638c 	.word	0x2000638c

08007a10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007a14:	4805      	ldr	r0, [pc, #20]	; (8007a2c <BSP_SD_GetCardState+0x1c>)
 8007a16:	f7fe f8ef 	bl	8005bf8 <HAL_SD_GetCardState>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2000638c 	.word	0x2000638c

08007a30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4803      	ldr	r0, [pc, #12]	; (8007a48 <BSP_SD_GetCardInfo+0x18>)
 8007a3c:	f7fe f816 	bl	8005a6c <HAL_SD_GetCardInfo>
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	2000638c 	.word	0x2000638c

08007a4c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007a54:	f000 f818 	bl	8007a88 <BSP_SD_AbortCallback>
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007a68:	f000 f9a8 	bl	8007dbc <BSP_SD_WriteCpltCallback>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007a7c:	f000 f9aa 	bl	8007dd4 <BSP_SD_ReadCpltCallback>
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0

}
 8007a8c:	bf00      	nop
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007aa0:	f000 f80c 	bl	8007abc <BSP_PlatformIsDetected>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	b2db      	uxtb	r3, r3
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aca:	4806      	ldr	r0, [pc, #24]	; (8007ae4 <BSP_PlatformIsDetected+0x28>)
 8007acc:	f7fb fb9a 	bl	8003204 <HAL_GPIO_ReadPin>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007ada:	79fb      	ldrb	r3, [r7, #7]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40020400 	.word	0x40020400

08007ae8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007af0:	f7f9 fdea 	bl	80016c8 <HAL_GetTick>
 8007af4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007af6:	e006      	b.n	8007b06 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007af8:	f7ff ff8a 	bl	8007a10 <BSP_SD_GetCardState>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e009      	b.n	8007b1a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007b06:	f7f9 fddf 	bl	80016c8 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d8f0      	bhi.n	8007af8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <SD_CheckStatus+0x38>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007b34:	f7ff ff6c 	bl	8007a10 <BSP_SD_GetCardState>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <SD_CheckStatus+0x38>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f023 0301 	bic.w	r3, r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <SD_CheckStatus+0x38>)
 8007b4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007b4e:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <SD_CheckStatus+0x38>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b2db      	uxtb	r3, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20000009 	.word	0x20000009

08007b60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007b6a:	f7ff fef7 	bl	800795c <BSP_SD_Init>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff ffd4 	bl	8007b24 <SD_CheckStatus>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <SD_initialize+0x34>)
 8007b82:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <SD_initialize+0x34>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	b2db      	uxtb	r3, r3
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20000009 	.word	0x20000009

08007b98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff ffbd 	bl	8007b24 <SD_CheckStatus>
 8007baa:	4603      	mov	r3, r0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	607a      	str	r2, [r7, #4]
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007bc8:	f247 5030 	movw	r0, #30000	; 0x7530
 8007bcc:	f7ff ff8c 	bl	8007ae8 <SD_CheckStatusWithTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da01      	bge.n	8007bda <SD_read+0x26>
  {
    return res;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	e03b      	b.n	8007c52 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	68b8      	ldr	r0, [r7, #8]
 8007be0:	f7ff fee2 	bl	80079a8 <BSP_SD_ReadBlocks_DMA>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d132      	bne.n	8007c50 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007bea:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <SD_read+0xa8>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007bf0:	f7f9 fd6a 	bl	80016c8 <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007bf6:	bf00      	nop
 8007bf8:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <SD_read+0xa8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d108      	bne.n	8007c12 <SD_read+0x5e>
 8007c00:	f7f9 fd62 	bl	80016c8 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d9f2      	bls.n	8007bf8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <SD_read+0xa8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
 8007c1e:	e017      	b.n	8007c50 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <SD_read+0xa8>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007c26:	f7f9 fd4f 	bl	80016c8 <HAL_GetTick>
 8007c2a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007c2c:	e007      	b.n	8007c3e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c2e:	f7ff feef 	bl	8007a10 <BSP_SD_GetCardState>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <SD_read+0x8a>
          {
            res = RES_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007c3c:	e008      	b.n	8007c50 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007c3e:	f7f9 fd43 	bl	80016c8 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d9ee      	bls.n	8007c2e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200064cc 	.word	0x200064cc

08007c60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <SD_write+0xa8>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007c7a:	f247 5030 	movw	r0, #30000	; 0x7530
 8007c7e:	f7ff ff33 	bl	8007ae8 <SD_CheckStatusWithTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da01      	bge.n	8007c8c <SD_write+0x2c>
  {
    return res;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	e038      	b.n	8007cfe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68b8      	ldr	r0, [r7, #8]
 8007c92:	f7ff fea3 	bl	80079dc <BSP_SD_WriteBlocks_DMA>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d12f      	bne.n	8007cfc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007c9c:	f7f9 fd14 	bl	80016c8 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007ca2:	bf00      	nop
 8007ca4:	4b18      	ldr	r3, [pc, #96]	; (8007d08 <SD_write+0xa8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <SD_write+0x5e>
 8007cac:	f7f9 fd0c 	bl	80016c8 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	f247 522f 	movw	r2, #29999	; 0x752f
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d9f2      	bls.n	8007ca4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007cbe:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <SD_write+0xa8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
 8007cca:	e017      	b.n	8007cfc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <SD_write+0xa8>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007cd2:	f7f9 fcf9 	bl	80016c8 <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007cd8:	e007      	b.n	8007cea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cda:	f7ff fe99 	bl	8007a10 <BSP_SD_GetCardState>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <SD_write+0x8a>
          {
            res = RES_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ce8:	e008      	b.n	8007cfc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007cea:	f7f9 fced 	bl	80016c8 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	f247 522f 	movw	r2, #29999	; 0x752f
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d9ee      	bls.n	8007cda <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200064c8 	.word	0x200064c8

08007d0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08c      	sub	sp, #48	; 0x30
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	603a      	str	r2, [r7, #0]
 8007d16:	71fb      	strb	r3, [r7, #7]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d22:	4b25      	ldr	r3, [pc, #148]	; (8007db8 <SD_ioctl+0xac>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <SD_ioctl+0x28>
 8007d30:	2303      	movs	r3, #3
 8007d32:	e03c      	b.n	8007dae <SD_ioctl+0xa2>

  switch (cmd)
 8007d34:	79bb      	ldrb	r3, [r7, #6]
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d834      	bhi.n	8007da4 <SD_ioctl+0x98>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <SD_ioctl+0x34>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d8b 	.word	0x08007d8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d56:	e028      	b.n	8007daa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d58:	f107 030c 	add.w	r3, r7, #12
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff fe67 	bl	8007a30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d6e:	e01c      	b.n	8007daa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fe5b 	bl	8007a30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d88:	e00f      	b.n	8007daa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d8a:	f107 030c 	add.w	r3, r7, #12
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fe4e 	bl	8007a30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	0a5a      	lsrs	r2, r3, #9
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007da2:	e002      	b.n	8007daa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3730      	adds	r7, #48	; 0x30
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000009 	.word	0x20000009

08007dbc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007dc0:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <BSP_SD_WriteCpltCallback+0x14>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	200064c8 	.word	0x200064c8

08007dd4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007dd8:	4b03      	ldr	r3, [pc, #12]	; (8007de8 <BSP_SD_ReadCpltCallback+0x14>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
}
 8007dde:	bf00      	nop
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	200064cc 	.word	0x200064cc

08007dec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e02:	4b1f      	ldr	r3, [pc, #124]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e04:	7a5b      	ldrb	r3, [r3, #9]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d131      	bne.n	8007e70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e0c:	4b1c      	ldr	r3, [pc, #112]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e0e:	7a5b      	ldrb	r3, [r3, #9]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e16:	2100      	movs	r1, #0
 8007e18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e1a:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e1c:	7a5b      	ldrb	r3, [r3, #9]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e2a:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e2c:	7a5b      	ldrb	r3, [r3, #9]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e34:	4413      	add	r3, r2
 8007e36:	79fa      	ldrb	r2, [r7, #7]
 8007e38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e3a:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e3c:	7a5b      	ldrb	r3, [r3, #9]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	b2d1      	uxtb	r1, r2
 8007e44:	4a0e      	ldr	r2, [pc, #56]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e46:	7251      	strb	r1, [r2, #9]
 8007e48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e4a:	7dbb      	ldrb	r3, [r7, #22]
 8007e4c:	3330      	adds	r3, #48	; 0x30
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3301      	adds	r3, #1
 8007e58:	223a      	movs	r2, #58	; 0x3a
 8007e5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3302      	adds	r3, #2
 8007e60:	222f      	movs	r2, #47	; 0x2f
 8007e62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3303      	adds	r3, #3
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	200064d0 	.word	0x200064d0

08007e84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff ffaa 	bl	8007dec <FATFS_LinkDriverEx>
 8007e98:	4603      	mov	r3, r0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d103      	bne.n	8007ebc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 8007eb4:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 8007eba:	e002      	b.n	8007ec2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000094 	.word	0x20000094
 8007ed4:	20006274 	.word	0x20006274
 8007ed8:	2000627c 	.word	0x2000627c

08007edc <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d103      	bne.n	8007ef4 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 8007eec:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 8007ef2:	e002      	b.n	8007efa <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000094 	.word	0x20000094
 8007f0c:	20006278 	.word	0x20006278
 8007f10:	20006280 	.word	0x20006280

08007f14 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 8007f1a:	4b50      	ldr	r3, [pc, #320]	; (800805c <checkMicrophone+0x148>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d148      	bne.n	8007fb4 <checkMicrophone+0xa0>
 8007f22:	4b4f      	ldr	r3, [pc, #316]	; (8008060 <checkMicrophone+0x14c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d144      	bne.n	8007fb4 <checkMicrophone+0xa0>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	e037      	b.n	8007fa0 <checkMicrophone+0x8c>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 8007f30:	4a4c      	ldr	r2, [pc, #304]	; (8008064 <checkMicrophone+0x150>)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f38:	121b      	asrs	r3, r3, #8
 8007f3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007f3e:	db0b      	blt.n	8007f58 <checkMicrophone+0x44>
 8007f40:	4a48      	ldr	r2, [pc, #288]	; (8008064 <checkMicrophone+0x150>)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f48:	121b      	asrs	r3, r3, #8
 8007f4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	bfa8      	it	ge
 8007f52:	4613      	movge	r3, r2
 8007f54:	b21a      	sxth	r2, r3
 8007f56:	e000      	b.n	8007f5a <checkMicrophone+0x46>
 8007f58:	4a43      	ldr	r2, [pc, #268]	; (8008068 <checkMicrophone+0x154>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4943      	ldr	r1, [pc, #268]	; (800806c <checkMicrophone+0x158>)
 8007f60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 8007f64:	4a42      	ldr	r2, [pc, #264]	; (8008070 <checkMicrophone+0x15c>)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6c:	121b      	asrs	r3, r3, #8
 8007f6e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007f72:	db0b      	blt.n	8007f8c <checkMicrophone+0x78>
 8007f74:	4a3e      	ldr	r2, [pc, #248]	; (8008070 <checkMicrophone+0x15c>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f7c:	121b      	asrs	r3, r3, #8
 8007f7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f82:	4293      	cmp	r3, r2
 8007f84:	bfa8      	it	ge
 8007f86:	4613      	movge	r3, r2
 8007f88:	b21a      	sxth	r2, r3
 8007f8a:	e000      	b.n	8007f8e <checkMicrophone+0x7a>
 8007f8c:	4a36      	ldr	r2, [pc, #216]	; (8008068 <checkMicrophone+0x154>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	3301      	adds	r3, #1
 8007f94:	4935      	ldr	r1, [pc, #212]	; (800806c <checkMicrophone+0x158>)
 8007f96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < 1024; i++)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa6:	dbc3      	blt.n	8007f30 <checkMicrophone+0x1c>
				Error_Handler();
			}
			PlaybackStarted = 1;*/
		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 8007fa8:	4b2c      	ldr	r3, [pc, #176]	; (800805c <checkMicrophone+0x148>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 8007fae:	4b2c      	ldr	r3, [pc, #176]	; (8008060 <checkMicrophone+0x14c>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 8007fb4:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <checkMicrophone+0x160>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d149      	bne.n	8008050 <checkMicrophone+0x13c>
 8007fbc:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <checkMicrophone+0x164>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d145      	bne.n	8008050 <checkMicrophone+0x13c>
	{
		for(int i = 1024; i < 2048; i++)
 8007fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc8:	603b      	str	r3, [r7, #0]
 8007fca:	e037      	b.n	800803c <checkMicrophone+0x128>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 8007fcc:	4a25      	ldr	r2, [pc, #148]	; (8008064 <checkMicrophone+0x150>)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd4:	121b      	asrs	r3, r3, #8
 8007fd6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007fda:	db0b      	blt.n	8007ff4 <checkMicrophone+0xe0>
 8007fdc:	4a21      	ldr	r2, [pc, #132]	; (8008064 <checkMicrophone+0x150>)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe4:	121b      	asrs	r3, r3, #8
 8007fe6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bfa8      	it	ge
 8007fee:	4613      	movge	r3, r2
 8007ff0:	b21a      	sxth	r2, r3
 8007ff2:	e000      	b.n	8007ff6 <checkMicrophone+0xe2>
 8007ff4:	4a1c      	ldr	r2, [pc, #112]	; (8008068 <checkMicrophone+0x154>)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	491c      	ldr	r1, [pc, #112]	; (800806c <checkMicrophone+0x158>)
 8007ffc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 8008000:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <checkMicrophone+0x15c>)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008008:	121b      	asrs	r3, r3, #8
 800800a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800800e:	db0b      	blt.n	8008028 <checkMicrophone+0x114>
 8008010:	4a17      	ldr	r2, [pc, #92]	; (8008070 <checkMicrophone+0x15c>)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	121b      	asrs	r3, r3, #8
 800801a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800801e:	4293      	cmp	r3, r2
 8008020:	bfa8      	it	ge
 8008022:	4613      	movge	r3, r2
 8008024:	b21a      	sxth	r2, r3
 8008026:	e000      	b.n	800802a <checkMicrophone+0x116>
 8008028:	4a0f      	ldr	r2, [pc, #60]	; (8008068 <checkMicrophone+0x154>)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	3301      	adds	r3, #1
 8008030:	490e      	ldr	r1, [pc, #56]	; (800806c <checkMicrophone+0x158>)
 8008032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 1024; i < 2048; i++)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008042:	dbc3      	blt.n	8007fcc <checkMicrophone+0xb8>
		}
		DmaLeftRecBuffCplt  = 0;
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <checkMicrophone+0x160>)
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800804a:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <checkMicrophone+0x164>)
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
	}
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20006274 	.word	0x20006274
 8008060:	2000627c 	.word	0x2000627c
 8008064:	20000274 	.word	0x20000274
 8008068:	ffff8000 	.word	0xffff8000
 800806c:	20004274 	.word	0x20004274
 8008070:	20002274 	.word	0x20002274
 8008074:	20006278 	.word	0x20006278
 8008078:	20006280 	.word	0x20006280

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f820 	bl	80080d4 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	08008128 	.word	0x08008128
 80080b8:	08008128 	.word	0x08008128
 80080bc:	08008128 	.word	0x08008128
 80080c0:	0800812c 	.word	0x0800812c

080080c4 <memset>:
 80080c4:	4402      	add	r2, r0
 80080c6:	4603      	mov	r3, r0
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d100      	bne.n	80080ce <memset+0xa>
 80080cc:	4770      	bx	lr
 80080ce:	f803 1b01 	strb.w	r1, [r3], #1
 80080d2:	e7f9      	b.n	80080c8 <memset+0x4>

080080d4 <_init>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr

080080e0 <_fini>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr
