
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e690  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a10  0800e890  0800e890  0001e890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080222a0  080222a0  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  080222a0  080222a0  000322a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080222a8  080222a8  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080222a8  080222a8  000322a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080222ac  080222ac  000322ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080222b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018c18  20000070  08022320  00040070  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20018c88  08022320  00048c88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023cf0  00000000  00000000  0004009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d1a  00000000  00000000  00063d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00069aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0006b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035fe0  00000000  00000000  0006cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029988  00000000  00000000  000a2cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a9c7  00000000  00000000  000cc650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  001f7017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f74  00000000  00000000  001f70d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  001fe04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e878 	.word	0x0800e878

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800e878 	.word	0x0800e878

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC1_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC1_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC1_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC1_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC1_Init+0x98>)
 8000706:	f002 f81d 	bl	8002744 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 fdca 	bl	80012a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_ADC1_Init+0xa4>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC1_Init+0x98>)
 8000726:	f002 f851 	bl	80027cc <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 fdba 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001
 8000748:	10000012 	.word	0x10000012

0800074c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_ADC_MspInit+0x38>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10b      	bne.n	8000776 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a09      	ldr	r2, [pc, #36]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40012000 	.word	0x40012000
 8000788:	40023800 	.word	0x40023800

0800078c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_CRC_Init+0x3c>)
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <MX_CRC_Init+0x40>)
 8000794:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_CRC_Init+0x3c>)
 8000798:	2200      	movs	r2, #0
 800079a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_CRC_Init+0x3c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007b6:	f002 fb6b 	bl	8002e90 <HAL_CRC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007c0:	f000 fd72 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000d4 	.word	0x200000d4
 80007cc:	40023000 	.word	0x40023000

080007d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_CRC_MspInit+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023000 	.word	0x40023000
 800080c:	40023800 	.word	0x40023800

08000810 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000814:	4b63      	ldr	r3, [pc, #396]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000816:	4a64      	ldr	r2, [pc, #400]	; (80009a8 <MX_DFSDM1_Init+0x198>)
 8000818:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800081a:	4b62      	ldr	r3, [pc, #392]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000820:	4b60      	ldr	r3, [pc, #384]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000822:	2201      	movs	r2, #1
 8000824:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000828:	2201      	movs	r2, #1
 800082a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082c:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000832:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000834:	2200      	movs	r2, #0
 8000836:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000838:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800083a:	2200      	movs	r2, #0
 800083c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800084c:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800084e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000852:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000854:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000856:	22b0      	movs	r2, #176	; 0xb0
 8000858:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800085c:	2201      	movs	r2, #1
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000860:	4850      	ldr	r0, [pc, #320]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000862:	f002 fcbf 	bl	80031e4 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000866:	4b51      	ldr	r3, [pc, #324]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000868:	4a51      	ldr	r2, [pc, #324]	; (80009b0 <MX_DFSDM1_Init+0x1a0>)
 800086a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800086c:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000874:	2201      	movs	r2, #1
 8000876:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000878:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800087a:	2201      	movs	r2, #1
 800087c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800087e:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000886:	2201      	movs	r2, #1
 8000888:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800088c:	2200      	movs	r2, #0
 800088e:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000896:	4b45      	ldr	r3, [pc, #276]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089c:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008a0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008a4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008a8:	22b0      	movs	r2, #176	; 0xb0
 80008aa:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008b2:	483e      	ldr	r0, [pc, #248]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008b4:	f002 fc96 	bl	80031e4 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008b8:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <MX_DFSDM1_Init+0x1a8>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800090a:	482a      	ldr	r0, [pc, #168]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 800090c:	f002 fbaa 	bl	8003064 <HAL_DFSDM_ChannelInit>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000916:	f000 fcc7 	bl	80012a8 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800091c:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_DFSDM1_Init+0x1b0>)
 800091e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000922:	2201      	movs	r2, #1
 8000924:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000930:	2204      	movs	r2, #4
 8000932:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800094e:	2204      	movs	r2, #4
 8000950:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800095a:	220a      	movs	r2, #10
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000966:	2202      	movs	r2, #2
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800096c:	f002 fb7a 	bl	8003064 <HAL_DFSDM_ChannelInit>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000976:	f000 fc97 	bl	80012a8 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800097a:	2201      	movs	r2, #1
 800097c:	4911      	ldr	r1, [pc, #68]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000980:	f002 fd0a 	bl	8003398 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000984:	490f      	ldr	r1, [pc, #60]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000988:	f002 fd4c 	bl	8003424 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800098c:	2201      	movs	r2, #1
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000992:	f002 fd01 	bl	8003398 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 8000996:	2101      	movs	r1, #1
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800099a:	f002 fd43 	bl	8003424 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	40017500 	.word	0x40017500
 80009ac:	2000014c 	.word	0x2000014c
 80009b0:	40017580 	.word	0x40017580
 80009b4:	200001a0 	.word	0x200001a0
 80009b8:	40017400 	.word	0x40017400
 80009bc:	200001d8 	.word	0x200001d8
 80009c0:	40017420 	.word	0x40017420
 80009c4:	00010002 	.word	0x00010002

080009c8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80009e0:	4b63      	ldr	r3, [pc, #396]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d145      	bne.n	8000a74 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009e8:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80009f2:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10b      	bne.n	8000a12 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a5e      	ldr	r2, [pc, #376]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a58      	ldr	r2, [pc, #352]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	484d      	ldr	r0, [pc, #308]	; (8000b7c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a46:	f003 fa3f 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4845      	ldr	r0, [pc, #276]	; (8000b7c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a66:	f003 fa2f 	bl	8003ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a3f      	ldr	r2, [pc, #252]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a72:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d137      	bne.n	8000aee <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a80:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000abe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ac6:	482f      	ldr	r0, [pc, #188]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac8:	f002 fe58 	bl	800377c <HAL_DMA_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000ad2:	f000 fbe9 	bl	80012a8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d137      	bne.n	8000b68 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000afc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b28:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b38:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b42:	f002 fe1b 	bl	800377c <HAL_DMA_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000b4c:	f000 fbac 	bl	80012a8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002d4 	.word	0x200002d4
 8000b74:	200002d0 	.word	0x200002d0
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40017500 	.word	0x40017500
 8000b84:	20000210 	.word	0x20000210
 8000b88:	40026410 	.word	0x40026410
 8000b8c:	40017580 	.word	0x40017580
 8000b90:	20000270 	.word	0x20000270
 8000b94:	40026488 	.word	0x40026488

08000b98 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d145      	bne.n	8000c44 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10b      	bne.n	8000be2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c16:	f003 f957 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c36:	f003 f947 	bl	8003ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a02      	ldr	r2, [pc, #8]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c42:	6013      	str	r3, [r2, #0]
  }
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002d4 	.word	0x200002d4
 8000c50:	200002d0 	.word	0x200002d0
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f002 f8cf 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f002 f8e8 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2039      	movs	r0, #57	; 0x39
 8000c90:	f002 f8c7 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c94:	2039      	movs	r0, #57	; 0x39
 8000c96:	f002 f8e0 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	203b      	movs	r0, #59	; 0x3b
 8000ca0:	f002 f8bf 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ca4:	203b      	movs	r0, #59	; 0x3b
 8000ca6:	f002 f8d8 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2044      	movs	r0, #68	; 0x44
 8000cb0:	f002 f8b7 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cb4:	2044      	movs	r0, #68	; 0x44
 8000cb6:	f002 f8d0 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2045      	movs	r0, #69	; 0x45
 8000cc0:	f002 f8af 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cc4:	2045      	movs	r0, #69	; 0x45
 8000cc6:	f002 f8c8 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a3e      	ldr	r2, [pc, #248]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a2c      	ldr	r2, [pc, #176]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dcc:	4826      	ldr	r0, [pc, #152]	; (8000e68 <MX_GPIO_Init+0x190>)
 8000dce:	f003 fa3f 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210b      	movs	r1, #11
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x194>)
 8000dd8:	f003 fa3a 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	481f      	ldr	r0, [pc, #124]	; (8000e70 <MX_GPIO_Init+0x198>)
 8000df4:	f003 f868 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x190>)
 8000e12:	f003 f859 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000e16:	230b      	movs	r3, #11
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <MX_GPIO_Init+0x194>)
 8000e2e:	f003 f84b 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x19c>)
 8000e48:	f003 f83e 	bl	8003ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f001 ffe6 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f001 ffff 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 8000e5c:	bf00      	nop
 8000e5e:	3738      	adds	r7, #56	; 0x38
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40022400 	.word	0x40022400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020400 	.word	0x40020400

08000e78 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7c:	f3bf 8f4f 	dsb	sy
}
 8000e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e82:	f3bf 8f6f 	isb	sy
}
 8000e86:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e96:	f3bf 8f6f 	isb	sy
}
 8000e9a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eae:	f3bf 8f6f 	isb	sy
}
 8000eb2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed2:	f3bf 8f4f 	dsb	sy
}
 8000ed6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ede:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0b5b      	lsrs	r3, r3, #13
 8000ee4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ee8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ef2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	015a      	lsls	r2, r3, #5
 8000ef8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000efc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f02:	4911      	ldr	r1, [pc, #68]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ef      	bne.n	8000ef4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	60fa      	str	r2, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e5      	bne.n	8000eea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1e:	f3bf 8f4f 	dsb	sy
}
 8000f22:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09c      	sub	sp, #112	; 0x70
 8000f50:	af00      	add	r7, sp, #0
	char directory_name[35];
	char file_path [35];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f52:	f7ff ff91 	bl	8000e78 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f56:	f7ff ffb5 	bl	8000ec4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f001 fb71 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f901 	bl	8001164 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f62:	f000 f971 	bl	8001248 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f7ff feb7 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6a:	f7ff fe77 	bl	8000c5c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f6e:	f7ff fc4f 	bl	8000810 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000f72:	f000 fa39 	bl	80013e8 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000f76:	f7ff fb95 	bl	80006a4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000f7a:	f000 fd47 	bl	8001a0c <MX_UART4_Init>
  MX_CRC_Init();
 8000f7e:	f7ff fc05 	bl	800078c <MX_CRC_Init>
  MX_RTC_Init();
 8000f82:	f000 f997 	bl	80012b4 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f86:	f000 fb39 	bl	80015fc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f8a:	f007 fe13 	bl	8008bb4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f92:	4967      	ldr	r1, [pc, #412]	; (8001130 <main+0x1e4>)
 8000f94:	4867      	ldr	r0, [pc, #412]	; (8001134 <main+0x1e8>)
 8000f96:	f002 fa75 	bl	8003484 <HAL_DFSDM_FilterRegularStart_DMA>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x58>
    {
      Error_Handler();
 8000fa0:	f000 f982 	bl	80012a8 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa8:	4963      	ldr	r1, [pc, #396]	; (8001138 <main+0x1ec>)
 8000faa:	4864      	ldr	r0, [pc, #400]	; (800113c <main+0x1f0>)
 8000fac:	f002 fa6a 	bl	8003484 <HAL_DFSDM_FilterRegularStart_DMA>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <main+0x6e>
    {
      Error_Handler();
 8000fb6:	f000 f977 	bl	80012a8 <Error_Handler>
    }


	SDInit();
 8000fba:	f00a fd87 	bl	800bacc <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	485e      	ldr	r0, [pc, #376]	; (8001140 <main+0x1f4>)
 8000fc6:	f003 f943 	bl	8004250 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2101      	movs	r1, #1
 8000fce:	485d      	ldr	r0, [pc, #372]	; (8001144 <main+0x1f8>)
 8000fd0:	f003 f93e 	bl	8004250 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	485a      	ldr	r0, [pc, #360]	; (8001144 <main+0x1f8>)
 8000fda:	f003 f939 	bl	8004250 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4858      	ldr	r0, [pc, #352]	; (8001144 <main+0x1f8>)
 8000fe4:	f003 f934 	bl	8004250 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000fe8:	f00a fb08 	bl	800b5fc <Preprocessing_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for th temper button to be pressed
	  while (!recording);
 8000fec:	bf00      	nop
 8000fee:	4b56      	ldr	r3, [pc, #344]	; (8001148 <main+0x1fc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0fb      	beq.n	8000fee <main+0xa2>
	  // debouncing
	  HAL_Delay(250);
 8000ff6:	20fa      	movs	r0, #250	; 0xfa
 8000ff8:	f001 fb80 	bl	80026fc <HAL_Delay>
	  recording = 1;
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <main+0x1fc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <main+0x200>)
 8001004:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001008:	461a      	mov	r2, r3
 800100a:	2300      	movs	r3, #0
 800100c:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 8001010:	4b4e      	ldr	r3, [pc, #312]	; (800114c <main+0x200>)
 8001012:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
	  //LED0 on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	4847      	ldr	r0, [pc, #284]	; (8001140 <main+0x1f4>)
 8001024:	f003 f914 	bl	8004250 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8001028:	e001      	b.n	800102e <main+0xe2>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 800102a:	f00a fc33 	bl	800b894 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <main+0x1fc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <main+0xf8>
 8001036:	4b45      	ldr	r3, [pc, #276]	; (800114c <main+0x200>)
 8001038:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800103c:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f2      	beq.n	800102a <main+0xde>
	  }
	  HAL_Delay(250);
 8001044:	20fa      	movs	r0, #250	; 0xfa
 8001046:	f001 fb59 	bl	80026fc <HAL_Delay>
	  recording = 0;
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <main+0x1fc>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	483a      	ldr	r0, [pc, #232]	; (8001140 <main+0x1f4>)
 8001058:	f003 f8fa 	bl	8004250 <HAL_GPIO_WritePin>
	  //read date to folder name
	  get_date((char*)directory_name);
 800105c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001060:	4618      	mov	r0, r3
 8001062:	f00a fcd9 	bl	800ba18 <get_date>
	  //creates a folder with the date
	  f_mkdir ((char*)(directory_name));
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f00a f963 	bl	800b336 <f_mkdir>
	  //read time and date
	  get_time_filename((char*)file_name);
 8001070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001074:	4618      	mov	r0, r3
 8001076:	f00a fcf1 	bl	800ba5c <get_time_filename>

//////////////////////////////////////
	  //getting the mel spectrogram
	  AudioPreprocessing_RunMethod3(BufferCtl.pcm_buff, (uint32_t*)spectrogram_output, BufferCtl.fptr);
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <main+0x200>)
 800107c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001080:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8001084:	461a      	mov	r2, r3
 8001086:	4932      	ldr	r1, [pc, #200]	; (8001150 <main+0x204>)
 8001088:	4830      	ldr	r0, [pc, #192]	; (800114c <main+0x200>)
 800108a:	f00a fb3f 	bl	800b70c <AudioPreprocessing_RunMethod3>
	  sprintf((char*)file_path,"%s/%s1.txt",directory_name, file_name);
 800108e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001092:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001096:	1d38      	adds	r0, r7, #4
 8001098:	492e      	ldr	r1, [pc, #184]	; (8001154 <main+0x208>)
 800109a:	f00c f8b7 	bl	800d20c <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00a fd27 	bl	800baf4 <createFile>
	  writeToFile((uint8_t*)spectrogram_output, 4*MEL_SPEC_SIZE);
 80010a6:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80010aa:	4829      	ldr	r0, [pc, #164]	; (8001150 <main+0x204>)
 80010ac:	f00a fd3a 	bl	800bb24 <writeToFile>
	  SDclose();
 80010b0:	f00a fd4c 	bl	800bb4c <SDclose>
//////////////////////////////////////
	  //getting the mel spectrogram
	  AudioPreprocessing_RunMethod4(BufferCtl.pcm_buff, (uint32_t*)spectrogram_output, BufferCtl.fptr);
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <main+0x200>)
 80010b6:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80010ba:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80010be:	461a      	mov	r2, r3
 80010c0:	4923      	ldr	r1, [pc, #140]	; (8001150 <main+0x204>)
 80010c2:	4822      	ldr	r0, [pc, #136]	; (800114c <main+0x200>)
 80010c4:	f00a fb68 	bl	800b798 <AudioPreprocessing_RunMethod4>
	  sprintf((char*)file_path,"%s/%s2.txt",directory_name, file_name);
 80010c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010d0:	1d38      	adds	r0, r7, #4
 80010d2:	4921      	ldr	r1, [pc, #132]	; (8001158 <main+0x20c>)
 80010d4:	f00c f89a 	bl	800d20c <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f00a fd0a 	bl	800baf4 <createFile>
	  writeToFile((uint8_t*)spectrogram_output, 4*MEL_SPEC_SIZE);
 80010e0:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <main+0x204>)
 80010e6:	f00a fd1d 	bl	800bb24 <writeToFile>
	  SDclose();
 80010ea:	f00a fd2f 	bl	800bb4c <SDclose>
//////////////////////////////////////



	  sprintf((char*)file_path,"%s/%s.wav",directory_name, file_name);
 80010ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010f6:	1d38      	adds	r0, r7, #4
 80010f8:	4918      	ldr	r1, [pc, #96]	; (800115c <main+0x210>)
 80010fa:	f00c f887 	bl	800d20c <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4618      	mov	r0, r3
 8001102:	f00a fcf7 	bl	800baf4 <createFile>
	  //creates the header
	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8001106:	4916      	ldr	r1, [pc, #88]	; (8001160 <main+0x214>)
 8001108:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800110c:	f00a fd46 	bl	800bb9c <WavProcess_EncInit>

	  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 8001110:	212c      	movs	r1, #44	; 0x2c
 8001112:	4813      	ldr	r0, [pc, #76]	; (8001160 <main+0x214>)
 8001114:	f00a fd06 	bl	800bb24 <writeToFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <main+0x200>)
 800111a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800111e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8001122:	4619      	mov	r1, r3
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <main+0x200>)
 8001126:	f00a fcfd 	bl	800bb24 <writeToFile>
	  SDclose();
 800112a:	f00a fd0f 	bl	800bb4c <SDclose>
  {
 800112e:	e75d      	b.n	8000fec <main+0xa0>
 8001130:	200022dc 	.word	0x200022dc
 8001134:	2000014c 	.word	0x2000014c
 8001138:	200002dc 	.word	0x200002dc
 800113c:	200000f8 	.word	0x200000f8
 8001140:	40022000 	.word	0x40022000
 8001144:	40022400 	.word	0x40022400
 8001148:	200002d8 	.word	0x200002d8
 800114c:	2000910c 	.word	0x2000910c
 8001150:	20010e20 	.word	0x20010e20
 8001154:	0800e890 	.word	0x0800e890
 8001158:	0800e89c 	.word	0x0800e89c
 800115c:	0800e8a8 	.word	0x0800e8a8
 8001160:	20018c4c 	.word	0x20018c4c

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f00b ff52 	bl	800d01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <SystemClock_Config+0xdc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <SystemClock_Config+0xdc>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <SystemClock_Config+0xdc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <SystemClock_Config+0xe0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <SystemClock_Config+0xe0>)
 80011a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemClock_Config+0xe0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011b8:	2309      	movs	r3, #9
 80011ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011d0:	2319      	movs	r3, #25
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011d4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011da:	2302      	movs	r3, #2
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011de:	2309      	movs	r3, #9
 80011e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f8b2 	bl	8004354 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011f6:	f000 f857 	bl	80012a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011fa:	f003 f85b 	bl	80042b4 <HAL_PWREx_EnableOverDrive>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001204:	f000 f850 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001218:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2107      	movs	r1, #7
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fb42 	bl	80048b0 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001232:	f000 f839 	bl	80012a8 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0a4      	sub	sp, #144	; 0x90
 800124c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2290      	movs	r2, #144	; 0x90
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f00b fee1 	bl	800d01c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <PeriphCommonClock_Config+0x5c>)
 800125c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 800125e:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001262:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001268:	2306      	movs	r3, #6
 800126a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001270:	2306      	movs	r3, #6
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001278:	2300      	movs	r3, #0
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 800127c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fcf5 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001298:	f000 f806 	bl	80012a8 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3790      	adds	r7, #144	; 0x90
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	18300000 	.word	0x18300000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <MX_RTC_Init+0xd0>)
 80012ce:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <MX_RTC_Init+0xd4>)
 80012d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_RTC_Init+0xd0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_RTC_Init+0xd0>)
 80012da:	227f      	movs	r2, #127	; 0x7f
 80012dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_RTC_Init+0xd0>)
 80012e0:	22ff      	movs	r2, #255	; 0xff
 80012e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_RTC_Init+0xd0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <MX_RTC_Init+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_RTC_Init+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012f6:	4823      	ldr	r0, [pc, #140]	; (8001384 <MX_RTC_Init+0xd0>)
 80012f8:	f004 fa5a 	bl	80057b0 <HAL_RTC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001302:	f7ff ffd1 	bl	80012a8 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 8001306:	2100      	movs	r1, #0
 8001308:	481e      	ldr	r0, [pc, #120]	; (8001384 <MX_RTC_Init+0xd0>)
 800130a:	f004 fd7b 	bl	8005e04 <HAL_RTCEx_BKUPRead>
 800130e:	4603      	mov	r3, r0
 8001310:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001314:	4293      	cmp	r3, r2
 8001316:	d02e      	beq.n	8001376 <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001318:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800131c:	2100      	movs	r1, #0
 800131e:	4819      	ldr	r0, [pc, #100]	; (8001384 <MX_RTC_Init+0xd0>)
 8001320:	f004 fd56 	bl	8005dd0 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 8001324:	2314      	movs	r3, #20
 8001326:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 8001328:	2329      	movs	r3, #41	; 0x29
 800132a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 800132c:	2300      	movs	r3, #0
 800132e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_RTC_Init+0xd0>)
 8001340:	f004 faba 	bl	80058b8 <HAL_RTC_SetTime>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800134a:	f7ff ffad 	bl	80012a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800134e:	2301      	movs	r3, #1
 8001350:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8001352:	2301      	movs	r3, #1
 8001354:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 8001356:	2323      	movs	r3, #35	; 0x23
 8001358:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 800135a:	2323      	movs	r3, #35	; 0x23
 800135c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	2201      	movs	r2, #1
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_RTC_Init+0xd0>)
 8001366:	f004 fb9f 	bl	8005aa8 <HAL_RTC_SetDate>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001370:	f7ff ff9a 	bl	80012a8 <Error_Handler>
  }
  return;
 8001374:	e001      	b.n	800137a <MX_RTC_Init+0xc6>
			return;
 8001376:	bf00      	nop
 8001378:	e000      	b.n	800137c <MX_RTC_Init+0xc8>
  return;
 800137a:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200042ec 	.word	0x200042ec
 8001388:	40002800 	.word	0x40002800

0800138c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0a6      	sub	sp, #152	; 0x98
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2290      	movs	r2, #144	; 0x90
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00b fe3d 	bl	800d01c <memset>
  if(rtcHandle->Instance==RTC)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_RTC_MspInit+0x54>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d114      	bne.n	80013d6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013ac:	2320      	movs	r3, #32
 80013ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fc5e 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013c6:	f7ff ff6f 	bl	80012a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RTC_MspInit+0x58>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <HAL_RTC_MspInit+0x58>)
 80013d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3798      	adds	r7, #152	; 0x98
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40002800 	.word	0x40002800
 80013e4:	40023800 	.word	0x40023800

080013e8 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <MX_SAI2_Init+0xb0>)
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <MX_SAI2_Init+0xb4>)
 80013f0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_SAI2_Init+0xb0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <MX_SAI2_Init+0xb0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001406:	2200      	movs	r2, #0
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_SAI2_Init+0xb0>)
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001426:	2201      	movs	r2, #1
 8001428:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_SAI2_Init+0xb0>)
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_SAI2_Init+0xb8>)
 800142e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_SAI2_Init+0xb0>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_SAI2_Init+0xb0>)
 800144a:	2220      	movs	r2, #32
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001450:	2210      	movs	r2, #16
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001456:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_SAI2_Init+0xb0>)
 800145e:	2200      	movs	r2, #0
 8001460:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001464:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001468:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_SAI2_Init+0xb0>)
 800146c:	2200      	movs	r2, #0
 800146e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001472:	2200      	movs	r2, #0
 8001474:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001478:	2202      	movs	r2, #2
 800147a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SAI2_Init+0xb0>)
 800147e:	2203      	movs	r2, #3
 8001480:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_SAI2_Init+0xb0>)
 8001484:	f004 fcd6 	bl	8005e34 <HAL_SAI_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800148e:	f7ff ff0b 	bl	80012a8 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000430c 	.word	0x2000430c
 800149c:	40015c24 	.word	0x40015c24
 80014a0:	0002ee00 	.word	0x0002ee00

080014a4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_SAI_MspInit+0x138>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	f040 808e 	bne.w	80015d4 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_SAI_MspInit+0x13c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10b      	bne.n	80014d8 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80014c0:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <HAL_SAI_MspInit+0x140>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <HAL_SAI_MspInit+0x140>)
 80014c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ca:	6453      	str	r3, [r2, #68]	; 0x44
 80014cc:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <HAL_SAI_MspInit+0x140>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_SAI_MspInit+0x13c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <HAL_SAI_MspInit+0x13c>)
 80014e0:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e2:	2340      	movs	r3, #64	; 0x40
 80014e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014f2:	230a      	movs	r3, #10
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	483a      	ldr	r0, [pc, #232]	; (80015e8 <HAL_SAI_MspInit+0x144>)
 80014fe:	f002 fce3 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001514:	230a      	movs	r3, #10
 8001516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	4833      	ldr	r0, [pc, #204]	; (80015ec <HAL_SAI_MspInit+0x148>)
 8001520:	f002 fcd2 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001524:	2301      	movs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001534:	230a      	movs	r3, #10
 8001536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4619      	mov	r1, r3
 800153e:	482c      	ldr	r0, [pc, #176]	; (80015f0 <HAL_SAI_MspInit+0x14c>)
 8001540:	f002 fcc2 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001544:	2304      	movs	r3, #4
 8001546:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001554:	2308      	movs	r3, #8
 8001556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	4824      	ldr	r0, [pc, #144]	; (80015f0 <HAL_SAI_MspInit+0x14c>)
 8001560:	f002 fcb2 	bl	8003ec8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_SAI_MspInit+0x154>)
 8001568:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 800156c:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 8001570:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 8001588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158c:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 8001590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001594:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a4:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015ae:	f002 f8e5 	bl	800377c <HAL_DMA_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80015b8:	f7ff fe76 	bl	80012a8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015c0:	671a      	str	r2, [r3, #112]	; 0x70
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_SAI_MspInit+0x150>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40015c24 	.word	0x40015c24
 80015e0:	200043f0 	.word	0x200043f0
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40021800 	.word	0x40021800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	20004390 	.word	0x20004390
 80015f8:	40026428 	.word	0x40026428

080015fc <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 8001602:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <MX_SDMMC1_SD_Init+0x3c>)
 8001604:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <MX_SDMMC1_SD_Init+0x38>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	200043f4 	.word	0x200043f4
 8001638:	40012c00 	.word	0x40012c00

0800163c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0ae      	sub	sp, #184	; 0xb8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2290      	movs	r2, #144	; 0x90
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00b fcdd 	bl	800d01c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a74      	ldr	r2, [pc, #464]	; (8001838 <HAL_SD_MspInit+0x1fc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f040 80e0 	bne.w	800182e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800166e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001672:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4618      	mov	r0, r3
 8001686:	f003 faf9 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001690:	f7ff fe0a 	bl	80012a8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001694:	4b69      	ldr	r3, [pc, #420]	; (800183c <HAL_SD_MspInit+0x200>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	4a68      	ldr	r2, [pc, #416]	; (800183c <HAL_SD_MspInit+0x200>)
 800169a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169e:	6453      	str	r3, [r2, #68]	; 0x44
 80016a0:	4b66      	ldr	r3, [pc, #408]	; (800183c <HAL_SD_MspInit+0x200>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_SD_MspInit+0x200>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a62      	ldr	r2, [pc, #392]	; (800183c <HAL_SD_MspInit+0x200>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b60      	ldr	r3, [pc, #384]	; (800183c <HAL_SD_MspInit+0x200>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_SD_MspInit+0x200>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_SD_MspInit+0x200>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b5a      	ldr	r3, [pc, #360]	; (800183c <HAL_SD_MspInit+0x200>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80016dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016f6:	230c      	movs	r3, #12
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001700:	4619      	mov	r1, r3
 8001702:	484f      	ldr	r0, [pc, #316]	; (8001840 <HAL_SD_MspInit+0x204>)
 8001704:	f002 fbe0 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001708:	2304      	movs	r3, #4
 800170a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001720:	230c      	movs	r3, #12
 8001722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001726:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800172a:	4619      	mov	r1, r3
 800172c:	4845      	ldr	r0, [pc, #276]	; (8001844 <HAL_SD_MspInit+0x208>)
 800172e:	f002 fbcb 	bl	8003ec8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001732:	4b45      	ldr	r3, [pc, #276]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_SD_MspInit+0x210>)
 8001736:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001738:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_SD_MspInit+0x20c>)
 800173a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001746:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800174c:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <HAL_SD_MspInit+0x20c>)
 800174e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001752:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001754:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <HAL_SD_MspInit+0x20c>)
 800175e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001762:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001766:	2220      	movs	r2, #32
 8001768:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <HAL_SD_MspInit+0x20c>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001772:	2204      	movs	r2, #4
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001778:	2203      	movs	r2, #3
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_SD_MspInit+0x20c>)
 800177e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001784:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_SD_MspInit+0x20c>)
 8001786:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800178c:	482e      	ldr	r0, [pc, #184]	; (8001848 <HAL_SD_MspInit+0x20c>)
 800178e:	f001 fff5 	bl	800377c <HAL_DMA_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001798:	f7ff fd86 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <HAL_SD_MspInit+0x20c>)
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_SD_MspInit+0x20c>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017aa:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <HAL_SD_MspInit+0x218>)
 80017ac:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017dc:	2220      	movs	r2, #32
 80017de:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_SD_MspInit+0x214>)
 80017fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001802:	4813      	ldr	r0, [pc, #76]	; (8001850 <HAL_SD_MspInit+0x214>)
 8001804:	f001 ffba 	bl	800377c <HAL_DMA_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800180e:	f7ff fd4b 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_SD_MspInit+0x214>)
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_SD_MspInit+0x214>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2031      	movs	r0, #49	; 0x31
 8001824:	f001 fafd 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001828:	2031      	movs	r0, #49	; 0x31
 800182a:	f001 fb16 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800182e:	bf00      	nop
 8001830:	37b8      	adds	r7, #184	; 0xb8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40012c00 	.word	0x40012c00
 800183c:	40023800 	.word	0x40023800
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	20004478 	.word	0x20004478
 800184c:	400264a0 	.word	0x400264a0
 8001850:	200044d8 	.word	0x200044d8
 8001854:	40026458 	.word	0x40026458

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x44>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 fee6 	bl	80026bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80018f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018fc:	f002 fcc2 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <SDMMC1_IRQHandler+0x10>)
 800190a:	f004 fec9 	bl	80066a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200043f4 	.word	0x200043f4

08001918 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA2_Stream0_IRQHandler+0x10>)
 800191e:	f002 f85d 	bl	80039dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000210 	.word	0x20000210

0800192c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream1_IRQHandler+0x10>)
 8001932:	f002 f853 	bl	80039dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20004390 	.word	0x20004390

08001940 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA2_Stream3_IRQHandler+0x10>)
 8001946:	f002 f849 	bl	80039dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200044d8 	.word	0x200044d8

08001954 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <DMA2_Stream5_IRQHandler+0x10>)
 800195a:	f002 f83f 	bl	80039dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000270 	.word	0x20000270

08001968 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <DMA2_Stream6_IRQHandler+0x10>)
 800196e:	f002 f835 	bl	80039dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20004478 	.word	0x20004478

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f00b fafe 	bl	800cfac <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20080000 	.word	0x20080000
 80019dc:	00000800 	.word	0x00000800
 80019e0:	20004538 	.word	0x20004538
 80019e4:	20018c88 	.word	0x20018c88

080019e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <MX_UART4_Init+0x5c>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_UART4_Init+0x58>)
 8001a50:	f005 fed1 	bl	80077f6 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a5a:	f7ff fc25 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000453c 	.word	0x2000453c
 8001a68:	40004c00 	.word	0x40004c00

08001a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0ae      	sub	sp, #184	; 0xb8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2290      	movs	r2, #144	; 0x90
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00b fac5 	bl	800d01c <memset>
  if(uartHandle->Instance==UART4)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_UART_MspInit+0xf4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d15d      	bne.n	8001b58 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 f8e6 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ab6:	f7ff fbf7 	bl	80012a8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_UART_MspInit+0xf8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4810      	ldr	r0, [pc, #64]	; (8001b68 <HAL_UART_MspInit+0xfc>)
 8001b28:	f002 f9ce 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001b46:	2306      	movs	r3, #6
 8001b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <HAL_UART_MspInit+0x100>)
 8001b54:	f002 f9b8 	bl	8003ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b58:	bf00      	nop
 8001b5a:	37b8      	adds	r7, #184	; 0xb8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40004c00 	.word	0x40004c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020c00 	.word	0x40020c00
 8001b6c:	40020000 	.word	0x40020000

08001b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b76:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b8c:	4c0b      	ldr	r4, [pc, #44]	; (8001bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b9a:	f7ff ff25 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f00b fa0b 	bl	800cfb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba2:	f7ff f9d3 	bl	8000f4c <main>
  bx  lr    
 8001ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bb4:	080222b0 	.word	0x080222b0
  ldr r2, =_sbss
 8001bb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bbc:	20018c88 	.word	0x20018c88

08001bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC_IRQHandler>

08001bc2 <buf_to_float>:
 * @param      *pInSignal  points to input signal buffer
 * @param      *pOutSignal points to output signal buffer
 * @param      len         signal length
 */
void buf_to_float(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b087      	sub	sp, #28
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e012      	b.n	8001bfa <buf_to_float+0x38>
  {
    pOutSignal[i] = (float32_t) pInSignal[i];
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	4413      	add	r3, r2
 8001be8:	ee07 1a90 	vmov	s15, r1
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3e8      	bcc.n	8001bd4 <buf_to_float+0x12>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <buf_to_float_normed>:
 * @param      *pInSignal   points to input signal buffer
 * @param      *pOutSignal  points to output signal buffer
 * @param      len          signal length
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e016      	b.n	8001c50 <buf_to_float_normed+0x40>
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001c68 <buf_to_float_normed+0x58>
 8001c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c46:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d3e4      	bcc.n	8001c22 <buf_to_float_normed+0x12>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	47000000 	.word	0x47000000

08001c6c <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	68b8      	ldr	r0, [r7, #8]
 8001c94:	f00a fe52 	bl	800c93c <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	18d0      	adds	r0, r2, r3
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f00b f9b7 	bl	800d01c <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	f00a f984 	bl	800bfc4 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ccc:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	ed93 7a00 	vldr	s14, [r3]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f103 0008 	add.w	r0, r3, #8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	1d19      	adds	r1, r3, #4
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f00a fdc4 	bl	800c88c <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d12c      	bne.n	8001d74 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1e:	e023      	b.n	8001d68 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	440b      	add	r3, r1
 8001d32:	617a      	str	r2, [r7, #20]
 8001d34:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	db09      	blt.n	8001d58 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001d44:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d48:	f00b ff6a 	bl	800dc20 <sqrtf>
 8001d4c:	eef0 7a40 	vmov.f32	s15, s0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001d56:	e004      	b.n	8001d62 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d60:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	3301      	adds	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d3d5      	bcc.n	8001d20 <SpectrogramColumn+0xb4>
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	3730      	adds	r7, #48	; 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b08f      	sub	sp, #60	; 0x3c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff5a 	bl	8001c6c <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fa49 	bl	800225a <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
 8001dcc:	e012      	b.n	8001df4 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	edd3 6a00 	vldr	s13, [r3]
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	3301      	adds	r3, #1
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
 8001df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3e8      	bcc.n	8001dce <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001e00:	e014      	b.n	8001e2c <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d806      	bhi.n	8001e26 <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e24:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	3301      	adds	r3, #1
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3e6      	bcc.n	8001e02 <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d14a      	bne.n	8001ed2 <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e40:	e018      	b.n	8001e74 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e52:	f00b feb7 	bl	800dbc4 <log10f>
 8001e56:	eef0 7a40 	vmov.f32	s15, s0
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	3301      	adds	r3, #1
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d3e2      	bcc.n	8001e42 <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e80:	e022      	b.n	8001ec8 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	ed93 7a00 	vldr	s14, [r3]
 8001e8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e92:	eef1 7a67 	vneg.f32	s15, s15
 8001e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d504      	bpl.n	8001eaa <LogMelSpectrogramColumn+0x12e>
 8001ea0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ea4:	eef1 7a67 	vneg.f32	s15, s15
 8001ea8:	e005      	b.n	8001eb6 <LogMelSpectrogramColumn+0x13a>
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3d8      	bcc.n	8001e82 <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8001ed0:	e01b      	b.n	8001f0a <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	e014      	b.n	8001f02 <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	18d4      	adds	r4, r2, r3
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	f00b fe02 	bl	800daf8 <logf>
 8001ef4:	eef0 7a40 	vmov.f32	s15, s0
 8001ef8:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3301      	adds	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d3e6      	bcc.n	8001ed8 <LogMelSpectrogramColumn+0x15c>
}
 8001f0a:	bf00      	nop
 8001f0c:	373c      	adds	r7, #60	; 0x3c
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}

08001f12 <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b0a4      	sub	sp, #144	; 0x90
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f2c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	330c      	adds	r3, #12
 8001f48:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001f68:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f72:	f000 f9c7 	bl	8002304 <MelScale>
 8001f76:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001f7a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f7e:	4618      	mov	r0, r3
 8001f80:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001f84:	f000 f9be 	bl	8002304 <MelScale>
 8001f88:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001f8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f94:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fdc:	e133      	b.n	8002246 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d044      	beq.n	800206e <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002002:	4618      	mov	r0, r3
 8002004:	eeb0 0a67 	vmov.f32	s0, s15
 8002008:	f000 f9ec 	bl	80023e4 <InverseMelScale>
 800200c:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8002010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002012:	3301      	adds	r3, #1
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002024:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002030:	4618      	mov	r0, r3
 8002032:	eeb0 0a67 	vmov.f32	s0, s15
 8002036:	f000 f9d5 	bl	80023e4 <InverseMelScale>
 800203a:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 800203e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002040:	3302      	adds	r3, #2
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800204a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800204e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002052:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800205e:	4618      	mov	r0, r3
 8002060:	eeb0 0a67 	vmov.f32	s0, s15
 8002064:	f000 f9be 	bl	80023e4 <InverseMelScale>
 8002068:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 800206c:	e02e      	b.n	80020cc <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 800206e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002078:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 800208c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208e:	3301      	adds	r3, #1
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002098:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800209c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 80020ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ae:	3302      	adds	r3, #2
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 80020cc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80020d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 80020dc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020e0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e8:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002100:	e098      	b.n	8002234 <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 8002102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8002108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 800211e:	e011      	b.n	8002144 <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8002120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800212a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002136:	4618      	mov	r0, r3
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	f000 f8e2 	bl	8002304 <MelScale>
 8002140:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8002144:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002148:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8002154:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002158:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800215c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002160:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8002164:	edd7 7a07 	vldr	s15, [r7, #28]
 8002168:	eef1 6a67 	vneg.f32	s13, s15
 800216c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002174:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8002178:	edd7 6a06 	vldr	s13, [r7, #24]
 800217c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002184:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8002188:	ed97 7a05 	vldr	s14, [r7, #20]
 800218c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	d502      	bpl.n	80021a0 <MelFilterbank_Init+0x28e>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	673b      	str	r3, [r7, #112]	; 0x70
 800219e:	e001      	b.n	80021a4 <MelFilterbank_Init+0x292>
      else min = upper;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 80021a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80021a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	dd2f      	ble.n	8002212 <MelFilterbank_Init+0x300>
      {
        weight = min;
 80021b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b4:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 80021b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 80021bc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80021c0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80021c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d0:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 80021d4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80021d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 80021e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e8:	1d1a      	adds	r2, r3, #4
 80021ea:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021f0:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 80021f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021fa:	d102      	bne.n	8002202 <MelFilterbank_Init+0x2f0>
          start_index = j;
 80021fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 8002202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8002208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002210:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 8002212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002218:	4413      	add	r3, r2
 800221a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800221e:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8002220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002226:	4413      	add	r3, r2
 8002228:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800222c:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002230:	3301      	adds	r3, #1
 8002232:	667b      	str	r3, [r7, #100]	; 0x64
 8002234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800223a:	429a      	cmp	r2, r3
 800223c:	f4ff af61 	bcc.w	8002102 <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8002240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002242:	3301      	adds	r3, #1
 8002244:	66bb      	str	r3, [r7, #104]	; 0x68
 8002246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224a:	429a      	cmp	r2, r3
 800224c:	f4ff aec7 	bcc.w	8001fde <MelFilterbank_Init+0xcc>
    }
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3790      	adds	r7, #144	; 0x90
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 800225a:	b480      	push	{r7}
 800225c:	b08d      	sub	sp, #52	; 0x34
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e034      	b.n	80022ee <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80022a2:	8a7b      	ldrh	r3, [r7, #18]
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	e015      	b.n	80022d4 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	4413      	add	r3, r2
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	3301      	adds	r3, #1
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	8a3b      	ldrh	r3, [r7, #16]
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d9e5      	bls.n	80022a8 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3301      	adds	r3, #1
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3c6      	bcc.n	8002284 <MelFilterbank+0x2a>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3734      	adds	r7, #52	; 0x34
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	ed87 0a01 	vstr	s0, [r7, #4]
 800230e:	4603      	mov	r3, r0
 8002310:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d042      	beq.n	800239e <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800231e:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <MelScale+0xcc>)
 8002320:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 8002322:	ed97 7a01 	vldr	s14, [r7, #4]
 8002326:	edd7 7a06 	vldr	s15, [r7, #24]
 800232a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800232e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002336:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <MelScale+0xd0>)
 800233c:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800233e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002342:	edd7 7a06 	vldr	s15, [r7, #24]
 8002346:	ee77 6a67 	vsub.f32	s13, s14, s15
 800234a:	ed97 7a05 	vldr	s14, [r7, #20]
 800234e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002352:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <MelScale+0xd4>)
 8002358:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 800235a:	ed97 7a01 	vldr	s14, [r7, #4]
 800235e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	db15      	blt.n	8002398 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800236c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002370:	edd7 7a04 	vldr	s15, [r7, #16]
 8002374:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002378:	eeb0 0a66 	vmov.f32	s0, s13
 800237c:	f00b fbbc 	bl	800daf8 <logf>
 8002380:	eef0 6a40 	vmov.f32	s13, s0
 8002384:	ed97 7a02 	vldr	s14, [r7, #8]
 8002388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002394:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 8002398:	edd7 7a07 	vldr	s15, [r7, #28]
 800239c:	e013      	b.n	80023c6 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 800239e:	ed97 7a01 	vldr	s14, [r7, #4]
 80023a2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80023dc <MelScale+0xd8>
 80023a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	f00b fb9f 	bl	800daf8 <logf>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023e0 <MelScale+0xdc>
 80023c2:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	42855555 	.word	0x42855555
 80023d4:	447a0000 	.word	0x447a0000
 80023d8:	3d8ccdbb 	.word	0x3d8ccdbb
 80023dc:	442f0000 	.word	0x442f0000
 80023e0:	448ce000 	.word	0x448ce000

080023e4 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80023ee:	4603      	mov	r3, r0
 80023f0:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d042      	beq.n	800247e <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <InverseMelScale+0xcc>)
 8002400:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 8002402:	ed97 7a05 	vldr	s14, [r7, #20]
 8002406:	edd7 7a01 	vldr	s15, [r7, #4]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002416:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <InverseMelScale+0xd0>)
 800241c:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800241e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002422:	edd7 7a06 	vldr	s15, [r7, #24]
 8002426:	ee77 6a67 	vsub.f32	s13, s14, s15
 800242a:	ed97 7a05 	vldr	s14, [r7, #20]
 800242e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002432:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <InverseMelScale+0xd4>)
 8002438:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 800243a:	ed97 7a01 	vldr	s14, [r7, #4]
 800243e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	db15      	blt.n	8002478 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800244c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002450:	edd7 7a03 	vldr	s15, [r7, #12]
 8002454:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002458:	edd7 7a02 	vldr	s15, [r7, #8]
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	eeb0 0a67 	vmov.f32	s0, s15
 8002464:	f00b fad4 	bl	800da10 <expf>
 8002468:	eeb0 7a40 	vmov.f32	s14, s0
 800246c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002474:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8002478:	edd7 7a07 	vldr	s15, [r7, #28]
 800247c:	e013      	b.n	80024a6 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800247e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002482:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024bc <InverseMelScale+0xd8>
 8002486:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800248a:	eeb0 0a47 	vmov.f32	s0, s14
 800248e:	f00b fabf 	bl	800da10 <expf>
 8002492:	eef0 7a40 	vmov.f32	s15, s0
 8002496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800249a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800249e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80024c0 <InverseMelScale+0xdc>
 80024a2:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	42855555 	.word	0x42855555
 80024b4:	447a0000 	.word	0x447a0000
 80024b8:	3d8ccdbb 	.word	0x3d8ccdbb
 80024bc:	448ce000 	.word	0x448ce000
 80024c0:	442f0000 	.word	0x442f0000
 80024c4:	00000000 	.word	0x00000000

080024c8 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]

  switch (type)
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d01c      	beq.n	800251a <Window_Init+0x52>
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	dc25      	bgt.n	8002530 <Window_Init+0x68>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <Window_Init+0x26>
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d00b      	beq.n	8002504 <Window_Init+0x3c>
 80024ec:	e020      	b.n	8002530 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 80024ee:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8002548 <Window_Init+0x80>
 80024f2:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80024f6:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f837 	bl	8002570 <cosine_sum_window_create>
      break;
 8002502:	e019      	b.n	8002538 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 8002504:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8002548 <Window_Init+0x80>
 8002508:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002550 <Window_Init+0x88>
 800250c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002558 <Window_Init+0x90>
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f82c 	bl	8002570 <cosine_sum_window_create>
      break;
 8002518:	e00e      	b.n	8002538 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800251a:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002560 <Window_Init+0x98>
 800251e:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8002522:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002568 <Window_Init+0xa0>
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f821 	bl	8002570 <cosine_sum_window_create>
      break;
 800252e:	e003      	b.n	8002538 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002534:	617b      	str	r3, [r7, #20]
      break;
 8002536:	bf00      	nop
  }

  return status;
 8002538:	697b      	ldr	r3, [r7, #20]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	f3af 8000 	nop.w
	...
 8002550:	d70a3d71 	.word	0xd70a3d71
 8002554:	3fdd70a3 	.word	0x3fdd70a3
 8002558:	147ae148 	.word	0x147ae148
 800255c:	3fe147ae 	.word	0x3fe147ae
 8002560:	47ae147b 	.word	0x47ae147b
 8002564:	3fb47ae1 	.word	0x3fb47ae1
 8002568:	ae147ae1 	.word	0xae147ae1
 800256c:	3fdae147 	.word	0x3fdae147

08002570 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	ed2d 8b02 	vpush	{d8}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	61f8      	str	r0, [r7, #28]
 800257c:	61b9      	str	r1, [r7, #24]
 800257e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002582:	ed87 1b02 	vstr	d1, [r7, #8]
 8002586:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e043      	b.n	8002618 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800259a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002630 <cosine_sum_window_create+0xc0>
 800259e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025ac:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80025b0:	eeb0 0b45 	vmov.f64	d0, d5
 80025b4:	f00b f9e0 	bl	800d978 <cos>
 80025b8:	eeb0 6b40 	vmov.f64	d6, d0
 80025bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80025c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025c4:	ed97 6b04 	vldr	d6, [r7, #16]
 80025c8:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025d6:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002638 <cosine_sum_window_create+0xc8>
 80025da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025e8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80025ec:	eeb0 0b45 	vmov.f64	d0, d5
 80025f0:	f00b f9c2 	bl	800d978 <cos>
 80025f4:	eeb0 6b40 	vmov.f64	d6, d0
 80025f8:	ed97 7b00 	vldr	d7, [r7]
 80025fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002600:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	1d1a      	adds	r2, r3, #4
 8002608:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800260a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 800260e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	3301      	adds	r3, #1
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	429a      	cmp	r2, r3
 800261e:	d3b7      	bcc.n	8002590 <cosine_sum_window_create+0x20>
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	ecbd 8b02 	vpop	{d8}
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	54442d18 	.word	0x54442d18
 8002634:	401921fb 	.word	0x401921fb
 8002638:	54442d18 	.word	0x54442d18
 800263c:	402921fb 	.word	0x402921fb

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 fbe1 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	200f      	movs	r0, #15
 800264c:	f000 f806 	bl	800265c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff f902 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_InitTick+0x54>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x58>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002672:	fbb3 f3f1 	udiv	r3, r3, r1
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fbfb 	bl	8002e76 <HAL_SYSTICK_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00e      	b.n	80026a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d80a      	bhi.n	80026a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002690:	2200      	movs	r2, #0
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002698:	f000 fbc3 	bl	8002e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_InitTick+0x5c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000008 	.word	0x20000008
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x20>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x24>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_IncTick+0x24>)
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000008 	.word	0x20000008
 80026e0:	200045c4 	.word	0x200045c4

080026e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_GetTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200045c4 	.word	0x200045c4

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff ffee 	bl	80026e4 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffde 	bl	80026e4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e031      	b.n	80027be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fd fff2 	bl	800074c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_ADC_Init+0x84>)
 8002788:	4013      	ands	r3, r2
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f970 	bl	8002a78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
 80027ae:	e001      	b.n	80027b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	ffffeefd 	.word	0xffffeefd

080027cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e136      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x28a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	d93a      	bls.n	800286e <HAL_ADC_ConfigChannel+0xa2>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002800:	d035      	beq.n	800286e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68d9      	ldr	r1, [r3, #12]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	3b1e      	subs	r3, #30
 8002818:	2207      	movs	r2, #7
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a8d      	ldr	r2, [pc, #564]	; (8002a64 <HAL_ADC_ConfigChannel+0x298>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68d9      	ldr	r1, [r3, #12]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	061a      	lsls	r2, r3, #24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002846:	e035      	b.n	80028b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	4603      	mov	r3, r0
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4403      	add	r3, r0
 8002860:	3b1e      	subs	r3, #30
 8002862:	409a      	lsls	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286c:	e022      	b.n	80028b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6919      	ldr	r1, [r3, #16]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	2207      	movs	r2, #7
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43da      	mvns	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	400a      	ands	r2, r1
 8002890:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6919      	ldr	r1, [r3, #16]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	4603      	mov	r3, r0
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4403      	add	r3, r0
 80028aa:	409a      	lsls	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d824      	bhi.n	8002906 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b05      	subs	r3, #5
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b05      	subs	r3, #5
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	635a      	str	r2, [r3, #52]	; 0x34
 8002904:	e04c      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d824      	bhi.n	8002958 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b23      	subs	r3, #35	; 0x23
 8002920:	221f      	movs	r2, #31
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	400a      	ands	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	3b23      	subs	r3, #35	; 0x23
 800294a:	fa00 f203 	lsl.w	r2, r0, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
 8002956:	e023      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	3b41      	subs	r3, #65	; 0x41
 800296a:	221f      	movs	r2, #31
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43da      	mvns	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	400a      	ands	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	3b41      	subs	r3, #65	; 0x41
 8002994:	fa00 f203 	lsl.w	r2, r0, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_ADC_ConfigChannel+0x29c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10a      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1f4>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <HAL_ADC_ConfigChannel+0x29c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10f      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x21e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b12      	cmp	r3, #18
 80029d0:	d10b      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 80029e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_ADC_ConfigChannel+0x29c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12b      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x280>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_ADC_ConfigChannel+0x298>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x23a>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b11      	cmp	r3, #17
 8002a04:	d122      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a10:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_ADC_ConfigChannel+0x2a0>)
 8002a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a1c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_ADC_ConfigChannel+0x298>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9a      	lsrs	r2, r3, #18
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f9      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	10000012 	.word	0x10000012
 8002a68:	40012000 	.word	0x40012000
 8002a6c:	40012300 	.word	0x40012300
 8002a70:	20000000 	.word	0x20000000
 8002a74:	431bde83 	.word	0x431bde83

08002a78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a80:	4b78      	ldr	r3, [pc, #480]	; (8002c64 <ADC_Init+0x1ec>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <ADC_Init+0x1ec>)
 8002a86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a8a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a8c:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <ADC_Init+0x1ec>)
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4973      	ldr	r1, [pc, #460]	; (8002c64 <ADC_Init+0x1ec>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <ADC_Init+0x1f0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e00f      	b.n	8002b72 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0202 	bic.w	r2, r2, #2
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	005a      	lsls	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	035a      	lsls	r2, r3, #13
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e007      	b.n	8002be8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	051a      	lsls	r2, r3, #20
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2a:	025a      	lsls	r2, r3, #9
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	029a      	lsls	r2, r3, #10
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40012300 	.word	0x40012300
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <__NVIC_SetPriorityGrouping>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <__NVIC_SetPriorityGrouping+0x40>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <__NVIC_SetPriorityGrouping+0x40>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	05fa0000 	.word	0x05fa0000

08002cb4 <__NVIC_GetPriorityGrouping>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff29 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff3e 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff8e 	bl	8002d60 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff31 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffa2 	bl	8002dc8 <SysTick_Config>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e054      	b.n	8002f4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7f5b      	ldrb	r3, [r3, #29]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fc8c 	bl	80007d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	791b      	ldrb	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_CRC_Init+0xc4>)
 8002ecc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0218 	bic.w	r2, r2, #24
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	e00c      	b.n	8002efa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f834 	bl	8002f58 <HAL_CRCEx_Polynomial_Set>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e028      	b.n	8002f4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	795b      	ldrb	r3, [r3, #5]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f0a:	611a      	str	r2, [r3, #16]
 8002f0c:	e004      	b.n	8002f18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6912      	ldr	r2, [r2, #16]
 8002f16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	04c11db7 	.word	0x04c11db7

08002f58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f68:	231f      	movs	r3, #31
 8002f6a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f6c:	bf00      	nop
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	613a      	str	r2, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HAL_CRCEx_Polynomial_Set+0x34>
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b18      	cmp	r3, #24
 8002f90:	d846      	bhi.n	8003020 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08003027 	.word	0x08003027
 8002f9c:	08003021 	.word	0x08003021
 8002fa0:	08003021 	.word	0x08003021
 8002fa4:	08003021 	.word	0x08003021
 8002fa8:	08003021 	.word	0x08003021
 8002fac:	08003021 	.word	0x08003021
 8002fb0:	08003021 	.word	0x08003021
 8002fb4:	08003021 	.word	0x08003021
 8002fb8:	08003015 	.word	0x08003015
 8002fbc:	08003021 	.word	0x08003021
 8002fc0:	08003021 	.word	0x08003021
 8002fc4:	08003021 	.word	0x08003021
 8002fc8:	08003021 	.word	0x08003021
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08003021 	.word	0x08003021
 8002fd4:	08003021 	.word	0x08003021
 8002fd8:	08003009 	.word	0x08003009
 8002fdc:	08003021 	.word	0x08003021
 8002fe0:	08003021 	.word	0x08003021
 8002fe4:	08003021 	.word	0x08003021
 8002fe8:	08003021 	.word	0x08003021
 8002fec:	08003021 	.word	0x08003021
 8002ff0:	08003021 	.word	0x08003021
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	08002ffd 	.word	0x08002ffd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d913      	bls.n	800302a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003006:	e010      	b.n	800302a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d90f      	bls.n	800302e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003012:	e00c      	b.n	800302e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	d90b      	bls.n	8003032 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800301e:	e008      	b.n	8003032 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	e006      	b.n	8003034 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003026:	bf00      	nop
 8003028:	e004      	b.n	8003034 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003032:	bf00      	nop
  }
  if (status == HAL_OK)
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 0118 	bic.w	r1, r3, #24
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
}
 8003058:	4618      	mov	r0, r3
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0ac      	b.n	80031d0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fadc 	bl	8003638 <DFSDM_GetChannelFromInstance>
 8003080:	4603      	mov	r3, r0
 8003082:	4a55      	ldr	r2, [pc, #340]	; (80031d8 <HAL_DFSDM_ChannelInit+0x174>)
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e09f      	b.n	80031d0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd fd81 	bl	8000b98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003096:	4b51      	ldr	r3, [pc, #324]	; (80031dc <HAL_DFSDM_ChannelInit+0x178>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <HAL_DFSDM_ChannelInit+0x178>)
 800309e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80030a0:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <HAL_DFSDM_ChannelInit+0x178>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d125      	bne.n	80030f4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a4c      	ldr	r2, [pc, #304]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030b2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4948      	ldr	r1, [pc, #288]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a46      	ldr	r2, [pc, #280]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030c8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80030cc:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	791b      	ldrb	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80030d6:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	3b01      	subs	r3, #1
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	493f      	ldr	r1, [pc, #252]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80030e8:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030f2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003102:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003112:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003118:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 020f 	bic.w	r2, r2, #15
 8003130:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003158:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f002 0207 	and.w	r2, r2, #7
 8003184:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fa3a 	bl	8003638 <DFSDM_GetChannelFromInstance>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4904      	ldr	r1, [pc, #16]	; (80031d8 <HAL_DFSDM_ChannelInit+0x174>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200045cc 	.word	0x200045cc
 80031dc:	200045c8 	.word	0x200045c8
 80031e0:	40017400 	.word	0x40017400

080031e4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0c6      	b.n	8003384 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a64      	ldr	r2, [pc, #400]	; (800338c <HAL_DFSDM_FilterInit+0x1a8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d109      	bne.n	8003214 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003204:	2b01      	cmp	r3, #1
 8003206:	d003      	beq.n	8003210 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b7      	b.n	8003384 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fbcb 	bl	80009c8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003240:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7a1b      	ldrb	r3, [r3, #8]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800326a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7a5b      	ldrb	r3, [r3, #9]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e007      	b.n	8003296 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_DFSDM_FilterInit+0x1ac>)
 80032a2:	400b      	ands	r3, r1
 80032a4:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d108      	bne.n	80032c0 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7c1b      	ldrb	r3, [r3, #16]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0210 	orr.w	r2, r2, #16
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e007      	b.n	80032ea <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0210 	bic.w	r2, r2, #16
 80032e8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7c5b      	ldrb	r3, [r3, #17]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e007      	b.n	8003314 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0220 	bic.w	r2, r2, #32
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6959      	ldr	r1, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_DFSDM_FilterInit+0x1b0>)
 8003320:	400b      	ands	r3, r1
 8003322:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6959      	ldr	r1, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003336:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800333e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7c1a      	ldrb	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40017500 	.word	0x40017500
 8003390:	ffff80f7 	.word	0xffff80f7
 8003394:	1c00ff00 	.word	0x1c00ff00

08003398 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02c      	beq.n	800340c <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033b8:	2bff      	cmp	r3, #255	; 0xff
 80033ba:	d027      	beq.n	800340c <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80033c8:	400b      	ands	r3, r1
 80033ca:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e00a      	b.n	8003404 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
 800340a:	e001      	b.n	8003410 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003410:	7dfb      	ldrb	r3, [r7, #23]
}
 8003412:	4618      	mov	r0, r3
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	f8fbffff 	.word	0xf8fbffff

08003424 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003442:	2bff      	cmp	r3, #255	; 0xff
 8003444:	d016      	beq.n	8003474 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	b292      	uxth	r2, r2
 800344e:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	f000 f8d2 	bl	80035fa <DFSDM_GetInjChannelsNbr>
 8003456:	4602      	mov	r2, r0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 8003462:	2b01      	cmp	r3, #1
 8003464:	d102      	bne.n	800346c <HAL_DFSDM_FilterConfigInjChannel+0x48>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	e000      	b.n	800346e <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 800346c:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6493      	str	r3, [r2, #72]	; 0x48
 8003472:	e001      	b.n	8003478 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
 80034a4:	e066      	b.n	8003574 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b4:	d002      	beq.n	80034bc <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
 80034ba:	e05b      	b.n	8003574 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10e      	bne.n	80034e2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d002      	beq.n	80034e2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
 80034e0:	e048      	b.n	8003574 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d108      	bne.n	8003504 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fc:	d102      	bne.n	8003504 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
 8003502:	e037      	b.n	8003574 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d004      	beq.n	8003518 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003514:	2b03      	cmp	r3, #3
 8003516:	d12b      	bne.n	8003570 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800351e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003526:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800352e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003532:	d101      	bne.n	8003538 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8003536:	e000      	b.n	800353a <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003538:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	331c      	adds	r3, #28
 800354a:	4619      	mov	r1, r3
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f000 f9c2 	bl	80038d8 <HAL_DMA_Start_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	22ff      	movs	r2, #255	; 0xff
 800355e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003566:	e005      	b.n	8003574 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8b1 	bl	80036d0 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800356e:	e001      	b.n	8003574 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	080035bd 	.word	0x080035bd
 8003584:	080035d9 	.word	0x080035d9
 8003588:	080035a1 	.word	0x080035a1

0800358c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f008 f938 	bl	800b824 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f008 f946 	bl	800b85c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2203      	movs	r2, #3
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff ffcd 	bl	800358c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	b29b      	uxth	r3, r3
 800360a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800360c:	e00a      	b.n	8003624 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f1      	bne.n	800360e <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d102      	bne.n	800364e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e02b      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d102      	bne.n	800365c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e024      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a17      	ldr	r2, [pc, #92]	; (80036bc <DFSDM_GetChannelFromInstance+0x84>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d102      	bne.n	800366a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003664:	2302      	movs	r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e01d      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <DFSDM_GetChannelFromInstance+0x88>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d102      	bne.n	8003678 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003672:	2303      	movs	r3, #3
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e016      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003680:	2304      	movs	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e00f      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <DFSDM_GetChannelFromInstance+0x90>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d102      	bne.n	8003694 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800368e:	2305      	movs	r3, #5
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e008      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <DFSDM_GetChannelFromInstance+0x94>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d102      	bne.n	80036a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800369c:	2306      	movs	r3, #6
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e001      	b.n	80036a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80036a2:	2307      	movs	r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80036a6:	68fb      	ldr	r3, [r7, #12]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40017400 	.word	0x40017400
 80036b8:	40017420 	.word	0x40017420
 80036bc:	40017440 	.word	0x40017440
 80036c0:	40017460 	.word	0x40017460
 80036c4:	40017480 	.word	0x40017480
 80036c8:	400174a0 	.word	0x400174a0
 80036cc:	400174c0 	.word	0x400174c0

080036d0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d108      	bne.n	80036f2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e033      	b.n	800375a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003710:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003728:	2b03      	cmp	r3, #3
 800372a:	d116      	bne.n	800375a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0202 	orr.w	r2, r2, #2
 8003742:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800374a:	2b01      	cmp	r3, #1
 800374c:	d102      	bne.n	8003754 <DFSDM_RegConvStart+0x84>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	e000      	b.n	8003756 <DFSDM_RegConvStart+0x86>
 8003754:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <DFSDM_RegConvStart+0x98>
 8003764:	2202      	movs	r2, #2
 8003766:	e000      	b.n	800376a <DFSDM_RegConvStart+0x9a>
 8003768:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7fe ffac 	bl	80026e4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e099      	b.n	80038cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b8:	e00f      	b.n	80037da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ba:	f7fe ff93 	bl	80026e4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d908      	bls.n	80037da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e078      	b.n	80038cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e8      	bne.n	80037ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_DMA_Init+0x158>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b04      	cmp	r3, #4
 8003832:	d107      	bne.n	8003844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4313      	orrs	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b04      	cmp	r3, #4
 800386c:	d117      	bne.n	800389e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 faa5 	bl	8003dd0 <DMA_CheckFifoParam>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800389a:	2301      	movs	r3, #1
 800389c:	e016      	b.n	80038cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa5c 	bl	8003d64 <DMA_CalcBaseAndBitshift>
 80038ac:	4603      	mov	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	223f      	movs	r2, #63	; 0x3f
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e010803f 	.word	0xe010803f

080038d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_DMA_Start_IT+0x26>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e048      	b.n	8003990 <HAL_DMA_Start_IT+0xb8>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d137      	bne.n	8003982 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9ee 	bl	8003d08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0216 	orr.w	r2, r2, #22
 8003946:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003956:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0208 	orr.w	r2, r2, #8
 800396e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e005      	b.n	800398e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800398a:	2302      	movs	r3, #2
 800398c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d004      	beq.n	80039b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00c      	b.n	80039d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2205      	movs	r2, #5
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80039e8:	4b8e      	ldr	r3, [pc, #568]	; (8003c24 <HAL_DMA_IRQHandler+0x248>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a8e      	ldr	r2, [pc, #568]	; (8003c28 <HAL_DMA_IRQHandler+0x24c>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0a9b      	lsrs	r3, r3, #10
 80039f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	2208      	movs	r2, #8
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01a      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0204 	bic.w	r2, r2, #4
 8003a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2208      	movs	r2, #8
 8003a36:	409a      	lsls	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d012      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f043 0202 	orr.w	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2204      	movs	r2, #4
 8003a84:	409a      	lsls	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d012      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	2210      	movs	r2, #16
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d043      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d03c      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	2210      	movs	r2, #16
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d024      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e01f      	b.n	8003b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e016      	b.n	8003b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0208 	bic.w	r2, r2, #8
 8003b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	2220      	movs	r2, #32
 8003b52:	409a      	lsls	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 808f 	beq.w	8003c7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8087 	beq.w	8003c7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	2220      	movs	r2, #32
 8003b74:	409a      	lsls	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d136      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0216 	bic.w	r2, r2, #22
 8003b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x1da>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0208 	bic.w	r2, r2, #8
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	223f      	movs	r2, #63	; 0x3f
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d07e      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
        }
        return;
 8003bf2:	e079      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01d      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d031      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
 8003c20:	e02c      	b.n	8003c7c <HAL_DMA_IRQHandler+0x2a0>
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000
 8003c28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d023      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
 8003c3c:	e01e      	b.n	8003c7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10f      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0210 	bic.w	r2, r2, #16
 8003c5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d032      	beq.n	8003cea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d022      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2205      	movs	r2, #5
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d307      	bcc.n	8003cc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f2      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x2cc>
 8003cc2:	e000      	b.n	8003cc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
 8003ce6:	e000      	b.n	8003cea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ce8:	bf00      	nop
    }
  }
}
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d108      	bne.n	8003d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d46:	e007      	b.n	8003d58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	3b10      	subs	r3, #16
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <DMA_CalcBaseAndBitshift+0x60>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d908      	bls.n	8003da4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <DMA_CalcBaseAndBitshift+0x68>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	1d1a      	adds	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	659a      	str	r2, [r3, #88]	; 0x58
 8003da2:	e006      	b.n	8003db2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <DMA_CalcBaseAndBitshift+0x68>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	aaaaaaab 	.word	0xaaaaaaab
 8003dc8:	0800e934 	.word	0x0800e934
 8003dcc:	fffffc00 	.word	0xfffffc00

08003dd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11f      	bne.n	8003e2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d856      	bhi.n	8003e9e <DMA_CheckFifoParam+0xce>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <DMA_CheckFifoParam+0x28>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e1b 	.word	0x08003e1b
 8003e00:	08003e09 	.word	0x08003e09
 8003e04:	08003e9f 	.word	0x08003e9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d046      	beq.n	8003ea2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e18:	e043      	b.n	8003ea2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e22:	d140      	bne.n	8003ea6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e28:	e03d      	b.n	8003ea6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e32:	d121      	bne.n	8003e78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d837      	bhi.n	8003eaa <DMA_CheckFifoParam+0xda>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <DMA_CheckFifoParam+0x70>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e57 	.word	0x08003e57
 8003e48:	08003e51 	.word	0x08003e51
 8003e4c:	08003e69 	.word	0x08003e69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e030      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d025      	beq.n	8003eae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e66:	e022      	b.n	8003eae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e70:	d11f      	bne.n	8003eb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e76:	e01c      	b.n	8003eb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d903      	bls.n	8003e86 <DMA_CheckFifoParam+0xb6>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d003      	beq.n	8003e8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e84:	e018      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8a:	e015      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e00b      	b.n	8003eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e00a      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e008      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e006      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e004      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eb6:	bf00      	nop
    }
  } 
  
  return status; 
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e175      	b.n	80041d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 8164 	bne.w	80041ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d005      	beq.n	8003f1e <HAL_GPIO_Init+0x56>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d130      	bne.n	8003f80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f54:	2201      	movs	r2, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 0201 	and.w	r2, r3, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d017      	beq.n	8003fbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d123      	bne.n	8004010 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0203 	and.w	r2, r3, #3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80be 	beq.w	80041ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a65      	ldr	r2, [pc, #404]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800406a:	4a61      	ldr	r2, [pc, #388]	; (80041f0 <HAL_GPIO_Init+0x328>)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3302      	adds	r3, #2
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a58      	ldr	r2, [pc, #352]	; (80041f4 <HAL_GPIO_Init+0x32c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d037      	beq.n	8004106 <HAL_GPIO_Init+0x23e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a57      	ldr	r2, [pc, #348]	; (80041f8 <HAL_GPIO_Init+0x330>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d031      	beq.n	8004102 <HAL_GPIO_Init+0x23a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a56      	ldr	r2, [pc, #344]	; (80041fc <HAL_GPIO_Init+0x334>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02b      	beq.n	80040fe <HAL_GPIO_Init+0x236>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a55      	ldr	r2, [pc, #340]	; (8004200 <HAL_GPIO_Init+0x338>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d025      	beq.n	80040fa <HAL_GPIO_Init+0x232>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a54      	ldr	r2, [pc, #336]	; (8004204 <HAL_GPIO_Init+0x33c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01f      	beq.n	80040f6 <HAL_GPIO_Init+0x22e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a53      	ldr	r2, [pc, #332]	; (8004208 <HAL_GPIO_Init+0x340>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d019      	beq.n	80040f2 <HAL_GPIO_Init+0x22a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_GPIO_Init+0x344>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0x226>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a51      	ldr	r2, [pc, #324]	; (8004210 <HAL_GPIO_Init+0x348>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00d      	beq.n	80040ea <HAL_GPIO_Init+0x222>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a50      	ldr	r2, [pc, #320]	; (8004214 <HAL_GPIO_Init+0x34c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x21e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a4f      	ldr	r2, [pc, #316]	; (8004218 <HAL_GPIO_Init+0x350>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_GPIO_Init+0x21a>
 80040de:	2309      	movs	r3, #9
 80040e0:	e012      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040e2:	230a      	movs	r3, #10
 80040e4:	e010      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040e6:	2308      	movs	r3, #8
 80040e8:	e00e      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040ea:	2307      	movs	r3, #7
 80040ec:	e00c      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040ee:	2306      	movs	r3, #6
 80040f0:	e00a      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040f2:	2305      	movs	r3, #5
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x240>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x240>
 8004106:	2300      	movs	r3, #0
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	f002 0203 	and.w	r2, r2, #3
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004118:	4935      	ldr	r1, [pc, #212]	; (80041f0 <HAL_GPIO_Init+0x328>)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_GPIO_Init+0x354>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414a:	4a34      	ldr	r2, [pc, #208]	; (800421c <HAL_GPIO_Init+0x354>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <HAL_GPIO_Init+0x354>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <HAL_GPIO_Init+0x354>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_GPIO_Init+0x354>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_GPIO_Init+0x354>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_GPIO_Init+0x354>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <HAL_GPIO_Init+0x354>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	f67f ae86 	bls.w	8003ee8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40020000 	.word	0x40020000
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40021000 	.word	0x40021000
 8004208:	40021400 	.word	0x40021400
 800420c:	40021800 	.word	0x40021800
 8004210:	40021c00 	.word	0x40021c00
 8004214:	40022000 	.word	0x40022000
 8004218:	40022400 	.word	0x40022400
 800421c:	40013c00 	.word	0x40013c00

08004220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e001      	b.n	8004242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
 800425c:	4613      	mov	r3, r2
 800425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800426c:	e003      	b.n	8004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	041a      	lsls	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800429a:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f007 fc5c 	bl	800bb60 <HAL_GPIO_EXTI_Callback>
  }
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40013c00 	.word	0x40013c00

080042b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a22      	ldr	r2, [pc, #136]	; (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e2:	f7fe f9ff 	bl	80026e4 <HAL_GetTick>
 80042e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042e8:	e009      	b.n	80042fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ea:	f7fe f9fb 	bl	80026e4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f8:	d901      	bls.n	80042fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e022      	b.n	8004344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d1ee      	bne.n	80042ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0f      	ldr	r2, [pc, #60]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004318:	f7fe f9e4 	bl	80026e4 <HAL_GetTick>
 800431c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800431e:	e009      	b.n	8004334 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004320:	f7fe f9e0 	bl	80026e4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432e:	d901      	bls.n	8004334 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e007      	b.n	8004344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004340:	d1ee      	bne.n	8004320 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000

08004354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e29b      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8087 	beq.w	8004486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004378:	4b96      	ldr	r3, [pc, #600]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b04      	cmp	r3, #4
 8004382:	d00c      	beq.n	800439e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004384:	4b93      	ldr	r3, [pc, #588]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b08      	cmp	r3, #8
 800438e:	d112      	bne.n	80043b6 <HAL_RCC_OscConfig+0x62>
 8004390:	4b90      	ldr	r3, [pc, #576]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439c:	d10b      	bne.n	80043b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439e:	4b8d      	ldr	r3, [pc, #564]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d06c      	beq.n	8004484 <HAL_RCC_OscConfig+0x130>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d168      	bne.n	8004484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e275      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d106      	bne.n	80043ce <HAL_RCC_OscConfig+0x7a>
 80043c0:	4b84      	ldr	r3, [pc, #528]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a83      	ldr	r2, [pc, #524]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e02e      	b.n	800442c <HAL_RCC_OscConfig+0xd8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x9c>
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7e      	ldr	r2, [pc, #504]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b7c      	ldr	r3, [pc, #496]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7b      	ldr	r2, [pc, #492]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xd8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0xc0>
 80043fa:	4b76      	ldr	r3, [pc, #472]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b73      	ldr	r3, [pc, #460]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a72      	ldr	r2, [pc, #456]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xd8>
 8004414:	4b6f      	ldr	r3, [pc, #444]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6e      	ldr	r2, [pc, #440]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b6c      	ldr	r3, [pc, #432]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6b      	ldr	r2, [pc, #428]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fe f956 	bl	80026e4 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7fe f952 	bl	80026e4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e229      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xe8>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe f942 	bl	80026e4 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7fe f93e 	bl	80026e4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e215      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x110>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d069      	beq.n	8004566 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b4d      	ldr	r3, [pc, #308]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d11c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x190>
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCC_OscConfig+0x17a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1e9      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	493d      	ldr	r1, [pc, #244]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	e040      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d023      	beq.n	8004534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ec:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a38      	ldr	r2, [pc, #224]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe f8f4 	bl	80026e4 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fe f8f0 	bl	80026e4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1c7      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4929      	ldr	r1, [pc, #164]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
 8004532:	e018      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe f8d0 	bl	80026e4 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004548:	f7fe f8cc 	bl	80026e4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1a3      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d038      	beq.n	80045e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d019      	beq.n	80045ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004586:	f7fe f8ad 	bl	80026e4 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800458e:	f7fe f8a9 	bl	80026e4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e180      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80045a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x23a>
 80045ac:	e01a      	b.n	80045e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <HAL_RCC_OscConfig+0x280>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fe f893 	bl	80026e4 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fe f88f 	bl	80026e4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d903      	bls.n	80045d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e166      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
 80045d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	4b92      	ldr	r3, [pc, #584]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ee      	bne.n	80045c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a4 	beq.w	800473a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b8c      	ldr	r3, [pc, #560]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10d      	bne.n	800461a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	4b89      	ldr	r3, [pc, #548]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4a88      	ldr	r2, [pc, #544]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	; 0x40
 800460a:	4b86      	ldr	r3, [pc, #536]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461a:	4b83      	ldr	r3, [pc, #524]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004626:	4b80      	ldr	r3, [pc, #512]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004632:	f7fe f857 	bl	80026e4 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fe f853 	bl	80026e4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b64      	cmp	r3, #100	; 0x64
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e12a      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464c:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x31a>
 8004660:	4b70      	ldr	r3, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a6f      	ldr	r2, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
 800466c:	e02d      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x33c>
 8004676:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a6a      	ldr	r2, [pc, #424]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	4b68      	ldr	r3, [pc, #416]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a67      	ldr	r2, [pc, #412]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
 800468e:	e01c      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b05      	cmp	r3, #5
 8004696:	d10c      	bne.n	80046b2 <HAL_RCC_OscConfig+0x35e>
 8004698:	4b62      	ldr	r3, [pc, #392]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4a61      	ldr	r2, [pc, #388]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	f043 0304 	orr.w	r3, r3, #4
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
 80046a4:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a5e      	ldr	r2, [pc, #376]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	e00b      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
 80046b2:	4b5c      	ldr	r3, [pc, #368]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a5b      	ldr	r2, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d015      	beq.n	80046fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7fe f807 	bl	80026e4 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fe f803 	bl	80026e4 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e0d8      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ee      	beq.n	80046da <HAL_RCC_OscConfig+0x386>
 80046fc:	e014      	b.n	8004728 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd fff1 	bl	80026e4 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd ffed 	bl	80026e4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0c2      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471c:	4b41      	ldr	r3, [pc, #260]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ee      	bne.n	8004706 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472e:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	4a3c      	ldr	r2, [pc, #240]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80ae 	beq.w	80048a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004744:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b08      	cmp	r3, #8
 800474e:	d06d      	beq.n	800482c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d14b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004758:	4b32      	ldr	r3, [pc, #200]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a31      	ldr	r2, [pc, #196]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd ffbe 	bl	80026e4 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd ffba 	bl	80026e4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e091      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	3b01      	subs	r3, #1
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	491b      	ldr	r1, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fd ff8c 	bl	80026e4 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fd ff88 	bl	80026e4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e05f      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x47c>
 80047ee:	e057      	b.n	80048a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd ff72 	bl	80026e4 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fd ff6e 	bl	80026e4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e045      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x4b0>
 8004822:	e03d      	b.n	80048a0 <HAL_RCC_OscConfig+0x54c>
 8004824:	40023800 	.word	0x40023800
 8004828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <HAL_RCC_OscConfig+0x558>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d030      	beq.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d129      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d122      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004862:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004864:	4293      	cmp	r3, r2
 8004866:	d119      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d10f      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800

080048b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0d0      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c8:	4b6a      	ldr	r3, [pc, #424]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d910      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d6:	4b67      	ldr	r3, [pc, #412]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 020f 	bic.w	r2, r3, #15
 80048de:	4965      	ldr	r1, [pc, #404]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d040      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d115      	bne.n	8004992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e073      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e06b      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004992:	4b39      	ldr	r3, [pc, #228]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4936      	ldr	r1, [pc, #216]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a4:	f7fd fe9e 	bl	80026e4 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fd fe9a 	bl	80026e4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e053      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 020c 	and.w	r2, r3, #12
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1eb      	bne.n	80049ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d210      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	4922      	ldr	r1, [pc, #136]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	; (8004a7c <HAL_RCC_ClockConfig+0x1cc>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x1d0>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1d4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd fdfa 	bl	800265c <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	0800e91c 	.word	0x0800e91c
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b090      	sub	sp, #64	; 0x40
 8004a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
 8004a94:	2300      	movs	r3, #0
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	2300      	movs	r3, #0
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	f200 80a1 	bhi.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aba:	e09b      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8004abe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac0:	e09b      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac6:	e098      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4b4f      	ldr	r3, [pc, #316]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ad2:	4b4d      	ldr	r3, [pc, #308]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d028      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004af0:	2100      	movs	r1, #0
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004af4:	fb03 f201 	mul.w	r2, r3, r1
 8004af8:	2300      	movs	r3, #0
 8004afa:	fb00 f303 	mul.w	r3, r0, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	4a43      	ldr	r2, [pc, #268]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b02:	fba0 1202 	umull	r1, r2, r0, r2
 8004b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b08:	460a      	mov	r2, r1
 8004b0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0e:	4413      	add	r3, r2
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	2200      	movs	r2, #0
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	61fa      	str	r2, [r7, #28]
 8004b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b22:	f7fb fc3d 	bl	80003a0 <__aeabi_uldivmod>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2e:	e053      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b30:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	2200      	movs	r2, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	617a      	str	r2, [r7, #20]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b42:	f04f 0b00 	mov.w	fp, #0
 8004b46:	4652      	mov	r2, sl
 8004b48:	465b      	mov	r3, fp
 8004b4a:	f04f 0000 	mov.w	r0, #0
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	0159      	lsls	r1, r3, #5
 8004b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b58:	0150      	lsls	r0, r2, #5
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	ebb2 080a 	subs.w	r8, r2, sl
 8004b62:	eb63 090b 	sbc.w	r9, r3, fp
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b7a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b7e:	eb63 0509 	sbc.w	r5, r3, r9
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	00eb      	lsls	r3, r5, #3
 8004b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b90:	00e2      	lsls	r2, r4, #3
 8004b92:	4614      	mov	r4, r2
 8004b94:	461d      	mov	r5, r3
 8004b96:	eb14 030a 	adds.w	r3, r4, sl
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	eb45 030b 	adc.w	r3, r5, fp
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	028b      	lsls	r3, r1, #10
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb8:	4621      	mov	r1, r4
 8004bba:	028a      	lsls	r2, r1, #10
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bcc:	f7fb fbe8 	bl	80003a0 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3740      	adds	r7, #64	; 0x40
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	017d7840 	.word	0x017d7840

08004c14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000000 	.word	0x20000000

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c30:	f7ff fff0 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	0800e92c 	.word	0x0800e92c

08004c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c58:	f7ff ffdc 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0b5b      	lsrs	r3, r3, #13
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800e92c 	.word	0x0800e92c

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ca4:	4b69      	ldr	r3, [pc, #420]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a68      	ldr	r2, [pc, #416]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cae:	6093      	str	r3, [r2, #8]
 8004cb0:	4b66      	ldr	r3, [pc, #408]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	4964      	ldr	r1, [pc, #400]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd6:	4b5d      	ldr	r3, [pc, #372]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	4959      	ldr	r1, [pc, #356]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d12:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	494a      	ldr	r1, [pc, #296]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d30:	d101      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 808b 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d60:	4b3a      	ldr	r3, [pc, #232]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	4a39      	ldr	r2, [pc, #228]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6c:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a34      	ldr	r2, [pc, #208]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d84:	f7fd fcae 	bl	80026e4 <HAL_GetTick>
 8004d88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8c:	f7fd fcaa 	bl	80026e4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e38f      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d9e:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d035      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d02e      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc8:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dea:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004df0:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d114      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fd fc72 	bl	80026e4 <HAL_GetTick>
 8004e00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e02:	e00a      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e04:	f7fd fc6e 	bl	80026e4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e351      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ee      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e32:	d111      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e42:	400b      	ands	r3, r1
 8004e44:	4901      	ldr	r1, [pc, #4]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40007000 	.word	0x40007000
 8004e54:	0ffffcff 	.word	0x0ffffcff
 8004e58:	4bac      	ldr	r3, [pc, #688]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4aab      	ldr	r2, [pc, #684]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e62:	6093      	str	r3, [r2, #8]
 8004e64:	4ba9      	ldr	r3, [pc, #676]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e70:	49a6      	ldr	r1, [pc, #664]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e82:	4ba2      	ldr	r3, [pc, #648]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e88:	4aa0      	ldr	r2, [pc, #640]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e92:	4b9e      	ldr	r3, [pc, #632]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	499b      	ldr	r1, [pc, #620]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb0:	4b96      	ldr	r3, [pc, #600]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebe:	4993      	ldr	r1, [pc, #588]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed2:	4b8e      	ldr	r3, [pc, #568]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee0:	498a      	ldr	r1, [pc, #552]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef4:	4b85      	ldr	r3, [pc, #532]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f02:	4982      	ldr	r1, [pc, #520]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f16:	4b7d      	ldr	r3, [pc, #500]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4979      	ldr	r1, [pc, #484]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f38:	4b74      	ldr	r3, [pc, #464]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f023 0203 	bic.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	4971      	ldr	r1, [pc, #452]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f5a:	4b6c      	ldr	r3, [pc, #432]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f023 020c 	bic.w	r2, r3, #12
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f68:	4968      	ldr	r1, [pc, #416]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f7c:	4b63      	ldr	r3, [pc, #396]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	4960      	ldr	r1, [pc, #384]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f9e:	4b5b      	ldr	r3, [pc, #364]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	4957      	ldr	r1, [pc, #348]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc0:	4b52      	ldr	r3, [pc, #328]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	494f      	ldr	r1, [pc, #316]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	4946      	ldr	r1, [pc, #280]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005004:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005012:	493e      	ldr	r1, [pc, #248]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005034:	4935      	ldr	r1, [pc, #212]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005056:	492d      	ldr	r1, [pc, #180]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d011      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800506a:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005078:	4924      	ldr	r1, [pc, #144]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005088:	d101      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800508a:	2301      	movs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050aa:	4b18      	ldr	r3, [pc, #96]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b8:	4914      	ldr	r1, [pc, #80]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050dc:	490b      	ldr	r1, [pc, #44]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00f      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005100:	4902      	ldr	r1, [pc, #8]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800510a:	bf00      	nop
 800510c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800511c:	4b8a      	ldr	r3, [pc, #552]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800511e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005122:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	4986      	ldr	r1, [pc, #536]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005140:	4b81      	ldr	r3, [pc, #516]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005146:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005150:	497d      	ldr	r1, [pc, #500]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d006      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80d6 	beq.w	8005318 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800516c:	4b76      	ldr	r3, [pc, #472]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a75      	ldr	r2, [pc, #468]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005178:	f7fd fab4 	bl	80026e4 <HAL_GetTick>
 800517c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005180:	f7fd fab0 	bl	80026e4 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b64      	cmp	r3, #100	; 0x64
 800518c:	d901      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e195      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005192:	4b6d      	ldr	r3, [pc, #436]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d021      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11d      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051b2:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051c0:	4b61      	ldr	r3, [pc, #388]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c6:	0e1b      	lsrs	r3, r3, #24
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	019a      	lsls	r2, r3, #6
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	071b      	lsls	r3, r3, #28
 80051e6:	4958      	ldr	r1, [pc, #352]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02e      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005218:	d129      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005228:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522e:	0f1b      	lsrs	r3, r3, #28
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	019a      	lsls	r2, r3, #6
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	061b      	lsls	r3, r3, #24
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	071b      	lsls	r3, r3, #28
 800524e:	493e      	ldr	r1, [pc, #248]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005256:	4b3c      	ldr	r3, [pc, #240]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525c:	f023 021f 	bic.w	r2, r3, #31
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	3b01      	subs	r3, #1
 8005266:	4938      	ldr	r1, [pc, #224]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01d      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800527a:	4b33      	ldr	r3, [pc, #204]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005288:	4b2f      	ldr	r3, [pc, #188]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	0f1b      	lsrs	r3, r3, #28
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	019a      	lsls	r2, r3, #6
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	071b      	lsls	r3, r3, #28
 80052ae:	4926      	ldr	r1, [pc, #152]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d011      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	019a      	lsls	r2, r3, #6
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	491a      	ldr	r1, [pc, #104]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052e6:	4b18      	ldr	r3, [pc, #96]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f2:	f7fd f9f7 	bl	80026e4 <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f8:	e008      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052fa:	f7fd f9f3 	bl	80026e4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b64      	cmp	r3, #100	; 0x64
 8005306:	d901      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e0d8      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800530c:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f0      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b01      	cmp	r3, #1
 800531c:	f040 80ce 	bne.w	80054bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532c:	f7fd f9da 	bl	80026e4 <HAL_GetTick>
 8005330:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005332:	e00b      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005334:	f7fd f9d6 	bl	80026e4 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b64      	cmp	r3, #100	; 0x64
 8005340:	d904      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0bb      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800534c:	4b5e      	ldr	r3, [pc, #376]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005358:	d0ec      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005376:	2b00      	cmp	r3, #0
 8005378:	d02e      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d12a      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005382:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005390:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	0f1b      	lsrs	r3, r3, #28
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	019a      	lsls	r2, r3, #6
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	061b      	lsls	r3, r3, #24
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	071b      	lsls	r3, r3, #28
 80053b6:	4944      	ldr	r1, [pc, #272]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053be:	4b42      	ldr	r3, [pc, #264]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	493d      	ldr	r1, [pc, #244]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d022      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ec:	d11d      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053fc:	4b32      	ldr	r3, [pc, #200]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	0f1b      	lsrs	r3, r3, #28
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	4929      	ldr	r1, [pc, #164]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d028      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	0e1b      	lsrs	r3, r3, #24
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	019a      	lsls	r2, r3, #6
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	4917      	ldr	r1, [pc, #92]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4911      	ldr	r1, [pc, #68]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0e      	ldr	r2, [pc, #56]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005494:	f7fd f926 	bl	80026e4 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800549c:	f7fd f922 	bl	80026e4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e007      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ba:	d1ef      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800

080054cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054ea:	f040 80a3 	bne.w	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80054ee:	4ba8      	ldr	r3, [pc, #672]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80054fc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005504:	f000 808a 	beq.w	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800550e:	f200 8093 	bhi.w	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005518:	d07d      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005520:	f200 808a 	bhi.w	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005530:	d039      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005532:	e081      	b.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005534:	4b96      	ldr	r3, [pc, #600]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005540:	4b93      	ldr	r3, [pc, #588]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005548:	4a92      	ldr	r2, [pc, #584]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e007      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005552:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555a:	4a8f      	ldr	r2, [pc, #572]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005562:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	0e1b      	lsrs	r3, r3, #24
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005570:	4b87      	ldr	r3, [pc, #540]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	fb03 f202 	mul.w	r2, r3, r2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800558c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	3301      	adds	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e049      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055b2:	4b77      	ldr	r3, [pc, #476]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ba:	4a76      	ldr	r2, [pc, #472]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e007      	b.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055c4:	4b72      	ldr	r3, [pc, #456]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055cc:	4a72      	ldr	r2, [pc, #456]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80055d4:	4b6e      	ldr	r3, [pc, #440]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055da:	0e1b      	lsrs	r3, r3, #24
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80055e2:	4b6b      	ldr	r3, [pc, #428]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e8:	099b      	lsrs	r3, r3, #6
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	fb03 f202 	mul.w	r2, r3, r2
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	617b      	str	r3, [r7, #20]
        break;
 8005614:	e011      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005616:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005618:	617b      	str	r3, [r7, #20]
        break;
 800561a:	e00e      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800561c:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005628:	4b5a      	ldr	r3, [pc, #360]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800562a:	617b      	str	r3, [r7, #20]
        break;
 800562c:	e005      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800562e:	4b5a      	ldr	r3, [pc, #360]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005630:	617b      	str	r3, [r7, #20]
        break;
 8005632:	e002      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8005634:	bf00      	nop
 8005636:	e000      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8005638:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005640:	f040 80a3 	bne.w	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005644:	4b52      	ldr	r3, [pc, #328]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005652:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800565a:	f000 808a 	beq.w	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005664:	f200 809c 	bhi.w	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800566e:	d07d      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005676:	f200 8093 	bhi.w	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005686:	d039      	beq.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005688:	e08a      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800568a:	4b41      	ldr	r3, [pc, #260]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d108      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e007      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b0:	4a39      	ldr	r2, [pc, #228]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80056b8:	4b35      	ldr	r3, [pc, #212]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	0e1b      	lsrs	r3, r3, #24
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80056c6:	4b32      	ldr	r3, [pc, #200]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	099b      	lsrs	r3, r3, #6
 80056ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	fb03 f202 	mul.w	r2, r3, r2
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
        break;
 80056fa:	e052      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056fc:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005708:	4b21      	ldr	r3, [pc, #132]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e007      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005722:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800572a:	4b19      	ldr	r3, [pc, #100]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800572c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800573a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573e:	099b      	lsrs	r3, r3, #6
 8005740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	fb03 f202 	mul.w	r2, r3, r2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]
        break;
 800576a:	e01a      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800576e:	617b      	str	r3, [r7, #20]
        break;
 8005770:	e017      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005780:	617b      	str	r3, [r7, #20]
        break;
 8005782:	e00e      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8005784:	4b04      	ldr	r3, [pc, #16]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005786:	617b      	str	r3, [r7, #20]
        break;
 8005788:	e00b      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800578a:	bf00      	nop
 800578c:	e009      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800
 8005794:	00f42400 	.word	0x00f42400
 8005798:	017d7840 	.word	0x017d7840
 800579c:	00bb8000 	.word	0x00bb8000
        break;
 80057a0:	bf00      	nop

  return frequency;
 80057a2:	697b      	ldr	r3, [r7, #20]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e071      	b.n	80058aa <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	7f5b      	ldrb	r3, [r3, #29]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fdd8 	bl	800138c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d053      	beq.n	8005898 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	22ca      	movs	r2, #202	; 0xca
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2253      	movs	r2, #83	; 0x53
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa4d 	bl	8005ca0 <RTC_EnterInitMode>
 8005806:	4603      	mov	r3, r0
 8005808:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d12a      	bne.n	8005866 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6899      	ldr	r1, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <HAL_RTC_Init+0x104>)
 800581c:	400b      	ands	r3, r1
 800581e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68d2      	ldr	r2, [r2, #12]
 8005846:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6919      	ldr	r1, [r3, #16]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	041a      	lsls	r2, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa56 	bl	8005d0e <RTC_ExitInitMode>
 8005862:	4603      	mov	r3, r0
 8005864:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d110      	bne.n	800588e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0208 	bic.w	r2, r2, #8
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
 8005896:	e001      	b.n	800589c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	ff8fffbf 	.word	0xff8fffbf

080058b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	7f1b      	ldrb	r3, [r3, #28]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_RTC_SetTime+0x1c>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e085      	b.n	80059e0 <HAL_RTC_SetTime+0x128>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d126      	bne.n	8005934 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fa2a 	bl	8005d58 <RTC_ByteToBcd2>
 8005904:	4603      	mov	r3, r0
 8005906:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fa23 	bl	8005d58 <RTC_ByteToBcd2>
 8005912:	4603      	mov	r3, r0
 8005914:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005916:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	789b      	ldrb	r3, [r3, #2]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fa1b 	bl	8005d58 <RTC_ByteToBcd2>
 8005922:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005924:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e018      	b.n	8005966 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005954:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800595a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	22ca      	movs	r2, #202	; 0xca
 800596c:	625a      	str	r2, [r3, #36]	; 0x24
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2253      	movs	r2, #83	; 0x53
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f992 	bl	8005ca0 <RTC_EnterInitMode>
 800597c:	4603      	mov	r3, r0
 800597e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d11e      	bne.n	80059c4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	6979      	ldr	r1, [r7, #20]
 800598c:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_RTC_SetTime+0x130>)
 800598e:	400b      	ands	r3, r1
 8005990:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6899      	ldr	r1, [r3, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f9a7 	bl	8005d0e <RTC_ExitInitMode>
 80059c0:	4603      	mov	r3, r0
 80059c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	771a      	strb	r2, [r3, #28]

  return status;
 80059de:	7cfb      	ldrb	r3, [r7, #19]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd90      	pop	{r4, r7, pc}
 80059e8:	007f7f7f 	.word	0x007f7f7f

080059ec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <HAL_RTC_GetTime+0xb8>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	0d9b      	lsrs	r3, r3, #22
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11a      	bne.n	8005a9a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f993 	bl	8005d94 <RTC_Bcd2ToByte>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f98a 	bl	8005d94 <RTC_Bcd2ToByte>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	789b      	ldrb	r3, [r3, #2]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 f981 	bl	8005d94 <RTC_Bcd2ToByte>
 8005a92:	4603      	mov	r3, r0
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	007f7f7f 	.word	0x007f7f7f

08005aa8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	7f1b      	ldrb	r3, [r3, #28]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_RTC_SetDate+0x1c>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e06f      	b.n	8005ba4 <HAL_RTC_SetDate+0xfc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10e      	bne.n	8005af4 <HAL_RTC_SetDate+0x4c>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	330a      	adds	r3, #10
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d11c      	bne.n	8005b34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f92a 	bl	8005d58 <RTC_ByteToBcd2>
 8005b04:	4603      	mov	r3, r0
 8005b06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f923 	bl	8005d58 <RTC_ByteToBcd2>
 8005b12:	4603      	mov	r3, r0
 8005b14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	789b      	ldrb	r3, [r3, #2]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f91b 	bl	8005d58 <RTC_ByteToBcd2>
 8005b22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e00e      	b.n	8005b52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	22ca      	movs	r2, #202	; 0xca
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2253      	movs	r2, #83	; 0x53
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f89c 	bl	8005ca0 <RTC_EnterInitMode>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <HAL_RTC_SetDate+0x104>)
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f8c5 	bl	8005d0e <RTC_ExitInitMode>
 8005b84:	4603      	mov	r3, r0
 8005b86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	22ff      	movs	r2, #255	; 0xff
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	771a      	strb	r2, [r3, #28]

  return status;
 8005ba2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd90      	pop	{r4, r7, pc}
 8005bac:	00ffff3f 	.word	0x00ffff3f

08005bb0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_RTC_GetDate+0x9c>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	0c1b      	lsrs	r3, r3, #16
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	0b5b      	lsrs	r3, r3, #13
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11a      	bne.n	8005c40 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	78db      	ldrb	r3, [r3, #3]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f8c0 	bl	8005d94 <RTC_Bcd2ToByte>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f8b7 	bl	8005d94 <RTC_Bcd2ToByte>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	789b      	ldrb	r3, [r3, #2]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f8ae 	bl	8005d94 <RTC_Bcd2ToByte>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	00ffff3f 	.word	0x00ffff3f

08005c50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c6c:	f7fc fd3a 	bl	80026e4 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c72:	e009      	b.n	8005c88 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c74:	f7fc fd36 	bl	80026e4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c82:	d901      	bls.n	8005c88 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e007      	b.n	8005c98 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0ee      	beq.n	8005c74 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d122      	bne.n	8005d04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ccc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cce:	f7fc fd09 	bl	80026e4 <HAL_GetTick>
 8005cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cd4:	e00c      	b.n	8005cf0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd6:	f7fc fd05 	bl	80026e4 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce4:	d904      	bls.n	8005cf0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <RTC_EnterInitMode+0x64>
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d1e8      	bne.n	8005cd6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ff89 	bl	8005c50 <HAL_RTC_WaitForSynchro>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d66:	e005      	b.n	8005d74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	3b0a      	subs	r3, #10
 8005d72:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	d8f6      	bhi.n	8005d68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b2db      	uxtb	r3, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	b2db      	uxtb	r3, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3350      	adds	r3, #80	; 0x50
 8005de6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3350      	adds	r3, #80	; 0x50
 8005e18:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e156      	b.n	8006100 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fb fb1c 	bl	80014a4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f95b 	bl	8006130 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d00c      	beq.n	8005e9c <HAL_SAI_Init+0x68>
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d80d      	bhi.n	8005ea2 <HAL_SAI_Init+0x6e>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SAI_Init+0x5c>
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d003      	beq.n	8005e96 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005e8e:	e008      	b.n	8005ea2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61fb      	str	r3, [r7, #28]
      break;
 8005e94:	e006      	b.n	8005ea4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005e96:	2310      	movs	r3, #16
 8005e98:	61fb      	str	r3, [r7, #28]
      break;
 8005e9a:	e003      	b.n	8005ea4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	61fb      	str	r3, [r7, #28]
      break;
 8005ea0:	e000      	b.n	8005ea4 <HAL_SAI_Init+0x70>
      break;
 8005ea2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d81e      	bhi.n	8005eea <HAL_SAI_Init+0xb6>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_SAI_Init+0x80>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ecb 	.word	0x08005ecb
 8005ebc:	08005ed3 	.word	0x08005ed3
 8005ec0:	08005edb 	.word	0x08005edb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ec8:	e010      	b.n	8005eec <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ece:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ed0:	e00c      	b.n	8005eec <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ed6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ed8:	e008      	b.n	8005eec <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ede:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005ee8:	e000      	b.n	8005eec <HAL_SAI_Init+0xb8>
    default:
      break;
 8005eea:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a85      	ldr	r2, [pc, #532]	; (8006108 <HAL_SAI_Init+0x2d4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_SAI_Init+0xcc>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a84      	ldr	r2, [pc, #528]	; (800610c <HAL_SAI_Init+0x2d8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d103      	bne.n	8005f08 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005f00:	4a83      	ldr	r2, [pc, #524]	; (8006110 <HAL_SAI_Init+0x2dc>)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e002      	b.n	8005f0e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005f08:	4a82      	ldr	r2, [pc, #520]	; (8006114 <HAL_SAI_Init+0x2e0>)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d04c      	beq.n	8005fb0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7a      	ldr	r2, [pc, #488]	; (8006108 <HAL_SAI_Init+0x2d4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_SAI_Init+0xfa>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a78      	ldr	r2, [pc, #480]	; (800610c <HAL_SAI_Init+0x2d8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d104      	bne.n	8005f38 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005f2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005f32:	f7ff facb 	bl	80054cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005f36:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a76      	ldr	r2, [pc, #472]	; (8006118 <HAL_SAI_Init+0x2e4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_SAI_Init+0x118>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a75      	ldr	r2, [pc, #468]	; (800611c <HAL_SAI_Init+0x2e8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d104      	bne.n	8005f56 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005f4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f50:	f7ff fabc 	bl	80054cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005f54:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	025b      	lsls	r3, r3, #9
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a6b      	ldr	r2, [pc, #428]	; (8006120 <HAL_SAI_Init+0x2ec>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	08da      	lsrs	r2, r3, #3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005f7c:	68f9      	ldr	r1, [r7, #12]
 8005f7e:	4b68      	ldr	r3, [pc, #416]	; (8006120 <HAL_SAI_Init+0x2ec>)
 8005f80:	fba3 2301 	umull	r2, r3, r3, r1
 8005f84:	08da      	lsrs	r2, r3, #3
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	1aca      	subs	r2, r1, r3
 8005f90:	2a08      	cmp	r2, #8
 8005f92:	d904      	bls.n	8005f9e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d104      	bne.n	8005fb0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	085a      	lsrs	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_SAI_Init+0x18c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d109      	bne.n	8005fd4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_SAI_Init+0x198>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e001      	b.n	8005fd0 <HAL_SAI_Init+0x19c>
 8005fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e008      	b.n	8005fe6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d102      	bne.n	8005fe2 <HAL_SAI_Init+0x1ae>
 8005fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe0:	e000      	b.n	8005fe4 <HAL_SAI_Init+0x1b0>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6819      	ldr	r1, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b4c      	ldr	r3, [pc, #304]	; (8006124 <HAL_SAI_Init+0x2f0>)
 8005ff2:	400b      	ands	r3, r1
 8005ff4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6819      	ldr	r1, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800600a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	431a      	orrs	r2, r3
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800601e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800602a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	051b      	lsls	r3, r3, #20
 8006032:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b38      	ldr	r3, [pc, #224]	; (8006128 <HAL_SAI_Init+0x2f4>)
 8006048:	400b      	ands	r3, r1
 800604a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_SAI_Init+0x2f8>)
 8006076:	400b      	ands	r3, r1
 8006078:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800608a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006090:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006096:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	3b01      	subs	r3, #1
 800609e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80060a0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68d9      	ldr	r1, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80060b8:	400b      	ands	r3, r1
 80060ba:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68d9      	ldr	r1, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	041b      	lsls	r3, r3, #16
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	3b01      	subs	r3, #1
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40015804 	.word	0x40015804
 800610c:	40015824 	.word	0x40015824
 8006110:	40015800 	.word	0x40015800
 8006114:	40015c00 	.word	0x40015c00
 8006118:	40015c04 	.word	0x40015c04
 800611c:	40015c24 	.word	0x40015c24
 8006120:	cccccccd 	.word	0xcccccccd
 8006124:	ff05c010 	.word	0xff05c010
 8006128:	ffff1ff0 	.word	0xffff1ff0
 800612c:	fff88000 	.word	0xfff88000

08006130 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006138:	4b17      	ldr	r3, [pc, #92]	; (8006198 <SAI_Disable+0x68>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <SAI_Disable+0x6c>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	0b1b      	lsrs	r3, r3, #12
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800615a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1e5a      	subs	r2, r3, #1
 8006160:	60fa      	str	r2, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	72fb      	strb	r3, [r7, #11]
      break;
 800617a:	e006      	b.n	800618a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e8      	bne.n	800615c <SAI_Disable+0x2c>

  return status;
 800618a:	7afb      	ldrb	r3, [r7, #11]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000000 	.word	0x20000000
 800619c:	95cbec1b 	.word	0x95cbec1b

080061a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e022      	b.n	80061f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fb fa39 	bl	800163c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2203      	movs	r2, #3
 80061ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f814 	bl	8006200 <HAL_SD_InitCard>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e00a      	b.n	80061f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006200:	b5b0      	push	{r4, r5, r7, lr}
 8006202:	b08e      	sub	sp, #56	; 0x38
 8006204:	af04      	add	r7, sp, #16
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006208:	2300      	movs	r3, #0
 800620a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006218:	2300      	movs	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800621c:	2376      	movs	r3, #118	; 0x76
 800621e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681d      	ldr	r5, [r3, #0]
 8006224:	466c      	mov	r4, sp
 8006226:	f107 0314 	add.w	r3, r7, #20
 800622a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800622e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006232:	f107 0308 	add.w	r3, r7, #8
 8006236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006238:	4628      	mov	r0, r5
 800623a:	f001 ff45 	bl	80080c8 <SDMMC_Init>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e059      	b.n	8006304 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800625e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f001 ff79 	bl	800815c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006278:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800627a:	2002      	movs	r0, #2
 800627c:	f7fc fa3e 	bl	80026fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fff3 	bl	800726c <SD_PowerON>
 8006286:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e02e      	b.n	8006304 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 ff12 	bl	80070d0 <SD_InitCard>
 80062ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e01b      	b.n	8006304 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 ffd3 	bl	8008280 <SDMMC_CmdBlockLength>
 80062da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00f      	beq.n	8006302 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <HAL_SD_InitCard+0x10c>)
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3728      	adds	r7, #40	; 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	bdb0      	pop	{r4, r5, r7, pc}
 800630c:	004005ff 	.word	0x004005ff

08006310 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d107      	bne.n	8006338 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0c3      	b.n	80064c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	f040 80bc 	bne.w	80064be <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800634c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006356:	429a      	cmp	r2, r3
 8006358:	d907      	bls.n	800636a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e0aa      	b.n	80064c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2203      	movs	r2, #3
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4a4e      	ldr	r2, [pc, #312]	; (80064c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	4a4d      	ldr	r2, [pc, #308]	; (80064cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006398:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2200      	movs	r2, #0
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3380      	adds	r3, #128	; 0x80
 80063d0:	4619      	mov	r1, r3
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	025b      	lsls	r3, r3, #9
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	f7fd fa7d 	bl	80038d8 <HAL_DMA_Start_IT>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80063f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e055      	b.n	80064c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0208 	orr.w	r2, r2, #8
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	2b01      	cmp	r3, #1
 800642a:	d002      	beq.n	8006432 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	025b      	lsls	r3, r3, #9
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006436:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	025b      	lsls	r3, r3, #9
 800643c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800643e:	2390      	movs	r3, #144	; 0x90
 8006440:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006442:	2302      	movs	r3, #2
 8006444:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006446:	2300      	movs	r3, #0
 8006448:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800644a:	2301      	movs	r3, #1
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f107 0210 	add.w	r2, r7, #16
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fee5 	bl	8008228 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d90a      	bls.n	800647a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2282      	movs	r2, #130	; 0x82
 8006468:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006470:	4618      	mov	r0, r3
 8006472:	f001 ff49 	bl	8008308 <SDMMC_CmdReadMultiBlock>
 8006476:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006478:	e009      	b.n	800648e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2281      	movs	r2, #129	; 0x81
 800647e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006486:	4618      	mov	r0, r3
 8006488:	f001 ff1c 	bl	80082c4 <SDMMC_CmdReadSingleBlock>
 800648c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d012      	beq.n	80064ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a0d      	ldr	r2, [pc, #52]	; (80064d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e002      	b.n	80064c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3730      	adds	r7, #48	; 0x30
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	08006edf 	.word	0x08006edf
 80064cc:	08006f51 	.word	0x08006f51
 80064d0:	004005ff 	.word	0x004005ff

080064d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	; 0x30
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d107      	bne.n	80064fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0c6      	b.n	800668a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	f040 80bf 	bne.w	8006688 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	441a      	add	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651a:	429a      	cmp	r2, r3
 800651c:	d907      	bls.n	800652e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e0ad      	b.n	800668a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2203      	movs	r2, #3
 8006532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 021a 	orr.w	r2, r2, #26
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	4a50      	ldr	r2, [pc, #320]	; (8006694 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	4a4f      	ldr	r2, [pc, #316]	; (8006698 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800655c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	2200      	movs	r2, #0
 8006564:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	2b01      	cmp	r3, #1
 800656c:	d002      	beq.n	8006574 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	025b      	lsls	r3, r3, #9
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d90a      	bls.n	8006590 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	22a0      	movs	r2, #160	; 0xa0
 800657e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006586:	4618      	mov	r0, r3
 8006588:	f001 ff02 	bl	8008390 <SDMMC_CmdWriteMultiBlock>
 800658c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800658e:	e009      	b.n	80065a4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2290      	movs	r2, #144	; 0x90
 8006594:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659c:	4618      	mov	r0, r3
 800659e:	f001 fed5 	bl	800834c <SDMMC_CmdWriteSingleBlock>
 80065a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d012      	beq.n	80065d0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a3b      	ldr	r2, [pc, #236]	; (800669c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e05c      	b.n	800668a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0208 	orr.w	r2, r2, #8
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	2240      	movs	r2, #64	; 0x40
 80065e6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3380      	adds	r3, #128	; 0x80
 8006610:	461a      	mov	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	025b      	lsls	r3, r3, #9
 8006616:	089b      	lsrs	r3, r3, #2
 8006618:	f7fd f95e 	bl	80038d8 <HAL_DMA_Start_IT>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01a      	beq.n	8006658 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 021a 	bic.w	r2, r2, #26
 8006630:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a19      	ldr	r2, [pc, #100]	; (800669c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e018      	b.n	800668a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800665c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	025b      	lsls	r3, r3, #9
 8006662:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006664:	2390      	movs	r3, #144	; 0x90
 8006666:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800666c:	2300      	movs	r3, #0
 800666e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006670:	2301      	movs	r3, #1
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f107 0210 	add.w	r2, r7, #16
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fdd2 	bl	8008228 <SDMMC_ConfigData>

      return HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	e000      	b.n	800668a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3730      	adds	r7, #48	; 0x30
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	08006eb5 	.word	0x08006eb5
 8006698:	08006f51 	.word	0x08006f51
 800669c:	004005ff 	.word	0x004005ff

080066a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <HAL_SD_IRQHandler+0x2e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 ffef 	bl	80076aa <SD_Read_IT>
 80066cc:	e15a      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 808d 	beq.w	80067f8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b9a      	ldr	r3, [pc, #616]	; (800695c <HAL_SD_IRQHandler+0x2bc>)
 80066f4:	400b      	ands	r3, r1
 80066f6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d039      	beq.n	8006786 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <HAL_SD_IRQHandler+0x86>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fe52 	bl	80083d4 <SDMMC_CmdStopTransfer>
 8006730:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f921 	bl	800698c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006752:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <HAL_SD_IRQHandler+0xd6>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f002 fac2 	bl	8008d00 <HAL_SD_RxCpltCallback>
 800677c:	e102      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 fab4 	bl	8008cec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006784:	e0fe      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80f9 	beq.w	8006984 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d011      	beq.n	80067c0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 fe17 	bl	80083d4 <SDMMC_CmdStopTransfer>
 80067a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8e6 	bl	800698c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 80dc 	bne.w	8006984 <HAL_SD_IRQHandler+0x2e4>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 80d6 	bne.w	8006984 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0208 	bic.w	r2, r2, #8
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f002 fa7b 	bl	8008cec <HAL_SD_TxCpltCallback>
}
 80067f6:	e0c5      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_SD_IRQHandler+0x178>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ff9b 	bl	800774c <SD_Write_IT>
 8006816:	e0b5      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80ae 	beq.w	8006984 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f043 0202 	orr.w	r2, r3, #2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	f043 0208 	orr.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	f043 0210 	orr.w	r2, r3, #16
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f240 523a 	movw	r2, #1338	; 0x53a
 8006898:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80068a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 fd90 	bl	80083d4 <SDMMC_CmdStopTransfer>
 80068b4:	4602      	mov	r2, r0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f857 	bl	800698c <HAL_SD_ErrorCallback>
}
 80068de:	e051      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04c      	beq.n	8006984 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <HAL_SD_IRQHandler+0x25e>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d011      	beq.n	8006922 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	4a17      	ldr	r2, [pc, #92]	; (8006960 <HAL_SD_IRQHandler+0x2c0>)
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	4618      	mov	r0, r3
 800690c:	f7fd f844 	bl	8003998 <HAL_DMA_Abort_IT>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d036      	beq.n	8006984 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fb6a 	bl	8006ff4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006920:	e030      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <HAL_SD_IRQHandler+0x296>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d018      	beq.n	8006968 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <HAL_SD_IRQHandler+0x2c4>)
 800693c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	4618      	mov	r0, r3
 8006944:	f7fd f828 	bl	8003998 <HAL_DMA_Abort_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01a      	beq.n	8006984 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fb85 	bl	8007062 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006958:	e014      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
 800695a:	bf00      	nop
 800695c:	ffff3ec5 	.word	0xffff3ec5
 8006960:	08006ff5 	.word	0x08006ff5
 8006964:	08007063 	.word	0x08007063
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 f9ab 	bl	8008cd8 <HAL_SD_AbortCallback>
}
 8006982:	e7ff      	b.n	8006984 <HAL_SD_IRQHandler+0x2e4>
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ae:	0f9b      	lsrs	r3, r3, #30
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ba:	0e9b      	lsrs	r3, r3, #26
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069cc:	0e1b      	lsrs	r3, r3, #24
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a1e:	0bdb      	lsrs	r3, r3, #15
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a30:	0b9b      	lsrs	r3, r3, #14
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a42:	0b5b      	lsrs	r3, r3, #13
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a54:	0b1b      	lsrs	r3, r3, #12
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d163      	bne.n	8006b38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a74:	009a      	lsls	r2, r3, #2
 8006a76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a80:	0f92      	lsrs	r2, r2, #30
 8006a82:	431a      	orrs	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8c:	0edb      	lsrs	r3, r3, #27
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab0:	0d5b      	lsrs	r3, r3, #21
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac2:	0c9b      	lsrs	r3, r3, #18
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad4:	0bdb      	lsrs	r3, r3, #15
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	7e1b      	ldrb	r3, [r3, #24]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	3302      	adds	r3, #2
 8006af8:	2201      	movs	r2, #1
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b02:	fb03 f202 	mul.w	r2, r3, r2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	7a1b      	ldrb	r3, [r3, #8]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	2201      	movs	r2, #1
 8006b16:	409a      	lsls	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b24:	0a52      	lsrs	r2, r2, #9
 8006b26:	fb03 f202 	mul.w	r2, r3, r2
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b34:	661a      	str	r2, [r3, #96]	; 0x60
 8006b36:	e031      	b.n	8006b9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d11d      	bne.n	8006b7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b44:	041b      	lsls	r3, r3, #16
 8006b46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	431a      	orrs	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	029a      	lsls	r2, r3, #10
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	661a      	str	r2, [r3, #96]	; 0x60
 8006b7a:	e00f      	b.n	8006b9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a58      	ldr	r2, [pc, #352]	; (8006ce4 <HAL_SD_GetCardCSD+0x344>)
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e09d      	b.n	8006cd8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba0:	0b9b      	lsrs	r3, r3, #14
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb2:	09db      	lsrs	r3, r3, #7
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	0fdb      	lsrs	r3, r3, #31
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	0f5b      	lsrs	r3, r3, #29
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	0e9b      	lsrs	r3, r3, #26
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	0d9b      	lsrs	r3, r3, #22
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	0d5b      	lsrs	r3, r3, #21
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	0bdb      	lsrs	r3, r3, #15
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	0b9b      	lsrs	r3, r3, #14
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	0b5b      	lsrs	r3, r3, #13
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c82:	0b1b      	lsrs	r3, r3, #12
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	0a9b      	lsrs	r3, r3, #10
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	004005ff 	.word	0x004005ff

08006ce8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006d40:	b5b0      	push	{r4, r5, r7, lr}
 8006d42:	b08e      	sub	sp, #56	; 0x38
 8006d44:	af04      	add	r7, sp, #16
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2203      	movs	r2, #3
 8006d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d02e      	beq.n	8006dbe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d106      	bne.n	8006d76 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
 8006d74:	e029      	b.n	8006dca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7c:	d10a      	bne.n	8006d94 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fb2a 	bl	80073d8 <SD_WideBus_Enable>
 8006d84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
 8006d92:	e01a      	b.n	8006dca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fb67 	bl	800746e <SD_WideBus_Disable>
 8006da0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
 8006dae:	e00c      	b.n	8006dca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
 8006dbc:	e005      	b.n	8006dca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a26      	ldr	r2, [pc, #152]	; (8006e70 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006de8:	e01f      	b.n	8006e2a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681d      	ldr	r5, [r3, #0]
 8006e10:	466c      	mov	r4, sp
 8006e12:	f107 0314 	add.w	r3, r7, #20
 8006e16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e24:	4628      	mov	r0, r5
 8006e26:	f001 f94f 	bl	80080c8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 fa24 	bl	8008280 <SDMMC_CmdBlockLength>
 8006e38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00c      	beq.n	8006e5a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	004005ff 	.word	0x004005ff

08006e74 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e80:	f107 030c 	add.w	r3, r7, #12
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa7e 	bl	8007388 <SD_SendStatus>
 8006e8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	0a5b      	lsrs	r3, r3, #9
 8006ea4:	f003 030f 	and.w	r3, r3, #15
 8006ea8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006eaa:	693b      	ldr	r3, [r7, #16]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	2b82      	cmp	r3, #130	; 0x82
 8006ef2:	d111      	bne.n	8006f18 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fa6b 	bl	80083d4 <SDMMC_CmdStopTransfer>
 8006efe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fd3a 	bl	800698c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0208 	bic.w	r2, r2, #8
 8006f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f001 fedd 	bl	8008d00 <HAL_SD_RxCpltCallback>
#endif
}
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fc fec6 	bl	8003cf0 <HAL_DMA_GetError>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d03e      	beq.n	8006fe8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d002      	beq.n	8006f86 <SD_DMAError+0x36>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d12d      	bne.n	8006fe2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <SD_DMAError+0xa0>)
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006f9c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006faa:	6978      	ldr	r0, [r7, #20]
 8006fac:	f7ff ff62 	bl	8006e74 <HAL_SD_GetCardState>
 8006fb0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b06      	cmp	r3, #6
 8006fb6:	d002      	beq.n	8006fbe <SD_DMAError+0x6e>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d10a      	bne.n	8006fd4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fa06 	bl	80083d4 <SDMMC_CmdStopTransfer>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006fe2:	6978      	ldr	r0, [r7, #20]
 8006fe4:	f7ff fcd2 	bl	800698c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006fe8:	bf00      	nop
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	004005ff 	.word	0x004005ff

08006ff4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f240 523a 	movw	r2, #1338	; 0x53a
 800700a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff ff31 	bl	8006e74 <HAL_SD_GetCardState>
 8007012:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d002      	beq.n	800702e <SD_DMATxAbort+0x3a>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b05      	cmp	r3, #5
 800702c:	d10a      	bne.n	8007044 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f001 f9ce 	bl	80083d4 <SDMMC_CmdStopTransfer>
 8007038:	4602      	mov	r2, r0
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	431a      	orrs	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	2b00      	cmp	r3, #0
 800704a:	d103      	bne.n	8007054 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 fe43 	bl	8008cd8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007052:	e002      	b.n	800705a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff fc99 	bl	800698c <HAL_SD_ErrorCallback>
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f240 523a 	movw	r2, #1338	; 0x53a
 8007078:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff fefa 	bl	8006e74 <HAL_SD_GetCardState>
 8007080:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b06      	cmp	r3, #6
 8007094:	d002      	beq.n	800709c <SD_DMARxAbort+0x3a>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b05      	cmp	r3, #5
 800709a:	d10a      	bne.n	80070b2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f997 	bl	80083d4 <SDMMC_CmdStopTransfer>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	431a      	orrs	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f001 fe0c 	bl	8008cd8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80070c0:	e002      	b.n	80070c8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7ff fc62 	bl	800698c <HAL_SD_ErrorCallback>
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80070d0:	b5b0      	push	{r4, r5, r7, lr}
 80070d2:	b094      	sub	sp, #80	; 0x50
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80070d8:	2301      	movs	r3, #1
 80070da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f849 	bl	8008178 <SDMMC_GetPowerState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070f0:	e0b8      	b.n	8007264 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d02f      	beq.n	800715a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fa73 	bl	80085ea <SDMMC_CmdSendCID>
 8007104:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <SD_InitCard+0x40>
    {
      return errorstate;
 800710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710e:	e0a9      	b.n	8007264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f001 f873 	bl	8008202 <SDMMC_GetResponse>
 800711c:	4602      	mov	r2, r0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2104      	movs	r1, #4
 8007128:	4618      	mov	r0, r3
 800712a:	f001 f86a 	bl	8008202 <SDMMC_GetResponse>
 800712e:	4602      	mov	r2, r0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2108      	movs	r1, #8
 800713a:	4618      	mov	r0, r3
 800713c:	f001 f861 	bl	8008202 <SDMMC_GetResponse>
 8007140:	4602      	mov	r2, r0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	210c      	movs	r1, #12
 800714c:	4618      	mov	r0, r3
 800714e:	f001 f858 	bl	8008202 <SDMMC_GetResponse>
 8007152:	4602      	mov	r2, r0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	2b03      	cmp	r3, #3
 8007160:	d00d      	beq.n	800717e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f107 020e 	add.w	r2, r7, #14
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fa79 	bl	8008664 <SDMMC_CmdSetRelAdd>
 8007172:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <SD_InitCard+0xae>
    {
      return errorstate;
 800717a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717c:	e072      	b.n	8007264 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	2b03      	cmp	r3, #3
 8007184:	d036      	beq.n	80071f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007186:	89fb      	ldrh	r3, [r7, #14]
 8007188:	461a      	mov	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f001 fa43 	bl	8008626 <SDMMC_CmdSendCSD>
 80071a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	e05b      	b.n	8007264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 f825 	bl	8008202 <SDMMC_GetResponse>
 80071b8:	4602      	mov	r2, r0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2104      	movs	r1, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 f81c 	bl	8008202 <SDMMC_GetResponse>
 80071ca:	4602      	mov	r2, r0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2108      	movs	r1, #8
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 f813 	bl	8008202 <SDMMC_GetResponse>
 80071dc:	4602      	mov	r2, r0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	210c      	movs	r1, #12
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 f80a 	bl	8008202 <SDMMC_GetResponse>
 80071ee:	4602      	mov	r2, r0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2104      	movs	r1, #4
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f801 	bl	8008202 <SDMMC_GetResponse>
 8007200:	4603      	mov	r3, r0
 8007202:	0d1a      	lsrs	r2, r3, #20
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007208:	f107 0310 	add.w	r3, r7, #16
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fbc6 	bl	80069a0 <HAL_SD_GetCardCSD>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800721a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800721e:	e021      	b.n	8007264 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6819      	ldr	r1, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	2200      	movs	r2, #0
 800722c:	461c      	mov	r4, r3
 800722e:	4615      	mov	r5, r2
 8007230:	4622      	mov	r2, r4
 8007232:	462b      	mov	r3, r5
 8007234:	4608      	mov	r0, r1
 8007236:	f001 f8ef 	bl	8008418 <SDMMC_CmdSelDesel>
 800723a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800723c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <SD_InitCard+0x176>
  {
    return errorstate;
 8007242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007244:	e00e      	b.n	8007264 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681d      	ldr	r5, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	466c      	mov	r4, sp
 800724e:	f103 0210 	add.w	r2, r3, #16
 8007252:	ca07      	ldmia	r2, {r0, r1, r2}
 8007254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007258:	3304      	adds	r3, #4
 800725a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800725c:	4628      	mov	r0, r5
 800725e:	f000 ff33 	bl	80080c8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3740      	adds	r7, #64	; 0x40
 8007268:	46bd      	mov	sp, r7
 800726a:	bdb0      	pop	{r4, r5, r7, pc}

0800726c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f001 f8ea 	bl	800845e <SDMMC_CmdGoIdleState>
 800728a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	e072      	b.n	800737c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f8fd 	bl	800849a <SDMMC_CmdOperCond>
 80072a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00d      	beq.n	80072c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 f8d3 	bl	800845e <SDMMC_CmdGoIdleState>
 80072b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	e05b      	b.n	800737c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d137      	bne.n	8007342 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 f8fd 	bl	80084d8 <SDMMC_CmdAppCommand>
 80072de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d02d      	beq.n	8007342 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072ea:	e047      	b.n	800737c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 f8f0 	bl	80084d8 <SDMMC_CmdAppCommand>
 80072f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <SD_PowerON+0x98>
    {
      return errorstate;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	e03b      	b.n	800737c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	491e      	ldr	r1, [pc, #120]	; (8007384 <SD_PowerON+0x118>)
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f906 	bl	800851c <SDMMC_CmdAppOperCommand>
 8007310:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007318:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800731c:	e02e      	b.n	800737c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f000 ff6c 	bl	8008202 <SDMMC_GetResponse>
 800732a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	0fdb      	lsrs	r3, r3, #31
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <SD_PowerON+0xcc>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <SD_PowerON+0xce>
 8007338:	2300      	movs	r3, #0
 800733a:	613b      	str	r3, [r7, #16]

    count++;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	3301      	adds	r3, #1
 8007340:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007348:	4293      	cmp	r3, r2
 800734a:	d802      	bhi.n	8007352 <SD_PowerON+0xe6>
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0cc      	beq.n	80072ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007358:	4293      	cmp	r3, r2
 800735a:	d902      	bls.n	8007362 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800735c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007360:	e00c      	b.n	800737c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	645a      	str	r2, [r3, #68]	; 0x44
 8007372:	e002      	b.n	800737a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	c1100000 	.word	0xc1100000

08007388 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800739c:	e018      	b.n	80073d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f001 f97b 	bl	80086a6 <SDMMC_CmdSendStatus>
 80073b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <SD_SendStatus+0x34>
  {
    return errorstate;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	e009      	b.n	80073d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 ff1d 	bl	8008202 <SDMMC_GetResponse>
 80073c8:	4602      	mov	r2, r0
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 ff07 	bl	8008202 <SDMMC_GetResponse>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073fe:	d102      	bne.n	8007406 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007404:	e02f      	b.n	8007466 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007406:	f107 030c 	add.w	r3, r7, #12
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f879 	bl	8007504 <SD_FindSCR>
 8007412:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	e023      	b.n	8007466 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01c      	beq.n	8007462 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f001 f84f 	bl	80084d8 <SDMMC_CmdAppCommand>
 800743a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e00f      	b.n	8007466 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2102      	movs	r1, #2
 800744c:	4618      	mov	r0, r3
 800744e:	f001 f889 	bl	8008564 <SDMMC_CmdBusWidth>
 8007452:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	e003      	b.n	8007466 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800745e:	2300      	movs	r3, #0
 8007460:	e001      	b.n	8007466 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007462:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f000 febc 	bl	8008202 <SDMMC_GetResponse>
 800748a:	4603      	mov	r3, r0
 800748c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007494:	d102      	bne.n	800749c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800749a:	e02f      	b.n	80074fc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f82e 	bl	8007504 <SD_FindSCR>
 80074a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	e023      	b.n	80074fc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d01c      	beq.n	80074f8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f001 f804 	bl	80084d8 <SDMMC_CmdAppCommand>
 80074d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	e00f      	b.n	80074fc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 f83e 	bl	8008564 <SDMMC_CmdBusWidth>
 80074e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	e003      	b.n	80074fc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e001      	b.n	80074fc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b08f      	sub	sp, #60	; 0x3c
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800750e:	f7fb f8e9 	bl	80026e4 <HAL_GetTick>
 8007512:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007518:	2300      	movs	r3, #0
 800751a:	60bb      	str	r3, [r7, #8]
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2108      	movs	r1, #8
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fea8 	bl	8008280 <SDMMC_CmdBlockLength>
 8007530:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	e0b2      	b.n	80076a2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f000 ffc5 	bl	80084d8 <SDMMC_CmdAppCommand>
 800754e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	e0a3      	b.n	80076a2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800755a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800755e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007560:	2308      	movs	r3, #8
 8007562:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007564:	2330      	movs	r3, #48	; 0x30
 8007566:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007568:	2302      	movs	r3, #2
 800756a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007570:	2301      	movs	r3, #1
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f107 0210 	add.w	r2, r7, #16
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fe52 	bl	8008228 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f001 f80d 	bl	80085a8 <SDMMC_CmdSendSCR>
 800758e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d02a      	beq.n	80075ec <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	e083      	b.n	80076a2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00f      	beq.n	80075c8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	f107 0208 	add.w	r2, r7, #8
 80075b4:	18d4      	adds	r4, r2, r3
 80075b6:	4608      	mov	r0, r1
 80075b8:	f000 fdb2 	bl	8008120 <SDMMC_ReadFIFO>
 80075bc:	4603      	mov	r3, r0
 80075be:	6023      	str	r3, [r4, #0]
      index++;
 80075c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c2:	3301      	adds	r3, #1
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	e006      	b.n	80075d6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d012      	beq.n	80075fc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075d6:	f7fb f885 	bl	80026e4 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e4:	d102      	bne.n	80075ec <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075ea:	e05a      	b.n	80076a2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0cf      	beq.n	800759a <SD_FindSCR+0x96>
 80075fa:	e000      	b.n	80075fe <SD_FindSCR+0xfa>
      break;
 80075fc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2208      	movs	r2, #8
 8007612:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007614:	2308      	movs	r3, #8
 8007616:	e044      	b.n	80076a2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2202      	movs	r2, #2
 800762c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800762e:	2302      	movs	r3, #2
 8007630:	e037      	b.n	80076a2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2220      	movs	r2, #32
 8007646:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007648:	2320      	movs	r3, #32
 800764a:	e02a      	b.n	80076a2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f240 523a 	movw	r2, #1338	; 0x53a
 8007654:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	061a      	lsls	r2, r3, #24
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007662:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	0a1b      	lsrs	r3, r3, #8
 8007668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800766c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	0e1b      	lsrs	r3, r3, #24
 8007672:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	601a      	str	r2, [r3, #0]
    scr++;
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	3304      	adds	r3, #4
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	061a      	lsls	r2, r3, #24
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800768a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007694:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	373c      	adds	r7, #60	; 0x3c
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}

080076aa <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b086      	sub	sp, #24
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d03f      	beq.n	8007744 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e033      	b.n	8007732 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fd26 	bl	8008120 <SDMMC_ReadFIFO>
 80076d4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	0a1b      	lsrs	r3, r3, #8
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	b2da      	uxtb	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	701a      	strb	r2, [r3, #0]
      tmp++;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3301      	adds	r3, #1
 800770e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	3b01      	subs	r3, #1
 8007714:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	0e1b      	lsrs	r3, r3, #24
 800771a:	b2da      	uxtb	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	3b01      	subs	r3, #1
 800772a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	3301      	adds	r3, #1
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b07      	cmp	r3, #7
 8007736:	d9c8      	bls.n	80076ca <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007744:	bf00      	nop
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d043      	beq.n	80077ee <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	e037      	b.n	80077dc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	3b01      	subs	r3, #1
 800777c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4313      	orrs	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]
      tmp++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	3b01      	subs	r3, #1
 8007794:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	041a      	lsls	r2, r3, #16
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	061a      	lsls	r2, r3, #24
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f107 0208 	add.w	r2, r7, #8
 80077ce:	4611      	mov	r1, r2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fcb2 	bl	800813a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	3301      	adds	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b07      	cmp	r3, #7
 80077e0:	d9c4      	bls.n	800776c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e040      	b.n	800788a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7fa f927 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	; 0x24
 8007822:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f82d 	bl	8007894 <UART_SetConfig>
 800783a:	4603      	mov	r3, r0
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e022      	b.n	800788a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fa85 	bl	8007d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007860:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007870:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb0c 	bl	8007ea0 <UART_CheckIdleState>
 8007888:	4603      	mov	r3, r0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4ba6      	ldr	r3, [pc, #664]	; (8007b58 <UART_SetConfig+0x2c4>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a94      	ldr	r2, [pc, #592]	; (8007b5c <UART_SetConfig+0x2c8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d120      	bne.n	8007952 <UART_SetConfig+0xbe>
 8007910:	4b93      	ldr	r3, [pc, #588]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d816      	bhi.n	800794c <UART_SetConfig+0xb8>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <UART_SetConfig+0x90>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007935 	.word	0x08007935
 8007928:	08007941 	.word	0x08007941
 800792c:	0800793b 	.word	0x0800793b
 8007930:	08007947 	.word	0x08007947
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e150      	b.n	8007bdc <UART_SetConfig+0x348>
 800793a:	2302      	movs	r3, #2
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e14d      	b.n	8007bdc <UART_SetConfig+0x348>
 8007940:	2304      	movs	r3, #4
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e14a      	b.n	8007bdc <UART_SetConfig+0x348>
 8007946:	2308      	movs	r3, #8
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e147      	b.n	8007bdc <UART_SetConfig+0x348>
 800794c:	2310      	movs	r3, #16
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e144      	b.n	8007bdc <UART_SetConfig+0x348>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a83      	ldr	r2, [pc, #524]	; (8007b64 <UART_SetConfig+0x2d0>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d132      	bne.n	80079c2 <UART_SetConfig+0x12e>
 800795c:	4b80      	ldr	r3, [pc, #512]	; (8007b60 <UART_SetConfig+0x2cc>)
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007962:	f003 030c 	and.w	r3, r3, #12
 8007966:	2b0c      	cmp	r3, #12
 8007968:	d828      	bhi.n	80079bc <UART_SetConfig+0x128>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0xdc>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079a5 	.word	0x080079a5
 8007974:	080079bd 	.word	0x080079bd
 8007978:	080079bd 	.word	0x080079bd
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079b1 	.word	0x080079b1
 8007984:	080079bd 	.word	0x080079bd
 8007988:	080079bd 	.word	0x080079bd
 800798c:	080079bd 	.word	0x080079bd
 8007990:	080079ab 	.word	0x080079ab
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079bd 	.word	0x080079bd
 80079a0:	080079b7 	.word	0x080079b7
 80079a4:	2300      	movs	r3, #0
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e118      	b.n	8007bdc <UART_SetConfig+0x348>
 80079aa:	2302      	movs	r3, #2
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e115      	b.n	8007bdc <UART_SetConfig+0x348>
 80079b0:	2304      	movs	r3, #4
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e112      	b.n	8007bdc <UART_SetConfig+0x348>
 80079b6:	2308      	movs	r3, #8
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e10f      	b.n	8007bdc <UART_SetConfig+0x348>
 80079bc:	2310      	movs	r3, #16
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e10c      	b.n	8007bdc <UART_SetConfig+0x348>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a68      	ldr	r2, [pc, #416]	; (8007b68 <UART_SetConfig+0x2d4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d120      	bne.n	8007a0e <UART_SetConfig+0x17a>
 80079cc:	4b64      	ldr	r3, [pc, #400]	; (8007b60 <UART_SetConfig+0x2cc>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079d6:	2b30      	cmp	r3, #48	; 0x30
 80079d8:	d013      	beq.n	8007a02 <UART_SetConfig+0x16e>
 80079da:	2b30      	cmp	r3, #48	; 0x30
 80079dc:	d814      	bhi.n	8007a08 <UART_SetConfig+0x174>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d009      	beq.n	80079f6 <UART_SetConfig+0x162>
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d810      	bhi.n	8007a08 <UART_SetConfig+0x174>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <UART_SetConfig+0x15c>
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d006      	beq.n	80079fc <UART_SetConfig+0x168>
 80079ee:	e00b      	b.n	8007a08 <UART_SetConfig+0x174>
 80079f0:	2300      	movs	r3, #0
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e0f2      	b.n	8007bdc <UART_SetConfig+0x348>
 80079f6:	2302      	movs	r3, #2
 80079f8:	77fb      	strb	r3, [r7, #31]
 80079fa:	e0ef      	b.n	8007bdc <UART_SetConfig+0x348>
 80079fc:	2304      	movs	r3, #4
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e0ec      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a02:	2308      	movs	r3, #8
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e0e9      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e0e6      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a56      	ldr	r2, [pc, #344]	; (8007b6c <UART_SetConfig+0x2d8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d120      	bne.n	8007a5a <UART_SetConfig+0x1c6>
 8007a18:	4b51      	ldr	r3, [pc, #324]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a22:	2bc0      	cmp	r3, #192	; 0xc0
 8007a24:	d013      	beq.n	8007a4e <UART_SetConfig+0x1ba>
 8007a26:	2bc0      	cmp	r3, #192	; 0xc0
 8007a28:	d814      	bhi.n	8007a54 <UART_SetConfig+0x1c0>
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d009      	beq.n	8007a42 <UART_SetConfig+0x1ae>
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d810      	bhi.n	8007a54 <UART_SetConfig+0x1c0>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <UART_SetConfig+0x1a8>
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d006      	beq.n	8007a48 <UART_SetConfig+0x1b4>
 8007a3a:	e00b      	b.n	8007a54 <UART_SetConfig+0x1c0>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	e0cc      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a42:	2302      	movs	r3, #2
 8007a44:	77fb      	strb	r3, [r7, #31]
 8007a46:	e0c9      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e0c6      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a4e:	2308      	movs	r3, #8
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	e0c3      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a54:	2310      	movs	r3, #16
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e0c0      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a44      	ldr	r2, [pc, #272]	; (8007b70 <UART_SetConfig+0x2dc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d125      	bne.n	8007ab0 <UART_SetConfig+0x21c>
 8007a64:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a72:	d017      	beq.n	8007aa4 <UART_SetConfig+0x210>
 8007a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a78:	d817      	bhi.n	8007aaa <UART_SetConfig+0x216>
 8007a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7e:	d00b      	beq.n	8007a98 <UART_SetConfig+0x204>
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a84:	d811      	bhi.n	8007aaa <UART_SetConfig+0x216>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <UART_SetConfig+0x1fe>
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8e:	d006      	beq.n	8007a9e <UART_SetConfig+0x20a>
 8007a90:	e00b      	b.n	8007aaa <UART_SetConfig+0x216>
 8007a92:	2300      	movs	r3, #0
 8007a94:	77fb      	strb	r3, [r7, #31]
 8007a96:	e0a1      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	77fb      	strb	r3, [r7, #31]
 8007a9c:	e09e      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a9e:	2304      	movs	r3, #4
 8007aa0:	77fb      	strb	r3, [r7, #31]
 8007aa2:	e09b      	b.n	8007bdc <UART_SetConfig+0x348>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e098      	b.n	8007bdc <UART_SetConfig+0x348>
 8007aaa:	2310      	movs	r3, #16
 8007aac:	77fb      	strb	r3, [r7, #31]
 8007aae:	e095      	b.n	8007bdc <UART_SetConfig+0x348>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2f      	ldr	r2, [pc, #188]	; (8007b74 <UART_SetConfig+0x2e0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d125      	bne.n	8007b06 <UART_SetConfig+0x272>
 8007aba:	4b29      	ldr	r3, [pc, #164]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ac8:	d017      	beq.n	8007afa <UART_SetConfig+0x266>
 8007aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ace:	d817      	bhi.n	8007b00 <UART_SetConfig+0x26c>
 8007ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad4:	d00b      	beq.n	8007aee <UART_SetConfig+0x25a>
 8007ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ada:	d811      	bhi.n	8007b00 <UART_SetConfig+0x26c>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <UART_SetConfig+0x254>
 8007ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae4:	d006      	beq.n	8007af4 <UART_SetConfig+0x260>
 8007ae6:	e00b      	b.n	8007b00 <UART_SetConfig+0x26c>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e076      	b.n	8007bdc <UART_SetConfig+0x348>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e073      	b.n	8007bdc <UART_SetConfig+0x348>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e070      	b.n	8007bdc <UART_SetConfig+0x348>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e06d      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e06a      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <UART_SetConfig+0x2e4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d138      	bne.n	8007b82 <UART_SetConfig+0x2ee>
 8007b10:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b1e:	d017      	beq.n	8007b50 <UART_SetConfig+0x2bc>
 8007b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b24:	d82a      	bhi.n	8007b7c <UART_SetConfig+0x2e8>
 8007b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2a:	d00b      	beq.n	8007b44 <UART_SetConfig+0x2b0>
 8007b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b30:	d824      	bhi.n	8007b7c <UART_SetConfig+0x2e8>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <UART_SetConfig+0x2aa>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3a:	d006      	beq.n	8007b4a <UART_SetConfig+0x2b6>
 8007b3c:	e01e      	b.n	8007b7c <UART_SetConfig+0x2e8>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	77fb      	strb	r3, [r7, #31]
 8007b42:	e04b      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b44:	2302      	movs	r3, #2
 8007b46:	77fb      	strb	r3, [r7, #31]
 8007b48:	e048      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	77fb      	strb	r3, [r7, #31]
 8007b4e:	e045      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b50:	2308      	movs	r3, #8
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e042      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b56:	bf00      	nop
 8007b58:	efff69f3 	.word	0xefff69f3
 8007b5c:	40011000 	.word	0x40011000
 8007b60:	40023800 	.word	0x40023800
 8007b64:	40004400 	.word	0x40004400
 8007b68:	40004800 	.word	0x40004800
 8007b6c:	40004c00 	.word	0x40004c00
 8007b70:	40005000 	.word	0x40005000
 8007b74:	40011400 	.word	0x40011400
 8007b78:	40007800 	.word	0x40007800
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	77fb      	strb	r3, [r7, #31]
 8007b80:	e02c      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a72      	ldr	r2, [pc, #456]	; (8007d50 <UART_SetConfig+0x4bc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d125      	bne.n	8007bd8 <UART_SetConfig+0x344>
 8007b8c:	4b71      	ldr	r3, [pc, #452]	; (8007d54 <UART_SetConfig+0x4c0>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b9a:	d017      	beq.n	8007bcc <UART_SetConfig+0x338>
 8007b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ba0:	d817      	bhi.n	8007bd2 <UART_SetConfig+0x33e>
 8007ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba6:	d00b      	beq.n	8007bc0 <UART_SetConfig+0x32c>
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bac:	d811      	bhi.n	8007bd2 <UART_SetConfig+0x33e>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <UART_SetConfig+0x326>
 8007bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bb6:	d006      	beq.n	8007bc6 <UART_SetConfig+0x332>
 8007bb8:	e00b      	b.n	8007bd2 <UART_SetConfig+0x33e>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e00d      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e00a      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	e007      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e004      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bd2:	2310      	movs	r3, #16
 8007bd4:	77fb      	strb	r3, [r7, #31]
 8007bd6:	e001      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be4:	d15b      	bne.n	8007c9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007be6:	7ffb      	ldrb	r3, [r7, #31]
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d828      	bhi.n	8007c3e <UART_SetConfig+0x3aa>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x360>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c3f 	.word	0x08007c3f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fd f808 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8007c1c:	61b8      	str	r0, [r7, #24]
        break;
 8007c1e:	e013      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fd f818 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8007c24:	61b8      	str	r0, [r7, #24]
        break;
 8007c26:	e00f      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <UART_SetConfig+0x4c4>)
 8007c2a:	61bb      	str	r3, [r7, #24]
        break;
 8007c2c:	e00c      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fc ff2b 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007c32:	61b8      	str	r0, [r7, #24]
        break;
 8007c34:	e008      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	61bb      	str	r3, [r7, #24]
        break;
 8007c3c:	e004      	b.n	8007c48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	77bb      	strb	r3, [r7, #30]
        break;
 8007c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d074      	beq.n	8007d38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	005a      	lsls	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	441a      	add	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d916      	bls.n	8007c98 <UART_SetConfig+0x404>
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c70:	d212      	bcs.n	8007c98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f023 030f 	bic.w	r3, r3, #15
 8007c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	89fa      	ldrh	r2, [r7, #14]
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	e04f      	b.n	8007d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	77bb      	strb	r3, [r7, #30]
 8007c9c:	e04c      	b.n	8007d38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d828      	bhi.n	8007cf6 <UART_SetConfig+0x462>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <UART_SetConfig+0x418>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	08007cf7 	.word	0x08007cf7
 8007cbc:	08007ce7 	.word	0x08007ce7
 8007cc0:	08007cf7 	.word	0x08007cf7
 8007cc4:	08007cf7 	.word	0x08007cf7
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	08007cef 	.word	0x08007cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fc ffac 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8007cd4:	61b8      	str	r0, [r7, #24]
        break;
 8007cd6:	e013      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd8:	f7fc ffbc 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8007cdc:	61b8      	str	r0, [r7, #24]
        break;
 8007cde:	e00f      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce0:	4b1d      	ldr	r3, [pc, #116]	; (8007d58 <UART_SetConfig+0x4c4>)
 8007ce2:	61bb      	str	r3, [r7, #24]
        break;
 8007ce4:	e00c      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce6:	f7fc fecf 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007cea:	61b8      	str	r0, [r7, #24]
        break;
 8007cec:	e008      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf2:	61bb      	str	r3, [r7, #24]
        break;
 8007cf4:	e004      	b.n	8007d00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8007cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	085a      	lsrs	r2, r3, #1
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	441a      	add	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b0f      	cmp	r3, #15
 8007d1e:	d909      	bls.n	8007d34 <UART_SetConfig+0x4a0>
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d205      	bcs.n	8007d34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	e001      	b.n	8007d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	40007c00 	.word	0x40007c00
 8007d54:	40023800 	.word	0x40023800
 8007d58:	00f42400 	.word	0x00f42400

08007d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5a:	d10a      	bne.n	8007e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb0:	f7fa fc18 	bl	80026e4 <HAL_GetTick>
 8007eb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d10e      	bne.n	8007ee2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f831 	bl	8007f3a <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e027      	b.n	8007f32 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d10e      	bne.n	8007f0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f81b 	bl	8007f3a <UART_WaitOnFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e011      	b.n	8007f32 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b09c      	sub	sp, #112	; 0x70
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4a:	e0a7      	b.n	800809c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f52:	f000 80a3 	beq.w	800809c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f56:	f7fa fbc5 	bl	80026e4 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d302      	bcc.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d13f      	bne.n	8007fec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f80:	667b      	str	r3, [r7, #100]	; 0x64
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e6      	bne.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e5      	bne.n	8007f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e068      	b.n	80080be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d050      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008008:	d148      	bne.n	800809c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008012:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	637b      	str	r3, [r7, #52]	; 0x34
 8008034:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e6      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	613b      	str	r3, [r7, #16]
   return(result);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	66bb      	str	r3, [r7, #104]	; 0x68
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008066:	623a      	str	r2, [r7, #32]
 8008068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	69f9      	ldr	r1, [r7, #28]
 800806c:	6a3a      	ldr	r2, [r7, #32]
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	61bb      	str	r3, [r7, #24]
   return(result);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e010      	b.n	80080be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69da      	ldr	r2, [r3, #28]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	f43f af48 	beq.w	8007f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3770      	adds	r7, #112	; 0x70
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80080c8:	b084      	sub	sp, #16
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	f107 001c 	add.w	r0, r7, #28
 80080d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80080de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80080e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80080e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80080e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80080ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80080ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80080f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	4b07      	ldr	r3, [pc, #28]	; (800811c <SDMMC_Init+0x54>)
 8008100:	4013      	ands	r3, r2
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	b004      	add	sp, #16
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	ffff8100 	.word	0xffff8100

08008120 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2203      	movs	r2, #3
 8008168:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0303 	and.w	r3, r3, #3
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80081b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80081be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <SDMMC_SendCommand+0x50>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	fffff000 	.word	0xfffff000

080081e8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	b2db      	uxtb	r3, r3
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3314      	adds	r3, #20
 8008210:	461a      	mov	r2, r3
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	4413      	add	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
}  
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800824e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008254:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800825a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008272:	2300      	movs	r3, #0

}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800828e:	2310      	movs	r3, #16
 8008290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800829e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a0:	f107 0308 	add.w	r3, r7, #8
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ff74 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80082ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b0:	2110      	movs	r1, #16
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa1a 	bl	80086ec <SDMMC_GetCmdResp1>
 80082b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082ba:	69fb      	ldr	r3, [r7, #28]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80082d2:	2311      	movs	r3, #17
 80082d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082d6:	2340      	movs	r3, #64	; 0x40
 80082d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082e4:	f107 0308 	add.w	r3, r7, #8
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff ff52 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80082f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f4:	2111      	movs	r1, #17
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9f8 	bl	80086ec <SDMMC_GetCmdResp1>
 80082fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082fe:	69fb      	ldr	r3, [r7, #28]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008316:	2312      	movs	r3, #18
 8008318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008326:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff ff30 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008334:	f241 3288 	movw	r2, #5000	; 0x1388
 8008338:	2112      	movs	r1, #18
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9d6 	bl	80086ec <SDMMC_GetCmdResp1>
 8008340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008342:	69fb      	ldr	r3, [r7, #28]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800835a:	2318      	movs	r3, #24
 800835c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800836c:	f107 0308 	add.w	r3, r7, #8
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff ff0e 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008378:	f241 3288 	movw	r2, #5000	; 0x1388
 800837c:	2118      	movs	r1, #24
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9b4 	bl	80086ec <SDMMC_GetCmdResp1>
 8008384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008386:	69fb      	ldr	r3, [r7, #28]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800839e:	2319      	movs	r3, #25
 80083a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083a2:	2340      	movs	r3, #64	; 0x40
 80083a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff feec 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	2119      	movs	r1, #25
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f992 	bl	80086ec <SDMMC_GetCmdResp1>
 80083c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ca:	69fb      	ldr	r3, [r7, #28]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083e0:	230c      	movs	r3, #12
 80083e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff fecb 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80083fe:	4a05      	ldr	r2, [pc, #20]	; (8008414 <SDMMC_CmdStopTransfer+0x40>)
 8008400:	210c      	movs	r1, #12
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f972 	bl	80086ec <SDMMC_GetCmdResp1>
 8008408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800840a:	69fb      	ldr	r3, [r7, #28]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	05f5e100 	.word	0x05f5e100

08008418 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008428:	2307      	movs	r3, #7
 800842a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008430:	2300      	movs	r3, #0
 8008432:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008438:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800843a:	f107 0310 	add.w	r3, r7, #16
 800843e:	4619      	mov	r1, r3
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fea7 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008446:	f241 3288 	movw	r2, #5000	; 0x1388
 800844a:	2107      	movs	r1, #7
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f94d 	bl	80086ec <SDMMC_GetCmdResp1>
 8008452:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008456:	4618      	mov	r0, r3
 8008458:	3728      	adds	r7, #40	; 0x28
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b088      	sub	sp, #32
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800847c:	f107 0308 	add.w	r3, r7, #8
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fe86 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb67 	bl	8008b5c <SDMMC_GetCmdError>
 800848e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008490:	69fb      	ldr	r3, [r7, #28]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3720      	adds	r7, #32
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b088      	sub	sp, #32
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80084a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80084a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80084a8:	2308      	movs	r3, #8
 80084aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fe67 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fafa 	bl	8008ac0 <SDMMC_GetCmdResp7>
 80084cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ce:	69fb      	ldr	r3, [r7, #28]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3720      	adds	r7, #32
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084e6:	2337      	movs	r3, #55	; 0x37
 80084e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084ea:	2340      	movs	r3, #64	; 0x40
 80084ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084ee:	2300      	movs	r3, #0
 80084f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fe48 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008504:	f241 3288 	movw	r2, #5000	; 0x1388
 8008508:	2137      	movs	r1, #55	; 0x37
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f8ee 	bl	80086ec <SDMMC_GetCmdResp1>
 8008510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008512:	69fb      	ldr	r3, [r7, #28]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3720      	adds	r7, #32
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <SDMMC_CmdAppOperCommand+0x44>)
 800852a:	4313      	orrs	r3, r2
 800852c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800852e:	2329      	movs	r3, #41	; 0x29
 8008530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008532:	2340      	movs	r3, #64	; 0x40
 8008534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800853a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800853e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008540:	f107 0308 	add.w	r3, r7, #8
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff fe24 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa03 	bl	8008958 <SDMMC_GetCmdResp3>
 8008552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008554:	69fb      	ldr	r3, [r7, #28]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	80100000 	.word	0x80100000

08008564 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008572:	2306      	movs	r3, #6
 8008574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008576:	2340      	movs	r3, #64	; 0x40
 8008578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800857a:	2300      	movs	r3, #0
 800857c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800857e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008584:	f107 0308 	add.w	r3, r7, #8
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fe02 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008590:	f241 3288 	movw	r2, #5000	; 0x1388
 8008594:	2106      	movs	r1, #6
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f8a8 	bl	80086ec <SDMMC_GetCmdResp1>
 800859c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800859e:	69fb      	ldr	r3, [r7, #28]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3720      	adds	r7, #32
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80085b4:	2333      	movs	r3, #51	; 0x33
 80085b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085b8:	2340      	movs	r3, #64	; 0x40
 80085ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085c6:	f107 0308 	add.w	r3, r7, #8
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff fde1 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80085d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d6:	2133      	movs	r1, #51	; 0x33
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f887 	bl	80086ec <SDMMC_GetCmdResp1>
 80085de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e0:	69fb      	ldr	r3, [r7, #28]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80085f6:	2302      	movs	r3, #2
 80085f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085fa:	23c0      	movs	r3, #192	; 0xc0
 80085fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008608:	f107 0308 	add.w	r3, r7, #8
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fdc0 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f957 	bl	80088c8 <SDMMC_GetCmdResp2>
 800861a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800861c:	69fb      	ldr	r3, [r7, #28]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3720      	adds	r7, #32
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b088      	sub	sp, #32
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008634:	2309      	movs	r3, #9
 8008636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008638:	23c0      	movs	r3, #192	; 0xc0
 800863a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008646:	f107 0308 	add.w	r3, r7, #8
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff fda1 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f938 	bl	80088c8 <SDMMC_GetCmdResp2>
 8008658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800865a:	69fb      	ldr	r3, [r7, #28]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008672:	2303      	movs	r3, #3
 8008674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800867e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008684:	f107 0308 	add.w	r3, r7, #8
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fd82 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	2103      	movs	r1, #3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f99d 	bl	80089d4 <SDMMC_GetCmdResp6>
 800869a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800869c:	69fb      	ldr	r3, [r7, #28]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b088      	sub	sp, #32
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80086b4:	230d      	movs	r3, #13
 80086b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086c6:	f107 0308 	add.w	r3, r7, #8
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff fd61 	bl	8008194 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80086d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d6:	210d      	movs	r1, #13
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f807 	bl	80086ec <SDMMC_GetCmdResp1>
 80086de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086e0:	69fb      	ldr	r3, [r7, #28]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	460b      	mov	r3, r1
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80086fa:	4b70      	ldr	r3, [pc, #448]	; (80088bc <SDMMC_GetCmdResp1+0x1d0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a70      	ldr	r2, [pc, #448]	; (80088c0 <SDMMC_GetCmdResp1+0x1d4>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	0a5a      	lsrs	r2, r3, #9
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	fb02 f303 	mul.w	r3, r2, r3
 800870c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	1e5a      	subs	r2, r3, #1
 8008712:	61fa      	str	r2, [r7, #28]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800871c:	e0c9      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0ef      	beq.n	800870e <SDMMC_GetCmdResp1+0x22>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1ea      	bne.n	800870e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2204      	movs	r2, #4
 8008748:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800874a:	2304      	movs	r3, #4
 800874c:	e0b1      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008760:	2301      	movs	r3, #1
 8008762:	e0a6      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	22c5      	movs	r2, #197	; 0xc5
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fd3c 	bl	80081e8 <SDMMC_GetCommandResponse>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	4293      	cmp	r3, r2
 8008778:	d001      	beq.n	800877e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800877a:	2301      	movs	r3, #1
 800877c:	e099      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800877e:	2100      	movs	r1, #0
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fd3e 	bl	8008202 <SDMMC_GetResponse>
 8008786:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4b4e      	ldr	r3, [pc, #312]	; (80088c4 <SDMMC_GetCmdResp1+0x1d8>)
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008792:	2300      	movs	r3, #0
 8008794:	e08d      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da02      	bge.n	80087a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800879c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087a0:	e087      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80087ac:	2340      	movs	r3, #64	; 0x40
 80087ae:	e080      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80087ba:	2380      	movs	r3, #128	; 0x80
 80087bc:	e079      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80087c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087cc:	e071      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80087d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087dc:	e069      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80087e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ec:	e061      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80087f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087fc:	e059      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880c:	e051      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800881c:	e049      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008828:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800882c:	e041      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800883c:	e039      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800884c:	e031      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008858:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800885c:	e029      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008868:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800886c:	e021      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008878:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800887c:	e019      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800888c:	e011      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008898:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800889c:	e009      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80088a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80088ac:	e001      	b.n	80088b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20000000 	.word	0x20000000
 80088c0:	10624dd3 	.word	0x10624dd3
 80088c4:	fdffe008 	.word	0xfdffe008

080088c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088d0:	4b1f      	ldr	r3, [pc, #124]	; (8008950 <SDMMC_GetCmdResp2+0x88>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <SDMMC_GetCmdResp2+0x8c>)
 80088d6:	fba2 2303 	umull	r2, r3, r2, r3
 80088da:	0a5b      	lsrs	r3, r3, #9
 80088dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e0:	fb02 f303 	mul.w	r3, r2, r3
 80088e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1e5a      	subs	r2, r3, #1
 80088ea:	60fa      	str	r2, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088f4:	e026      	b.n	8008944 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0ef      	beq.n	80088e6 <SDMMC_GetCmdResp2+0x1e>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1ea      	bne.n	80088e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2204      	movs	r2, #4
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008922:	2304      	movs	r3, #4
 8008924:	e00e      	b.n	8008944 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008938:	2301      	movs	r3, #1
 800893a:	e003      	b.n	8008944 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	22c5      	movs	r2, #197	; 0xc5
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000000 	.word	0x20000000
 8008954:	10624dd3 	.word	0x10624dd3

08008958 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008960:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <SDMMC_GetCmdResp3+0x74>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a1a      	ldr	r2, [pc, #104]	; (80089d0 <SDMMC_GetCmdResp3+0x78>)
 8008966:	fba2 2303 	umull	r2, r3, r2, r3
 800896a:	0a5b      	lsrs	r3, r3, #9
 800896c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008970:	fb02 f303 	mul.w	r3, r2, r3
 8008974:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	60fa      	str	r2, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008984:	e01b      	b.n	80089be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ef      	beq.n	8008976 <SDMMC_GetCmdResp3+0x1e>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ea      	bne.n	8008976 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2204      	movs	r2, #4
 80089b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089b2:	2304      	movs	r3, #4
 80089b4:	e003      	b.n	80089be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	22c5      	movs	r2, #197	; 0xc5
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000000 	.word	0x20000000
 80089d0:	10624dd3 	.word	0x10624dd3

080089d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	460b      	mov	r3, r1
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089e2:	4b35      	ldr	r3, [pc, #212]	; (8008ab8 <SDMMC_GetCmdResp6+0xe4>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a35      	ldr	r2, [pc, #212]	; (8008abc <SDMMC_GetCmdResp6+0xe8>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	0a5b      	lsrs	r3, r3, #9
 80089ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	1e5a      	subs	r2, r3, #1
 80089fc:	61fa      	str	r2, [r7, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a06:	e052      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0ef      	beq.n	80089f8 <SDMMC_GetCmdResp6+0x24>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1ea      	bne.n	80089f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2204      	movs	r2, #4
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a34:	2304      	movs	r3, #4
 8008a36:	e03a      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e02f      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fbca 	bl	80081e8 <SDMMC_GetCommandResponse>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461a      	mov	r2, r3
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d001      	beq.n	8008a62 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e025      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	22c5      	movs	r2, #197	; 0xc5
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a68:	2100      	movs	r1, #0
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff fbc9 	bl	8008202 <SDMMC_GetResponse>
 8008a70:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e011      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a98:	e009      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa8:	e001      	b.n	8008aae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000000 	.word	0x20000000
 8008abc:	10624dd3 	.word	0x10624dd3

08008ac0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ac8:	4b22      	ldr	r3, [pc, #136]	; (8008b54 <SDMMC_GetCmdResp7+0x94>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a22      	ldr	r2, [pc, #136]	; (8008b58 <SDMMC_GetCmdResp7+0x98>)
 8008ace:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad2:	0a5b      	lsrs	r3, r3, #9
 8008ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	1e5a      	subs	r2, r3, #1
 8008ae2:	60fa      	str	r2, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aec:	e02c      	b.n	8008b48 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0ef      	beq.n	8008ade <SDMMC_GetCmdResp7+0x1e>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1ea      	bne.n	8008ade <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2204      	movs	r2, #4
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	e014      	b.n	8008b48 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d004      	beq.n	8008b34 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e009      	b.n	8008b48 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2240      	movs	r2, #64	; 0x40
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b46:	2300      	movs	r3, #0
  
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	20000000 	.word	0x20000000
 8008b58:	10624dd3 	.word	0x10624dd3

08008b5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <SDMMC_GetCmdError+0x50>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a11      	ldr	r2, [pc, #68]	; (8008bb0 <SDMMC_GetCmdError+0x54>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	0a5b      	lsrs	r3, r3, #9
 8008b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b74:	fb02 f303 	mul.w	r3, r2, r3
 8008b78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	1e5a      	subs	r2, r3, #1
 8008b7e:	60fa      	str	r2, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b88:	e009      	b.n	8008b9e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0f1      	beq.n	8008b7a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	22c5      	movs	r2, #197	; 0xc5
 8008b9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000000 	.word	0x20000000
 8008bb0:	10624dd3 	.word	0x10624dd3

08008bb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008bb8:	4904      	ldr	r1, [pc, #16]	; (8008bcc <MX_FATFS_Init+0x18>)
 8008bba:	4805      	ldr	r0, [pc, #20]	; (8008bd0 <MX_FATFS_Init+0x1c>)
 8008bbc:	f002 fd0e 	bl	800b5dc <FATFS_LinkDriver>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	4b03      	ldr	r3, [pc, #12]	; (8008bd4 <MX_FATFS_Init+0x20>)
 8008bc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008bc8:	bf00      	nop
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	200045f0 	.word	0x200045f0
 8008bd0:	0800e93c 	.word	0x0800e93c
 8008bd4:	200045ec 	.word	0x200045ec

08008bd8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008bdc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008bf2:	f000 f896 	bl	8008d22 <BSP_SD_IsDetected>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d001      	beq.n	8008c00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e012      	b.n	8008c26 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008c00:	480b      	ldr	r0, [pc, #44]	; (8008c30 <BSP_SD_Init+0x48>)
 8008c02:	f7fd facd 	bl	80061a0 <HAL_SD_Init>
 8008c06:	4603      	mov	r3, r0
 8008c08:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c14:	4806      	ldr	r0, [pc, #24]	; (8008c30 <BSP_SD_Init+0x48>)
 8008c16:	f7fe f893 	bl	8006d40 <HAL_SD_ConfigWideBusOperation>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008c24:	79fb      	ldrb	r3, [r7, #7]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	200043f4 	.word	0x200043f4

08008c34 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	68f9      	ldr	r1, [r7, #12]
 8008c4a:	4806      	ldr	r0, [pc, #24]	; (8008c64 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008c4c:	f7fd fb60 	bl	8006310 <HAL_SD_ReadBlocks_DMA>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200043f4 	.word	0x200043f4

08008c68 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	68f9      	ldr	r1, [r7, #12]
 8008c7e:	4806      	ldr	r0, [pc, #24]	; (8008c98 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008c80:	f7fd fc28 	bl	80064d4 <HAL_SD_WriteBlocks_DMA>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	200043f4 	.word	0x200043f4

08008c9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008ca0:	4805      	ldr	r0, [pc, #20]	; (8008cb8 <BSP_SD_GetCardState+0x1c>)
 8008ca2:	f7fe f8e7 	bl	8006e74 <HAL_SD_GetCardState>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	bf14      	ite	ne
 8008cac:	2301      	movne	r3, #1
 8008cae:	2300      	moveq	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200043f4 	.word	0x200043f4

08008cbc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	4803      	ldr	r0, [pc, #12]	; (8008cd4 <BSP_SD_GetCardInfo+0x18>)
 8008cc8:	f7fe f80e 	bl	8006ce8 <HAL_SD_GetCardInfo>
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200043f4 	.word	0x200043f4

08008cd8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008ce0:	f000 f818 	bl	8008d14 <BSP_SD_AbortCallback>
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008cf4:	f000 f9a8 	bl	8009048 <BSP_SD_WriteCpltCallback>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008d08:	f000 f9aa 	bl	8009060 <BSP_SD_ReadCpltCallback>
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0

}
 8008d18:	bf00      	nop
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008d2c:	f000 f80c 	bl	8008d48 <BSP_PlatformIsDetected>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008d36:	2300      	movs	r3, #0
 8008d38:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	b2db      	uxtb	r3, r3
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d56:	4806      	ldr	r0, [pc, #24]	; (8008d70 <BSP_PlatformIsDetected+0x28>)
 8008d58:	f7fb fa62 	bl	8004220 <HAL_GPIO_ReadPin>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008d62:	2300      	movs	r3, #0
 8008d64:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008d66:	79fb      	ldrb	r3, [r7, #7]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40020400 	.word	0x40020400

08008d74 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008d7c:	f7f9 fcb2 	bl	80026e4 <HAL_GetTick>
 8008d80:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008d82:	e006      	b.n	8008d92 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008d84:	f7ff ff8a 	bl	8008c9c <BSP_SD_GetCardState>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e009      	b.n	8008da6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008d92:	f7f9 fca7 	bl	80026e4 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d8f0      	bhi.n	8008d84 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008dba:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <SD_CheckStatus+0x38>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008dc0:	f7ff ff6c 	bl	8008c9c <BSP_SD_GetCardState>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d107      	bne.n	8008dda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008dca:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <SD_CheckStatus+0x38>)
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	4b04      	ldr	r3, [pc, #16]	; (8008de8 <SD_CheckStatus+0x38>)
 8008dd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008dda:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <SD_CheckStatus+0x38>)
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b2db      	uxtb	r3, r3
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000009 	.word	0x20000009

08008dec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008df6:	f7ff fef7 	bl	8008be8 <BSP_SD_Init>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d107      	bne.n	8008e10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff ffd4 	bl	8008db0 <SD_CheckStatus>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <SD_initialize+0x34>)
 8008e0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008e10:	4b03      	ldr	r3, [pc, #12]	; (8008e20 <SD_initialize+0x34>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b2db      	uxtb	r3, r3
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20000009 	.word	0x20000009

08008e24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff ffbd 	bl	8008db0 <SD_CheckStatus>
 8008e36:	4603      	mov	r3, r0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008e54:	f247 5030 	movw	r0, #30000	; 0x7530
 8008e58:	f7ff ff8c 	bl	8008d74 <SD_CheckStatusWithTimeout>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da01      	bge.n	8008e66 <SD_read+0x26>
  {
    return res;
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	e03b      	b.n	8008ede <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	68b8      	ldr	r0, [r7, #8]
 8008e6c:	f7ff fee2 	bl	8008c34 <BSP_SD_ReadBlocks_DMA>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d132      	bne.n	8008edc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008e76:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <SD_read+0xa8>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008e7c:	f7f9 fc32 	bl	80026e4 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008e82:	bf00      	nop
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <SD_read+0xa8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d108      	bne.n	8008e9e <SD_read+0x5e>
 8008e8c:	f7f9 fc2a 	bl	80026e4 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	f247 522f 	movw	r2, #29999	; 0x752f
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d9f2      	bls.n	8008e84 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <SD_read+0xa8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	75fb      	strb	r3, [r7, #23]
 8008eaa:	e017      	b.n	8008edc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008eac:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <SD_read+0xa8>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008eb2:	f7f9 fc17 	bl	80026e4 <HAL_GetTick>
 8008eb6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008eb8:	e007      	b.n	8008eca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008eba:	f7ff feef 	bl	8008c9c <BSP_SD_GetCardState>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <SD_read+0x8a>
          {
            res = RES_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008ec8:	e008      	b.n	8008edc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008eca:	f7f9 fc0b 	bl	80026e4 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d9ee      	bls.n	8008eba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20004a58 	.word	0x20004a58

08008eec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008f00:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <SD_write+0xa8>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008f06:	f247 5030 	movw	r0, #30000	; 0x7530
 8008f0a:	f7ff ff33 	bl	8008d74 <SD_CheckStatusWithTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da01      	bge.n	8008f18 <SD_write+0x2c>
  {
    return res;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	e038      	b.n	8008f8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	68b8      	ldr	r0, [r7, #8]
 8008f1e:	f7ff fea3 	bl	8008c68 <BSP_SD_WriteBlocks_DMA>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d12f      	bne.n	8008f88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008f28:	f7f9 fbdc 	bl	80026e4 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008f2e:	bf00      	nop
 8008f30:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <SD_write+0xa8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <SD_write+0x5e>
 8008f38:	f7f9 fbd4 	bl	80026e4 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d9f2      	bls.n	8008f30 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008f4a:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <SD_write+0xa8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d102      	bne.n	8008f58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	75fb      	strb	r3, [r7, #23]
 8008f56:	e017      	b.n	8008f88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008f58:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <SD_write+0xa8>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008f5e:	f7f9 fbc1 	bl	80026e4 <HAL_GetTick>
 8008f62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008f64:	e007      	b.n	8008f76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f66:	f7ff fe99 	bl	8008c9c <BSP_SD_GetCardState>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <SD_write+0x8a>
          {
            res = RES_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
            break;
 8008f74:	e008      	b.n	8008f88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008f76:	f7f9 fbb5 	bl	80026e4 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d9ee      	bls.n	8008f66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20004a54 	.word	0x20004a54

08008f98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08c      	sub	sp, #48	; 0x30
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	603a      	str	r2, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008fae:	4b25      	ldr	r3, [pc, #148]	; (8009044 <SD_ioctl+0xac>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <SD_ioctl+0x28>
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e03c      	b.n	800903a <SD_ioctl+0xa2>

  switch (cmd)
 8008fc0:	79bb      	ldrb	r3, [r7, #6]
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d834      	bhi.n	8009030 <SD_ioctl+0x98>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <SD_ioctl+0x34>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08008fdd 	.word	0x08008fdd
 8008fd0:	08008fe5 	.word	0x08008fe5
 8008fd4:	08008ffd 	.word	0x08008ffd
 8008fd8:	08009017 	.word	0x08009017
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fe2:	e028      	b.n	8009036 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fe4:	f107 030c 	add.w	r3, r7, #12
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7ff fe67 	bl	8008cbc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ffa:	e01c      	b.n	8009036 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ffc:	f107 030c 	add.w	r3, r7, #12
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fe5b 	bl	8008cbc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	b29a      	uxth	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009014:	e00f      	b.n	8009036 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009016:	f107 030c 	add.w	r3, r7, #12
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fe4e 	bl	8008cbc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	0a5a      	lsrs	r2, r3, #9
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800902e:	e002      	b.n	8009036 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009030:	2304      	movs	r3, #4
 8009032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800903a:	4618      	mov	r0, r3
 800903c:	3730      	adds	r7, #48	; 0x30
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000009 	.word	0x20000009

08009048 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800904c:	4b03      	ldr	r3, [pc, #12]	; (800905c <BSP_SD_WriteCpltCallback+0x14>)
 800904e:	2201      	movs	r2, #1
 8009050:	601a      	str	r2, [r3, #0]
}
 8009052:	bf00      	nop
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	20004a54 	.word	0x20004a54

08009060 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <BSP_SD_ReadCpltCallback+0x14>)
 8009066:	2201      	movs	r2, #1
 8009068:	601a      	str	r2, [r3, #0]
}
 800906a:	bf00      	nop
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	20004a58 	.word	0x20004a58

08009078 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	4a08      	ldr	r2, [pc, #32]	; (80090a8 <disk_status+0x30>)
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	79fa      	ldrb	r2, [r7, #7]
 8009090:	4905      	ldr	r1, [pc, #20]	; (80090a8 <disk_status+0x30>)
 8009092:	440a      	add	r2, r1
 8009094:	7a12      	ldrb	r2, [r2, #8]
 8009096:	4610      	mov	r0, r2
 8009098:	4798      	blx	r3
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20004a84 	.word	0x20004a84

080090ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	4a0d      	ldr	r2, [pc, #52]	; (80090f4 <disk_initialize+0x48>)
 80090be:	5cd3      	ldrb	r3, [r2, r3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d111      	bne.n	80090e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <disk_initialize+0x48>)
 80090c8:	2101      	movs	r1, #1
 80090ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <disk_initialize+0x48>)
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	79fa      	ldrb	r2, [r7, #7]
 80090da:	4906      	ldr	r1, [pc, #24]	; (80090f4 <disk_initialize+0x48>)
 80090dc:	440a      	add	r2, r1
 80090de:	7a12      	ldrb	r2, [r2, #8]
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20004a84 	.word	0x20004a84

080090f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <disk_read+0x3c>)
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	689c      	ldr	r4, [r3, #8]
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4a07      	ldr	r2, [pc, #28]	; (8009134 <disk_read+0x3c>)
 8009118:	4413      	add	r3, r2
 800911a:	7a18      	ldrb	r0, [r3, #8]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	47a0      	blx	r4
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
  return res;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	bd90      	pop	{r4, r7, pc}
 8009132:	bf00      	nop
 8009134:	20004a84 	.word	0x20004a84

08009138 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009138:	b590      	push	{r4, r7, lr}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	4a0a      	ldr	r2, [pc, #40]	; (8009174 <disk_write+0x3c>)
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	68dc      	ldr	r4, [r3, #12]
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4a07      	ldr	r2, [pc, #28]	; (8009174 <disk_write+0x3c>)
 8009158:	4413      	add	r3, r2
 800915a:	7a18      	ldrb	r0, [r3, #8]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	47a0      	blx	r4
 8009164:	4603      	mov	r3, r0
 8009166:	75fb      	strb	r3, [r7, #23]
  return res;
 8009168:	7dfb      	ldrb	r3, [r7, #23]
}
 800916a:	4618      	mov	r0, r3
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	bd90      	pop	{r4, r7, pc}
 8009172:	bf00      	nop
 8009174:	20004a84 	.word	0x20004a84

08009178 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	603a      	str	r2, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
 8009184:	460b      	mov	r3, r1
 8009186:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <disk_ioctl+0x38>)
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	79fa      	ldrb	r2, [r7, #7]
 8009196:	4906      	ldr	r1, [pc, #24]	; (80091b0 <disk_ioctl+0x38>)
 8009198:	440a      	add	r2, r1
 800919a:	7a10      	ldrb	r0, [r2, #8]
 800919c:	79b9      	ldrb	r1, [r7, #6]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	4798      	blx	r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20004a84 	.word	0x20004a84

080091b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3301      	adds	r3, #1
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	b21a      	sxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	b21b      	sxth	r3, r3
 80091d0:	4313      	orrs	r3, r2
 80091d2:	b21b      	sxth	r3, r3
 80091d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80091d6:	89fb      	ldrh	r3, [r7, #14]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3303      	adds	r3, #3
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	3202      	adds	r2, #2
 80091fc:	7812      	ldrb	r2, [r2, #0]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	3201      	adds	r2, #1
 800920a:	7812      	ldrb	r2, [r2, #0]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
	return rv;
 800921c:	68fb      	ldr	r3, [r7, #12]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	887a      	ldrh	r2, [r7, #2]
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	887b      	ldrh	r3, [r7, #2]
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	887a      	ldrh	r2, [r7, #2]
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	701a      	strb	r2, [r3, #0]
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	0a1b      	lsrs	r3, r3, #8
 800927a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	0a1b      	lsrs	r3, r3, #8
 800928c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	b2d2      	uxtb	r2, r2
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	0a1b      	lsrs	r3, r3, #8
 800929e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	701a      	strb	r2, [r3, #0]
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00d      	beq.n	80092ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	1c53      	adds	r3, r2, #1
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	1c59      	adds	r1, r3, #1
 80092dc:	6179      	str	r1, [r7, #20]
 80092de:	7812      	ldrb	r2, [r2, #0]
 80092e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	607b      	str	r3, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1f1      	bne.n	80092d2 <mem_cpy+0x1a>
	}
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092fa:	b480      	push	{r7}
 80092fc:	b087      	sub	sp, #28
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	617a      	str	r2, [r7, #20]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	b2d2      	uxtb	r2, r2
 8009314:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3b01      	subs	r3, #1
 800931a:	607b      	str	r3, [r7, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f3      	bne.n	800930a <mem_set+0x10>
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009330:	b480      	push	{r7}
 8009332:	b089      	sub	sp, #36	; 0x24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	61fb      	str	r3, [r7, #28]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	61fa      	str	r2, [r7, #28]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4619      	mov	r1, r3
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	61ba      	str	r2, [r7, #24]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	1acb      	subs	r3, r1, r3
 800935c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3b01      	subs	r3, #1
 8009362:	607b      	str	r3, [r7, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <mem_cmp+0x40>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0eb      	beq.n	8009348 <mem_cmp+0x18>

	return r;
 8009370:	697b      	ldr	r3, [r7, #20]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3724      	adds	r7, #36	; 0x24
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009388:	e002      	b.n	8009390 <chk_chr+0x12>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3301      	adds	r3, #1
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <chk_chr+0x26>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d1f2      	bne.n	800938a <chk_chr+0xc>
	return *str;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	781b      	ldrb	r3, [r3, #0]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093be:	2300      	movs	r3, #0
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e029      	b.n	800941c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80093c8:	4a27      	ldr	r2, [pc, #156]	; (8009468 <chk_lock+0xb4>)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	4413      	add	r3, r2
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01d      	beq.n	8009412 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093d6:	4a24      	ldr	r2, [pc, #144]	; (8009468 <chk_lock+0xb4>)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	4413      	add	r3, r2
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d116      	bne.n	8009416 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80093e8:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <chk_lock+0xb4>)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	4413      	add	r3, r2
 80093f0:	3304      	adds	r3, #4
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d10c      	bne.n	8009416 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80093fc:	4a1a      	ldr	r2, [pc, #104]	; (8009468 <chk_lock+0xb4>)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	4413      	add	r3, r2
 8009404:	3308      	adds	r3, #8
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800940c:	429a      	cmp	r2, r3
 800940e:	d102      	bne.n	8009416 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009410:	e007      	b.n	8009422 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009412:	2301      	movs	r3, #1
 8009414:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d9d2      	bls.n	80093c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b02      	cmp	r3, #2
 8009426:	d109      	bne.n	800943c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <chk_lock+0x80>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d101      	bne.n	8009438 <chk_lock+0x84>
 8009434:	2300      	movs	r3, #0
 8009436:	e010      	b.n	800945a <chk_lock+0xa6>
 8009438:	2312      	movs	r3, #18
 800943a:	e00e      	b.n	800945a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d108      	bne.n	8009454 <chk_lock+0xa0>
 8009442:	4a09      	ldr	r2, [pc, #36]	; (8009468 <chk_lock+0xb4>)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	4413      	add	r3, r2
 800944a:	330c      	adds	r3, #12
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009452:	d101      	bne.n	8009458 <chk_lock+0xa4>
 8009454:	2310      	movs	r3, #16
 8009456:	e000      	b.n	800945a <chk_lock+0xa6>
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20004a64 	.word	0x20004a64

0800946c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009472:	2300      	movs	r3, #0
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	e002      	b.n	800947e <enq_lock+0x12>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3301      	adds	r3, #1
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d806      	bhi.n	8009492 <enq_lock+0x26>
 8009484:	4a09      	ldr	r2, [pc, #36]	; (80094ac <enq_lock+0x40>)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	4413      	add	r3, r2
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f2      	bne.n	8009478 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b02      	cmp	r3, #2
 8009496:	bf14      	ite	ne
 8009498:	2301      	movne	r3, #1
 800949a:	2300      	moveq	r3, #0
 800949c:	b2db      	uxtb	r3, r3
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20004a64 	.word	0x20004a64

080094b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	e01f      	b.n	8009500 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80094c0:	4a41      	ldr	r2, [pc, #260]	; (80095c8 <inc_lock+0x118>)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	4413      	add	r3, r2
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d113      	bne.n	80094fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80094d2:	4a3d      	ldr	r2, [pc, #244]	; (80095c8 <inc_lock+0x118>)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	4413      	add	r3, r2
 80094da:	3304      	adds	r3, #4
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d109      	bne.n	80094fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80094e6:	4a38      	ldr	r2, [pc, #224]	; (80095c8 <inc_lock+0x118>)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	4413      	add	r3, r2
 80094ee:	3308      	adds	r3, #8
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d006      	beq.n	8009508 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d9dc      	bls.n	80094c0 <inc_lock+0x10>
 8009506:	e000      	b.n	800950a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009508:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d132      	bne.n	8009576 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e002      	b.n	800951c <inc_lock+0x6c>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d806      	bhi.n	8009530 <inc_lock+0x80>
 8009522:	4a29      	ldr	r2, [pc, #164]	; (80095c8 <inc_lock+0x118>)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	4413      	add	r3, r2
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1f2      	bne.n	8009516 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b02      	cmp	r3, #2
 8009534:	d101      	bne.n	800953a <inc_lock+0x8a>
 8009536:	2300      	movs	r3, #0
 8009538:	e040      	b.n	80095bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	4922      	ldr	r1, [pc, #136]	; (80095c8 <inc_lock+0x118>)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	440b      	add	r3, r1
 8009546:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	491e      	ldr	r1, [pc, #120]	; (80095c8 <inc_lock+0x118>)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	440b      	add	r3, r1
 8009554:	3304      	adds	r3, #4
 8009556:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	695a      	ldr	r2, [r3, #20]
 800955c:	491a      	ldr	r1, [pc, #104]	; (80095c8 <inc_lock+0x118>)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	440b      	add	r3, r1
 8009564:	3308      	adds	r3, #8
 8009566:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009568:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <inc_lock+0x118>)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	4413      	add	r3, r2
 8009570:	330c      	adds	r3, #12
 8009572:	2200      	movs	r2, #0
 8009574:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <inc_lock+0xe0>
 800957c:	4a12      	ldr	r2, [pc, #72]	; (80095c8 <inc_lock+0x118>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	4413      	add	r3, r2
 8009584:	330c      	adds	r3, #12
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <inc_lock+0xe0>
 800958c:	2300      	movs	r3, #0
 800958e:	e015      	b.n	80095bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d108      	bne.n	80095a8 <inc_lock+0xf8>
 8009596:	4a0c      	ldr	r2, [pc, #48]	; (80095c8 <inc_lock+0x118>)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	4413      	add	r3, r2
 800959e:	330c      	adds	r3, #12
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	3301      	adds	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	e001      	b.n	80095ac <inc_lock+0xfc>
 80095a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095ac:	4906      	ldr	r1, [pc, #24]	; (80095c8 <inc_lock+0x118>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	440b      	add	r3, r1
 80095b4:	330c      	adds	r3, #12
 80095b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	20004a64 	.word	0x20004a64

080095cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	607b      	str	r3, [r7, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d825      	bhi.n	800962c <dec_lock+0x60>
		n = Files[i].ctr;
 80095e0:	4a17      	ldr	r2, [pc, #92]	; (8009640 <dec_lock+0x74>)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	4413      	add	r3, r2
 80095e8:	330c      	adds	r3, #12
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80095ee:	89fb      	ldrh	r3, [r7, #14]
 80095f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f4:	d101      	bne.n	80095fa <dec_lock+0x2e>
 80095f6:	2300      	movs	r3, #0
 80095f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80095fa:	89fb      	ldrh	r3, [r7, #14]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <dec_lock+0x3a>
 8009600:	89fb      	ldrh	r3, [r7, #14]
 8009602:	3b01      	subs	r3, #1
 8009604:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009606:	4a0e      	ldr	r2, [pc, #56]	; (8009640 <dec_lock+0x74>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	4413      	add	r3, r2
 800960e:	330c      	adds	r3, #12
 8009610:	89fa      	ldrh	r2, [r7, #14]
 8009612:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009614:	89fb      	ldrh	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d105      	bne.n	8009626 <dec_lock+0x5a>
 800961a:	4a09      	ldr	r2, [pc, #36]	; (8009640 <dec_lock+0x74>)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	4413      	add	r3, r2
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	737b      	strb	r3, [r7, #13]
 800962a:	e001      	b.n	8009630 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800962c:	2302      	movs	r3, #2
 800962e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009630:	7b7b      	ldrb	r3, [r7, #13]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20004a64 	.word	0x20004a64

08009644 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	e010      	b.n	8009674 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009652:	4a0d      	ldr	r2, [pc, #52]	; (8009688 <clear_lock+0x44>)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	011b      	lsls	r3, r3, #4
 8009658:	4413      	add	r3, r2
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	429a      	cmp	r2, r3
 8009660:	d105      	bne.n	800966e <clear_lock+0x2a>
 8009662:	4a09      	ldr	r2, [pc, #36]	; (8009688 <clear_lock+0x44>)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	011b      	lsls	r3, r3, #4
 8009668:	4413      	add	r3, r2
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3301      	adds	r3, #1
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d9eb      	bls.n	8009652 <clear_lock+0xe>
	}
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	20004a64 	.word	0x20004a64

0800968c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	78db      	ldrb	r3, [r3, #3]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d034      	beq.n	800970a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	7858      	ldrb	r0, [r3, #1]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096b0:	2301      	movs	r3, #1
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	f7ff fd40 	bl	8009138 <disk_write>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80096be:	2301      	movs	r3, #1
 80096c0:	73fb      	strb	r3, [r7, #15]
 80096c2:	e022      	b.n	800970a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d217      	bcs.n	800970a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	789b      	ldrb	r3, [r3, #2]
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	e010      	b.n	8009704 <sync_window+0x78>
					wsect += fs->fsize;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	4413      	add	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7858      	ldrb	r0, [r3, #1]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096f6:	2301      	movs	r3, #1
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	f7ff fd1d 	bl	8009138 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	3b01      	subs	r3, #1
 8009702:	613b      	str	r3, [r7, #16]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d8eb      	bhi.n	80096e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	429a      	cmp	r2, r3
 800972a:	d01b      	beq.n	8009764 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ffad 	bl	800968c <sync_window>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d113      	bne.n	8009764 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	7858      	ldrb	r0, [r3, #1]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009746:	2301      	movs	r3, #1
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	f7ff fcd5 	bl	80090f8 <disk_read>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009758:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800975a:	2301      	movs	r3, #1
 800975c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff ff87 	bl	800968c <sync_window>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d158      	bne.n	800983a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b03      	cmp	r3, #3
 800978e:	d148      	bne.n	8009822 <sync_fs+0xb2>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	791b      	ldrb	r3, [r3, #4]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d144      	bne.n	8009822 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3330      	adds	r3, #48	; 0x30
 800979c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097a0:	2100      	movs	r1, #0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff fda9 	bl	80092fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3330      	adds	r3, #48	; 0x30
 80097ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff fd38 	bl	800922a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3330      	adds	r3, #48	; 0x30
 80097be:	4921      	ldr	r1, [pc, #132]	; (8009844 <sync_fs+0xd4>)
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff fd4d 	bl	8009260 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3330      	adds	r3, #48	; 0x30
 80097ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097ce:	491e      	ldr	r1, [pc, #120]	; (8009848 <sync_fs+0xd8>)
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fd45 	bl	8009260 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3330      	adds	r3, #48	; 0x30
 80097da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	4619      	mov	r1, r3
 80097e4:	4610      	mov	r0, r2
 80097e6:	f7ff fd3b 	bl	8009260 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3330      	adds	r3, #48	; 0x30
 80097ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7ff fd31 	bl	8009260 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	7858      	ldrb	r0, [r3, #1]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009816:	2301      	movs	r3, #1
 8009818:	f7ff fc8e 	bl	8009138 <disk_write>
			fs->fsi_flag = 0;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2200      	movs	r2, #0
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff fca4 	bl	8009178 <disk_ioctl>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <sync_fs+0xca>
 8009836:	2301      	movs	r3, #1
 8009838:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	41615252 	.word	0x41615252
 8009848:	61417272 	.word	0x61417272

0800984c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	3b02      	subs	r3, #2
 800985a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	3b02      	subs	r3, #2
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d301      	bcc.n	800986c <clust2sect+0x20>
 8009868:	2300      	movs	r3, #0
 800986a:	e008      	b.n	800987e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	895b      	ldrh	r3, [r3, #10]
 8009870:	461a      	mov	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	fb03 f202 	mul.w	r2, r3, r2
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987c:	4413      	add	r3, r2
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d904      	bls.n	80098aa <get_fat+0x20>
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d302      	bcc.n	80098b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	e08f      	b.n	80099d0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80098b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d062      	beq.n	8009984 <get_fat+0xfa>
 80098be:	2b03      	cmp	r3, #3
 80098c0:	dc7c      	bgt.n	80099bc <get_fat+0x132>
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d002      	beq.n	80098cc <get_fat+0x42>
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d042      	beq.n	8009950 <get_fat+0xc6>
 80098ca:	e077      	b.n	80099bc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6a1a      	ldr	r2, [r3, #32]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	0a5b      	lsrs	r3, r3, #9
 80098e2:	4413      	add	r3, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	6938      	ldr	r0, [r7, #16]
 80098e8:	f7ff ff14 	bl	8009714 <move_window>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d167      	bne.n	80099c2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	60fa      	str	r2, [r7, #12]
 80098f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4413      	add	r3, r2
 8009900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009904:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	6a1a      	ldr	r2, [r3, #32]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	0a5b      	lsrs	r3, r3, #9
 800990e:	4413      	add	r3, r2
 8009910:	4619      	mov	r1, r3
 8009912:	6938      	ldr	r0, [r7, #16]
 8009914:	f7ff fefe 	bl	8009714 <move_window>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d153      	bne.n	80099c6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	461a      	mov	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4313      	orrs	r3, r2
 8009934:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <get_fat+0xbc>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	091b      	lsrs	r3, r3, #4
 8009944:	e002      	b.n	800994c <get_fat+0xc2>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800994c:	617b      	str	r3, [r7, #20]
			break;
 800994e:	e03f      	b.n	80099d0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6a1a      	ldr	r2, [r3, #32]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	0a1b      	lsrs	r3, r3, #8
 8009958:	4413      	add	r3, r2
 800995a:	4619      	mov	r1, r3
 800995c:	6938      	ldr	r0, [r7, #16]
 800995e:	f7ff fed9 	bl	8009714 <move_window>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d130      	bne.n	80099ca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009976:	4413      	add	r3, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fc1b 	bl	80091b4 <ld_word>
 800997e:	4603      	mov	r3, r0
 8009980:	617b      	str	r3, [r7, #20]
			break;
 8009982:	e025      	b.n	80099d0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	09db      	lsrs	r3, r3, #7
 800998c:	4413      	add	r3, r2
 800998e:	4619      	mov	r1, r3
 8009990:	6938      	ldr	r0, [r7, #16]
 8009992:	f7ff febf 	bl	8009714 <move_window>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d118      	bne.n	80099ce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80099aa:	4413      	add	r3, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff fc19 	bl	80091e4 <ld_dword>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099b8:	617b      	str	r3, [r7, #20]
			break;
 80099ba:	e009      	b.n	80099d0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e006      	b.n	80099d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099c2:	bf00      	nop
 80099c4:	e004      	b.n	80099d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099c6:	bf00      	nop
 80099c8:	e002      	b.n	80099d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099ce:	bf00      	nop
		}
	}

	return val;
 80099d0:	697b      	ldr	r3, [r7, #20]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80099da:	b590      	push	{r4, r7, lr}
 80099dc:	b089      	sub	sp, #36	; 0x24
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80099e6:	2302      	movs	r3, #2
 80099e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	f240 80d2 	bls.w	8009b96 <put_fat+0x1bc>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	f080 80cc 	bcs.w	8009b96 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	f000 8096 	beq.w	8009b34 <put_fat+0x15a>
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	f300 80cd 	bgt.w	8009ba8 <put_fat+0x1ce>
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d002      	beq.n	8009a18 <put_fat+0x3e>
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d06e      	beq.n	8009af4 <put_fat+0x11a>
 8009a16:	e0c7      	b.n	8009ba8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	4413      	add	r3, r2
 8009a24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a1a      	ldr	r2, [r3, #32]
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	0a5b      	lsrs	r3, r3, #9
 8009a2e:	4413      	add	r3, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7ff fe6e 	bl	8009714 <move_window>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a3c:	7ffb      	ldrb	r3, [r7, #31]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f040 80ab 	bne.w	8009b9a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	1c59      	adds	r1, r3, #1
 8009a4e:	61b9      	str	r1, [r7, #24]
 8009a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a54:	4413      	add	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00d      	beq.n	8009a7e <put_fat+0xa4>
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b25b      	sxtb	r3, r3
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	b25a      	sxtb	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	b25b      	sxtb	r3, r3
 8009a76:	4313      	orrs	r3, r2
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	e001      	b.n	8009a82 <put_fat+0xa8>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a1a      	ldr	r2, [r3, #32]
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	0a5b      	lsrs	r3, r3, #9
 8009a94:	4413      	add	r3, r2
 8009a96:	4619      	mov	r1, r3
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff fe3b 	bl	8009714 <move_window>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009aa2:	7ffb      	ldrb	r3, [r7, #31]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d17a      	bne.n	8009b9e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab4:	4413      	add	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <put_fat+0xf0>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	091b      	lsrs	r3, r3, #4
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	e00e      	b.n	8009ae8 <put_fat+0x10e>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b25b      	sxtb	r3, r3
 8009ad0:	f023 030f 	bic.w	r3, r3, #15
 8009ad4:	b25a      	sxtb	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	0a1b      	lsrs	r3, r3, #8
 8009ada:	b25b      	sxtb	r3, r3
 8009adc:	f003 030f 	and.w	r3, r3, #15
 8009ae0:	b25b      	sxtb	r3, r3
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	b25b      	sxtb	r3, r3
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	70da      	strb	r2, [r3, #3]
			break;
 8009af2:	e059      	b.n	8009ba8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	4413      	add	r3, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fe07 	bl	8009714 <move_window>
 8009b06:	4603      	mov	r3, r0
 8009b08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b0a:	7ffb      	ldrb	r3, [r7, #31]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d148      	bne.n	8009ba2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009b1e:	4413      	add	r3, r2
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	b292      	uxth	r2, r2
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fb7f 	bl	800922a <st_word>
			fs->wflag = 1;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	70da      	strb	r2, [r3, #3]
			break;
 8009b32:	e039      	b.n	8009ba8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1a      	ldr	r2, [r3, #32]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	09db      	lsrs	r3, r3, #7
 8009b3c:	4413      	add	r3, r2
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fde7 	bl	8009714 <move_window>
 8009b46:	4603      	mov	r3, r0
 8009b48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b4a:	7ffb      	ldrb	r3, [r7, #31]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d12a      	bne.n	8009ba6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b64:	4413      	add	r3, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff fb3c 	bl	80091e4 <ld_dword>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b72:	4323      	orrs	r3, r4
 8009b74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b84:	4413      	add	r3, r2
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff fb69 	bl	8009260 <st_dword>
			fs->wflag = 1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	70da      	strb	r2, [r3, #3]
			break;
 8009b94:	e008      	b.n	8009ba8 <put_fat+0x1ce>
		}
	}
 8009b96:	bf00      	nop
 8009b98:	e006      	b.n	8009ba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b9a:	bf00      	nop
 8009b9c:	e004      	b.n	8009ba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b9e:	bf00      	nop
 8009ba0:	e002      	b.n	8009ba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009ba2:	bf00      	nop
 8009ba4:	e000      	b.n	8009ba8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009ba6:	bf00      	nop
	return res;
 8009ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3724      	adds	r7, #36	; 0x24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd90      	pop	{r4, r7, pc}

08009bb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b088      	sub	sp, #32
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d904      	bls.n	8009bd8 <remove_chain+0x26>
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d301      	bcc.n	8009bdc <remove_chain+0x2a>
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e04b      	b.n	8009c74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00c      	beq.n	8009bfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	69b8      	ldr	r0, [r7, #24]
 8009bea:	f7ff fef6 	bl	80099da <put_fat>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009bf2:	7ffb      	ldrb	r3, [r7, #31]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <remove_chain+0x4a>
 8009bf8:	7ffb      	ldrb	r3, [r7, #31]
 8009bfa:	e03b      	b.n	8009c74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff fe43 	bl	800988a <get_fat>
 8009c04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d031      	beq.n	8009c70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <remove_chain+0x64>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e02e      	b.n	8009c74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c1c:	d101      	bne.n	8009c22 <remove_chain+0x70>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e028      	b.n	8009c74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c22:	2200      	movs	r2, #0
 8009c24:	68b9      	ldr	r1, [r7, #8]
 8009c26:	69b8      	ldr	r0, [r7, #24]
 8009c28:	f7ff fed7 	bl	80099da <put_fat>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c30:	7ffb      	ldrb	r3, [r7, #31]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <remove_chain+0x88>
 8009c36:	7ffb      	ldrb	r3, [r7, #31]
 8009c38:	e01c      	b.n	8009c74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	3b02      	subs	r3, #2
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d20b      	bcs.n	8009c60 <remove_chain+0xae>
			fs->free_clst++;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	791b      	ldrb	r3, [r3, #4]
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d3c6      	bcc.n	8009bfc <remove_chain+0x4a>
 8009c6e:	e000      	b.n	8009c72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10d      	bne.n	8009cae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <create_chain+0x2c>
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d31b      	bcc.n	8009ce0 <create_chain+0x64>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	61bb      	str	r3, [r7, #24]
 8009cac:	e018      	b.n	8009ce0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fdea 	bl	800988a <get_fat>
 8009cb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d801      	bhi.n	8009cc2 <create_chain+0x46>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e070      	b.n	8009da4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cc8:	d101      	bne.n	8009cce <create_chain+0x52>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	e06a      	b.n	8009da4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d201      	bcs.n	8009cdc <create_chain+0x60>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	e063      	b.n	8009da4 <create_chain+0x128>
		scl = clst;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d307      	bcc.n	8009d04 <create_chain+0x88>
				ncl = 2;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d901      	bls.n	8009d04 <create_chain+0x88>
 8009d00:	2300      	movs	r3, #0
 8009d02:	e04f      	b.n	8009da4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009d04:	69f9      	ldr	r1, [r7, #28]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fdbf 	bl	800988a <get_fat>
 8009d0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00e      	beq.n	8009d32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d003      	beq.n	8009d22 <create_chain+0xa6>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d20:	d101      	bne.n	8009d26 <create_chain+0xaa>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	e03e      	b.n	8009da4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d1da      	bne.n	8009ce4 <create_chain+0x68>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e038      	b.n	8009da4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009d32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d38:	69f9      	ldr	r1, [r7, #28]
 8009d3a:	6938      	ldr	r0, [r7, #16]
 8009d3c:	f7ff fe4d 	bl	80099da <put_fat>
 8009d40:	4603      	mov	r3, r0
 8009d42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d109      	bne.n	8009d5e <create_chain+0xe2>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d006      	beq.n	8009d5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d50:	69fa      	ldr	r2, [r7, #28]
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6938      	ldr	r0, [r7, #16]
 8009d56:	f7ff fe40 	bl	80099da <put_fat>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d116      	bne.n	8009d92 <create_chain+0x116>
		fs->last_clst = ncl;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	3b02      	subs	r3, #2
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d804      	bhi.n	8009d82 <create_chain+0x106>
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	1e5a      	subs	r2, r3, #1
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	791b      	ldrb	r3, [r3, #4]
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	711a      	strb	r2, [r3, #4]
 8009d90:	e007      	b.n	8009da2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d102      	bne.n	8009d9e <create_chain+0x122>
 8009d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d9c:	e000      	b.n	8009da0 <create_chain+0x124>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009da2:	69fb      	ldr	r3, [r7, #28]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	0a5b      	lsrs	r3, r3, #9
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	8952      	ldrh	r2, [r2, #10]
 8009dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	613a      	str	r2, [r7, #16]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <clmt_clust+0x3a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	e010      	b.n	8009e08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d307      	bcc.n	8009dfe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dfc:	e7e9      	b.n	8009dd2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009dfe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	4413      	add	r3, r2
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e2a:	d204      	bcs.n	8009e36 <dir_sdi+0x22>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	f003 031f 	and.w	r3, r3, #31
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009e36:	2302      	movs	r3, #2
 8009e38:	e063      	b.n	8009f02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <dir_sdi+0x46>
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d902      	bls.n	8009e5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10c      	bne.n	8009e7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	095b      	lsrs	r3, r3, #5
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	8912      	ldrh	r2, [r2, #8]
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d301      	bcc.n	8009e70 <dir_sdi+0x5c>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e048      	b.n	8009f02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	61da      	str	r2, [r3, #28]
 8009e78:	e029      	b.n	8009ece <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	895b      	ldrh	r3, [r3, #10]
 8009e7e:	025b      	lsls	r3, r3, #9
 8009e80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e82:	e019      	b.n	8009eb8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6979      	ldr	r1, [r7, #20]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff fcfe 	bl	800988a <get_fat>
 8009e8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e96:	d101      	bne.n	8009e9c <dir_sdi+0x88>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e032      	b.n	8009f02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d904      	bls.n	8009eac <dir_sdi+0x98>
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d301      	bcc.n	8009eb0 <dir_sdi+0x9c>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e028      	b.n	8009f02 <dir_sdi+0xee>
			ofs -= csz;
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d2e1      	bcs.n	8009e84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009ec0:	6979      	ldr	r1, [r7, #20]
 8009ec2:	6938      	ldr	r0, [r7, #16]
 8009ec4:	f7ff fcc2 	bl	800984c <clust2sect>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <dir_sdi+0xcc>
 8009edc:	2302      	movs	r3, #2
 8009ede:	e010      	b.n	8009f02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	441a      	add	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efa:	441a      	add	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	3320      	adds	r3, #32
 8009f20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <dir_next+0x28>
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f30:	d301      	bcc.n	8009f36 <dir_next+0x2c>
 8009f32:	2304      	movs	r3, #4
 8009f34:	e0aa      	b.n	800a08c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f040 8098 	bne.w	800a072 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	8912      	ldrh	r2, [r2, #8]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	f0c0 8088 	bcc.w	800a072 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	61da      	str	r2, [r3, #28]
 8009f68:	2304      	movs	r3, #4
 8009f6a:	e08f      	b.n	800a08c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	0a5b      	lsrs	r3, r3, #9
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	8952      	ldrh	r2, [r2, #10]
 8009f74:	3a01      	subs	r2, #1
 8009f76:	4013      	ands	r3, r2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d17a      	bne.n	800a072 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f7ff fc80 	bl	800988a <get_fat>
 8009f8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d801      	bhi.n	8009f96 <dir_next+0x8c>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e07a      	b.n	800a08c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f9c:	d101      	bne.n	8009fa2 <dir_next+0x98>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e074      	b.n	800a08c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d358      	bcc.n	800a05e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d104      	bne.n	8009fbc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	61da      	str	r2, [r3, #28]
 8009fb8:	2304      	movs	r3, #4
 8009fba:	e067      	b.n	800a08c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f7ff fe59 	bl	8009c7c <create_chain>
 8009fca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <dir_next+0xcc>
 8009fd2:	2307      	movs	r3, #7
 8009fd4:	e05a      	b.n	800a08c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d101      	bne.n	8009fe0 <dir_next+0xd6>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e055      	b.n	800a08c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fe6:	d101      	bne.n	8009fec <dir_next+0xe2>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e04f      	b.n	800a08c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff fb4d 	bl	800968c <sync_window>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <dir_next+0xf2>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e047      	b.n	800a08c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3330      	adds	r3, #48	; 0x30
 800a000:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff f977 	bl	80092fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a00c:	2300      	movs	r3, #0
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	6979      	ldr	r1, [r7, #20]
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff fc1a 	bl	800984c <clust2sect>
 800a018:	4602      	mov	r2, r0
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a01e:	e012      	b.n	800a046 <dir_next+0x13c>
						fs->wflag = 1;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fb30 	bl	800968c <sync_window>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <dir_next+0x12c>
 800a032:	2301      	movs	r3, #1
 800a034:	e02a      	b.n	800a08c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3301      	adds	r3, #1
 800a03a:	613b      	str	r3, [r7, #16]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	62da      	str	r2, [r3, #44]	; 0x2c
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	895b      	ldrh	r3, [r3, #10]
 800a04a:	461a      	mov	r2, r3
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4293      	cmp	r3, r2
 800a050:	d3e6      	bcc.n	800a020 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	1ad2      	subs	r2, r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a064:	6979      	ldr	r1, [r7, #20]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff fbf0 	bl	800984c <clust2sect>
 800a06c:	4602      	mov	r2, r0
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff feb4 	bl	8009e14 <dir_sdi>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d12b      	bne.n	800a10e <dir_alloc+0x7a>
		n = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff fb27 	bl	8009714 <move_window>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d11d      	bne.n	800a10c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2be5      	cmp	r3, #229	; 0xe5
 800a0d8:	d004      	beq.n	800a0e4 <dir_alloc+0x50>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d102      	bne.n	800a0f8 <dir_alloc+0x64>
 800a0f2:	e00c      	b.n	800a10e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff ff05 	bl	8009f0a <dir_next>
 800a100:	4603      	mov	r3, r0
 800a102:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0d7      	beq.n	800a0ba <dir_alloc+0x26>
 800a10a:	e000      	b.n	800a10e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a10c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	2b04      	cmp	r3, #4
 800a112:	d101      	bne.n	800a118 <dir_alloc+0x84>
 800a114:	2307      	movs	r3, #7
 800a116:	75fb      	strb	r3, [r7, #23]
	return res;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	331a      	adds	r3, #26
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff f83f 	bl	80091b4 <ld_word>
 800a136:	4603      	mov	r3, r0
 800a138:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d109      	bne.n	800a156 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	3314      	adds	r3, #20
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff f834 	bl	80091b4 <ld_word>
 800a14c:	4603      	mov	r3, r0
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a156:	68fb      	ldr	r3, [r7, #12]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	331a      	adds	r3, #26
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	b292      	uxth	r2, r2
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff f857 	bl	800922a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d109      	bne.n	800a198 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f103 0214 	add.w	r2, r3, #20
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	0c1b      	lsrs	r3, r3, #16
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7ff f849 	bl	800922a <st_word>
	}
}
 800a198:	bf00      	nop
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fe2f 	bl	8009e14 <dir_sdi>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <dir_find+0x24>
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	e03e      	b.n	800a242 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6938      	ldr	r0, [r7, #16]
 800a1cc:	f7ff faa2 	bl	8009714 <move_window>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d12f      	bne.n	800a23a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <dir_find+0x4e>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	75fb      	strb	r3, [r7, #23]
 800a1ec:	e028      	b.n	800a240 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	330b      	adds	r3, #11
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	330b      	adds	r3, #11
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	f003 0308 	and.w	r3, r3, #8
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10a      	bne.n	800a226 <dir_find+0x86>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a18      	ldr	r0, [r3, #32]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3324      	adds	r3, #36	; 0x24
 800a218:	220b      	movs	r2, #11
 800a21a:	4619      	mov	r1, r3
 800a21c:	f7ff f888 	bl	8009330 <mem_cmp>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a226:	2100      	movs	r1, #0
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fe6e 	bl	8009f0a <dir_next>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0c5      	beq.n	800a1c4 <dir_find+0x24>
 800a238:	e002      	b.n	800a240 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a23a:	bf00      	nop
 800a23c:	e000      	b.n	800a240 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a23e:	bf00      	nop

	return res;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a258:	2101      	movs	r1, #1
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff ff1a 	bl	800a094 <dir_alloc>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d11c      	bne.n	800a2a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	4619      	mov	r1, r3
 800a270:	68b8      	ldr	r0, [r7, #8]
 800a272:	f7ff fa4f 	bl	8009714 <move_window>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d111      	bne.n	800a2a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	2220      	movs	r2, #32
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7ff f836 	bl	80092fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a18      	ldr	r0, [r3, #32]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3324      	adds	r3, #36	; 0x24
 800a296:	220b      	movs	r2, #11
 800a298:	4619      	mov	r1, r3
 800a29a:	f7ff f80d 	bl	80092b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3324      	adds	r3, #36	; 0x24
 800a2c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a2c6:	220b      	movs	r2, #11
 800a2c8:	2120      	movs	r1, #32
 800a2ca:	68b8      	ldr	r0, [r7, #8]
 800a2cc:	f7ff f815 	bl	80092fa <mem_set>
	si = i = 0; ni = 8;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	61fb      	str	r3, [r7, #28]
 800a2d8:	2308      	movs	r3, #8
 800a2da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	61fa      	str	r2, [r7, #28]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2ea:	7efb      	ldrb	r3, [r7, #27]
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d94e      	bls.n	800a38e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a2f0:	7efb      	ldrb	r3, [r7, #27]
 800a2f2:	2b2f      	cmp	r3, #47	; 0x2f
 800a2f4:	d006      	beq.n	800a304 <create_name+0x54>
 800a2f6:	7efb      	ldrb	r3, [r7, #27]
 800a2f8:	2b5c      	cmp	r3, #92	; 0x5c
 800a2fa:	d110      	bne.n	800a31e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a2fc:	e002      	b.n	800a304 <create_name+0x54>
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	3301      	adds	r3, #1
 800a302:	61fb      	str	r3, [r7, #28]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	4413      	add	r3, r2
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b2f      	cmp	r3, #47	; 0x2f
 800a30e:	d0f6      	beq.n	800a2fe <create_name+0x4e>
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	4413      	add	r3, r2
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b5c      	cmp	r3, #92	; 0x5c
 800a31a:	d0f0      	beq.n	800a2fe <create_name+0x4e>
			break;
 800a31c:	e038      	b.n	800a390 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a31e:	7efb      	ldrb	r3, [r7, #27]
 800a320:	2b2e      	cmp	r3, #46	; 0x2e
 800a322:	d003      	beq.n	800a32c <create_name+0x7c>
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d30c      	bcc.n	800a346 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b0b      	cmp	r3, #11
 800a330:	d002      	beq.n	800a338 <create_name+0x88>
 800a332:	7efb      	ldrb	r3, [r7, #27]
 800a334:	2b2e      	cmp	r3, #46	; 0x2e
 800a336:	d001      	beq.n	800a33c <create_name+0x8c>
 800a338:	2306      	movs	r3, #6
 800a33a:	e044      	b.n	800a3c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a33c:	2308      	movs	r3, #8
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	230b      	movs	r3, #11
 800a342:	617b      	str	r3, [r7, #20]
			continue;
 800a344:	e022      	b.n	800a38c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a346:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	da04      	bge.n	800a358 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a34e:	7efb      	ldrb	r3, [r7, #27]
 800a350:	3b80      	subs	r3, #128	; 0x80
 800a352:	4a1f      	ldr	r2, [pc, #124]	; (800a3d0 <create_name+0x120>)
 800a354:	5cd3      	ldrb	r3, [r2, r3]
 800a356:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a358:	7efb      	ldrb	r3, [r7, #27]
 800a35a:	4619      	mov	r1, r3
 800a35c:	481d      	ldr	r0, [pc, #116]	; (800a3d4 <create_name+0x124>)
 800a35e:	f7ff f80e 	bl	800937e <chk_chr>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <create_name+0xbc>
 800a368:	2306      	movs	r3, #6
 800a36a:	e02c      	b.n	800a3c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a36c:	7efb      	ldrb	r3, [r7, #27]
 800a36e:	2b60      	cmp	r3, #96	; 0x60
 800a370:	d905      	bls.n	800a37e <create_name+0xce>
 800a372:	7efb      	ldrb	r3, [r7, #27]
 800a374:	2b7a      	cmp	r3, #122	; 0x7a
 800a376:	d802      	bhi.n	800a37e <create_name+0xce>
 800a378:	7efb      	ldrb	r3, [r7, #27]
 800a37a:	3b20      	subs	r3, #32
 800a37c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	613a      	str	r2, [r7, #16]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	4413      	add	r3, r2
 800a388:	7efa      	ldrb	r2, [r7, #27]
 800a38a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a38c:	e7a6      	b.n	800a2dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a38e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	441a      	add	r2, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <create_name+0xf4>
 800a3a0:	2306      	movs	r3, #6
 800a3a2:	e010      	b.n	800a3c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2be5      	cmp	r3, #229	; 0xe5
 800a3aa:	d102      	bne.n	800a3b2 <create_name+0x102>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2205      	movs	r2, #5
 800a3b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a3b2:	7efb      	ldrb	r3, [r7, #27]
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d801      	bhi.n	800a3bc <create_name+0x10c>
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	e000      	b.n	800a3be <create_name+0x10e>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	330b      	adds	r3, #11
 800a3c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a3c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800e950 	.word	0x0800e950
 800a3d4:	0800e8b4 	.word	0x0800e8b4

0800a3d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3ec:	e002      	b.n	800a3f4 <follow_path+0x1c>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b2f      	cmp	r3, #47	; 0x2f
 800a3fa:	d0f8      	beq.n	800a3ee <follow_path+0x16>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b5c      	cmp	r3, #92	; 0x5c
 800a402:	d0f4      	beq.n	800a3ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2200      	movs	r2, #0
 800a408:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b1f      	cmp	r3, #31
 800a410:	d80a      	bhi.n	800a428 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2280      	movs	r2, #128	; 0x80
 800a416:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff fcf9 	bl	8009e14 <dir_sdi>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]
 800a426:	e043      	b.n	800a4b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a428:	463b      	mov	r3, r7
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff ff3f 	bl	800a2b0 <create_name>
 800a432:	4603      	mov	r3, r0
 800a434:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d134      	bne.n	800a4a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff feaf 	bl	800a1a0 <dir_find>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a44c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	2b04      	cmp	r3, #4
 800a458:	d127      	bne.n	800a4aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a45a:	7afb      	ldrb	r3, [r7, #11]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d122      	bne.n	800a4aa <follow_path+0xd2>
 800a464:	2305      	movs	r3, #5
 800a466:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a468:	e01f      	b.n	800a4aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a46a:	7afb      	ldrb	r3, [r7, #11]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11c      	bne.n	800a4ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	799b      	ldrb	r3, [r3, #6]
 800a478:	f003 0310 	and.w	r3, r3, #16
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a480:	2305      	movs	r3, #5
 800a482:	75fb      	strb	r3, [r7, #23]
 800a484:	e014      	b.n	800a4b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a494:	4413      	add	r3, r2
 800a496:	4619      	mov	r1, r3
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff fe42 	bl	800a122 <ld_clust>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4a4:	e7c0      	b.n	800a428 <follow_path+0x50>
			if (res != FR_OK) break;
 800a4a6:	bf00      	nop
 800a4a8:	e002      	b.n	800a4b0 <follow_path+0xd8>
				break;
 800a4aa:	bf00      	nop
 800a4ac:	e000      	b.n	800a4b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4ae:	bf00      	nop
			}
		}
	}

	return res;
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b087      	sub	sp, #28
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d031      	beq.n	800a534 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	e002      	b.n	800a4de <get_ldnumber+0x24>
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d903      	bls.n	800a4ee <get_ldnumber+0x34>
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b3a      	cmp	r3, #58	; 0x3a
 800a4ec:	d1f4      	bne.n	800a4d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b3a      	cmp	r3, #58	; 0x3a
 800a4f4:	d11c      	bne.n	800a530 <get_ldnumber+0x76>
			tp = *path;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	60fa      	str	r2, [r7, #12]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	3b30      	subs	r3, #48	; 0x30
 800a506:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b09      	cmp	r3, #9
 800a50c:	d80e      	bhi.n	800a52c <get_ldnumber+0x72>
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	429a      	cmp	r2, r3
 800a514:	d10a      	bne.n	800a52c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d107      	bne.n	800a52c <get_ldnumber+0x72>
					vol = (int)i;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	3301      	adds	r3, #1
 800a524:	617b      	str	r3, [r7, #20]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	e002      	b.n	800a536 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a530:	2300      	movs	r3, #0
 800a532:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a534:	693b      	ldr	r3, [r7, #16]
}
 800a536:	4618      	mov	r0, r3
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
	...

0800a544 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	70da      	strb	r2, [r3, #3]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a55a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff f8d8 	bl	8009714 <move_window>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <check_fs+0x2a>
 800a56a:	2304      	movs	r3, #4
 800a56c:	e038      	b.n	800a5e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3330      	adds	r3, #48	; 0x30
 800a572:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fe1c 	bl	80091b4 <ld_word>
 800a57c:	4603      	mov	r3, r0
 800a57e:	461a      	mov	r2, r3
 800a580:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a584:	429a      	cmp	r2, r3
 800a586:	d001      	beq.n	800a58c <check_fs+0x48>
 800a588:	2303      	movs	r3, #3
 800a58a:	e029      	b.n	800a5e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a592:	2be9      	cmp	r3, #233	; 0xe9
 800a594:	d009      	beq.n	800a5aa <check_fs+0x66>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a59c:	2beb      	cmp	r3, #235	; 0xeb
 800a59e:	d11e      	bne.n	800a5de <check_fs+0x9a>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a5a6:	2b90      	cmp	r3, #144	; 0x90
 800a5a8:	d119      	bne.n	800a5de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3330      	adds	r3, #48	; 0x30
 800a5ae:	3336      	adds	r3, #54	; 0x36
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fe17 	bl	80091e4 <ld_dword>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5bc:	4a0a      	ldr	r2, [pc, #40]	; (800a5e8 <check_fs+0xa4>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d101      	bne.n	800a5c6 <check_fs+0x82>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	e00c      	b.n	800a5e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3330      	adds	r3, #48	; 0x30
 800a5ca:	3352      	adds	r3, #82	; 0x52
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe fe09 	bl	80091e4 <ld_dword>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4a05      	ldr	r2, [pc, #20]	; (800a5ec <check_fs+0xa8>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d101      	bne.n	800a5de <check_fs+0x9a>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e000      	b.n	800a5e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a5de:	2302      	movs	r3, #2
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	00544146 	.word	0x00544146
 800a5ec:	33544146 	.word	0x33544146

0800a5f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b096      	sub	sp, #88	; 0x58
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f7ff ff58 	bl	800a4ba <get_ldnumber>
 800a60a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	da01      	bge.n	800a616 <find_volume+0x26>
 800a612:	230b      	movs	r3, #11
 800a614:	e22d      	b.n	800aa72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a616:	4aa1      	ldr	r2, [pc, #644]	; (800a89c <find_volume+0x2ac>)
 800a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a61e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <find_volume+0x3a>
 800a626:	230c      	movs	r3, #12
 800a628:	e223      	b.n	800aa72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	f023 0301 	bic.w	r3, r3, #1
 800a636:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01a      	beq.n	800a676 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	785b      	ldrb	r3, [r3, #1]
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe fd17 	bl	8009078 <disk_status>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10c      	bne.n	800a676 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d007      	beq.n	800a672 <find_volume+0x82>
 800a662:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a66e:	230a      	movs	r3, #10
 800a670:	e1ff      	b.n	800aa72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a672:	2300      	movs	r3, #0
 800a674:	e1fd      	b.n	800aa72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe fd0f 	bl	80090ac <disk_initialize>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e1e6      	b.n	800aa72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d007      	beq.n	800a6ba <find_volume+0xca>
 800a6aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a6b6:	230a      	movs	r3, #10
 800a6b8:	e1db      	b.n	800aa72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6c2:	f7ff ff3f 	bl	800a544 <check_fs>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d149      	bne.n	800a768 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d8:	e01e      	b.n	800a718 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e2:	011b      	lsls	r3, r3, #4
 800a6e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a6e8:	4413      	add	r3, r2
 800a6ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d006      	beq.n	800a704 <find_volume+0x114>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fd72 	bl	80091e4 <ld_dword>
 800a700:	4602      	mov	r2, r0
 800a702:	e000      	b.n	800a706 <find_volume+0x116>
 800a704:	2200      	movs	r2, #0
 800a706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	3358      	adds	r3, #88	; 0x58
 800a70c:	443b      	add	r3, r7
 800a70e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a714:	3301      	adds	r3, #1
 800a716:	643b      	str	r3, [r7, #64]	; 0x40
 800a718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d9dd      	bls.n	800a6da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a71e:	2300      	movs	r3, #0
 800a720:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <find_volume+0x13e>
 800a728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a72a:	3b01      	subs	r3, #1
 800a72c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	3358      	adds	r3, #88	; 0x58
 800a734:	443b      	add	r3, r7
 800a736:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a73a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <find_volume+0x15e>
 800a742:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a744:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a746:	f7ff fefd 	bl	800a544 <check_fs>
 800a74a:	4603      	mov	r3, r0
 800a74c:	e000      	b.n	800a750 <find_volume+0x160>
 800a74e:	2303      	movs	r3, #3
 800a750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d905      	bls.n	800a768 <find_volume+0x178>
 800a75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75e:	3301      	adds	r3, #1
 800a760:	643b      	str	r3, [r7, #64]	; 0x40
 800a762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a764:	2b03      	cmp	r3, #3
 800a766:	d9e2      	bls.n	800a72e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d101      	bne.n	800a774 <find_volume+0x184>
 800a770:	2301      	movs	r3, #1
 800a772:	e17e      	b.n	800aa72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d901      	bls.n	800a780 <find_volume+0x190>
 800a77c:	230d      	movs	r3, #13
 800a77e:	e178      	b.n	800aa72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	3330      	adds	r3, #48	; 0x30
 800a784:	330b      	adds	r3, #11
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fd14 	bl	80091b4 <ld_word>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a792:	d001      	beq.n	800a798 <find_volume+0x1a8>
 800a794:	230d      	movs	r3, #13
 800a796:	e16c      	b.n	800aa72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	3330      	adds	r3, #48	; 0x30
 800a79c:	3316      	adds	r3, #22
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fd08 	bl	80091b4 <ld_word>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <find_volume+0x1cc>
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	3330      	adds	r3, #48	; 0x30
 800a7b2:	3324      	adds	r3, #36	; 0x24
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe fd15 	bl	80091e4 <ld_dword>
 800a7ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	789b      	ldrb	r3, [r3, #2]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d005      	beq.n	800a7e0 <find_volume+0x1f0>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	789b      	ldrb	r3, [r3, #2]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d001      	beq.n	800a7e0 <find_volume+0x1f0>
 800a7dc:	230d      	movs	r3, #13
 800a7de:	e148      	b.n	800aa72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	789b      	ldrb	r3, [r3, #2]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fc:	895b      	ldrh	r3, [r3, #10]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d008      	beq.n	800a814 <find_volume+0x224>
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	895b      	ldrh	r3, [r3, #10]
 800a806:	461a      	mov	r2, r3
 800a808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80a:	895b      	ldrh	r3, [r3, #10]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	4013      	ands	r3, r2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <find_volume+0x228>
 800a814:	230d      	movs	r3, #13
 800a816:	e12c      	b.n	800aa72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	3330      	adds	r3, #48	; 0x30
 800a81c:	3311      	adds	r3, #17
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fcc8 	bl	80091b4 <ld_word>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	891b      	ldrh	r3, [r3, #8]
 800a830:	f003 030f 	and.w	r3, r3, #15
 800a834:	b29b      	uxth	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <find_volume+0x24e>
 800a83a:	230d      	movs	r3, #13
 800a83c:	e119      	b.n	800aa72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	3330      	adds	r3, #48	; 0x30
 800a842:	3313      	adds	r3, #19
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fcb5 	bl	80091b4 <ld_word>
 800a84a:	4603      	mov	r3, r0
 800a84c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <find_volume+0x272>
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	3330      	adds	r3, #48	; 0x30
 800a858:	3320      	adds	r3, #32
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fcc2 	bl	80091e4 <ld_dword>
 800a860:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	3330      	adds	r3, #48	; 0x30
 800a866:	330e      	adds	r3, #14
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe fca3 	bl	80091b4 <ld_word>
 800a86e:	4603      	mov	r3, r0
 800a870:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a872:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <find_volume+0x28c>
 800a878:	230d      	movs	r3, #13
 800a87a:	e0fa      	b.n	800aa72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a87c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a880:	4413      	add	r3, r2
 800a882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a884:	8912      	ldrh	r2, [r2, #8]
 800a886:	0912      	lsrs	r2, r2, #4
 800a888:	b292      	uxth	r2, r2
 800a88a:	4413      	add	r3, r2
 800a88c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a88e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	429a      	cmp	r2, r3
 800a894:	d204      	bcs.n	800a8a0 <find_volume+0x2b0>
 800a896:	230d      	movs	r3, #13
 800a898:	e0eb      	b.n	800aa72 <find_volume+0x482>
 800a89a:	bf00      	nop
 800a89c:	20004a5c 	.word	0x20004a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8a8:	8952      	ldrh	r2, [r2, #10]
 800a8aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <find_volume+0x2ca>
 800a8b6:	230d      	movs	r3, #13
 800a8b8:	e0db      	b.n	800aa72 <find_volume+0x482>
		fmt = FS_FAT32;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d802      	bhi.n	800a8d0 <find_volume+0x2e0>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d802      	bhi.n	800a8e0 <find_volume+0x2f0>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	1c9a      	adds	r2, r3, #2
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8f2:	441a      	add	r2, r3
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a8f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	441a      	add	r2, r3
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a902:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a906:	2b03      	cmp	r3, #3
 800a908:	d11e      	bne.n	800a948 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	3330      	adds	r3, #48	; 0x30
 800a90e:	332a      	adds	r3, #42	; 0x2a
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe fc4f 	bl	80091b4 <ld_word>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <find_volume+0x330>
 800a91c:	230d      	movs	r3, #13
 800a91e:	e0a8      	b.n	800aa72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	891b      	ldrh	r3, [r3, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <find_volume+0x33c>
 800a928:	230d      	movs	r3, #13
 800a92a:	e0a2      	b.n	800aa72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	3330      	adds	r3, #48	; 0x30
 800a930:	332c      	adds	r3, #44	; 0x2c
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fc56 	bl	80091e4 <ld_dword>
 800a938:	4602      	mov	r2, r0
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	647b      	str	r3, [r7, #68]	; 0x44
 800a946:	e01f      	b.n	800a988 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	891b      	ldrh	r3, [r3, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <find_volume+0x364>
 800a950:	230d      	movs	r3, #13
 800a952:	e08e      	b.n	800aa72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	6a1a      	ldr	r2, [r3, #32]
 800a958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95a:	441a      	add	r2, r3
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a964:	2b02      	cmp	r3, #2
 800a966:	d103      	bne.n	800a970 <find_volume+0x380>
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	e00a      	b.n	800a986 <find_volume+0x396>
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	695a      	ldr	r2, [r3, #20]
 800a974:	4613      	mov	r3, r2
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	4413      	add	r3, r2
 800a97a:	085a      	lsrs	r2, r3, #1
 800a97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a986:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a992:	0a5b      	lsrs	r3, r3, #9
 800a994:	429a      	cmp	r2, r3
 800a996:	d201      	bcs.n	800a99c <find_volume+0x3ac>
 800a998:	230d      	movs	r3, #13
 800a99a:	e06a      	b.n	800aa72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9a2:	611a      	str	r2, [r3, #16]
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	2280      	movs	r2, #128	; 0x80
 800a9b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d149      	bne.n	800aa4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	3330      	adds	r3, #48	; 0x30
 800a9be:	3330      	adds	r3, #48	; 0x30
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe fbf7 	bl	80091b4 <ld_word>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d140      	bne.n	800aa4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9d4:	f7fe fe9e 	bl	8009714 <move_window>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d137      	bne.n	800aa4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	3330      	adds	r3, #48	; 0x30
 800a9e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fbe1 	bl	80091b4 <ld_word>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d127      	bne.n	800aa4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	3330      	adds	r3, #48	; 0x30
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe fbee 	bl	80091e4 <ld_dword>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	4a1c      	ldr	r2, [pc, #112]	; (800aa7c <find_volume+0x48c>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d11e      	bne.n	800aa4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa12:	3330      	adds	r3, #48	; 0x30
 800aa14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe fbe3 	bl	80091e4 <ld_dword>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4a17      	ldr	r2, [pc, #92]	; (800aa80 <find_volume+0x490>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d113      	bne.n	800aa4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	3330      	adds	r3, #48	; 0x30
 800aa2a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fbd8 	bl	80091e4 <ld_dword>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3c:	3330      	adds	r3, #48	; 0x30
 800aa3e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fbce 	bl	80091e4 <ld_dword>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa56:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <find_volume+0x494>)
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <find_volume+0x494>)
 800aa60:	801a      	strh	r2, [r3, #0]
 800aa62:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <find_volume+0x494>)
 800aa64:	881a      	ldrh	r2, [r3, #0]
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa6c:	f7fe fdea 	bl	8009644 <clear_lock>
#endif
	return FR_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3758      	adds	r7, #88	; 0x58
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	41615252 	.word	0x41615252
 800aa80:	61417272 	.word	0x61417272
 800aa84:	20004a60 	.word	0x20004a60

0800aa88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa92:	2309      	movs	r3, #9
 800aa94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01c      	beq.n	800aad6 <validate+0x4e>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d018      	beq.n	800aad6 <validate+0x4e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d013      	beq.n	800aad6 <validate+0x4e>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	889a      	ldrh	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	88db      	ldrh	r3, [r3, #6]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d10c      	bne.n	800aad6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fad8 	bl	8009078 <disk_status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <validate+0x4e>
			res = FR_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <validate+0x5a>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	e000      	b.n	800aae4 <validate+0x5c>
 800aae2:	2300      	movs	r3, #0
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	6013      	str	r3, [r2, #0]
	return res;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab06:	f107 0310 	add.w	r3, r7, #16
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff fcd5 	bl	800a4ba <get_ldnumber>
 800ab10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da01      	bge.n	800ab1c <f_mount+0x28>
 800ab18:	230b      	movs	r3, #11
 800ab1a:	e02b      	b.n	800ab74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab1c:	4a17      	ldr	r2, [pc, #92]	; (800ab7c <f_mount+0x88>)
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab2c:	69b8      	ldr	r0, [r7, #24]
 800ab2e:	f7fe fd89 	bl	8009644 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2200      	movs	r2, #0
 800ab36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	490d      	ldr	r1, [pc, #52]	; (800ab7c <f_mount+0x88>)
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <f_mount+0x66>
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d001      	beq.n	800ab5e <f_mount+0x6a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e00a      	b.n	800ab74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab5e:	f107 010c 	add.w	r1, r7, #12
 800ab62:	f107 0308 	add.w	r3, r7, #8
 800ab66:	2200      	movs	r2, #0
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff fd41 	bl	800a5f0 <find_volume>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20004a5c 	.word	0x20004a5c

0800ab80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b098      	sub	sp, #96	; 0x60
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <f_open+0x18>
 800ab94:	2309      	movs	r3, #9
 800ab96:	e1ad      	b.n	800aef4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aba0:	79fa      	ldrb	r2, [r7, #7]
 800aba2:	f107 0110 	add.w	r1, r7, #16
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff fd20 	bl	800a5f0 <find_volume>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800abb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f040 8191 	bne.w	800aee2 <f_open+0x362>
		dj.obj.fs = fs;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	f107 0314 	add.w	r3, r7, #20
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fc03 	bl	800a3d8 <follow_path>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800abd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11a      	bne.n	800ac16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800abe0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abe4:	b25b      	sxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	da03      	bge.n	800abf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800abea:	2306      	movs	r3, #6
 800abec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abf0:	e011      	b.n	800ac16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	bf14      	ite	ne
 800abfc:	2301      	movne	r3, #1
 800abfe:	2300      	moveq	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	461a      	mov	r2, r3
 800ac04:	f107 0314 	add.w	r3, r7, #20
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fbd2 	bl	80093b4 <chk_lock>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	f003 031c 	and.w	r3, r3, #28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d07f      	beq.n	800ad20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d017      	beq.n	800ac58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d10e      	bne.n	800ac4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac30:	f7fe fc1c 	bl	800946c <enq_lock>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <f_open+0xc8>
 800ac3a:	f107 0314 	add.w	r3, r7, #20
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff fb03 	bl	800a24a <dir_register>
 800ac44:	4603      	mov	r3, r0
 800ac46:	e000      	b.n	800ac4a <f_open+0xca>
 800ac48:	2312      	movs	r3, #18
 800ac4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	f043 0308 	orr.w	r3, r3, #8
 800ac54:	71fb      	strb	r3, [r7, #7]
 800ac56:	e010      	b.n	800ac7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac58:	7ebb      	ldrb	r3, [r7, #26]
 800ac5a:	f003 0311 	and.w	r3, r3, #17
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <f_open+0xea>
					res = FR_DENIED;
 800ac62:	2307      	movs	r3, #7
 800ac64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac68:	e007      	b.n	800ac7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <f_open+0xfa>
 800ac74:	2308      	movs	r3, #8
 800ac76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d168      	bne.n	800ad54 <f_open+0x1d4>
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d063      	beq.n	800ad54 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ac8c:	f7fd ffa4 	bl	8008bd8 <get_fattime>
 800ac90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	330e      	adds	r3, #14
 800ac96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fae1 	bl	8009260 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca0:	3316      	adds	r3, #22
 800aca2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fadb 	bl	8009260 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acac:	330b      	adds	r3, #11
 800acae:	2220      	movs	r2, #32
 800acb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff fa32 	bl	800a122 <ld_clust>
 800acbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acc4:	2200      	movs	r2, #0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff fa4a 	bl	800a160 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800accc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acce:	331c      	adds	r3, #28
 800acd0:	2100      	movs	r1, #0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fac4 	bl	8009260 <st_dword>
					fs->wflag = 1;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2201      	movs	r2, #1
 800acdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800acde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d037      	beq.n	800ad54 <f_open+0x1d4>
						dw = fs->winsect;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800acea:	f107 0314 	add.w	r3, r7, #20
 800acee:	2200      	movs	r2, #0
 800acf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe ff5d 	bl	8009bb2 <remove_chain>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800acfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d126      	bne.n	800ad54 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fd02 	bl	8009714 <move_window>
 800ad10:	4603      	mov	r3, r0
 800ad12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad1a:	3a01      	subs	r2, #1
 800ad1c:	60da      	str	r2, [r3, #12]
 800ad1e:	e019      	b.n	800ad54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d115      	bne.n	800ad54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ad28:	7ebb      	ldrb	r3, [r7, #26]
 800ad2a:	f003 0310 	and.w	r3, r3, #16
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ad32:	2304      	movs	r3, #4
 800ad34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad38:	e00c      	b.n	800ad54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad3a:	79fb      	ldrb	r3, [r7, #7]
 800ad3c:	f003 0302 	and.w	r3, r3, #2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d007      	beq.n	800ad54 <f_open+0x1d4>
 800ad44:	7ebb      	ldrb	r3, [r7, #26]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <f_open+0x1d4>
						res = FR_DENIED;
 800ad4e:	2307      	movs	r3, #7
 800ad50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d128      	bne.n	800adae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	f023 0301 	bic.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf14      	ite	ne
 800ad86:	2301      	movne	r3, #1
 800ad88:	2300      	moveq	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f107 0314 	add.w	r3, r7, #20
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe fb8b 	bl	80094b0 <inc_lock>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <f_open+0x22e>
 800ada8:	2302      	movs	r3, #2
 800adaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800adae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f040 8095 	bne.w	800aee2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff f9af 	bl	800a122 <ld_clust>
 800adc4:	4602      	mov	r2, r0
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800adca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adcc:	331c      	adds	r3, #28
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fa08 	bl	80091e4 <ld_dword>
 800add4:	4602      	mov	r2, r0
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	88da      	ldrh	r2, [r3, #6]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	79fa      	ldrb	r2, [r7, #7]
 800adf2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3330      	adds	r3, #48	; 0x30
 800ae0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fa72 	bl	80092fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	f003 0320 	and.w	r3, r3, #32
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d060      	beq.n	800aee2 <f_open+0x362>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d05c      	beq.n	800aee2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	895b      	ldrh	r3, [r3, #10]
 800ae34:	025b      	lsls	r3, r3, #9
 800ae36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	657b      	str	r3, [r7, #84]	; 0x54
 800ae44:	e016      	b.n	800ae74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fd1d 	bl	800988a <get_fat>
 800ae50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ae52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d802      	bhi.n	800ae5e <f_open+0x2de>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae64:	d102      	bne.n	800ae6c <f_open+0x2ec>
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	657b      	str	r3, [r7, #84]	; 0x54
 800ae74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d103      	bne.n	800ae84 <f_open+0x304>
 800ae7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d8e0      	bhi.n	800ae46 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d127      	bne.n	800aee2 <f_open+0x362>
 800ae92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d022      	beq.n	800aee2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fcd3 	bl	800984c <clust2sect>
 800aea6:	6478      	str	r0, [r7, #68]	; 0x44
 800aea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <f_open+0x336>
						res = FR_INT_ERR;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aeb4:	e015      	b.n	800aee2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aeb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb8:	0a5a      	lsrs	r2, r3, #9
 800aeba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aebc:	441a      	add	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	7858      	ldrb	r0, [r3, #1]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a1a      	ldr	r2, [r3, #32]
 800aed0:	2301      	movs	r3, #1
 800aed2:	f7fe f911 	bl	80090f8 <disk_read>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <f_open+0x362>
 800aedc:	2301      	movs	r3, #1
 800aede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <f_open+0x370>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3760      	adds	r7, #96	; 0x60
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08c      	sub	sp, #48	; 0x30
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f107 0210 	add.w	r2, r7, #16
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fdb3 	bl	800aa88 <validate>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d107      	bne.n	800af40 <f_write+0x44>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	7d5b      	ldrb	r3, [r3, #21]
 800af34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800af38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <f_write+0x4a>
 800af40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af44:	e14b      	b.n	800b1de <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	7d1b      	ldrb	r3, [r3, #20]
 800af4a:	f003 0302 	and.w	r3, r3, #2
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <f_write+0x5a>
 800af52:	2307      	movs	r3, #7
 800af54:	e143      	b.n	800b1de <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699a      	ldr	r2, [r3, #24]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	441a      	add	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	429a      	cmp	r2, r3
 800af64:	f080 812d 	bcs.w	800b1c2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	43db      	mvns	r3, r3
 800af6e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af70:	e127      	b.n	800b1c2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 80e3 	bne.w	800b146 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	0a5b      	lsrs	r3, r3, #9
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	8952      	ldrh	r2, [r2, #10]
 800af8a:	3a01      	subs	r2, #1
 800af8c:	4013      	ands	r3, r2
 800af8e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d143      	bne.n	800b01e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10c      	bne.n	800afb8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d11a      	bne.n	800afe0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2100      	movs	r1, #0
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fe64 	bl	8009c7c <create_chain>
 800afb4:	62b8      	str	r0, [r7, #40]	; 0x28
 800afb6:	e013      	b.n	800afe0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	4619      	mov	r1, r3
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7fe fef0 	bl	8009dac <clmt_clust>
 800afcc:	62b8      	str	r0, [r7, #40]	; 0x28
 800afce:	e007      	b.n	800afe0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	4619      	mov	r1, r3
 800afd8:	4610      	mov	r0, r2
 800afda:	f7fe fe4f 	bl	8009c7c <create_chain>
 800afde:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 80f2 	beq.w	800b1cc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2b01      	cmp	r3, #1
 800afec:	d104      	bne.n	800aff8 <f_write+0xfc>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2202      	movs	r2, #2
 800aff2:	755a      	strb	r2, [r3, #21]
 800aff4:	2302      	movs	r3, #2
 800aff6:	e0f2      	b.n	800b1de <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800affe:	d104      	bne.n	800b00a <f_write+0x10e>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2201      	movs	r2, #1
 800b004:	755a      	strb	r2, [r3, #21]
 800b006:	2301      	movs	r3, #1
 800b008:	e0e9      	b.n	800b1de <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b00e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <f_write+0x122>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b01c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	7d1b      	ldrb	r3, [r3, #20]
 800b022:	b25b      	sxtb	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	da18      	bge.n	800b05a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	7858      	ldrb	r0, [r3, #1]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a1a      	ldr	r2, [r3, #32]
 800b036:	2301      	movs	r3, #1
 800b038:	f7fe f87e 	bl	8009138 <disk_write>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <f_write+0x150>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	755a      	strb	r2, [r3, #21]
 800b048:	2301      	movs	r3, #1
 800b04a:	e0c8      	b.n	800b1de <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	7d1b      	ldrb	r3, [r3, #20]
 800b050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b054:	b2da      	uxtb	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	4619      	mov	r1, r3
 800b062:	4610      	mov	r0, r2
 800b064:	f7fe fbf2 	bl	800984c <clust2sect>
 800b068:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d104      	bne.n	800b07a <f_write+0x17e>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2202      	movs	r2, #2
 800b074:	755a      	strb	r2, [r3, #21]
 800b076:	2302      	movs	r3, #2
 800b078:	e0b1      	b.n	800b1de <f_write+0x2e2>
			sect += csect;
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	4413      	add	r3, r2
 800b080:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	0a5b      	lsrs	r3, r3, #9
 800b086:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d03c      	beq.n	800b108 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b08e:	69ba      	ldr	r2, [r7, #24]
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	4413      	add	r3, r2
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	8952      	ldrh	r2, [r2, #10]
 800b098:	4293      	cmp	r3, r2
 800b09a:	d905      	bls.n	800b0a8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	895b      	ldrh	r3, [r3, #10]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	7858      	ldrb	r0, [r3, #1]
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	69f9      	ldr	r1, [r7, #28]
 800b0b2:	f7fe f841 	bl	8009138 <disk_write>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <f_write+0x1ca>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	755a      	strb	r2, [r3, #21]
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e08b      	b.n	800b1de <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1a      	ldr	r2, [r3, #32]
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	6a3a      	ldr	r2, [r7, #32]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d915      	bls.n	800b100 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a1a      	ldr	r2, [r3, #32]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	025b      	lsls	r3, r3, #9
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	f7fe f8e3 	bl	80092b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	7d1b      	ldrb	r3, [r3, #20]
 800b0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	025b      	lsls	r3, r3, #9
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b106:	e03f      	b.n	800b188 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d016      	beq.n	800b140 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d210      	bcs.n	800b140 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	7858      	ldrb	r0, [r3, #1]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b128:	2301      	movs	r3, #1
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	f7fd ffe4 	bl	80090f8 <disk_read>
 800b130:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	755a      	strb	r2, [r3, #21]
 800b13c:	2301      	movs	r3, #1
 800b13e:	e04e      	b.n	800b1de <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d901      	bls.n	800b160 <f_write+0x264>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	4413      	add	r3, r2
 800b170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b172:	69f9      	ldr	r1, [r7, #28]
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe f89f 	bl	80092b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	7d1b      	ldrb	r3, [r3, #20]
 800b17e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b182:	b2da      	uxtb	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b188:	69fa      	ldr	r2, [r7, #28]
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	4413      	add	r3, r2
 800b18e:	61fb      	str	r3, [r7, #28]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	699a      	ldr	r2, [r3, #24]
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	441a      	add	r2, r3
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	619a      	str	r2, [r3, #24]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	68da      	ldr	r2, [r3, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	bf38      	it	cc
 800b1a8:	461a      	movcc	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	60da      	str	r2, [r3, #12]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	441a      	add	r2, r3
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f47f aed4 	bne.w	800af72 <f_write+0x76>
 800b1ca:	e000      	b.n	800b1ce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	7d1b      	ldrb	r3, [r3, #20]
 800b1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3730      	adds	r7, #48	; 0x30
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f107 0208 	add.w	r2, r7, #8
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fc46 	bl	800aa88 <validate>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d168      	bne.n	800b2d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	7d1b      	ldrb	r3, [r3, #20]
 800b20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d062      	beq.n	800b2d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	7d1b      	ldrb	r3, [r3, #20]
 800b216:	b25b      	sxtb	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da15      	bge.n	800b248 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	7858      	ldrb	r0, [r3, #1]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1a      	ldr	r2, [r3, #32]
 800b22a:	2301      	movs	r3, #1
 800b22c:	f7fd ff84 	bl	8009138 <disk_write>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <f_sync+0x54>
 800b236:	2301      	movs	r3, #1
 800b238:	e04f      	b.n	800b2da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	7d1b      	ldrb	r3, [r3, #20]
 800b23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b242:	b2da      	uxtb	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b248:	f7fd fcc6 	bl	8008bd8 <get_fattime>
 800b24c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe fa5c 	bl	8009714 <move_window>
 800b25c:	4603      	mov	r3, r0
 800b25e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d138      	bne.n	800b2d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	330b      	adds	r3, #11
 800b270:	781a      	ldrb	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	330b      	adds	r3, #11
 800b276:	f042 0220 	orr.w	r2, r2, #32
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	461a      	mov	r2, r3
 800b288:	68f9      	ldr	r1, [r7, #12]
 800b28a:	f7fe ff69 	bl	800a160 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f103 021c 	add.w	r2, r3, #28
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7fd ffe0 	bl	8009260 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3316      	adds	r3, #22
 800b2a4:	6939      	ldr	r1, [r7, #16]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fd ffda 	bl	8009260 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3312      	adds	r3, #18
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fd ffb9 	bl	800922a <st_word>
					fs->wflag = 1;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fa55 	bl	8009770 <sync_fs>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	7d1b      	ldrb	r3, [r3, #20]
 800b2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b084      	sub	sp, #16
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff ff7b 	bl	800b1e6 <f_sync>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d118      	bne.n	800b32c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f107 0208 	add.w	r2, r7, #8
 800b300:	4611      	mov	r1, r2
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff fbc0 	bl	800aa88 <validate>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10c      	bne.n	800b32c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe f958 	bl	80095cc <dec_lock>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b096      	sub	sp, #88	; 0x58
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b33e:	f107 0108 	add.w	r1, r7, #8
 800b342:	1d3b      	adds	r3, r7, #4
 800b344:	2202      	movs	r2, #2
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff f952 	bl	800a5f0 <find_volume>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f040 80ec 	bne.w	800b538 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	f107 030c 	add.w	r3, r7, #12
 800b366:	4611      	mov	r1, r2
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff f835 	bl	800a3d8 <follow_path>
 800b36e:	4603      	mov	r3, r0
 800b370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <f_mkdir+0x4c>
 800b37c:	2308      	movs	r3, #8
 800b37e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b386:	2b04      	cmp	r3, #4
 800b388:	f040 80d6 	bne.w	800b538 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	2100      	movs	r1, #0
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fc72 	bl	8009c7c <create_chain>
 800b398:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	895b      	ldrh	r3, [r3, #10]
 800b39e:	025b      	lsls	r3, r3, #9
 800b3a0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d102      	bne.n	800b3b4 <f_mkdir+0x7e>
 800b3ae:	2307      	movs	r3, #7
 800b3b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d102      	bne.n	800b3c0 <f_mkdir+0x8a>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c6:	d102      	bne.n	800b3ce <f_mkdir+0x98>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b3ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d106      	bne.n	800b3e4 <f_mkdir+0xae>
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe f957 	bl	800968c <sync_window>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b3e4:	f7fd fbf8 	bl	8008bd8 <get_fattime>
 800b3e8:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b3ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d16a      	bne.n	800b4c8 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fa28 	bl	800984c <clust2sect>
 800b3fc:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	3330      	adds	r3, #48	; 0x30
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b404:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b408:	2100      	movs	r1, #0
 800b40a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b40c:	f7fd ff75 	bl	80092fa <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b410:	220b      	movs	r2, #11
 800b412:	2120      	movs	r1, #32
 800b414:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b416:	f7fd ff70 	bl	80092fa <mem_set>
					dir[DIR_Name] = '.';
 800b41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41c:	222e      	movs	r2, #46	; 0x2e
 800b41e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b422:	330b      	adds	r3, #11
 800b424:	2210      	movs	r2, #16
 800b426:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42a:	3316      	adds	r3, #22
 800b42c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fd ff16 	bl	8009260 <st_dword>
					st_clust(fs, dir, dcl);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fe90 	bl	800a160 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b442:	3320      	adds	r3, #32
 800b444:	2220      	movs	r2, #32
 800b446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fd ff35 	bl	80092b8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b450:	3321      	adds	r3, #33	; 0x21
 800b452:	222e      	movs	r2, #46	; 0x2e
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d106      	bne.n	800b470 <f_mkdir+0x13a>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b468:	429a      	cmp	r2, r3
 800b46a:	d101      	bne.n	800b470 <f_mkdir+0x13a>
 800b46c:	2300      	movs	r3, #0
 800b46e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b474:	3320      	adds	r3, #32
 800b476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b478:	4619      	mov	r1, r3
 800b47a:	f7fe fe71 	bl	800a160 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	895b      	ldrh	r3, [r3, #10]
 800b482:	653b      	str	r3, [r7, #80]	; 0x50
 800b484:	e01b      	b.n	800b4be <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe f8f7 	bl	800968c <sync_window>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b4a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10c      	bne.n	800b4c6 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b4ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4b4:	f7fd ff21 	bl	80092fa <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e0      	bne.n	800b486 <f_mkdir+0x150>
 800b4c4:	e000      	b.n	800b4c8 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b4c6:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d107      	bne.n	800b4e0 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b4d0:	f107 030c 	add.w	r3, r7, #12
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe feb8 	bl	800a24a <dir_register>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d120      	bne.n	800b52a <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ee:	3316      	adds	r3, #22
 800b4f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd feb4 	bl	8009260 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fe fe2e 	bl	800a160 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b506:	330b      	adds	r3, #11
 800b508:	2210      	movs	r2, #16
 800b50a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2201      	movs	r2, #1
 800b510:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b512:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10e      	bne.n	800b538 <f_mkdir+0x202>
					res = sync_fs(fs);
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fe f927 	bl	8009770 <sync_fs>
 800b522:	4603      	mov	r3, r0
 800b524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b528:	e006      	b.n	800b538 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b52a:	f107 030c 	add.w	r3, r7, #12
 800b52e:	2200      	movs	r2, #0
 800b530:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fb3d 	bl	8009bb2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3758      	adds	r7, #88	; 0x58
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4613      	mov	r3, r2
 800b550:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b552:	2301      	movs	r3, #1
 800b554:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b55a:	4b1f      	ldr	r3, [pc, #124]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b55c:	7a5b      	ldrb	r3, [r3, #9]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d131      	bne.n	800b5c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b564:	4b1c      	ldr	r3, [pc, #112]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b566:	7a5b      	ldrb	r3, [r3, #9]
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	461a      	mov	r2, r3
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b56e:	2100      	movs	r1, #0
 800b570:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b572:	4b19      	ldr	r3, [pc, #100]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b574:	7a5b      	ldrb	r3, [r3, #9]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	4a17      	ldr	r2, [pc, #92]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b582:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b584:	7a5b      	ldrb	r3, [r3, #9]
 800b586:	b2db      	uxtb	r3, r3
 800b588:	461a      	mov	r2, r3
 800b58a:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b58c:	4413      	add	r3, r2
 800b58e:	79fa      	ldrb	r2, [r7, #7]
 800b590:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b592:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b594:	7a5b      	ldrb	r3, [r3, #9]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	b2d1      	uxtb	r1, r2
 800b59c:	4a0e      	ldr	r2, [pc, #56]	; (800b5d8 <FATFS_LinkDriverEx+0x94>)
 800b59e:	7251      	strb	r1, [r2, #9]
 800b5a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5a2:	7dbb      	ldrb	r3, [r7, #22]
 800b5a4:	3330      	adds	r3, #48	; 0x30
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	223a      	movs	r2, #58	; 0x3a
 800b5b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	3302      	adds	r3, #2
 800b5b8:	222f      	movs	r2, #47	; 0x2f
 800b5ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3303      	adds	r3, #3
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	371c      	adds	r7, #28
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	20004a84 	.word	0x20004a84

0800b5dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff ffaa 	bl	800b544 <FATFS_LinkDriverEx>
 800b5f0:	4603      	mov	r3, r0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800b600:	2200      	movs	r2, #0
 800b602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b606:	4836      	ldr	r0, [pc, #216]	; (800b6e0 <Preprocessing_Init+0xe4>)
 800b608:	f7f6 ff5e 	bl	80024c8 <Window_Init>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d000      	beq.n	800b614 <Preprocessing_Init+0x18>
  {
    while(1);
 800b612:	e7fe      	b.n	800b612 <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800b614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b618:	4832      	ldr	r0, [pc, #200]	; (800b6e4 <Preprocessing_Init+0xe8>)
 800b61a:	f000 fc1f 	bl	800be5c <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800b61e:	4b32      	ldr	r3, [pc, #200]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b620:	4a30      	ldr	r2, [pc, #192]	; (800b6e4 <Preprocessing_Init+0xe8>)
 800b622:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800b624:	4b30      	ldr	r3, [pc, #192]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b626:	2201      	movs	r2, #1
 800b628:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800b62a:	4b2f      	ldr	r3, [pc, #188]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b62c:	4a2c      	ldr	r2, [pc, #176]	; (800b6e0 <Preprocessing_Init+0xe4>)
 800b62e:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800b630:	4b2d      	ldr	r3, [pc, #180]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b632:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b636:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800b638:	4b2b      	ldr	r3, [pc, #172]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b63a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b63e:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800b640:	4b29      	ldr	r3, [pc, #164]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b646:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800b648:	4b27      	ldr	r3, [pc, #156]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b64a:	4a28      	ldr	r2, [pc, #160]	; (800b6ec <Preprocessing_Init+0xf0>)
 800b64c:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800b64e:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b650:	4a28      	ldr	r2, [pc, #160]	; (800b6f4 <Preprocessing_Init+0xf8>)
 800b652:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800b654:	4b26      	ldr	r3, [pc, #152]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b656:	4a28      	ldr	r2, [pc, #160]	; (800b6f8 <Preprocessing_Init+0xfc>)
 800b658:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800b65a:	4b25      	ldr	r3, [pc, #148]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b65c:	4a27      	ldr	r2, [pc, #156]	; (800b6fc <Preprocessing_Init+0x100>)
 800b65e:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800b660:	4b23      	ldr	r3, [pc, #140]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b662:	2280      	movs	r2, #128	; 0x80
 800b664:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800b666:	4b22      	ldr	r3, [pc, #136]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b66c:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800b66e:	4b20      	ldr	r3, [pc, #128]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b670:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b674:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800b676:	4b1e      	ldr	r3, [pc, #120]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800b67e:	4b1c      	ldr	r3, [pc, #112]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800b68a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b68e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b692:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b696:	4b16      	ldr	r3, [pc, #88]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b698:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800b69c:	4b14      	ldr	r3, [pc, #80]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800b6a4:	4b12      	ldr	r3, [pc, #72]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800b6b0:	480f      	ldr	r0, [pc, #60]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b6b2:	f7f6 fc2e 	bl	8001f12 <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800b6b6:	4b12      	ldr	r3, [pc, #72]	; (800b700 <Preprocessing_Init+0x104>)
 800b6b8:	4a0b      	ldr	r2, [pc, #44]	; (800b6e8 <Preprocessing_Init+0xec>)
 800b6ba:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800b6bc:	4b10      	ldr	r3, [pc, #64]	; (800b700 <Preprocessing_Init+0x104>)
 800b6be:	4a0c      	ldr	r2, [pc, #48]	; (800b6f0 <Preprocessing_Init+0xf4>)
 800b6c0:	605a      	str	r2, [r3, #4]

  S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 800b6c2:	4b10      	ldr	r3, [pc, #64]	; (800b704 <Preprocessing_Init+0x108>)
 800b6c4:	4a0e      	ldr	r2, [pc, #56]	; (800b700 <Preprocessing_Init+0x104>)
 800b6c6:	601a      	str	r2, [r3, #0]
  S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800b6c8:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <Preprocessing_Init+0x108>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	711a      	strb	r2, [r3, #4]
  S_LogMelSpectr.Ref = 1;
 800b6ce:	4b0d      	ldr	r3, [pc, #52]	; (800b704 <Preprocessing_Init+0x108>)
 800b6d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b6d4:	609a      	str	r2, [r3, #8]
  S_LogMelSpectr.TopdB = 80;
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <Preprocessing_Init+0x108>)
 800b6d8:	4a0b      	ldr	r2, [pc, #44]	; (800b708 <Preprocessing_Init+0x10c>)
 800b6da:	60da      	str	r2, [r3, #12]
}
 800b6dc:	bf00      	nop
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20005d0c 	.word	0x20005d0c
 800b6e4:	20004a90 	.word	0x20004a90
 800b6e8:	20004ad8 	.word	0x20004ad8
 800b6ec:	20006d0c 	.word	0x20006d0c
 800b6f0:	20004aa8 	.word	0x20004aa8
 800b6f4:	20008d0c 	.word	0x20008d0c
 800b6f8:	20008f0c 	.word	0x20008f0c
 800b6fc:	20007d0c 	.word	0x20007d0c
 800b700:	20004af4 	.word	0x20004af4
 800b704:	20004afc 	.word	0x20004afc
 800b708:	42a00000 	.word	0x42a00000

0800b70c <AudioPreprocessing_RunMethod3>:
      pOut[i * num_frames + frame_index] = pOutColBuffer[i];
    }
  }
}
void AudioPreprocessing_RunMethod3(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b088      	sub	sp, #32
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  const uint32_t num_frames = 1 + (signal_len) / HOP_LEN;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	0a1b      	lsrs	r3, r3, #8
 800b71c:	3301      	adds	r3, #1
 800b71e:	617b      	str	r3, [r7, #20]

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800b720:	2300      	movs	r3, #0
 800b722:	61fb      	str	r3, [r7, #28]
 800b724:	e029      	b.n	800b77a <AudioPreprocessing_RunMethod3+0x6e>
  {
    buf_to_float_normed(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	025b      	lsls	r3, r3, #9
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4413      	add	r3, r2
 800b72e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b732:	4916      	ldr	r1, [pc, #88]	; (800b78c <AudioPreprocessing_RunMethod3+0x80>)
 800b734:	4618      	mov	r0, r3
 800b736:	f7f6 fa6b 	bl	8001c10 <buf_to_float_normed>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800b73a:	4a15      	ldr	r2, [pc, #84]	; (800b790 <AudioPreprocessing_RunMethod3+0x84>)
 800b73c:	4913      	ldr	r1, [pc, #76]	; (800b78c <AudioPreprocessing_RunMethod3+0x80>)
 800b73e:	4815      	ldr	r0, [pc, #84]	; (800b794 <AudioPreprocessing_RunMethod3+0x88>)
 800b740:	f7f6 fb1c 	bl	8001d7c <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800b744:	2300      	movs	r3, #0
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	e011      	b.n	800b76e <AudioPreprocessing_RunMethod3+0x62>
    {
      pOut[i * num_frames + frame_index] = pOutColBuffer[i];
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	fb03 f202 	mul.w	r2, r3, r2
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	4413      	add	r3, r2
 800b75c:	490c      	ldr	r1, [pc, #48]	; (800b790 <AudioPreprocessing_RunMethod3+0x84>)
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	0092      	lsls	r2, r2, #2
 800b762:	440a      	add	r2, r1
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	3301      	adds	r3, #1
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	2b7f      	cmp	r3, #127	; 0x7f
 800b772:	d9ea      	bls.n	800b74a <AudioPreprocessing_RunMethod3+0x3e>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	3301      	adds	r3, #1
 800b778:	61fb      	str	r3, [r7, #28]
 800b77a:	69fa      	ldr	r2, [r7, #28]
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d3d1      	bcc.n	800b726 <AudioPreprocessing_RunMethod3+0x1a>
    }
  }
}
 800b782:	bf00      	nop
 800b784:	bf00      	nop
 800b786:	3720      	adds	r7, #32
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20004b0c 	.word	0x20004b0c
 800b790:	20005b0c 	.word	0x20005b0c
 800b794:	20004afc 	.word	0x20004afc

0800b798 <AudioPreprocessing_RunMethod4>:
void AudioPreprocessing_RunMethod4(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
  const uint32_t num_frames = 1 + (signal_len) / HOP_LEN;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	0a1b      	lsrs	r3, r3, #8
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	617b      	str	r3, [r7, #20]

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	e029      	b.n	800b806 <AudioPreprocessing_RunMethod4+0x6e>
  {
    buf_to_float(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	025b      	lsls	r3, r3, #9
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7be:	4916      	ldr	r1, [pc, #88]	; (800b818 <AudioPreprocessing_RunMethod4+0x80>)
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7f6 f9fe 	bl	8001bc2 <buf_to_float>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800b7c6:	4a15      	ldr	r2, [pc, #84]	; (800b81c <AudioPreprocessing_RunMethod4+0x84>)
 800b7c8:	4913      	ldr	r1, [pc, #76]	; (800b818 <AudioPreprocessing_RunMethod4+0x80>)
 800b7ca:	4815      	ldr	r0, [pc, #84]	; (800b820 <AudioPreprocessing_RunMethod4+0x88>)
 800b7cc:	f7f6 fad6 	bl	8001d7c <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	61bb      	str	r3, [r7, #24]
 800b7d4:	e011      	b.n	800b7fa <AudioPreprocessing_RunMethod4+0x62>
    {
      pOut[i * num_frames + frame_index] = pOutColBuffer[i];
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	fb03 f202 	mul.w	r2, r3, r2
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	490c      	ldr	r1, [pc, #48]	; (800b81c <AudioPreprocessing_RunMethod4+0x84>)
 800b7ea:	69ba      	ldr	r2, [r7, #24]
 800b7ec:	0092      	lsls	r2, r2, #2
 800b7ee:	440a      	add	r2, r1
 800b7f0:	6812      	ldr	r2, [r2, #0]
 800b7f2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	61bb      	str	r3, [r7, #24]
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b7f      	cmp	r3, #127	; 0x7f
 800b7fe:	d9ea      	bls.n	800b7d6 <AudioPreprocessing_RunMethod4+0x3e>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	3301      	adds	r3, #1
 800b804:	61fb      	str	r3, [r7, #28]
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3d1      	bcc.n	800b7b2 <AudioPreprocessing_RunMethod4+0x1a>
    }
  }
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	3720      	adds	r7, #32
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20004b0c 	.word	0x20004b0c
 800b81c:	20005b0c 	.word	0x20005b0c
 800b820:	20004afc 	.word	0x20004afc

0800b824 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a08      	ldr	r2, [pc, #32]	; (800b850 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d103      	bne.n	800b83c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800b834:	4b07      	ldr	r3, [pc, #28]	; (800b854 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800b83a:	e002      	b.n	800b842 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800b83e:	2201      	movs	r2, #1
 800b840:	601a      	str	r2, [r3, #0]
}
 800b842:	bf00      	nop
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	200000f8 	.word	0x200000f8
 800b854:	200042dc 	.word	0x200042dc
 800b858:	200042e4 	.word	0x200042e4

0800b85c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a08      	ldr	r2, [pc, #32]	; (800b888 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d103      	bne.n	800b874 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800b86c:	4b07      	ldr	r3, [pc, #28]	; (800b88c <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800b86e:	2201      	movs	r2, #1
 800b870:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800b872:	e002      	b.n	800b87a <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800b874:	4b06      	ldr	r3, [pc, #24]	; (800b890 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800b876:	2201      	movs	r2, #1
 800b878:	601a      	str	r2, [r3, #0]
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	200000f8 	.word	0x200000f8
 800b88c:	200042e0 	.word	0x200042e0
 800b890:	200042e8 	.word	0x200042e8

0800b894 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800b89a:	4b59      	ldr	r3, [pc, #356]	; (800ba00 <checkMicrophone+0x16c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d151      	bne.n	800b946 <checkMicrophone+0xb2>
 800b8a2:	4b58      	ldr	r3, [pc, #352]	; (800ba04 <checkMicrophone+0x170>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d14d      	bne.n	800b946 <checkMicrophone+0xb2>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	607b      	str	r3, [r7, #4]
 800b8ae:	e040      	b.n	800b932 <checkMicrophone+0x9e>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b8b0:	4b55      	ldr	r3, [pc, #340]	; (800ba08 <checkMicrophone+0x174>)
 800b8b2:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b8b6:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d028      	beq.n	800b910 <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b8be:	4a53      	ldr	r2, [pc, #332]	; (800ba0c <checkMicrophone+0x178>)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8c6:	121b      	asrs	r3, r3, #8
 800b8c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b8cc:	db0b      	blt.n	800b8e6 <checkMicrophone+0x52>
 800b8ce:	4a4f      	ldr	r2, [pc, #316]	; (800ba0c <checkMicrophone+0x178>)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d6:	121b      	asrs	r3, r3, #8
 800b8d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	bfa8      	it	ge
 800b8e0:	4613      	movge	r3, r2
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	e001      	b.n	800b8ea <checkMicrophone+0x56>
 800b8e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b8ea:	4b47      	ldr	r3, [pc, #284]	; (800ba08 <checkMicrophone+0x174>)
 800b8ec:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b8f0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b8f4:	4944      	ldr	r1, [pc, #272]	; (800ba08 <checkMicrophone+0x174>)
 800b8f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b8fa:	4b43      	ldr	r3, [pc, #268]	; (800ba08 <checkMicrophone+0x174>)
 800b8fc:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b900:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b904:	3301      	adds	r3, #1
 800b906:	4a40      	ldr	r2, [pc, #256]	; (800ba08 <checkMicrophone+0x174>)
 800b908:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800b90c:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b910:	4b3d      	ldr	r3, [pc, #244]	; (800ba08 <checkMicrophone+0x174>)
 800b912:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b916:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b91a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800b91e:	d305      	bcc.n	800b92c <checkMicrophone+0x98>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800b920:	4b39      	ldr	r3, [pc, #228]	; (800ba08 <checkMicrophone+0x174>)
 800b922:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 0; i < 1024; i++)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3301      	adds	r3, #1
 800b930:	607b      	str	r3, [r7, #4]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b938:	dbba      	blt.n	800b8b0 <checkMicrophone+0x1c>
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800b93a:	4b31      	ldr	r3, [pc, #196]	; (800ba00 <checkMicrophone+0x16c>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800b940:	4b30      	ldr	r3, [pc, #192]	; (800ba04 <checkMicrophone+0x170>)
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800b946:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <checkMicrophone+0x17c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d152      	bne.n	800b9f4 <checkMicrophone+0x160>
 800b94e:	4b31      	ldr	r3, [pc, #196]	; (800ba14 <checkMicrophone+0x180>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d14e      	bne.n	800b9f4 <checkMicrophone+0x160>
	{
		for(int i = 1024; i < 2048; i++)
 800b956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	e040      	b.n	800b9e0 <checkMicrophone+0x14c>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800b95e:	4b2a      	ldr	r3, [pc, #168]	; (800ba08 <checkMicrophone+0x174>)
 800b960:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b964:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d028      	beq.n	800b9be <checkMicrophone+0x12a>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800b96c:	4a27      	ldr	r2, [pc, #156]	; (800ba0c <checkMicrophone+0x178>)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b974:	121b      	asrs	r3, r3, #8
 800b976:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b97a:	db0b      	blt.n	800b994 <checkMicrophone+0x100>
 800b97c:	4a23      	ldr	r2, [pc, #140]	; (800ba0c <checkMicrophone+0x178>)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b984:	121b      	asrs	r3, r3, #8
 800b986:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b98a:	4293      	cmp	r3, r2
 800b98c:	bfa8      	it	ge
 800b98e:	4613      	movge	r3, r2
 800b990:	b29a      	uxth	r2, r3
 800b992:	e001      	b.n	800b998 <checkMicrophone+0x104>
 800b994:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b998:	4b1b      	ldr	r3, [pc, #108]	; (800ba08 <checkMicrophone+0x174>)
 800b99a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b99e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b9a2:	4919      	ldr	r1, [pc, #100]	; (800ba08 <checkMicrophone+0x174>)
 800b9a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800b9a8:	4b17      	ldr	r3, [pc, #92]	; (800ba08 <checkMicrophone+0x174>)
 800b9aa:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b9ae:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	4a14      	ldr	r2, [pc, #80]	; (800ba08 <checkMicrophone+0x174>)
 800b9b6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800b9ba:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b9be:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <checkMicrophone+0x174>)
 800b9c0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b9c4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b9c8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800b9cc:	d305      	bcc.n	800b9da <checkMicrophone+0x146>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800b9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ba08 <checkMicrophone+0x174>)
 800b9d0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 1024; i < 2048; i++)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	603b      	str	r3, [r7, #0]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9e6:	dbba      	blt.n	800b95e <checkMicrophone+0xca>
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800b9e8:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <checkMicrophone+0x17c>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800b9ee:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <checkMicrophone+0x180>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
	}
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	200042dc 	.word	0x200042dc
 800ba04:	200042e4 	.word	0x200042e4
 800ba08:	2000910c 	.word	0x2000910c
 800ba0c:	200002dc 	.word	0x200002dc
 800ba10:	200042e0 	.word	0x200042e0
 800ba14:	200042e8 	.word	0x200042e8

0800ba18 <get_date>:
extern RTC_HandleTypeDef hrtc;


//returns a string containing current date
char* get_date( char* date)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	2200      	movs	r2, #0
 800ba26:	4619      	mov	r1, r3
 800ba28:	480a      	ldr	r0, [pc, #40]	; (800ba54 <get_date+0x3c>)
 800ba2a:	f7fa f8c1 	bl	8005bb0 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	461a      	mov	r2, r3
 800ba32:	7b7b      	ldrb	r3, [r7, #13]
 800ba34:	4619      	mov	r1, r3
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4905      	ldr	r1, [pc, #20]	; (800ba58 <get_date+0x40>)
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 fbe2 	bl	800d20c <siprintf>

	 return date;
 800ba48:	687b      	ldr	r3, [r7, #4]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200042ec 	.word	0x200042ec
 800ba58:	0800e8f8 	.word	0x0800e8f8

0800ba5c <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b08c      	sub	sp, #48	; 0x30
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800ba64:	2364      	movs	r3, #100	; 0x64
 800ba66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba6a:	236d      	movs	r3, #109	; 0x6d
 800ba6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba70:	2379      	movs	r3, #121	; 0x79
 800ba72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ba76:	2368      	movs	r3, #104	; 0x68
 800ba78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800ba7c:	236d      	movs	r3, #109	; 0x6d
 800ba7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba82:	2373      	movs	r3, #115	; 0x73
 800ba84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800ba88:	f107 030c 	add.w	r3, r7, #12
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4619      	mov	r1, r3
 800ba90:	480c      	ldr	r0, [pc, #48]	; (800bac4 <get_time_filename+0x68>)
 800ba92:	f7f9 ffab 	bl	80059ec <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800ba96:	f107 0308 	add.w	r3, r7, #8
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4809      	ldr	r0, [pc, #36]	; (800bac4 <get_time_filename+0x68>)
 800baa0:	f7fa f886 	bl	8005bb0 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800baa4:	7b3b      	ldrb	r3, [r7, #12]
 800baa6:	461a      	mov	r2, r3
 800baa8:	7b7b      	ldrb	r3, [r7, #13]
 800baaa:	4619      	mov	r1, r3
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	460b      	mov	r3, r1
 800bab2:	4905      	ldr	r1, [pc, #20]	; (800bac8 <get_time_filename+0x6c>)
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 fba9 	bl	800d20c <siprintf>
	 return name;
 800baba:	687b      	ldr	r3, [r7, #4]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3728      	adds	r7, #40	; 0x28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	200042ec 	.word	0x200042ec
 800bac8:	0800e8f8 	.word	0x0800e8f8

0800bacc <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800bad0:	2200      	movs	r2, #0
 800bad2:	4906      	ldr	r1, [pc, #24]	; (800baec <SDInit+0x20>)
 800bad4:	4806      	ldr	r0, [pc, #24]	; (800baf0 <SDInit+0x24>)
 800bad6:	f7ff f80d 	bl	800aaf4 <f_mount>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <SDInit+0x18>
	      {
	          Error_Handler();
 800bae0:	f7f5 fbe2 	bl	80012a8 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200045f0 	.word	0x200045f0
 800baf0:	200045f4 	.word	0x200045f4

0800baf4 <createFile>:

int createFile(char* file_name)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800bafc:	220a      	movs	r2, #10
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	4807      	ldr	r0, [pc, #28]	; (800bb20 <createFile+0x2c>)
 800bb02:	f7ff f83d 	bl	800ab80 <f_open>
 800bb06:	4603      	mov	r3, r0
 800bb08:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <createFile+0x22>
	  {
		  return -1;
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb14:	e000      	b.n	800bb18 <createFile+0x24>
	  }
	  return 0;
 800bb16:	2300      	movs	r3, #0

}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	20004824 	.word	0x20004824

0800bb24 <writeToFile>:
int writeToFile(char* text, int size)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	4804      	ldr	r0, [pc, #16]	; (800bb48 <writeToFile+0x24>)
 800bb38:	f7ff f9e0 	bl	800aefc <f_write>
	return byteswritten;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20004824 	.word	0x20004824

0800bb4c <SDclose>:
int SDclose()
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800bb50:	4802      	ldr	r0, [pc, #8]	; (800bb5c <SDclose+0x10>)
 800bb52:	f7ff fbc6 	bl	800b2e2 <f_close>
	return 0;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20004824 	.word	0x20004824

0800bb60 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800bb6a:	88fb      	ldrh	r3, [r7, #6]
 800bb6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb70:	d10a      	bne.n	800bb88 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800bb72:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <HAL_GPIO_EXTI_Callback+0x38>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bf0c      	ite	eq
 800bb7a:	2301      	moveq	r3, #1
 800bb7c:	2300      	movne	r3, #0
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <HAL_GPIO_EXTI_Callback+0x38>)
 800bb84:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800bb86:	e000      	b.n	800bb8a <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800bb88:	bf00      	nop
}
 800bb8a:	bf00      	nop
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	200002d8 	.word	0x200002d8

0800bb9c <WavProcess_EncInit>:
extern AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800bba6:	4b21      	ldr	r3, [pc, #132]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bba8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800bbac:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800bbae:	4b1f      	ldr	r3, [pc, #124]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800bbb4:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbb6:	2210      	movs	r2, #16
 800bbb8:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800bbba:	4b1c      	ldr	r3, [pc, #112]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbbc:	4a1c      	ldr	r2, [pc, #112]	; (800bc30 <WavProcess_EncInit+0x94>)
 800bbbe:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800bbc0:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbc2:	222c      	movs	r2, #44	; 0x2c
 800bbc4:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bbc6:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbc8:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800bbca:	4a18      	ldr	r2, [pc, #96]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbcc:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800bbce:	08d2      	lsrs	r2, r2, #3
 800bbd0:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bbd2:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800bbd6:	4a15      	ldr	r2, [pc, #84]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbd8:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800bbda:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bbde:	4a13      	ldr	r2, [pc, #76]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbe0:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bbe2:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbe4:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800bbe6:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbe8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bbea:	08db      	lsrs	r3, r3, #3
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	fb12 f303 	smulbb	r3, r2, r3
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	4b0d      	ldr	r3, [pc, #52]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bbf6:	841a      	strh	r2, [r3, #32]
  BufferCtl.size = BufferCtl.fptr * 2;
 800bbf8:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <WavProcess_EncInit+0x98>)
 800bbfa:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bbfe:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	4a0b      	ldr	r2, [pc, #44]	; (800bc34 <WavProcess_EncInit+0x98>)
 800bc06:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800bc0a:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800bc0e:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <WavProcess_EncInit+0x98>)
 800bc10:	4906      	ldr	r1, [pc, #24]	; (800bc2c <WavProcess_EncInit+0x90>)
 800bc12:	6838      	ldr	r0, [r7, #0]
 800bc14:	f000 f810 	bl	800bc38 <WavProcess_HeaderInit>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <WavProcess_EncInit+0x86>
  {
    return 1;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <WavProcess_EncInit+0x88>
  }
  return 0;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20018c20 	.word	0x20018c20
 800bc30:	001d4c00 	.word	0x001d4c00
 800bc34:	2000910c 	.word	0x2000910c

0800bc38 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2252      	movs	r2, #82	; 0x52
 800bc48:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	2249      	movs	r2, #73	; 0x49
 800bc50:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3302      	adds	r3, #2
 800bc56:	2246      	movs	r2, #70	; 0x46
 800bc58:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3303      	adds	r3, #3
 800bc5e:	2246      	movs	r2, #70	; 0x46
 800bc60:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->size);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bc68:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	b2d2      	uxtb	r2, r2
 800bc72:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->size >> 8);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bc7a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bc7e:	0a1a      	lsrs	r2, r3, #8
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3305      	adds	r3, #5
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->size >> 16);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bc8e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bc92:	0c1a      	lsrs	r2, r3, #16
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3306      	adds	r3, #6
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->size >> 24);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bca2:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bca6:	0e1a      	lsrs	r2, r3, #24
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3307      	adds	r3, #7
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	2257      	movs	r2, #87	; 0x57
 800bcb6:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3309      	adds	r3, #9
 800bcbc:	2241      	movs	r2, #65	; 0x41
 800bcbe:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	330a      	adds	r3, #10
 800bcc4:	2256      	movs	r2, #86	; 0x56
 800bcc6:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	330b      	adds	r3, #11
 800bccc:	2245      	movs	r2, #69	; 0x45
 800bcce:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	330c      	adds	r3, #12
 800bcd4:	2266      	movs	r2, #102	; 0x66
 800bcd6:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	330d      	adds	r3, #13
 800bcdc:	226d      	movs	r2, #109	; 0x6d
 800bcde:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	330e      	adds	r3, #14
 800bce4:	2274      	movs	r2, #116	; 0x74
 800bce6:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	330f      	adds	r3, #15
 800bcec:	2220      	movs	r2, #32
 800bcee:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3310      	adds	r3, #16
 800bcf4:	2210      	movs	r2, #16
 800bcf6:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3311      	adds	r3, #17
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3312      	adds	r3, #18
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3313      	adds	r3, #19
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3314      	adds	r3, #20
 800bd14:	2201      	movs	r2, #1
 800bd16:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3315      	adds	r3, #21
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	8ada      	ldrh	r2, [r3, #22]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3316      	adds	r3, #22
 800bd28:	b2d2      	uxtb	r2, r2
 800bd2a:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3317      	adds	r3, #23
 800bd30:	2200      	movs	r2, #0
 800bd32:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	699a      	ldr	r2, [r3, #24]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3318      	adds	r3, #24
 800bd3c:	b2d2      	uxtb	r2, r2
 800bd3e:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	0a1a      	lsrs	r2, r3, #8
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3319      	adds	r3, #25
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	0c1a      	lsrs	r2, r3, #16
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	331a      	adds	r3, #26
 800bd58:	b2d2      	uxtb	r2, r2
 800bd5a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	0e1a      	lsrs	r2, r3, #24
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	331b      	adds	r3, #27
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	69da      	ldr	r2, [r3, #28]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	331c      	adds	r3, #28
 800bd72:	b2d2      	uxtb	r2, r2
 800bd74:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	0a1a      	lsrs	r2, r3, #8
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	331d      	adds	r3, #29
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	0c1a      	lsrs	r2, r3, #16
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	331e      	adds	r3, #30
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	0e1a      	lsrs	r2, r3, #24
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	331f      	adds	r3, #31
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	8c1a      	ldrh	r2, [r3, #32]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3320      	adds	r3, #32
 800bda8:	b2d2      	uxtb	r2, r2
 800bdaa:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3321      	adds	r3, #33	; 0x21
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3322      	adds	r3, #34	; 0x22
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3323      	adds	r3, #35	; 0x23
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3324      	adds	r3, #36	; 0x24
 800bdcc:	2264      	movs	r2, #100	; 0x64
 800bdce:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	3325      	adds	r3, #37	; 0x25
 800bdd4:	2261      	movs	r2, #97	; 0x61
 800bdd6:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3326      	adds	r3, #38	; 0x26
 800bddc:	2274      	movs	r2, #116	; 0x74
 800bdde:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3327      	adds	r3, #39	; 0x27
 800bde4:	2261      	movs	r2, #97	; 0x61
 800bde6:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->size -=44;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bdee:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800bdf2:	3b2c      	subs	r3, #44	; 0x2c
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800bdfa:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  pHeader[40] = (uint8_t)(BufferCtl->size);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800be04:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3328      	adds	r3, #40	; 0x28
 800be0c:	b2d2      	uxtb	r2, r2
 800be0e:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->size >> 8);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800be16:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800be1a:	0a1a      	lsrs	r2, r3, #8
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3329      	adds	r3, #41	; 0x29
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->size >> 16);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800be2a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800be2e:	0c1a      	lsrs	r2, r3, #16
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	332a      	adds	r3, #42	; 0x2a
 800be34:	b2d2      	uxtb	r2, r2
 800be36:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->size >> 24);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800be3e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800be42:	0e1a      	lsrs	r2, r3, #24
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	332b      	adds	r3, #43	; 0x2b
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3714      	adds	r7, #20
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <arm_rfft_fast_init_f32>:
 800be5c:	084b      	lsrs	r3, r1, #1
 800be5e:	2b80      	cmp	r3, #128	; 0x80
 800be60:	b430      	push	{r4, r5}
 800be62:	8201      	strh	r1, [r0, #16]
 800be64:	8003      	strh	r3, [r0, #0]
 800be66:	d070      	beq.n	800bf4a <arm_rfft_fast_init_f32+0xee>
 800be68:	d916      	bls.n	800be98 <arm_rfft_fast_init_f32+0x3c>
 800be6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be6e:	d05f      	beq.n	800bf30 <arm_rfft_fast_init_f32+0xd4>
 800be70:	d936      	bls.n	800bee0 <arm_rfft_fast_init_f32+0x84>
 800be72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be76:	d026      	beq.n	800bec6 <arm_rfft_fast_init_f32+0x6a>
 800be78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be7c:	d112      	bne.n	800bea4 <arm_rfft_fast_init_f32+0x48>
 800be7e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800be82:	4c38      	ldr	r4, [pc, #224]	; (800bf64 <arm_rfft_fast_init_f32+0x108>)
 800be84:	4938      	ldr	r1, [pc, #224]	; (800bf68 <arm_rfft_fast_init_f32+0x10c>)
 800be86:	2300      	movs	r3, #0
 800be88:	4a38      	ldr	r2, [pc, #224]	; (800bf6c <arm_rfft_fast_init_f32+0x110>)
 800be8a:	8185      	strh	r5, [r0, #12]
 800be8c:	6084      	str	r4, [r0, #8]
 800be8e:	6041      	str	r1, [r0, #4]
 800be90:	6142      	str	r2, [r0, #20]
 800be92:	4618      	mov	r0, r3
 800be94:	bc30      	pop	{r4, r5}
 800be96:	4770      	bx	lr
 800be98:	2b20      	cmp	r3, #32
 800be9a:	d031      	beq.n	800bf00 <arm_rfft_fast_init_f32+0xa4>
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	d006      	beq.n	800beae <arm_rfft_fast_init_f32+0x52>
 800bea0:	2b10      	cmp	r3, #16
 800bea2:	d039      	beq.n	800bf18 <arm_rfft_fast_init_f32+0xbc>
 800bea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bea8:	bc30      	pop	{r4, r5}
 800beaa:	4618      	mov	r0, r3
 800beac:	4770      	bx	lr
 800beae:	2538      	movs	r5, #56	; 0x38
 800beb0:	4c2f      	ldr	r4, [pc, #188]	; (800bf70 <arm_rfft_fast_init_f32+0x114>)
 800beb2:	4930      	ldr	r1, [pc, #192]	; (800bf74 <arm_rfft_fast_init_f32+0x118>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4a30      	ldr	r2, [pc, #192]	; (800bf78 <arm_rfft_fast_init_f32+0x11c>)
 800beb8:	8185      	strh	r5, [r0, #12]
 800beba:	6084      	str	r4, [r0, #8]
 800bebc:	6041      	str	r1, [r0, #4]
 800bebe:	6142      	str	r2, [r0, #20]
 800bec0:	4618      	mov	r0, r3
 800bec2:	bc30      	pop	{r4, r5}
 800bec4:	4770      	bx	lr
 800bec6:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800beca:	4c2c      	ldr	r4, [pc, #176]	; (800bf7c <arm_rfft_fast_init_f32+0x120>)
 800becc:	492c      	ldr	r1, [pc, #176]	; (800bf80 <arm_rfft_fast_init_f32+0x124>)
 800bece:	2300      	movs	r3, #0
 800bed0:	4a2c      	ldr	r2, [pc, #176]	; (800bf84 <arm_rfft_fast_init_f32+0x128>)
 800bed2:	8185      	strh	r5, [r0, #12]
 800bed4:	6084      	str	r4, [r0, #8]
 800bed6:	6041      	str	r1, [r0, #4]
 800bed8:	6142      	str	r2, [r0, #20]
 800beda:	4618      	mov	r0, r3
 800bedc:	bc30      	pop	{r4, r5}
 800bede:	4770      	bx	lr
 800bee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bee4:	d1de      	bne.n	800bea4 <arm_rfft_fast_init_f32+0x48>
 800bee6:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800beea:	4c27      	ldr	r4, [pc, #156]	; (800bf88 <arm_rfft_fast_init_f32+0x12c>)
 800beec:	4927      	ldr	r1, [pc, #156]	; (800bf8c <arm_rfft_fast_init_f32+0x130>)
 800beee:	2300      	movs	r3, #0
 800bef0:	4a27      	ldr	r2, [pc, #156]	; (800bf90 <arm_rfft_fast_init_f32+0x134>)
 800bef2:	8185      	strh	r5, [r0, #12]
 800bef4:	6084      	str	r4, [r0, #8]
 800bef6:	6041      	str	r1, [r0, #4]
 800bef8:	6142      	str	r2, [r0, #20]
 800befa:	4618      	mov	r0, r3
 800befc:	bc30      	pop	{r4, r5}
 800befe:	4770      	bx	lr
 800bf00:	2530      	movs	r5, #48	; 0x30
 800bf02:	4c24      	ldr	r4, [pc, #144]	; (800bf94 <arm_rfft_fast_init_f32+0x138>)
 800bf04:	4924      	ldr	r1, [pc, #144]	; (800bf98 <arm_rfft_fast_init_f32+0x13c>)
 800bf06:	2300      	movs	r3, #0
 800bf08:	4a24      	ldr	r2, [pc, #144]	; (800bf9c <arm_rfft_fast_init_f32+0x140>)
 800bf0a:	8185      	strh	r5, [r0, #12]
 800bf0c:	6084      	str	r4, [r0, #8]
 800bf0e:	6041      	str	r1, [r0, #4]
 800bf10:	6142      	str	r2, [r0, #20]
 800bf12:	4618      	mov	r0, r3
 800bf14:	bc30      	pop	{r4, r5}
 800bf16:	4770      	bx	lr
 800bf18:	2514      	movs	r5, #20
 800bf1a:	4c21      	ldr	r4, [pc, #132]	; (800bfa0 <arm_rfft_fast_init_f32+0x144>)
 800bf1c:	4921      	ldr	r1, [pc, #132]	; (800bfa4 <arm_rfft_fast_init_f32+0x148>)
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4a21      	ldr	r2, [pc, #132]	; (800bfa8 <arm_rfft_fast_init_f32+0x14c>)
 800bf22:	8185      	strh	r5, [r0, #12]
 800bf24:	6084      	str	r4, [r0, #8]
 800bf26:	6041      	str	r1, [r0, #4]
 800bf28:	6142      	str	r2, [r0, #20]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	bc30      	pop	{r4, r5}
 800bf2e:	4770      	bx	lr
 800bf30:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800bf34:	4c1d      	ldr	r4, [pc, #116]	; (800bfac <arm_rfft_fast_init_f32+0x150>)
 800bf36:	491e      	ldr	r1, [pc, #120]	; (800bfb0 <arm_rfft_fast_init_f32+0x154>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4a1e      	ldr	r2, [pc, #120]	; (800bfb4 <arm_rfft_fast_init_f32+0x158>)
 800bf3c:	8185      	strh	r5, [r0, #12]
 800bf3e:	6084      	str	r4, [r0, #8]
 800bf40:	6041      	str	r1, [r0, #4]
 800bf42:	6142      	str	r2, [r0, #20]
 800bf44:	4618      	mov	r0, r3
 800bf46:	bc30      	pop	{r4, r5}
 800bf48:	4770      	bx	lr
 800bf4a:	25d0      	movs	r5, #208	; 0xd0
 800bf4c:	4c1a      	ldr	r4, [pc, #104]	; (800bfb8 <arm_rfft_fast_init_f32+0x15c>)
 800bf4e:	491b      	ldr	r1, [pc, #108]	; (800bfbc <arm_rfft_fast_init_f32+0x160>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <arm_rfft_fast_init_f32+0x164>)
 800bf54:	8185      	strh	r5, [r0, #12]
 800bf56:	6084      	str	r4, [r0, #8]
 800bf58:	6041      	str	r1, [r0, #4]
 800bf5a:	6142      	str	r2, [r0, #20]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	bc30      	pop	{r4, r5}
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	0801d7d8 	.word	0x0801d7d8
 800bf68:	0800e9d0 	.word	0x0800e9d0
 800bf6c:	08014b40 	.word	0x08014b40
 800bf70:	08012ad0 	.word	0x08012ad0
 800bf74:	0801f598 	.word	0x0801f598
 800bf78:	08021a88 	.word	0x08021a88
 800bf7c:	0801b4c0 	.word	0x0801b4c0
 800bf80:	080193c0 	.word	0x080193c0
 800bf84:	08012b40 	.word	0x08012b40
 800bf88:	08021718 	.word	0x08021718
 800bf8c:	08018b40 	.word	0x08018b40
 800bf90:	0801f798 	.word	0x0801f798
 800bf94:	0801c378 	.word	0x0801c378
 800bf98:	0801b3c0 	.word	0x0801b3c0
 800bf9c:	080129d0 	.word	0x080129d0
 800bfa0:	0801c2d0 	.word	0x0801c2d0
 800bfa4:	08019340 	.word	0x08019340
 800bfa8:	0801c2f8 	.word	0x0801c2f8
 800bfac:	0801ff98 	.word	0x0801ff98
 800bfb0:	0801c7d8 	.word	0x0801c7d8
 800bfb4:	08020318 	.word	0x08020318
 800bfb8:	08021c88 	.word	0x08021c88
 800bfbc:	0801c3d8 	.word	0x0801c3d8
 800bfc0:	08021318 	.word	0x08021318

0800bfc4 <arm_rfft_fast_f32>:
 800bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	8a05      	ldrh	r5, [r0, #16]
 800bfca:	4606      	mov	r6, r0
 800bfcc:	4617      	mov	r7, r2
 800bfce:	460c      	mov	r4, r1
 800bfd0:	086d      	lsrs	r5, r5, #1
 800bfd2:	8005      	strh	r5, [r0, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d15e      	bne.n	800c096 <arm_rfft_fast_f32+0xd2>
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2301      	movs	r3, #1
 800bfdc:	f000 fbde 	bl	800c79c <arm_cfft_f32>
 800bfe0:	edd4 7a00 	vldr	s15, [r4]
 800bfe4:	ed94 7a01 	vldr	s14, [r4, #4]
 800bfe8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bfec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bff0:	8832      	ldrh	r2, [r6, #0]
 800bff2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bff6:	6975      	ldr	r5, [r6, #20]
 800bff8:	3a01      	subs	r2, #1
 800bffa:	eeb0 3a46 	vmov.f32	s6, s12
 800bffe:	3510      	adds	r5, #16
 800c000:	f107 0610 	add.w	r6, r7, #16
 800c004:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c008:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800c00c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c010:	f104 0310 	add.w	r3, r4, #16
 800c014:	3808      	subs	r0, #8
 800c016:	ee26 7a86 	vmul.f32	s14, s13, s12
 800c01a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c01e:	ed87 7a00 	vstr	s14, [r7]
 800c022:	edc7 7a01 	vstr	s15, [r7, #4]
 800c026:	ed90 7a02 	vldr	s14, [r0, #8]
 800c02a:	3a01      	subs	r2, #1
 800c02c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c030:	f1a0 0008 	sub.w	r0, r0, #8
 800c034:	ed15 6a02 	vldr	s12, [r5, #-8]
 800c038:	f103 0308 	add.w	r3, r3, #8
 800c03c:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c040:	edd0 3a05 	vldr	s7, [r0, #20]
 800c044:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c048:	ee77 4a26 	vadd.f32	s9, s14, s13
 800c04c:	ed55 5a01 	vldr	s11, [r5, #-4]
 800c050:	f106 0608 	add.w	r6, r6, #8
 800c054:	ee66 6a27 	vmul.f32	s13, s12, s15
 800c058:	f105 0508 	add.w	r5, r5, #8
 800c05c:	ee33 4a85 	vadd.f32	s8, s7, s10
 800c060:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800c064:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c068:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c06c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c070:	ee77 7a05 	vadd.f32	s15, s14, s10
 800c074:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c078:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c07c:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c080:	ee67 7a83 	vmul.f32	s15, s15, s6
 800c084:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c088:	ed46 7a03 	vstr	s15, [r6, #-12]
 800c08c:	ed06 7a04 	vstr	s14, [r6, #-16]
 800c090:	d1c9      	bne.n	800c026 <arm_rfft_fast_f32+0x62>
 800c092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c096:	edd1 7a00 	vldr	s15, [r1]
 800c09a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800c09e:	edd1 6a01 	vldr	s13, [r1, #4]
 800c0a2:	1e68      	subs	r0, r5, #1
 800c0a4:	6975      	ldr	r5, [r6, #20]
 800c0a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c0aa:	00c1      	lsls	r1, r0, #3
 800c0ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c0b0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c0b4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c0b8:	ed82 7a00 	vstr	s14, [r2]
 800c0bc:	edc2 7a01 	vstr	s15, [r2, #4]
 800c0c0:	b3e0      	cbz	r0, 800c13c <arm_rfft_fast_f32+0x178>
 800c0c2:	3908      	subs	r1, #8
 800c0c4:	f104 0210 	add.w	r2, r4, #16
 800c0c8:	3510      	adds	r5, #16
 800c0ca:	440c      	add	r4, r1
 800c0cc:	f107 0110 	add.w	r1, r7, #16
 800c0d0:	ed94 7a02 	vldr	s14, [r4, #8]
 800c0d4:	3801      	subs	r0, #1
 800c0d6:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c0da:	f1a4 0408 	sub.w	r4, r4, #8
 800c0de:	ed15 6a02 	vldr	s12, [r5, #-8]
 800c0e2:	f102 0208 	add.w	r2, r2, #8
 800c0e6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c0ea:	ed94 4a05 	vldr	s8, [r4, #20]
 800c0ee:	ed12 5a03 	vldr	s10, [r2, #-12]
 800c0f2:	ee77 6a26 	vadd.f32	s13, s14, s13
 800c0f6:	ed55 5a01 	vldr	s11, [r5, #-4]
 800c0fa:	f101 0108 	add.w	r1, r1, #8
 800c0fe:	ee26 3a27 	vmul.f32	s6, s12, s15
 800c102:	f105 0508 	add.w	r5, r5, #8
 800c106:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c10a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800c10e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c112:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c116:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c11a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800c11e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c122:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c126:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800c12a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c12e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c132:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c136:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c13a:	d1c9      	bne.n	800c0d0 <arm_rfft_fast_f32+0x10c>
 800c13c:	461a      	mov	r2, r3
 800c13e:	4639      	mov	r1, r7
 800c140:	4630      	mov	r0, r6
 800c142:	2301      	movs	r3, #1
 800c144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	f000 bb28 	b.w	800c79c <arm_cfft_f32>

0800c14c <arm_cfft_radix8by2_f32>:
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	4607      	mov	r7, r0
 800c152:	4608      	mov	r0, r1
 800c154:	ed2d 8b06 	vpush	{d8-d10}
 800c158:	f8b7 e000 	ldrh.w	lr, [r7]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800c162:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800c166:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800c16a:	f000 80b0 	beq.w	800c2ce <arm_cfft_radix8by2_f32+0x182>
 800c16e:	008b      	lsls	r3, r1, #2
 800c170:	3210      	adds	r2, #16
 800c172:	f100 0610 	add.w	r6, r0, #16
 800c176:	f108 0510 	add.w	r5, r8, #16
 800c17a:	3310      	adds	r3, #16
 800c17c:	18c4      	adds	r4, r0, r3
 800c17e:	4443      	add	r3, r8
 800c180:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c184:	f1be 0e01 	subs.w	lr, lr, #1
 800c188:	ed56 4a04 	vldr	s9, [r6, #-16]
 800c18c:	f104 0410 	add.w	r4, r4, #16
 800c190:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c194:	f106 0610 	add.w	r6, r6, #16
 800c198:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800c19c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800c1a0:	ed55 2a01 	vldr	s5, [r5, #-4]
 800c1a4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c1a8:	ed53 0a04 	vldr	s1, [r3, #-16]
 800c1ac:	f102 0210 	add.w	r2, r2, #16
 800c1b0:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c1b4:	f105 0510 	add.w	r5, r5, #16
 800c1b8:	ed13 3a02 	vldr	s6, [r3, #-8]
 800c1bc:	f103 0310 	add.w	r3, r3, #16
 800c1c0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800c1c4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800c1c8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800c1cc:	ee33 8a83 	vadd.f32	s16, s7, s6
 800c1d0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800c1d4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800c1d8:	ee34 0a06 	vadd.f32	s0, s8, s12
 800c1dc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800c1e0:	ee76 aa87 	vadd.f32	s21, s13, s14
 800c1e4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800c1e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c1ec:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800c1f0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800c1f4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800c1f8:	ee71 8a05 	vadd.f32	s17, s2, s10
 800c1fc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800c200:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800c204:	ee72 9a22 	vadd.f32	s19, s4, s5
 800c208:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c20c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800c210:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800c214:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800c218:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c21c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800c220:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800c224:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800c228:	ee72 7a62 	vsub.f32	s15, s4, s5
 800c22c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800c230:	ee73 2a63 	vsub.f32	s5, s6, s7
 800c234:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800c238:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800c23c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800c240:	ee24 3a84 	vmul.f32	s6, s9, s8
 800c244:	ee27 2a26 	vmul.f32	s4, s14, s13
 800c248:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800c24c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800c250:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c254:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c258:	ee65 6a26 	vmul.f32	s13, s10, s13
 800c25c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800c260:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c264:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c268:	ee33 4a02 	vadd.f32	s8, s6, s4
 800c26c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800c270:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800c274:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800c278:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800c27c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800c280:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800c284:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c288:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800c28c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800c290:	ee61 5a87 	vmul.f32	s11, s3, s14
 800c294:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c298:	ee22 5a87 	vmul.f32	s10, s5, s14
 800c29c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c2a0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c2a4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800c2a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c2ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c2b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c2b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c2b8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800c2bc:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800c2c0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800c2c4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800c2c8:	f47f af5a 	bne.w	800c180 <arm_cfft_radix8by2_f32+0x34>
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	b28c      	uxth	r4, r1
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	f000 fb78 	bl	800c9c8 <arm_radix8_butterfly_f32>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	4640      	mov	r0, r8
 800c2de:	2302      	movs	r3, #2
 800c2e0:	ecbd 8b06 	vpop	{d8-d10}
 800c2e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	f000 bb6e 	b.w	800c9c8 <arm_radix8_butterfly_f32>

0800c2ec <arm_cfft_radix8by4_f32>:
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	ed2d 8b06 	vpush	{d8-d10}
 800c2f4:	8804      	ldrh	r4, [r0, #0]
 800c2f6:	b08f      	sub	sp, #60	; 0x3c
 800c2f8:	ed91 6a00 	vldr	s12, [r1]
 800c2fc:	460a      	mov	r2, r1
 800c2fe:	0864      	lsrs	r4, r4, #1
 800c300:	ed91 7a01 	vldr	s14, [r1, #4]
 800c304:	9101      	str	r1, [sp, #4]
 800c306:	00a3      	lsls	r3, r4, #2
 800c308:	6841      	ldr	r1, [r0, #4]
 800c30a:	0864      	lsrs	r4, r4, #1
 800c30c:	900c      	str	r0, [sp, #48]	; 0x30
 800c30e:	9205      	str	r2, [sp, #20]
 800c310:	f101 0610 	add.w	r6, r1, #16
 800c314:	4625      	mov	r5, r4
 800c316:	940b      	str	r4, [sp, #44]	; 0x2c
 800c318:	f101 0408 	add.w	r4, r1, #8
 800c31c:	9602      	str	r6, [sp, #8]
 800c31e:	9407      	str	r4, [sp, #28]
 800c320:	18d4      	adds	r4, r2, r3
 800c322:	1eaa      	subs	r2, r5, #2
 800c324:	f101 0518 	add.w	r5, r1, #24
 800c328:	18e0      	adds	r0, r4, r3
 800c32a:	edd4 4a00 	vldr	s9, [r4]
 800c32e:	ed94 4a01 	vldr	s8, [r4, #4]
 800c332:	46a6      	mov	lr, r4
 800c334:	edd0 6a00 	vldr	s13, [r0]
 800c338:	18c7      	adds	r7, r0, r3
 800c33a:	edd0 7a01 	vldr	s15, [r0, #4]
 800c33e:	46a0      	mov	r8, r4
 800c340:	ee76 5a26 	vadd.f32	s11, s12, s13
 800c344:	ed97 5a00 	vldr	s10, [r7]
 800c348:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c34c:	4604      	mov	r4, r0
 800c34e:	9506      	str	r5, [sp, #24]
 800c350:	4605      	mov	r5, r0
 800c352:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800c356:	900a      	str	r0, [sp, #40]	; 0x28
 800c358:	9801      	ldr	r0, [sp, #4]
 800c35a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c35e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c362:	ed97 3a01 	vldr	s6, [r7, #4]
 800c366:	ee72 2a85 	vadd.f32	s5, s5, s10
 800c36a:	46bc      	mov	ip, r7
 800c36c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800c370:	9704      	str	r7, [sp, #16]
 800c372:	ee36 7a44 	vsub.f32	s14, s12, s8
 800c376:	f8cd e00c 	str.w	lr, [sp, #12]
 800c37a:	ee12 9a90 	vmov	r9, s5
 800c37e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800c382:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c386:	1f3e      	subs	r6, r7, #4
 800c388:	f840 9b08 	str.w	r9, [r0], #8
 800c38c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800c390:	edde 2a01 	vldr	s5, [lr, #4]
 800c394:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c398:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c39c:	eddc 4a01 	vldr	s9, [ip, #4]
 800c3a0:	ee36 6a22 	vadd.f32	s12, s12, s5
 800c3a4:	9001      	str	r0, [sp, #4]
 800c3a6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c3aa:	9805      	ldr	r0, [sp, #20]
 800c3ac:	ee13 9a90 	vmov	r9, s7
 800c3b0:	ee37 7a43 	vsub.f32	s14, s14, s6
 800c3b4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c3b8:	f1ae 0704 	sub.w	r7, lr, #4
 800c3bc:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c3c0:	ee76 6a83 	vadd.f32	s13, s13, s6
 800c3c4:	ed80 6a01 	vstr	s12, [r0, #4]
 800c3c8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c3cc:	f848 9b08 	str.w	r9, [r8], #8
 800c3d0:	edce 4a01 	vstr	s9, [lr, #4]
 800c3d4:	ee15 ea90 	vmov	lr, s11
 800c3d8:	f844 eb08 	str.w	lr, [r4], #8
 800c3dc:	ee16 ea90 	vmov	lr, s13
 800c3e0:	9408      	str	r4, [sp, #32]
 800c3e2:	462c      	mov	r4, r5
 800c3e4:	ed85 7a01 	vstr	s14, [r5, #4]
 800c3e8:	9d04      	ldr	r5, [sp, #16]
 800c3ea:	f84c eb08 	str.w	lr, [ip], #8
 800c3ee:	edc5 7a01 	vstr	s15, [r5, #4]
 800c3f2:	0855      	lsrs	r5, r2, #1
 800c3f4:	9509      	str	r5, [sp, #36]	; 0x24
 800c3f6:	f000 8130 	beq.w	800c65a <arm_cfft_radix8by4_f32+0x36e>
 800c3fa:	9805      	ldr	r0, [sp, #20]
 800c3fc:	3b08      	subs	r3, #8
 800c3fe:	46ab      	mov	fp, r5
 800c400:	f1a4 020c 	sub.w	r2, r4, #12
 800c404:	f100 0510 	add.w	r5, r0, #16
 800c408:	f101 0920 	add.w	r9, r1, #32
 800c40c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800c410:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c414:	4433      	add	r3, r6
 800c416:	3410      	adds	r4, #16
 800c418:	4660      	mov	r0, ip
 800c41a:	4641      	mov	r1, r8
 800c41c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800c420:	ed54 6a02 	vldr	s13, [r4, #-8]
 800c424:	f1bb 0b01 	subs.w	fp, fp, #1
 800c428:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c42c:	f10a 0a08 	add.w	sl, sl, #8
 800c430:	edd1 7a00 	vldr	s15, [r1]
 800c434:	f105 0508 	add.w	r5, r5, #8
 800c438:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800c43c:	edd0 2a00 	vldr	s5, [r0]
 800c440:	ed14 7a01 	vldr	s14, [r4, #-4]
 800c444:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800c448:	ed55 6a03 	vldr	s13, [r5, #-12]
 800c44c:	f1a2 0208 	sub.w	r2, r2, #8
 800c450:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800c454:	ed90 2a01 	vldr	s4, [r0, #4]
 800c458:	ee36 5a87 	vadd.f32	s10, s13, s14
 800c45c:	ed91 6a01 	vldr	s12, [r1, #4]
 800c460:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c464:	f109 0910 	add.w	r9, r9, #16
 800c468:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800c46c:	f104 0408 	add.w	r4, r4, #8
 800c470:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800c474:	f10e 0e18 	add.w	lr, lr, #24
 800c478:	ee37 3a67 	vsub.f32	s6, s14, s15
 800c47c:	f1a3 0308 	sub.w	r3, r3, #8
 800c480:	ed45 6a04 	vstr	s13, [r5, #-16]
 800c484:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c488:	edd1 6a01 	vldr	s13, [r1, #4]
 800c48c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800c490:	edd0 4a01 	vldr	s9, [r0, #4]
 800c494:	ee33 3a22 	vadd.f32	s6, s6, s5
 800c498:	ee75 6a26 	vadd.f32	s13, s10, s13
 800c49c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c4a0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c4a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c4a8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800c4ac:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c4b0:	ed45 6a03 	vstr	s13, [r5, #-12]
 800c4b4:	ee36 2a02 	vadd.f32	s4, s12, s4
 800c4b8:	edd6 7a00 	vldr	s15, [r6]
 800c4bc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800c4c0:	ed97 1a00 	vldr	s2, [r7]
 800c4c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 800c4c8:	ed92 8a04 	vldr	s16, [r2, #16]
 800c4cc:	ee71 8a27 	vadd.f32	s17, s2, s15
 800c4d0:	ed93 aa04 	vldr	s20, [r3, #16]
 800c4d4:	ed16 7a01 	vldr	s14, [r6, #-4]
 800c4d8:	ee71 7a67 	vsub.f32	s15, s2, s15
 800c4dc:	ed57 0a01 	vldr	s1, [r7, #-4]
 800c4e0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800c4e4:	ee38 6a88 	vadd.f32	s12, s17, s16
 800c4e8:	edd3 9a03 	vldr	s19, [r3, #12]
 800c4ec:	ee30 0a87 	vadd.f32	s0, s1, s14
 800c4f0:	ed92 9a03 	vldr	s18, [r2, #12]
 800c4f4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800c4f8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800c4fc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800c500:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800c504:	ee16 ca10 	vmov	ip, s12
 800c508:	ee30 6a49 	vsub.f32	s12, s0, s18
 800c50c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800c510:	f847 c908 	str.w	ip, [r7], #-8
 800c514:	ee34 4a29 	vadd.f32	s8, s8, s19
 800c518:	edd2 8a03 	vldr	s17, [r2, #12]
 800c51c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800c520:	ed93 8a03 	vldr	s16, [r3, #12]
 800c524:	ee71 0a47 	vsub.f32	s1, s2, s14
 800c528:	ee30 0a28 	vadd.f32	s0, s0, s17
 800c52c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800c530:	ee36 6a69 	vsub.f32	s12, s12, s19
 800c534:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c538:	ee75 5aca 	vsub.f32	s11, s11, s20
 800c53c:	ed87 0a01 	vstr	s0, [r7, #4]
 800c540:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800c544:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800c548:	ee21 8a80 	vmul.f32	s16, s3, s0
 800c54c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800c550:	ee64 7a26 	vmul.f32	s15, s8, s13
 800c554:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c558:	ee24 4a00 	vmul.f32	s8, s8, s0
 800c55c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800c560:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c564:	ee24 0a80 	vmul.f32	s0, s9, s0
 800c568:	ee38 7a07 	vadd.f32	s14, s16, s14
 800c56c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800c570:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c574:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c578:	ee17 ca10 	vmov	ip, s14
 800c57c:	f841 cb08 	str.w	ip, [r1], #8
 800c580:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c584:	ed82 0a04 	vstr	s0, [r2, #16]
 800c588:	edc2 6a03 	vstr	s13, [r2, #12]
 800c58c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800c590:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800c594:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800c598:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800c59c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800c5a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c5a4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800c5a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c5ac:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c5b0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c5b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5b8:	ee34 6a24 	vadd.f32	s12, s8, s9
 800c5bc:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800c5c0:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c5c4:	ee17 ca90 	vmov	ip, s15
 800c5c8:	ed04 6a04 	vstr	s12, [r4, #-16]
 800c5cc:	ed04 5a03 	vstr	s10, [r4, #-12]
 800c5d0:	f846 c908 	str.w	ip, [r6], #-8
 800c5d4:	edc6 6a01 	vstr	s13, [r6, #4]
 800c5d8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800c5dc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800c5e0:	ee62 5a27 	vmul.f32	s11, s4, s15
 800c5e4:	ee22 6a87 	vmul.f32	s12, s5, s14
 800c5e8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c5ec:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800c5f0:	ee61 6a07 	vmul.f32	s13, s2, s14
 800c5f4:	ee20 7a87 	vmul.f32	s14, s1, s14
 800c5f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c5fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 800c600:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c604:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800c608:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800c60c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c610:	ee16 ca10 	vmov	ip, s12
 800c614:	f840 cb08 	str.w	ip, [r0], #8
 800c618:	ed40 2a01 	vstr	s5, [r0, #-4]
 800c61c:	edc3 0a04 	vstr	s1, [r3, #16]
 800c620:	edc3 7a03 	vstr	s15, [r3, #12]
 800c624:	f47f aefc 	bne.w	800c420 <arm_cfft_radix8by4_f32+0x134>
 800c628:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c62a:	9802      	ldr	r0, [sp, #8]
 800c62c:	00cb      	lsls	r3, r1, #3
 800c62e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800c632:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c636:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c63a:	4498      	add	r8, r3
 800c63c:	449c      	add	ip, r3
 800c63e:	9102      	str	r1, [sp, #8]
 800c640:	9901      	ldr	r1, [sp, #4]
 800c642:	4419      	add	r1, r3
 800c644:	9101      	str	r1, [sp, #4]
 800c646:	9907      	ldr	r1, [sp, #28]
 800c648:	4419      	add	r1, r3
 800c64a:	9107      	str	r1, [sp, #28]
 800c64c:	9908      	ldr	r1, [sp, #32]
 800c64e:	4419      	add	r1, r3
 800c650:	9b06      	ldr	r3, [sp, #24]
 800c652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c656:	9108      	str	r1, [sp, #32]
 800c658:	9306      	str	r3, [sp, #24]
 800c65a:	9a01      	ldr	r2, [sp, #4]
 800c65c:	2304      	movs	r3, #4
 800c65e:	9e08      	ldr	r6, [sp, #32]
 800c660:	edd2 7a00 	vldr	s15, [r2]
 800c664:	ed96 7a00 	vldr	s14, [r6]
 800c668:	edd8 2a00 	vldr	s5, [r8]
 800c66c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800c670:	ed9c 3a00 	vldr	s6, [ip]
 800c674:	ed92 6a01 	vldr	s12, [r2, #4]
 800c678:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c67c:	edd6 6a01 	vldr	s13, [r6, #4]
 800c680:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800c684:	ed9c 2a01 	vldr	s4, [ip, #4]
 800c688:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c68c:	edd8 7a01 	vldr	s15, [r8, #4]
 800c690:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c694:	9d02      	ldr	r5, [sp, #8]
 800c696:	ee34 6a83 	vadd.f32	s12, s9, s6
 800c69a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800c69e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800c6a2:	9805      	ldr	r0, [sp, #20]
 800c6a4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	ed82 6a00 	vstr	s12, [r2]
 800c6ae:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800c6b2:	edd8 3a01 	vldr	s7, [r8, #4]
 800c6b6:	ee75 5a67 	vsub.f32	s11, s10, s15
 800c6ba:	eddc 1a01 	vldr	s3, [ip, #4]
 800c6be:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c6c2:	ee75 3a23 	vadd.f32	s7, s10, s7
 800c6c6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800c6ca:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800c6ce:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800c6d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6d6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c6da:	ed82 5a01 	vstr	s10, [r2, #4]
 800c6de:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c6e2:	9a07      	ldr	r2, [sp, #28]
 800c6e4:	ee77 7a02 	vadd.f32	s15, s14, s4
 800c6e8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800c6ec:	edd2 2a00 	vldr	s5, [r2]
 800c6f0:	ed92 5a01 	vldr	s10, [r2, #4]
 800c6f4:	ee64 3a22 	vmul.f32	s7, s8, s5
 800c6f8:	ee24 4a05 	vmul.f32	s8, s8, s10
 800c6fc:	ee24 5a85 	vmul.f32	s10, s9, s10
 800c700:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800c704:	ee33 5a85 	vadd.f32	s10, s7, s10
 800c708:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800c70c:	ed88 5a00 	vstr	s10, [r8]
 800c710:	edc8 4a01 	vstr	s9, [r8, #4]
 800c714:	edd5 4a01 	vldr	s9, [r5, #4]
 800c718:	edd5 6a00 	vldr	s13, [r5]
 800c71c:	9d06      	ldr	r5, [sp, #24]
 800c71e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800c722:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c726:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800c72a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c72e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c732:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c736:	ed86 6a01 	vstr	s12, [r6, #4]
 800c73a:	edc6 5a00 	vstr	s11, [r6]
 800c73e:	edd5 5a01 	vldr	s11, [r5, #4]
 800c742:	edd5 6a00 	vldr	s13, [r5]
 800c746:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c748:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c74c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c750:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c754:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c758:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c75c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c760:	edcc 7a01 	vstr	s15, [ip, #4]
 800c764:	ed8c 7a00 	vstr	s14, [ip]
 800c768:	6872      	ldr	r2, [r6, #4]
 800c76a:	f000 f92d 	bl	800c9c8 <arm_radix8_butterfly_f32>
 800c76e:	9803      	ldr	r0, [sp, #12]
 800c770:	4621      	mov	r1, r4
 800c772:	6872      	ldr	r2, [r6, #4]
 800c774:	2304      	movs	r3, #4
 800c776:	f000 f927 	bl	800c9c8 <arm_radix8_butterfly_f32>
 800c77a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c77c:	4621      	mov	r1, r4
 800c77e:	6872      	ldr	r2, [r6, #4]
 800c780:	2304      	movs	r3, #4
 800c782:	f000 f921 	bl	800c9c8 <arm_radix8_butterfly_f32>
 800c786:	4621      	mov	r1, r4
 800c788:	6872      	ldr	r2, [r6, #4]
 800c78a:	2304      	movs	r3, #4
 800c78c:	9804      	ldr	r0, [sp, #16]
 800c78e:	b00f      	add	sp, #60	; 0x3c
 800c790:	ecbd 8b06 	vpop	{d8-d10}
 800c794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c798:	f000 b916 	b.w	800c9c8 <arm_radix8_butterfly_f32>

0800c79c <arm_cfft_f32>:
 800c79c:	2a01      	cmp	r2, #1
 800c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	4617      	mov	r7, r2
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	4698      	mov	r8, r3
 800c7aa:	8805      	ldrh	r5, [r0, #0]
 800c7ac:	d053      	beq.n	800c856 <arm_cfft_f32+0xba>
 800c7ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c7b2:	d04b      	beq.n	800c84c <arm_cfft_f32+0xb0>
 800c7b4:	d916      	bls.n	800c7e4 <arm_cfft_f32+0x48>
 800c7b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c7ba:	d01a      	beq.n	800c7f2 <arm_cfft_f32+0x56>
 800c7bc:	d95a      	bls.n	800c874 <arm_cfft_f32+0xd8>
 800c7be:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c7c2:	d043      	beq.n	800c84c <arm_cfft_f32+0xb0>
 800c7c4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c7c8:	d105      	bne.n	800c7d6 <arm_cfft_f32+0x3a>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	6872      	ldr	r2, [r6, #4]
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 f8f9 	bl	800c9c8 <arm_radix8_butterfly_f32>
 800c7d6:	f1b8 0f00 	cmp.w	r8, #0
 800c7da:	d111      	bne.n	800c800 <arm_cfft_f32+0x64>
 800c7dc:	2f01      	cmp	r7, #1
 800c7de:	d016      	beq.n	800c80e <arm_cfft_f32+0x72>
 800c7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e4:	2d20      	cmp	r5, #32
 800c7e6:	d031      	beq.n	800c84c <arm_cfft_f32+0xb0>
 800c7e8:	d948      	bls.n	800c87c <arm_cfft_f32+0xe0>
 800c7ea:	2d40      	cmp	r5, #64	; 0x40
 800c7ec:	d0ed      	beq.n	800c7ca <arm_cfft_f32+0x2e>
 800c7ee:	2d80      	cmp	r5, #128	; 0x80
 800c7f0:	d1f1      	bne.n	800c7d6 <arm_cfft_f32+0x3a>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7ff fca9 	bl	800c14c <arm_cfft_radix8by2_f32>
 800c7fa:	f1b8 0f00 	cmp.w	r8, #0
 800c7fe:	d0ed      	beq.n	800c7dc <arm_cfft_f32+0x40>
 800c800:	68b2      	ldr	r2, [r6, #8]
 800c802:	4620      	mov	r0, r4
 800c804:	89b1      	ldrh	r1, [r6, #12]
 800c806:	f7f3 fd1b 	bl	8000240 <arm_bitreversal_32>
 800c80a:	2f01      	cmp	r7, #1
 800c80c:	d1e8      	bne.n	800c7e0 <arm_cfft_f32+0x44>
 800c80e:	ee07 5a90 	vmov	s15, r5
 800c812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c81e:	2d00      	cmp	r5, #0
 800c820:	d0de      	beq.n	800c7e0 <arm_cfft_f32+0x44>
 800c822:	f104 0108 	add.w	r1, r4, #8
 800c826:	2300      	movs	r3, #0
 800c828:	ed11 7a02 	vldr	s14, [r1, #-8]
 800c82c:	3301      	adds	r3, #1
 800c82e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c832:	3108      	adds	r1, #8
 800c834:	429d      	cmp	r5, r3
 800c836:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c83a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c83e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c842:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c846:	d1ef      	bne.n	800c828 <arm_cfft_f32+0x8c>
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84c:	4621      	mov	r1, r4
 800c84e:	4630      	mov	r0, r6
 800c850:	f7ff fd4c 	bl	800c2ec <arm_cfft_radix8by4_f32>
 800c854:	e7bf      	b.n	800c7d6 <arm_cfft_f32+0x3a>
 800c856:	b1a5      	cbz	r5, 800c882 <arm_cfft_f32+0xe6>
 800c858:	f101 030c 	add.w	r3, r1, #12
 800c85c:	2200      	movs	r2, #0
 800c85e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c862:	3201      	adds	r2, #1
 800c864:	3308      	adds	r3, #8
 800c866:	eef1 7a67 	vneg.f32	s15, s15
 800c86a:	4295      	cmp	r5, r2
 800c86c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c870:	d1f5      	bne.n	800c85e <arm_cfft_f32+0xc2>
 800c872:	e79c      	b.n	800c7ae <arm_cfft_f32+0x12>
 800c874:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c878:	d0a7      	beq.n	800c7ca <arm_cfft_f32+0x2e>
 800c87a:	e7ac      	b.n	800c7d6 <arm_cfft_f32+0x3a>
 800c87c:	2d10      	cmp	r5, #16
 800c87e:	d0b8      	beq.n	800c7f2 <arm_cfft_f32+0x56>
 800c880:	e7a9      	b.n	800c7d6 <arm_cfft_f32+0x3a>
 800c882:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c886:	d896      	bhi.n	800c7b6 <arm_cfft_f32+0x1a>
 800c888:	e7ac      	b.n	800c7e4 <arm_cfft_f32+0x48>
 800c88a:	bf00      	nop

0800c88c <arm_cmplx_mag_squared_f32>:
 800c88c:	b470      	push	{r4, r5, r6}
 800c88e:	0896      	lsrs	r6, r2, #2
 800c890:	d03e      	beq.n	800c910 <arm_cmplx_mag_squared_f32+0x84>
 800c892:	f100 0320 	add.w	r3, r0, #32
 800c896:	f101 0410 	add.w	r4, r1, #16
 800c89a:	4635      	mov	r5, r6
 800c89c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800c8a0:	3d01      	subs	r5, #1
 800c8a2:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800c8a6:	f104 0410 	add.w	r4, r4, #16
 800c8aa:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 800c8ae:	ee27 5a07 	vmul.f32	s10, s14, s14
 800c8b2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800c8b6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c8ba:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c8be:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800c8c2:	ed13 4a03 	vldr	s8, [r3, #-12]
 800c8c6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c8ca:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c8ce:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c8d2:	ed53 4a01 	vldr	s9, [r3, #-4]
 800c8d6:	ee24 4a04 	vmul.f32	s8, s8, s8
 800c8da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8de:	f103 0320 	add.w	r3, r3, #32
 800c8e2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800c8e6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c8ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c8ee:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c8f2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c8f6:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 800c8fa:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800c8fe:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 800c902:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c906:	d1c9      	bne.n	800c89c <arm_cmplx_mag_squared_f32+0x10>
 800c908:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800c90c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c910:	f012 0203 	ands.w	r2, r2, #3
 800c914:	d010      	beq.n	800c938 <arm_cmplx_mag_squared_f32+0xac>
 800c916:	3008      	adds	r0, #8
 800c918:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c91c:	3a01      	subs	r2, #1
 800c91e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c922:	f100 0008 	add.w	r0, r0, #8
 800c926:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c92a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c92e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c932:	ece1 7a01 	vstmia	r1!, {s15}
 800c936:	d1ef      	bne.n	800c918 <arm_cmplx_mag_squared_f32+0x8c>
 800c938:	bc70      	pop	{r4, r5, r6}
 800c93a:	4770      	bx	lr

0800c93c <arm_mult_f32>:
 800c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c942:	d033      	beq.n	800c9ac <arm_mult_f32+0x70>
 800c944:	f100 0610 	add.w	r6, r0, #16
 800c948:	f101 0510 	add.w	r5, r1, #16
 800c94c:	f102 0410 	add.w	r4, r2, #16
 800c950:	4677      	mov	r7, lr
 800c952:	ed16 7a04 	vldr	s14, [r6, #-16]
 800c956:	3f01      	subs	r7, #1
 800c958:	ed15 6a04 	vldr	s12, [r5, #-16]
 800c95c:	f106 0610 	add.w	r6, r6, #16
 800c960:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800c964:	f105 0510 	add.w	r5, r5, #16
 800c968:	ee27 6a06 	vmul.f32	s12, s14, s12
 800c96c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800c970:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800c974:	f104 0410 	add.w	r4, r4, #16
 800c978:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800c97c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c980:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800c984:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800c988:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c98c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800c990:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800c994:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c998:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800c99c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c9a0:	d1d7      	bne.n	800c952 <arm_mult_f32+0x16>
 800c9a2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c9a6:	4420      	add	r0, r4
 800c9a8:	4421      	add	r1, r4
 800c9aa:	4422      	add	r2, r4
 800c9ac:	f013 0303 	ands.w	r3, r3, #3
 800c9b0:	d009      	beq.n	800c9c6 <arm_mult_f32+0x8a>
 800c9b2:	ecf0 7a01 	vldmia	r0!, {s15}
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	ecb1 7a01 	vldmia	r1!, {s14}
 800c9bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9c0:	ece2 7a01 	vstmia	r2!, {s15}
 800c9c4:	d1f5      	bne.n	800c9b2 <arm_mult_f32+0x76>
 800c9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9c8 <arm_radix8_butterfly_f32>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	468a      	mov	sl, r1
 800c9d2:	468b      	mov	fp, r1
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	ed2d 8b10 	vpush	{d8-d15}
 800c9da:	469c      	mov	ip, r3
 800c9dc:	b09d      	sub	sp, #116	; 0x74
 800c9de:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800ccec <arm_radix8_butterfly_f32+0x324>
 800c9e2:	9019      	str	r0, [sp, #100]	; 0x64
 800c9e4:	921a      	str	r2, [sp, #104]	; 0x68
 800c9e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c9e8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c9ec:	f04f 0800 	mov.w	r8, #0
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	9311      	str	r3, [sp, #68]	; 0x44
 800c9f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	0053      	lsls	r3, r2, #1
 800ca02:	18d5      	adds	r5, r2, r3
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	0113      	lsls	r3, r2, #4
 800ca08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ca0a:	194c      	adds	r4, r1, r5
 800ca0c:	eb02 0609 	add.w	r6, r2, r9
 800ca10:	9302      	str	r3, [sp, #8]
 800ca12:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ca16:	4613      	mov	r3, r2
 800ca18:	190a      	adds	r2, r1, r4
 800ca1a:	eb06 0709 	add.w	r7, r6, r9
 800ca1e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ca22:	1888      	adds	r0, r1, r2
 800ca24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ca28:	4401      	add	r1, r0
 800ca2a:	3204      	adds	r2, #4
 800ca2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ca30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	3104      	adds	r1, #4
 800ca38:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800ca3c:	44d8      	add	r8, fp
 800ca3e:	ed90 7a00 	vldr	s14, [r0]
 800ca42:	ed94 5a00 	vldr	s10, [r4]
 800ca46:	45c2      	cmp	sl, r8
 800ca48:	edd7 3a00 	vldr	s7, [r7]
 800ca4c:	ed96 6a00 	vldr	s12, [r6]
 800ca50:	ee37 1a85 	vadd.f32	s2, s15, s10
 800ca54:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ca58:	ee73 4a87 	vadd.f32	s9, s7, s14
 800ca5c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800ca60:	edd5 7a00 	vldr	s15, [r5]
 800ca64:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800ca68:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ca6c:	ee36 2a26 	vadd.f32	s4, s12, s13
 800ca70:	ee37 4a87 	vadd.f32	s8, s15, s14
 800ca74:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ca78:	ee71 5a24 	vadd.f32	s11, s2, s9
 800ca7c:	ee32 6a04 	vadd.f32	s12, s4, s8
 800ca80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ca84:	ee31 1a64 	vsub.f32	s2, s2, s9
 800ca88:	ee75 4a86 	vadd.f32	s9, s11, s12
 800ca8c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ca90:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800ca94:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800ca98:	ee32 2a44 	vsub.f32	s4, s4, s8
 800ca9c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800caa0:	ed94 0a01 	vldr	s0, [r4, #4]
 800caa4:	edc4 5a00 	vstr	s11, [r4]
 800caa8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800caac:	edd6 5a01 	vldr	s11, [r6, #4]
 800cab0:	edd5 2a01 	vldr	s5, [r5, #4]
 800cab4:	ee75 1a27 	vadd.f32	s3, s10, s15
 800cab8:	ed92 4a00 	vldr	s8, [r2]
 800cabc:	ee75 7a67 	vsub.f32	s15, s10, s15
 800cac0:	edd1 4a00 	vldr	s9, [r1]
 800cac4:	ee27 7a09 	vmul.f32	s14, s14, s18
 800cac8:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800cacc:	ed9c 6a00 	vldr	s12, [ip]
 800cad0:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800cad4:	edd0 0a01 	vldr	s1, [r0, #4]
 800cad8:	ed97 5a01 	vldr	s10, [r7, #4]
 800cadc:	ee35 4a84 	vadd.f32	s8, s11, s8
 800cae0:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800cae4:	ee73 5a26 	vadd.f32	s11, s6, s13
 800cae8:	ee76 2a00 	vadd.f32	s5, s12, s0
 800caec:	ee73 6a66 	vsub.f32	s13, s6, s13
 800caf0:	ee36 6a40 	vsub.f32	s12, s12, s0
 800caf4:	ee35 0a20 	vadd.f32	s0, s10, s1
 800caf8:	ee65 5a89 	vmul.f32	s11, s11, s18
 800cafc:	ee35 5a60 	vsub.f32	s10, s10, s1
 800cb00:	ee32 3a80 	vadd.f32	s6, s5, s0
 800cb04:	ee74 0a24 	vadd.f32	s1, s8, s9
 800cb08:	ee66 6a89 	vmul.f32	s13, s13, s18
 800cb0c:	ee74 4a64 	vsub.f32	s9, s8, s9
 800cb10:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800cb14:	ee75 2a25 	vadd.f32	s5, s10, s11
 800cb18:	ee33 0a20 	vadd.f32	s0, s6, s1
 800cb1c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cb20:	ee33 3a60 	vsub.f32	s6, s6, s1
 800cb24:	ee36 5a26 	vadd.f32	s10, s12, s13
 800cb28:	ed8c 0a00 	vstr	s0, [ip]
 800cb2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800cb30:	449c      	add	ip, r3
 800cb32:	ee33 6a87 	vadd.f32	s12, s7, s14
 800cb36:	ed84 3a01 	vstr	s6, [r4, #4]
 800cb3a:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800cb3e:	441c      	add	r4, r3
 800cb40:	ee71 3a24 	vadd.f32	s7, s2, s9
 800cb44:	ee71 4a64 	vsub.f32	s9, s2, s9
 800cb48:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800cb4c:	edc7 3a00 	vstr	s7, [r7]
 800cb50:	ee34 1a42 	vsub.f32	s2, s8, s4
 800cb54:	edc0 4a00 	vstr	s9, [r0]
 800cb58:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800cb5c:	ee75 4a46 	vsub.f32	s9, s10, s12
 800cb60:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cb64:	ed87 1a01 	vstr	s2, [r7, #4]
 800cb68:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800cb6c:	441f      	add	r7, r3
 800cb6e:	ee32 4a04 	vadd.f32	s8, s4, s8
 800cb72:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800cb76:	ee36 6a05 	vadd.f32	s12, s12, s10
 800cb7a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cb7e:	ed80 4a01 	vstr	s8, [r0, #4]
 800cb82:	ed86 3a00 	vstr	s6, [r6]
 800cb86:	4418      	add	r0, r3
 800cb88:	ed41 1a01 	vstr	s3, [r1, #-4]
 800cb8c:	ed42 3a01 	vstr	s7, [r2, #-4]
 800cb90:	edc5 7a00 	vstr	s15, [r5]
 800cb94:	edc6 4a01 	vstr	s9, [r6, #4]
 800cb98:	441e      	add	r6, r3
 800cb9a:	ed81 6a00 	vstr	s12, [r1]
 800cb9e:	4419      	add	r1, r3
 800cba0:	edc2 5a00 	vstr	s11, [r2]
 800cba4:	441a      	add	r2, r3
 800cba6:	ed85 7a01 	vstr	s14, [r5, #4]
 800cbaa:	441d      	add	r5, r3
 800cbac:	f63f af44 	bhi.w	800ca38 <arm_radix8_butterfly_f32+0x70>
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbb4:	2b07      	cmp	r3, #7
 800cbb6:	f240 81f4 	bls.w	800cfa2 <arm_radix8_butterfly_f32+0x5da>
 800cbba:	9901      	ldr	r1, [sp, #4]
 800cbbc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800cbc0:	9d02      	ldr	r5, [sp, #8]
 800cbc2:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800cbc6:	3101      	adds	r1, #1
 800cbc8:	eb04 000e 	add.w	r0, r4, lr
 800cbcc:	00e4      	lsls	r4, r4, #3
 800cbce:	3508      	adds	r5, #8
 800cbd0:	4419      	add	r1, r3
 800cbd2:	eb00 0c0e 	add.w	ip, r0, lr
 800cbd6:	9413      	str	r4, [sp, #76]	; 0x4c
 800cbd8:	00c0      	lsls	r0, r0, #3
 800cbda:	185e      	adds	r6, r3, r1
 800cbdc:	4617      	mov	r7, r2
 800cbde:	9218      	str	r2, [sp, #96]	; 0x60
 800cbe0:	f109 0908 	add.w	r9, r9, #8
 800cbe4:	199c      	adds	r4, r3, r6
 800cbe6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cbe8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cbea:	9012      	str	r0, [sp, #72]	; 0x48
 800cbec:	195d      	adds	r5, r3, r5
 800cbee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cbf0:	443a      	add	r2, r7
 800cbf2:	950c      	str	r5, [sp, #48]	; 0x30
 800cbf4:	4698      	mov	r8, r3
 800cbf6:	4420      	add	r0, r4
 800cbf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800cbfa:	19d7      	adds	r7, r2, r7
 800cbfc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cc00:	4405      	add	r5, r0
 800cc02:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800cc06:	9710      	str	r7, [sp, #64]	; 0x40
 800cc08:	eb0c 070e 	add.w	r7, ip, lr
 800cc0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800cc10:	3404      	adds	r4, #4
 800cc12:	3004      	adds	r0, #4
 800cc14:	44c8      	add	r8, r9
 800cc16:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800cc1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc1c:	940a      	str	r4, [sp, #40]	; 0x28
 800cc1e:	9009      	str	r0, [sp, #36]	; 0x24
 800cc20:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cc24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800cc26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cc2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cc2c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800cc30:	eb07 080e 	add.w	r8, r7, lr
 800cc34:	eb04 0900 	add.w	r9, r4, r0
 800cc38:	00f8      	lsls	r0, r7, #3
 800cc3a:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800cc3e:	3504      	adds	r5, #4
 800cc40:	4607      	mov	r7, r0
 800cc42:	9017      	str	r0, [sp, #92]	; 0x5c
 800cc44:	910b      	str	r1, [sp, #44]	; 0x2c
 800cc46:	4618      	mov	r0, r3
 800cc48:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800cc4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc4e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800cc52:	18e3      	adds	r3, r4, r3
 800cc54:	9508      	str	r5, [sp, #32]
 800cc56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800cc58:	910e      	str	r1, [sp, #56]	; 0x38
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	eb04 0805 	add.w	r8, r4, r5
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	19e5      	adds	r5, r4, r7
 800cc64:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800cc68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800cc6a:	9316      	str	r3, [sp, #88]	; 0x58
 800cc6c:	190b      	adds	r3, r1, r4
 800cc6e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cc70:	9505      	str	r5, [sp, #20]
 800cc72:	9303      	str	r3, [sp, #12]
 800cc74:	f100 0308 	add.w	r3, r0, #8
 800cc78:	9707      	str	r7, [sp, #28]
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc7e:	2301      	movs	r3, #1
 800cc80:	9306      	str	r3, [sp, #24]
 800cc82:	9b00      	ldr	r3, [sp, #0]
 800cc84:	ed90 fa00 	vldr	s30, [r0]
 800cc88:	edd0 ba01 	vldr	s23, [r0, #4]
 800cc8c:	9803      	ldr	r0, [sp, #12]
 800cc8e:	9903      	ldr	r1, [sp, #12]
 800cc90:	ed90 ba01 	vldr	s22, [r0, #4]
 800cc94:	9804      	ldr	r0, [sp, #16]
 800cc96:	edd1 ea00 	vldr	s29, [r1]
 800cc9a:	edd0 aa01 	vldr	s21, [r0, #4]
 800cc9e:	9805      	ldr	r0, [sp, #20]
 800cca0:	9905      	ldr	r1, [sp, #20]
 800cca2:	edd0 7a01 	vldr	s15, [r0, #4]
 800cca6:	ed91 da00 	vldr	s26, [r1]
 800ccaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ccac:	9c04      	ldr	r4, [sp, #16]
 800ccae:	edcd 7a01 	vstr	s15, [sp, #4]
 800ccb2:	edd8 7a01 	vldr	s15, [r8, #4]
 800ccb6:	9100      	str	r1, [sp, #0]
 800ccb8:	edd2 fa00 	vldr	s31, [r2]
 800ccbc:	ed94 ea00 	vldr	s28, [r4]
 800ccc0:	ed92 ca01 	vldr	s24, [r2, #4]
 800ccc4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ccc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ccca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cccc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ccce:	edd9 da00 	vldr	s27, [r9]
 800ccd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ccd4:	edd8 ca00 	vldr	s25, [r8]
 800ccd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ccda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccdc:	f8dd c018 	ldr.w	ip, [sp, #24]
 800cce0:	ed99 aa01 	vldr	s20, [r9, #4]
 800cce4:	edcd 7a02 	vstr	s15, [sp, #8]
 800cce8:	9800      	ldr	r0, [sp, #0]
 800ccea:	e001      	b.n	800ccf0 <arm_radix8_butterfly_f32+0x328>
 800ccec:	3f3504f3 	.word	0x3f3504f3
 800ccf0:	edd5 3a00 	vldr	s7, [r5]
 800ccf4:	44dc      	add	ip, fp
 800ccf6:	ed91 7a00 	vldr	s14, [r1]
 800ccfa:	edd4 8a00 	vldr	s17, [r4]
 800ccfe:	45e2      	cmp	sl, ip
 800cd00:	ed57 7a01 	vldr	s15, [r7, #-4]
 800cd04:	ed90 5a00 	vldr	s10, [r0]
 800cd08:	ed56 5a01 	vldr	s11, [r6, #-4]
 800cd0c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800cd10:	ed92 1a00 	vldr	s2, [r2]
 800cd14:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800cd18:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800cd1c:	ee75 9a25 	vadd.f32	s19, s10, s11
 800cd20:	ee31 3a07 	vadd.f32	s6, s2, s14
 800cd24:	ed92 8a01 	vldr	s16, [r2, #4]
 800cd28:	ee73 6a84 	vadd.f32	s13, s7, s8
 800cd2c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cd30:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800cd34:	ee73 1a06 	vadd.f32	s3, s6, s12
 800cd38:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800cd3c:	ee75 7a84 	vadd.f32	s15, s11, s8
 800cd40:	ee31 1a47 	vsub.f32	s2, s2, s14
 800cd44:	ee31 7a85 	vadd.f32	s14, s3, s10
 800cd48:	ee67 7a89 	vmul.f32	s15, s15, s18
 800cd4c:	ee33 3a46 	vsub.f32	s6, s6, s12
 800cd50:	ed82 7a00 	vstr	s14, [r2]
 800cd54:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800cd58:	ed96 6a00 	vldr	s12, [r6]
 800cd5c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800cd60:	edd5 3a01 	vldr	s7, [r5, #4]
 800cd64:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800cd68:	ed90 7a01 	vldr	s14, [r0, #4]
 800cd6c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800cd70:	edde 4a00 	vldr	s9, [lr]
 800cd74:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800cd78:	ee77 2a46 	vsub.f32	s5, s14, s12
 800cd7c:	edd1 6a01 	vldr	s13, [r1, #4]
 800cd80:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800cd84:	edd7 0a00 	vldr	s1, [r7]
 800cd88:	ee77 5a06 	vadd.f32	s11, s14, s12
 800cd8c:	ed94 7a01 	vldr	s14, [r4, #4]
 800cd90:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800cd94:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800cd98:	ee78 4a66 	vsub.f32	s9, s16, s13
 800cd9c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800cda0:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800cda4:	ee77 6a20 	vadd.f32	s13, s14, s1
 800cda8:	ee24 4a09 	vmul.f32	s8, s8, s18
 800cdac:	ee37 7a60 	vsub.f32	s14, s14, s1
 800cdb0:	ee20 8a09 	vmul.f32	s16, s0, s18
 800cdb4:	ee75 0a86 	vadd.f32	s1, s11, s12
 800cdb8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800cdbc:	ee62 2a89 	vmul.f32	s5, s5, s18
 800cdc0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800cdc4:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800cdc8:	ee77 7a62 	vsub.f32	s15, s14, s5
 800cdcc:	ee74 5a88 	vadd.f32	s11, s9, s16
 800cdd0:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800cdd4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800cdd8:	ee71 2a04 	vadd.f32	s5, s2, s8
 800cddc:	ee31 7a44 	vsub.f32	s14, s2, s8
 800cde0:	ee30 1a60 	vsub.f32	s2, s0, s1
 800cde4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800cde8:	ee33 6a46 	vsub.f32	s12, s6, s12
 800cdec:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800cdf0:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800cdf4:	ee38 4a68 	vsub.f32	s8, s16, s17
 800cdf8:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800cdfc:	ee72 5a25 	vadd.f32	s11, s4, s11
 800ce00:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800ce04:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800ce08:	ee77 2a27 	vadd.f32	s5, s14, s15
 800ce0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce10:	ee78 7a88 	vadd.f32	s15, s17, s16
 800ce14:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800ce18:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800ce1c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800ce20:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800ce24:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800ce28:	ee70 0a20 	vadd.f32	s1, s0, s1
 800ce2c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800ce30:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800ce34:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800ce38:	edc2 0a01 	vstr	s1, [r2, #4]
 800ce3c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800ce40:	441a      	add	r2, r3
 800ce42:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800ce46:	ee31 5a45 	vsub.f32	s10, s2, s10
 800ce4a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800ce4e:	ed81 8a00 	vstr	s16, [r1]
 800ce52:	ee39 0a80 	vadd.f32	s0, s19, s0
 800ce56:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ce5a:	ed81 5a01 	vstr	s10, [r1, #4]
 800ce5e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800ce62:	edcd 3a00 	vstr	s7, [sp]
 800ce66:	ed9d 5a02 	vldr	s10, [sp, #8]
 800ce6a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800ce6e:	eddd 3a01 	vldr	s7, [sp, #4]
 800ce72:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800ce76:	ed84 0a00 	vstr	s0, [r4]
 800ce7a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ce7e:	ed84 3a01 	vstr	s6, [r4, #4]
 800ce82:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800ce86:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ce8a:	eddd 3a00 	vldr	s7, [sp]
 800ce8e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800ce92:	4419      	add	r1, r3
 800ce94:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800ce98:	441c      	add	r4, r3
 800ce9a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800ce9e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800cea2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800cea6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800ceaa:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800ceae:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800ceb2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800ceb6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800ceba:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800cebe:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800cec2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800cec6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800ceca:	ee38 8a01 	vadd.f32	s16, s16, s2
 800cece:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800ced2:	ee39 5a85 	vadd.f32	s10, s19, s10
 800ced6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800ceda:	ed07 8a01 	vstr	s16, [r7, #-4]
 800cede:	ee30 0a21 	vadd.f32	s0, s0, s3
 800cee2:	ed87 6a00 	vstr	s12, [r7]
 800cee6:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ceea:	edc0 0a00 	vstr	s1, [r0]
 800ceee:	ee33 3a28 	vadd.f32	s6, s6, s17
 800cef2:	edc0 3a01 	vstr	s7, [r0, #4]
 800cef6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cefa:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800cefe:	edce 4a00 	vstr	s9, [lr]
 800cf02:	4418      	add	r0, r3
 800cf04:	ed06 0a01 	vstr	s0, [r6, #-4]
 800cf08:	441f      	add	r7, r3
 800cf0a:	edc6 2a00 	vstr	s5, [r6]
 800cf0e:	449e      	add	lr, r3
 800cf10:	ed85 3a00 	vstr	s6, [r5]
 800cf14:	441e      	add	r6, r3
 800cf16:	ed85 7a01 	vstr	s14, [r5, #4]
 800cf1a:	441d      	add	r5, r3
 800cf1c:	f63f aee8 	bhi.w	800ccf0 <arm_radix8_butterfly_f32+0x328>
 800cf20:	9a06      	ldr	r2, [sp, #24]
 800cf22:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cf24:	3201      	adds	r2, #1
 800cf26:	4611      	mov	r1, r2
 800cf28:	9206      	str	r2, [sp, #24]
 800cf2a:	9a07      	ldr	r2, [sp, #28]
 800cf2c:	4402      	add	r2, r0
 800cf2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cf30:	9207      	str	r2, [sp, #28]
 800cf32:	9a03      	ldr	r2, [sp, #12]
 800cf34:	4402      	add	r2, r0
 800cf36:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cf38:	9203      	str	r2, [sp, #12]
 800cf3a:	9a04      	ldr	r2, [sp, #16]
 800cf3c:	4402      	add	r2, r0
 800cf3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cf40:	9204      	str	r2, [sp, #16]
 800cf42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cf44:	4491      	add	r9, r2
 800cf46:	9a05      	ldr	r2, [sp, #20]
 800cf48:	4402      	add	r2, r0
 800cf4a:	9205      	str	r2, [sp, #20]
 800cf4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf4e:	4490      	add	r8, r2
 800cf50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf52:	3208      	adds	r2, #8
 800cf54:	920f      	str	r2, [sp, #60]	; 0x3c
 800cf56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf58:	3208      	adds	r2, #8
 800cf5a:	920e      	str	r2, [sp, #56]	; 0x38
 800cf5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf5e:	3208      	adds	r2, #8
 800cf60:	920d      	str	r2, [sp, #52]	; 0x34
 800cf62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf64:	3208      	adds	r2, #8
 800cf66:	920c      	str	r2, [sp, #48]	; 0x30
 800cf68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf6a:	3208      	adds	r2, #8
 800cf6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf70:	3208      	adds	r2, #8
 800cf72:	920a      	str	r2, [sp, #40]	; 0x28
 800cf74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf76:	3208      	adds	r2, #8
 800cf78:	9209      	str	r2, [sp, #36]	; 0x24
 800cf7a:	9a08      	ldr	r2, [sp, #32]
 800cf7c:	3208      	adds	r2, #8
 800cf7e:	9208      	str	r2, [sp, #32]
 800cf80:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800cf82:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cf84:	4622      	mov	r2, r4
 800cf86:	4288      	cmp	r0, r1
 800cf88:	d005      	beq.n	800cf96 <arm_radix8_butterfly_f32+0x5ce>
 800cf8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4401      	add	r1, r0
 800cf90:	9807      	ldr	r0, [sp, #28]
 800cf92:	9110      	str	r1, [sp, #64]	; 0x40
 800cf94:	e676      	b.n	800cc84 <arm_radix8_butterfly_f32+0x2bc>
 800cf96:	4683      	mov	fp, r0
 800cf98:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800cf9c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800cfa0:	e522      	b.n	800c9e8 <arm_radix8_butterfly_f32+0x20>
 800cfa2:	b01d      	add	sp, #116	; 0x74
 800cfa4:	ecbd 8b10 	vpop	{d8-d15}
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfac <__errno>:
 800cfac:	4b01      	ldr	r3, [pc, #4]	; (800cfb4 <__errno+0x8>)
 800cfae:	6818      	ldr	r0, [r3, #0]
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	2000000c 	.word	0x2000000c

0800cfb8 <__libc_init_array>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	4d0d      	ldr	r5, [pc, #52]	; (800cff0 <__libc_init_array+0x38>)
 800cfbc:	4c0d      	ldr	r4, [pc, #52]	; (800cff4 <__libc_init_array+0x3c>)
 800cfbe:	1b64      	subs	r4, r4, r5
 800cfc0:	10a4      	asrs	r4, r4, #2
 800cfc2:	2600      	movs	r6, #0
 800cfc4:	42a6      	cmp	r6, r4
 800cfc6:	d109      	bne.n	800cfdc <__libc_init_array+0x24>
 800cfc8:	4d0b      	ldr	r5, [pc, #44]	; (800cff8 <__libc_init_array+0x40>)
 800cfca:	4c0c      	ldr	r4, [pc, #48]	; (800cffc <__libc_init_array+0x44>)
 800cfcc:	f001 fc54 	bl	800e878 <_init>
 800cfd0:	1b64      	subs	r4, r4, r5
 800cfd2:	10a4      	asrs	r4, r4, #2
 800cfd4:	2600      	movs	r6, #0
 800cfd6:	42a6      	cmp	r6, r4
 800cfd8:	d105      	bne.n	800cfe6 <__libc_init_array+0x2e>
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfe0:	4798      	blx	r3
 800cfe2:	3601      	adds	r6, #1
 800cfe4:	e7ee      	b.n	800cfc4 <__libc_init_array+0xc>
 800cfe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfea:	4798      	blx	r3
 800cfec:	3601      	adds	r6, #1
 800cfee:	e7f2      	b.n	800cfd6 <__libc_init_array+0x1e>
 800cff0:	080222a8 	.word	0x080222a8
 800cff4:	080222a8 	.word	0x080222a8
 800cff8:	080222a8 	.word	0x080222a8
 800cffc:	080222ac 	.word	0x080222ac

0800d000 <memcpy>:
 800d000:	440a      	add	r2, r1
 800d002:	4291      	cmp	r1, r2
 800d004:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d008:	d100      	bne.n	800d00c <memcpy+0xc>
 800d00a:	4770      	bx	lr
 800d00c:	b510      	push	{r4, lr}
 800d00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d016:	4291      	cmp	r1, r2
 800d018:	d1f9      	bne.n	800d00e <memcpy+0xe>
 800d01a:	bd10      	pop	{r4, pc}

0800d01c <memset>:
 800d01c:	4402      	add	r2, r0
 800d01e:	4603      	mov	r3, r0
 800d020:	4293      	cmp	r3, r2
 800d022:	d100      	bne.n	800d026 <memset+0xa>
 800d024:	4770      	bx	lr
 800d026:	f803 1b01 	strb.w	r1, [r3], #1
 800d02a:	e7f9      	b.n	800d020 <memset+0x4>

0800d02c <_free_r>:
 800d02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d02e:	2900      	cmp	r1, #0
 800d030:	d044      	beq.n	800d0bc <_free_r+0x90>
 800d032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d036:	9001      	str	r0, [sp, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f1a1 0404 	sub.w	r4, r1, #4
 800d03e:	bfb8      	it	lt
 800d040:	18e4      	addlt	r4, r4, r3
 800d042:	f000 f903 	bl	800d24c <__malloc_lock>
 800d046:	4a1e      	ldr	r2, [pc, #120]	; (800d0c0 <_free_r+0x94>)
 800d048:	9801      	ldr	r0, [sp, #4]
 800d04a:	6813      	ldr	r3, [r2, #0]
 800d04c:	b933      	cbnz	r3, 800d05c <_free_r+0x30>
 800d04e:	6063      	str	r3, [r4, #4]
 800d050:	6014      	str	r4, [r2, #0]
 800d052:	b003      	add	sp, #12
 800d054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d058:	f000 b8fe 	b.w	800d258 <__malloc_unlock>
 800d05c:	42a3      	cmp	r3, r4
 800d05e:	d908      	bls.n	800d072 <_free_r+0x46>
 800d060:	6825      	ldr	r5, [r4, #0]
 800d062:	1961      	adds	r1, r4, r5
 800d064:	428b      	cmp	r3, r1
 800d066:	bf01      	itttt	eq
 800d068:	6819      	ldreq	r1, [r3, #0]
 800d06a:	685b      	ldreq	r3, [r3, #4]
 800d06c:	1949      	addeq	r1, r1, r5
 800d06e:	6021      	streq	r1, [r4, #0]
 800d070:	e7ed      	b.n	800d04e <_free_r+0x22>
 800d072:	461a      	mov	r2, r3
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	b10b      	cbz	r3, 800d07c <_free_r+0x50>
 800d078:	42a3      	cmp	r3, r4
 800d07a:	d9fa      	bls.n	800d072 <_free_r+0x46>
 800d07c:	6811      	ldr	r1, [r2, #0]
 800d07e:	1855      	adds	r5, r2, r1
 800d080:	42a5      	cmp	r5, r4
 800d082:	d10b      	bne.n	800d09c <_free_r+0x70>
 800d084:	6824      	ldr	r4, [r4, #0]
 800d086:	4421      	add	r1, r4
 800d088:	1854      	adds	r4, r2, r1
 800d08a:	42a3      	cmp	r3, r4
 800d08c:	6011      	str	r1, [r2, #0]
 800d08e:	d1e0      	bne.n	800d052 <_free_r+0x26>
 800d090:	681c      	ldr	r4, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	6053      	str	r3, [r2, #4]
 800d096:	4421      	add	r1, r4
 800d098:	6011      	str	r1, [r2, #0]
 800d09a:	e7da      	b.n	800d052 <_free_r+0x26>
 800d09c:	d902      	bls.n	800d0a4 <_free_r+0x78>
 800d09e:	230c      	movs	r3, #12
 800d0a0:	6003      	str	r3, [r0, #0]
 800d0a2:	e7d6      	b.n	800d052 <_free_r+0x26>
 800d0a4:	6825      	ldr	r5, [r4, #0]
 800d0a6:	1961      	adds	r1, r4, r5
 800d0a8:	428b      	cmp	r3, r1
 800d0aa:	bf04      	itt	eq
 800d0ac:	6819      	ldreq	r1, [r3, #0]
 800d0ae:	685b      	ldreq	r3, [r3, #4]
 800d0b0:	6063      	str	r3, [r4, #4]
 800d0b2:	bf04      	itt	eq
 800d0b4:	1949      	addeq	r1, r1, r5
 800d0b6:	6021      	streq	r1, [r4, #0]
 800d0b8:	6054      	str	r4, [r2, #4]
 800d0ba:	e7ca      	b.n	800d052 <_free_r+0x26>
 800d0bc:	b003      	add	sp, #12
 800d0be:	bd30      	pop	{r4, r5, pc}
 800d0c0:	20018c78 	.word	0x20018c78

0800d0c4 <sbrk_aligned>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4e0e      	ldr	r6, [pc, #56]	; (800d100 <sbrk_aligned+0x3c>)
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	6831      	ldr	r1, [r6, #0]
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	b911      	cbnz	r1, 800d0d6 <sbrk_aligned+0x12>
 800d0d0:	f000 f88c 	bl	800d1ec <_sbrk_r>
 800d0d4:	6030      	str	r0, [r6, #0]
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f000 f887 	bl	800d1ec <_sbrk_r>
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	d00a      	beq.n	800d0f8 <sbrk_aligned+0x34>
 800d0e2:	1cc4      	adds	r4, r0, #3
 800d0e4:	f024 0403 	bic.w	r4, r4, #3
 800d0e8:	42a0      	cmp	r0, r4
 800d0ea:	d007      	beq.n	800d0fc <sbrk_aligned+0x38>
 800d0ec:	1a21      	subs	r1, r4, r0
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f000 f87c 	bl	800d1ec <_sbrk_r>
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d101      	bne.n	800d0fc <sbrk_aligned+0x38>
 800d0f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}
 800d100:	20018c7c 	.word	0x20018c7c

0800d104 <_malloc_r>:
 800d104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d108:	1ccd      	adds	r5, r1, #3
 800d10a:	f025 0503 	bic.w	r5, r5, #3
 800d10e:	3508      	adds	r5, #8
 800d110:	2d0c      	cmp	r5, #12
 800d112:	bf38      	it	cc
 800d114:	250c      	movcc	r5, #12
 800d116:	2d00      	cmp	r5, #0
 800d118:	4607      	mov	r7, r0
 800d11a:	db01      	blt.n	800d120 <_malloc_r+0x1c>
 800d11c:	42a9      	cmp	r1, r5
 800d11e:	d905      	bls.n	800d12c <_malloc_r+0x28>
 800d120:	230c      	movs	r3, #12
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	2600      	movs	r6, #0
 800d126:	4630      	mov	r0, r6
 800d128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d12c:	4e2e      	ldr	r6, [pc, #184]	; (800d1e8 <_malloc_r+0xe4>)
 800d12e:	f000 f88d 	bl	800d24c <__malloc_lock>
 800d132:	6833      	ldr	r3, [r6, #0]
 800d134:	461c      	mov	r4, r3
 800d136:	bb34      	cbnz	r4, 800d186 <_malloc_r+0x82>
 800d138:	4629      	mov	r1, r5
 800d13a:	4638      	mov	r0, r7
 800d13c:	f7ff ffc2 	bl	800d0c4 <sbrk_aligned>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	4604      	mov	r4, r0
 800d144:	d14d      	bne.n	800d1e2 <_malloc_r+0xde>
 800d146:	6834      	ldr	r4, [r6, #0]
 800d148:	4626      	mov	r6, r4
 800d14a:	2e00      	cmp	r6, #0
 800d14c:	d140      	bne.n	800d1d0 <_malloc_r+0xcc>
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	4631      	mov	r1, r6
 800d152:	4638      	mov	r0, r7
 800d154:	eb04 0803 	add.w	r8, r4, r3
 800d158:	f000 f848 	bl	800d1ec <_sbrk_r>
 800d15c:	4580      	cmp	r8, r0
 800d15e:	d13a      	bne.n	800d1d6 <_malloc_r+0xd2>
 800d160:	6821      	ldr	r1, [r4, #0]
 800d162:	3503      	adds	r5, #3
 800d164:	1a6d      	subs	r5, r5, r1
 800d166:	f025 0503 	bic.w	r5, r5, #3
 800d16a:	3508      	adds	r5, #8
 800d16c:	2d0c      	cmp	r5, #12
 800d16e:	bf38      	it	cc
 800d170:	250c      	movcc	r5, #12
 800d172:	4629      	mov	r1, r5
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff ffa5 	bl	800d0c4 <sbrk_aligned>
 800d17a:	3001      	adds	r0, #1
 800d17c:	d02b      	beq.n	800d1d6 <_malloc_r+0xd2>
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	442b      	add	r3, r5
 800d182:	6023      	str	r3, [r4, #0]
 800d184:	e00e      	b.n	800d1a4 <_malloc_r+0xa0>
 800d186:	6822      	ldr	r2, [r4, #0]
 800d188:	1b52      	subs	r2, r2, r5
 800d18a:	d41e      	bmi.n	800d1ca <_malloc_r+0xc6>
 800d18c:	2a0b      	cmp	r2, #11
 800d18e:	d916      	bls.n	800d1be <_malloc_r+0xba>
 800d190:	1961      	adds	r1, r4, r5
 800d192:	42a3      	cmp	r3, r4
 800d194:	6025      	str	r5, [r4, #0]
 800d196:	bf18      	it	ne
 800d198:	6059      	strne	r1, [r3, #4]
 800d19a:	6863      	ldr	r3, [r4, #4]
 800d19c:	bf08      	it	eq
 800d19e:	6031      	streq	r1, [r6, #0]
 800d1a0:	5162      	str	r2, [r4, r5]
 800d1a2:	604b      	str	r3, [r1, #4]
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f104 060b 	add.w	r6, r4, #11
 800d1aa:	f000 f855 	bl	800d258 <__malloc_unlock>
 800d1ae:	f026 0607 	bic.w	r6, r6, #7
 800d1b2:	1d23      	adds	r3, r4, #4
 800d1b4:	1af2      	subs	r2, r6, r3
 800d1b6:	d0b6      	beq.n	800d126 <_malloc_r+0x22>
 800d1b8:	1b9b      	subs	r3, r3, r6
 800d1ba:	50a3      	str	r3, [r4, r2]
 800d1bc:	e7b3      	b.n	800d126 <_malloc_r+0x22>
 800d1be:	6862      	ldr	r2, [r4, #4]
 800d1c0:	42a3      	cmp	r3, r4
 800d1c2:	bf0c      	ite	eq
 800d1c4:	6032      	streq	r2, [r6, #0]
 800d1c6:	605a      	strne	r2, [r3, #4]
 800d1c8:	e7ec      	b.n	800d1a4 <_malloc_r+0xa0>
 800d1ca:	4623      	mov	r3, r4
 800d1cc:	6864      	ldr	r4, [r4, #4]
 800d1ce:	e7b2      	b.n	800d136 <_malloc_r+0x32>
 800d1d0:	4634      	mov	r4, r6
 800d1d2:	6876      	ldr	r6, [r6, #4]
 800d1d4:	e7b9      	b.n	800d14a <_malloc_r+0x46>
 800d1d6:	230c      	movs	r3, #12
 800d1d8:	603b      	str	r3, [r7, #0]
 800d1da:	4638      	mov	r0, r7
 800d1dc:	f000 f83c 	bl	800d258 <__malloc_unlock>
 800d1e0:	e7a1      	b.n	800d126 <_malloc_r+0x22>
 800d1e2:	6025      	str	r5, [r4, #0]
 800d1e4:	e7de      	b.n	800d1a4 <_malloc_r+0xa0>
 800d1e6:	bf00      	nop
 800d1e8:	20018c78 	.word	0x20018c78

0800d1ec <_sbrk_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d06      	ldr	r5, [pc, #24]	; (800d208 <_sbrk_r+0x1c>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	602b      	str	r3, [r5, #0]
 800d1f8:	f7f4 fbc0 	bl	800197c <_sbrk>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_sbrk_r+0x1a>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_sbrk_r+0x1a>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	20018c80 	.word	0x20018c80

0800d20c <siprintf>:
 800d20c:	b40e      	push	{r1, r2, r3}
 800d20e:	b500      	push	{lr}
 800d210:	b09c      	sub	sp, #112	; 0x70
 800d212:	ab1d      	add	r3, sp, #116	; 0x74
 800d214:	9002      	str	r0, [sp, #8]
 800d216:	9006      	str	r0, [sp, #24]
 800d218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d21c:	4809      	ldr	r0, [pc, #36]	; (800d244 <siprintf+0x38>)
 800d21e:	9107      	str	r1, [sp, #28]
 800d220:	9104      	str	r1, [sp, #16]
 800d222:	4909      	ldr	r1, [pc, #36]	; (800d248 <siprintf+0x3c>)
 800d224:	f853 2b04 	ldr.w	r2, [r3], #4
 800d228:	9105      	str	r1, [sp, #20]
 800d22a:	6800      	ldr	r0, [r0, #0]
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	a902      	add	r1, sp, #8
 800d230:	f000 f8a2 	bl	800d378 <_svfiprintf_r>
 800d234:	9b02      	ldr	r3, [sp, #8]
 800d236:	2200      	movs	r2, #0
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	b01c      	add	sp, #112	; 0x70
 800d23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d240:	b003      	add	sp, #12
 800d242:	4770      	bx	lr
 800d244:	2000000c 	.word	0x2000000c
 800d248:	ffff0208 	.word	0xffff0208

0800d24c <__malloc_lock>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__malloc_lock+0x8>)
 800d24e:	f000 bb27 	b.w	800d8a0 <__retarget_lock_acquire_recursive>
 800d252:	bf00      	nop
 800d254:	20018c84 	.word	0x20018c84

0800d258 <__malloc_unlock>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__malloc_unlock+0x8>)
 800d25a:	f000 bb22 	b.w	800d8a2 <__retarget_lock_release_recursive>
 800d25e:	bf00      	nop
 800d260:	20018c84 	.word	0x20018c84

0800d264 <_realloc_r>:
 800d264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d268:	4680      	mov	r8, r0
 800d26a:	4614      	mov	r4, r2
 800d26c:	460e      	mov	r6, r1
 800d26e:	b921      	cbnz	r1, 800d27a <_realloc_r+0x16>
 800d270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	4611      	mov	r1, r2
 800d276:	f7ff bf45 	b.w	800d104 <_malloc_r>
 800d27a:	b92a      	cbnz	r2, 800d288 <_realloc_r+0x24>
 800d27c:	f7ff fed6 	bl	800d02c <_free_r>
 800d280:	4625      	mov	r5, r4
 800d282:	4628      	mov	r0, r5
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	f000 fb26 	bl	800d8d8 <_malloc_usable_size_r>
 800d28c:	4284      	cmp	r4, r0
 800d28e:	4607      	mov	r7, r0
 800d290:	d802      	bhi.n	800d298 <_realloc_r+0x34>
 800d292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d296:	d812      	bhi.n	800d2be <_realloc_r+0x5a>
 800d298:	4621      	mov	r1, r4
 800d29a:	4640      	mov	r0, r8
 800d29c:	f7ff ff32 	bl	800d104 <_malloc_r>
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d0ed      	beq.n	800d282 <_realloc_r+0x1e>
 800d2a6:	42bc      	cmp	r4, r7
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4631      	mov	r1, r6
 800d2ac:	bf28      	it	cs
 800d2ae:	463a      	movcs	r2, r7
 800d2b0:	f7ff fea6 	bl	800d000 <memcpy>
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	f7ff feb8 	bl	800d02c <_free_r>
 800d2bc:	e7e1      	b.n	800d282 <_realloc_r+0x1e>
 800d2be:	4635      	mov	r5, r6
 800d2c0:	e7df      	b.n	800d282 <_realloc_r+0x1e>

0800d2c2 <__ssputs_r>:
 800d2c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c6:	688e      	ldr	r6, [r1, #8]
 800d2c8:	429e      	cmp	r6, r3
 800d2ca:	4682      	mov	sl, r0
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	4690      	mov	r8, r2
 800d2d0:	461f      	mov	r7, r3
 800d2d2:	d838      	bhi.n	800d346 <__ssputs_r+0x84>
 800d2d4:	898a      	ldrh	r2, [r1, #12]
 800d2d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2da:	d032      	beq.n	800d342 <__ssputs_r+0x80>
 800d2dc:	6825      	ldr	r5, [r4, #0]
 800d2de:	6909      	ldr	r1, [r1, #16]
 800d2e0:	eba5 0901 	sub.w	r9, r5, r1
 800d2e4:	6965      	ldr	r5, [r4, #20]
 800d2e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	444b      	add	r3, r9
 800d2f2:	106d      	asrs	r5, r5, #1
 800d2f4:	429d      	cmp	r5, r3
 800d2f6:	bf38      	it	cc
 800d2f8:	461d      	movcc	r5, r3
 800d2fa:	0553      	lsls	r3, r2, #21
 800d2fc:	d531      	bpl.n	800d362 <__ssputs_r+0xa0>
 800d2fe:	4629      	mov	r1, r5
 800d300:	f7ff ff00 	bl	800d104 <_malloc_r>
 800d304:	4606      	mov	r6, r0
 800d306:	b950      	cbnz	r0, 800d31e <__ssputs_r+0x5c>
 800d308:	230c      	movs	r3, #12
 800d30a:	f8ca 3000 	str.w	r3, [sl]
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d314:	81a3      	strh	r3, [r4, #12]
 800d316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31e:	6921      	ldr	r1, [r4, #16]
 800d320:	464a      	mov	r2, r9
 800d322:	f7ff fe6d 	bl	800d000 <memcpy>
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d330:	81a3      	strh	r3, [r4, #12]
 800d332:	6126      	str	r6, [r4, #16]
 800d334:	6165      	str	r5, [r4, #20]
 800d336:	444e      	add	r6, r9
 800d338:	eba5 0509 	sub.w	r5, r5, r9
 800d33c:	6026      	str	r6, [r4, #0]
 800d33e:	60a5      	str	r5, [r4, #8]
 800d340:	463e      	mov	r6, r7
 800d342:	42be      	cmp	r6, r7
 800d344:	d900      	bls.n	800d348 <__ssputs_r+0x86>
 800d346:	463e      	mov	r6, r7
 800d348:	6820      	ldr	r0, [r4, #0]
 800d34a:	4632      	mov	r2, r6
 800d34c:	4641      	mov	r1, r8
 800d34e:	f000 faa9 	bl	800d8a4 <memmove>
 800d352:	68a3      	ldr	r3, [r4, #8]
 800d354:	1b9b      	subs	r3, r3, r6
 800d356:	60a3      	str	r3, [r4, #8]
 800d358:	6823      	ldr	r3, [r4, #0]
 800d35a:	4433      	add	r3, r6
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	2000      	movs	r0, #0
 800d360:	e7db      	b.n	800d31a <__ssputs_r+0x58>
 800d362:	462a      	mov	r2, r5
 800d364:	f7ff ff7e 	bl	800d264 <_realloc_r>
 800d368:	4606      	mov	r6, r0
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d1e1      	bne.n	800d332 <__ssputs_r+0x70>
 800d36e:	6921      	ldr	r1, [r4, #16]
 800d370:	4650      	mov	r0, sl
 800d372:	f7ff fe5b 	bl	800d02c <_free_r>
 800d376:	e7c7      	b.n	800d308 <__ssputs_r+0x46>

0800d378 <_svfiprintf_r>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	4698      	mov	r8, r3
 800d37e:	898b      	ldrh	r3, [r1, #12]
 800d380:	061b      	lsls	r3, r3, #24
 800d382:	b09d      	sub	sp, #116	; 0x74
 800d384:	4607      	mov	r7, r0
 800d386:	460d      	mov	r5, r1
 800d388:	4614      	mov	r4, r2
 800d38a:	d50e      	bpl.n	800d3aa <_svfiprintf_r+0x32>
 800d38c:	690b      	ldr	r3, [r1, #16]
 800d38e:	b963      	cbnz	r3, 800d3aa <_svfiprintf_r+0x32>
 800d390:	2140      	movs	r1, #64	; 0x40
 800d392:	f7ff feb7 	bl	800d104 <_malloc_r>
 800d396:	6028      	str	r0, [r5, #0]
 800d398:	6128      	str	r0, [r5, #16]
 800d39a:	b920      	cbnz	r0, 800d3a6 <_svfiprintf_r+0x2e>
 800d39c:	230c      	movs	r3, #12
 800d39e:	603b      	str	r3, [r7, #0]
 800d3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3a4:	e0d1      	b.n	800d54a <_svfiprintf_r+0x1d2>
 800d3a6:	2340      	movs	r3, #64	; 0x40
 800d3a8:	616b      	str	r3, [r5, #20]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ae:	2320      	movs	r3, #32
 800d3b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3b8:	2330      	movs	r3, #48	; 0x30
 800d3ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d564 <_svfiprintf_r+0x1ec>
 800d3be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3c2:	f04f 0901 	mov.w	r9, #1
 800d3c6:	4623      	mov	r3, r4
 800d3c8:	469a      	mov	sl, r3
 800d3ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ce:	b10a      	cbz	r2, 800d3d4 <_svfiprintf_r+0x5c>
 800d3d0:	2a25      	cmp	r2, #37	; 0x25
 800d3d2:	d1f9      	bne.n	800d3c8 <_svfiprintf_r+0x50>
 800d3d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d3d8:	d00b      	beq.n	800d3f2 <_svfiprintf_r+0x7a>
 800d3da:	465b      	mov	r3, fp
 800d3dc:	4622      	mov	r2, r4
 800d3de:	4629      	mov	r1, r5
 800d3e0:	4638      	mov	r0, r7
 800d3e2:	f7ff ff6e 	bl	800d2c2 <__ssputs_r>
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	f000 80aa 	beq.w	800d540 <_svfiprintf_r+0x1c8>
 800d3ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3ee:	445a      	add	r2, fp
 800d3f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d3f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f000 80a2 	beq.w	800d540 <_svfiprintf_r+0x1c8>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d406:	f10a 0a01 	add.w	sl, sl, #1
 800d40a:	9304      	str	r3, [sp, #16]
 800d40c:	9307      	str	r3, [sp, #28]
 800d40e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d412:	931a      	str	r3, [sp, #104]	; 0x68
 800d414:	4654      	mov	r4, sl
 800d416:	2205      	movs	r2, #5
 800d418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41c:	4851      	ldr	r0, [pc, #324]	; (800d564 <_svfiprintf_r+0x1ec>)
 800d41e:	f7f2 ff6f 	bl	8000300 <memchr>
 800d422:	9a04      	ldr	r2, [sp, #16]
 800d424:	b9d8      	cbnz	r0, 800d45e <_svfiprintf_r+0xe6>
 800d426:	06d0      	lsls	r0, r2, #27
 800d428:	bf44      	itt	mi
 800d42a:	2320      	movmi	r3, #32
 800d42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d430:	0711      	lsls	r1, r2, #28
 800d432:	bf44      	itt	mi
 800d434:	232b      	movmi	r3, #43	; 0x2b
 800d436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d43a:	f89a 3000 	ldrb.w	r3, [sl]
 800d43e:	2b2a      	cmp	r3, #42	; 0x2a
 800d440:	d015      	beq.n	800d46e <_svfiprintf_r+0xf6>
 800d442:	9a07      	ldr	r2, [sp, #28]
 800d444:	4654      	mov	r4, sl
 800d446:	2000      	movs	r0, #0
 800d448:	f04f 0c0a 	mov.w	ip, #10
 800d44c:	4621      	mov	r1, r4
 800d44e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d452:	3b30      	subs	r3, #48	; 0x30
 800d454:	2b09      	cmp	r3, #9
 800d456:	d94e      	bls.n	800d4f6 <_svfiprintf_r+0x17e>
 800d458:	b1b0      	cbz	r0, 800d488 <_svfiprintf_r+0x110>
 800d45a:	9207      	str	r2, [sp, #28]
 800d45c:	e014      	b.n	800d488 <_svfiprintf_r+0x110>
 800d45e:	eba0 0308 	sub.w	r3, r0, r8
 800d462:	fa09 f303 	lsl.w	r3, r9, r3
 800d466:	4313      	orrs	r3, r2
 800d468:	9304      	str	r3, [sp, #16]
 800d46a:	46a2      	mov	sl, r4
 800d46c:	e7d2      	b.n	800d414 <_svfiprintf_r+0x9c>
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	1d19      	adds	r1, r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	9103      	str	r1, [sp, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfbb      	ittet	lt
 800d47a:	425b      	neglt	r3, r3
 800d47c:	f042 0202 	orrlt.w	r2, r2, #2
 800d480:	9307      	strge	r3, [sp, #28]
 800d482:	9307      	strlt	r3, [sp, #28]
 800d484:	bfb8      	it	lt
 800d486:	9204      	strlt	r2, [sp, #16]
 800d488:	7823      	ldrb	r3, [r4, #0]
 800d48a:	2b2e      	cmp	r3, #46	; 0x2e
 800d48c:	d10c      	bne.n	800d4a8 <_svfiprintf_r+0x130>
 800d48e:	7863      	ldrb	r3, [r4, #1]
 800d490:	2b2a      	cmp	r3, #42	; 0x2a
 800d492:	d135      	bne.n	800d500 <_svfiprintf_r+0x188>
 800d494:	9b03      	ldr	r3, [sp, #12]
 800d496:	1d1a      	adds	r2, r3, #4
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	9203      	str	r2, [sp, #12]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	bfb8      	it	lt
 800d4a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d4a4:	3402      	adds	r4, #2
 800d4a6:	9305      	str	r3, [sp, #20]
 800d4a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d574 <_svfiprintf_r+0x1fc>
 800d4ac:	7821      	ldrb	r1, [r4, #0]
 800d4ae:	2203      	movs	r2, #3
 800d4b0:	4650      	mov	r0, sl
 800d4b2:	f7f2 ff25 	bl	8000300 <memchr>
 800d4b6:	b140      	cbz	r0, 800d4ca <_svfiprintf_r+0x152>
 800d4b8:	2340      	movs	r3, #64	; 0x40
 800d4ba:	eba0 000a 	sub.w	r0, r0, sl
 800d4be:	fa03 f000 	lsl.w	r0, r3, r0
 800d4c2:	9b04      	ldr	r3, [sp, #16]
 800d4c4:	4303      	orrs	r3, r0
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	9304      	str	r3, [sp, #16]
 800d4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ce:	4826      	ldr	r0, [pc, #152]	; (800d568 <_svfiprintf_r+0x1f0>)
 800d4d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4d4:	2206      	movs	r2, #6
 800d4d6:	f7f2 ff13 	bl	8000300 <memchr>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d038      	beq.n	800d550 <_svfiprintf_r+0x1d8>
 800d4de:	4b23      	ldr	r3, [pc, #140]	; (800d56c <_svfiprintf_r+0x1f4>)
 800d4e0:	bb1b      	cbnz	r3, 800d52a <_svfiprintf_r+0x1b2>
 800d4e2:	9b03      	ldr	r3, [sp, #12]
 800d4e4:	3307      	adds	r3, #7
 800d4e6:	f023 0307 	bic.w	r3, r3, #7
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9303      	str	r3, [sp, #12]
 800d4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f0:	4433      	add	r3, r6
 800d4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f4:	e767      	b.n	800d3c6 <_svfiprintf_r+0x4e>
 800d4f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	2001      	movs	r0, #1
 800d4fe:	e7a5      	b.n	800d44c <_svfiprintf_r+0xd4>
 800d500:	2300      	movs	r3, #0
 800d502:	3401      	adds	r4, #1
 800d504:	9305      	str	r3, [sp, #20]
 800d506:	4619      	mov	r1, r3
 800d508:	f04f 0c0a 	mov.w	ip, #10
 800d50c:	4620      	mov	r0, r4
 800d50e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d512:	3a30      	subs	r2, #48	; 0x30
 800d514:	2a09      	cmp	r2, #9
 800d516:	d903      	bls.n	800d520 <_svfiprintf_r+0x1a8>
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d0c5      	beq.n	800d4a8 <_svfiprintf_r+0x130>
 800d51c:	9105      	str	r1, [sp, #20]
 800d51e:	e7c3      	b.n	800d4a8 <_svfiprintf_r+0x130>
 800d520:	fb0c 2101 	mla	r1, ip, r1, r2
 800d524:	4604      	mov	r4, r0
 800d526:	2301      	movs	r3, #1
 800d528:	e7f0      	b.n	800d50c <_svfiprintf_r+0x194>
 800d52a:	ab03      	add	r3, sp, #12
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	462a      	mov	r2, r5
 800d530:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <_svfiprintf_r+0x1f8>)
 800d532:	a904      	add	r1, sp, #16
 800d534:	4638      	mov	r0, r7
 800d536:	f3af 8000 	nop.w
 800d53a:	1c42      	adds	r2, r0, #1
 800d53c:	4606      	mov	r6, r0
 800d53e:	d1d6      	bne.n	800d4ee <_svfiprintf_r+0x176>
 800d540:	89ab      	ldrh	r3, [r5, #12]
 800d542:	065b      	lsls	r3, r3, #25
 800d544:	f53f af2c 	bmi.w	800d3a0 <_svfiprintf_r+0x28>
 800d548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d54a:	b01d      	add	sp, #116	; 0x74
 800d54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d550:	ab03      	add	r3, sp, #12
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	462a      	mov	r2, r5
 800d556:	4b06      	ldr	r3, [pc, #24]	; (800d570 <_svfiprintf_r+0x1f8>)
 800d558:	a904      	add	r1, sp, #16
 800d55a:	4638      	mov	r0, r7
 800d55c:	f000 f87a 	bl	800d654 <_printf_i>
 800d560:	e7eb      	b.n	800d53a <_svfiprintf_r+0x1c2>
 800d562:	bf00      	nop
 800d564:	08021e28 	.word	0x08021e28
 800d568:	08021e32 	.word	0x08021e32
 800d56c:	00000000 	.word	0x00000000
 800d570:	0800d2c3 	.word	0x0800d2c3
 800d574:	08021e2e 	.word	0x08021e2e

0800d578 <_printf_common>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	4616      	mov	r6, r2
 800d57e:	4699      	mov	r9, r3
 800d580:	688a      	ldr	r2, [r1, #8]
 800d582:	690b      	ldr	r3, [r1, #16]
 800d584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d588:	4293      	cmp	r3, r2
 800d58a:	bfb8      	it	lt
 800d58c:	4613      	movlt	r3, r2
 800d58e:	6033      	str	r3, [r6, #0]
 800d590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d594:	4607      	mov	r7, r0
 800d596:	460c      	mov	r4, r1
 800d598:	b10a      	cbz	r2, 800d59e <_printf_common+0x26>
 800d59a:	3301      	adds	r3, #1
 800d59c:	6033      	str	r3, [r6, #0]
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	0699      	lsls	r1, r3, #26
 800d5a2:	bf42      	ittt	mi
 800d5a4:	6833      	ldrmi	r3, [r6, #0]
 800d5a6:	3302      	addmi	r3, #2
 800d5a8:	6033      	strmi	r3, [r6, #0]
 800d5aa:	6825      	ldr	r5, [r4, #0]
 800d5ac:	f015 0506 	ands.w	r5, r5, #6
 800d5b0:	d106      	bne.n	800d5c0 <_printf_common+0x48>
 800d5b2:	f104 0a19 	add.w	sl, r4, #25
 800d5b6:	68e3      	ldr	r3, [r4, #12]
 800d5b8:	6832      	ldr	r2, [r6, #0]
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	42ab      	cmp	r3, r5
 800d5be:	dc26      	bgt.n	800d60e <_printf_common+0x96>
 800d5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5c4:	1e13      	subs	r3, r2, #0
 800d5c6:	6822      	ldr	r2, [r4, #0]
 800d5c8:	bf18      	it	ne
 800d5ca:	2301      	movne	r3, #1
 800d5cc:	0692      	lsls	r2, r2, #26
 800d5ce:	d42b      	bmi.n	800d628 <_printf_common+0xb0>
 800d5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	47c0      	blx	r8
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d01e      	beq.n	800d61c <_printf_common+0xa4>
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	68e5      	ldr	r5, [r4, #12]
 800d5e2:	6832      	ldr	r2, [r6, #0]
 800d5e4:	f003 0306 	and.w	r3, r3, #6
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	bf08      	it	eq
 800d5ec:	1aad      	subeq	r5, r5, r2
 800d5ee:	68a3      	ldr	r3, [r4, #8]
 800d5f0:	6922      	ldr	r2, [r4, #16]
 800d5f2:	bf0c      	ite	eq
 800d5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f8:	2500      	movne	r5, #0
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	bfc4      	itt	gt
 800d5fe:	1a9b      	subgt	r3, r3, r2
 800d600:	18ed      	addgt	r5, r5, r3
 800d602:	2600      	movs	r6, #0
 800d604:	341a      	adds	r4, #26
 800d606:	42b5      	cmp	r5, r6
 800d608:	d11a      	bne.n	800d640 <_printf_common+0xc8>
 800d60a:	2000      	movs	r0, #0
 800d60c:	e008      	b.n	800d620 <_printf_common+0xa8>
 800d60e:	2301      	movs	r3, #1
 800d610:	4652      	mov	r2, sl
 800d612:	4649      	mov	r1, r9
 800d614:	4638      	mov	r0, r7
 800d616:	47c0      	blx	r8
 800d618:	3001      	adds	r0, #1
 800d61a:	d103      	bne.n	800d624 <_printf_common+0xac>
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d624:	3501      	adds	r5, #1
 800d626:	e7c6      	b.n	800d5b6 <_printf_common+0x3e>
 800d628:	18e1      	adds	r1, r4, r3
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	2030      	movs	r0, #48	; 0x30
 800d62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d632:	4422      	add	r2, r4
 800d634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d63c:	3302      	adds	r3, #2
 800d63e:	e7c7      	b.n	800d5d0 <_printf_common+0x58>
 800d640:	2301      	movs	r3, #1
 800d642:	4622      	mov	r2, r4
 800d644:	4649      	mov	r1, r9
 800d646:	4638      	mov	r0, r7
 800d648:	47c0      	blx	r8
 800d64a:	3001      	adds	r0, #1
 800d64c:	d0e6      	beq.n	800d61c <_printf_common+0xa4>
 800d64e:	3601      	adds	r6, #1
 800d650:	e7d9      	b.n	800d606 <_printf_common+0x8e>
	...

0800d654 <_printf_i>:
 800d654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d658:	7e0f      	ldrb	r7, [r1, #24]
 800d65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d65c:	2f78      	cmp	r7, #120	; 0x78
 800d65e:	4691      	mov	r9, r2
 800d660:	4680      	mov	r8, r0
 800d662:	460c      	mov	r4, r1
 800d664:	469a      	mov	sl, r3
 800d666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d66a:	d807      	bhi.n	800d67c <_printf_i+0x28>
 800d66c:	2f62      	cmp	r7, #98	; 0x62
 800d66e:	d80a      	bhi.n	800d686 <_printf_i+0x32>
 800d670:	2f00      	cmp	r7, #0
 800d672:	f000 80d8 	beq.w	800d826 <_printf_i+0x1d2>
 800d676:	2f58      	cmp	r7, #88	; 0x58
 800d678:	f000 80a3 	beq.w	800d7c2 <_printf_i+0x16e>
 800d67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d684:	e03a      	b.n	800d6fc <_printf_i+0xa8>
 800d686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d68a:	2b15      	cmp	r3, #21
 800d68c:	d8f6      	bhi.n	800d67c <_printf_i+0x28>
 800d68e:	a101      	add	r1, pc, #4	; (adr r1, 800d694 <_printf_i+0x40>)
 800d690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d694:	0800d6ed 	.word	0x0800d6ed
 800d698:	0800d701 	.word	0x0800d701
 800d69c:	0800d67d 	.word	0x0800d67d
 800d6a0:	0800d67d 	.word	0x0800d67d
 800d6a4:	0800d67d 	.word	0x0800d67d
 800d6a8:	0800d67d 	.word	0x0800d67d
 800d6ac:	0800d701 	.word	0x0800d701
 800d6b0:	0800d67d 	.word	0x0800d67d
 800d6b4:	0800d67d 	.word	0x0800d67d
 800d6b8:	0800d67d 	.word	0x0800d67d
 800d6bc:	0800d67d 	.word	0x0800d67d
 800d6c0:	0800d80d 	.word	0x0800d80d
 800d6c4:	0800d731 	.word	0x0800d731
 800d6c8:	0800d7ef 	.word	0x0800d7ef
 800d6cc:	0800d67d 	.word	0x0800d67d
 800d6d0:	0800d67d 	.word	0x0800d67d
 800d6d4:	0800d82f 	.word	0x0800d82f
 800d6d8:	0800d67d 	.word	0x0800d67d
 800d6dc:	0800d731 	.word	0x0800d731
 800d6e0:	0800d67d 	.word	0x0800d67d
 800d6e4:	0800d67d 	.word	0x0800d67d
 800d6e8:	0800d7f7 	.word	0x0800d7f7
 800d6ec:	682b      	ldr	r3, [r5, #0]
 800d6ee:	1d1a      	adds	r2, r3, #4
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	602a      	str	r2, [r5, #0]
 800d6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e0a3      	b.n	800d848 <_printf_i+0x1f4>
 800d700:	6820      	ldr	r0, [r4, #0]
 800d702:	6829      	ldr	r1, [r5, #0]
 800d704:	0606      	lsls	r6, r0, #24
 800d706:	f101 0304 	add.w	r3, r1, #4
 800d70a:	d50a      	bpl.n	800d722 <_printf_i+0xce>
 800d70c:	680e      	ldr	r6, [r1, #0]
 800d70e:	602b      	str	r3, [r5, #0]
 800d710:	2e00      	cmp	r6, #0
 800d712:	da03      	bge.n	800d71c <_printf_i+0xc8>
 800d714:	232d      	movs	r3, #45	; 0x2d
 800d716:	4276      	negs	r6, r6
 800d718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d71c:	485e      	ldr	r0, [pc, #376]	; (800d898 <_printf_i+0x244>)
 800d71e:	230a      	movs	r3, #10
 800d720:	e019      	b.n	800d756 <_printf_i+0x102>
 800d722:	680e      	ldr	r6, [r1, #0]
 800d724:	602b      	str	r3, [r5, #0]
 800d726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d72a:	bf18      	it	ne
 800d72c:	b236      	sxthne	r6, r6
 800d72e:	e7ef      	b.n	800d710 <_printf_i+0xbc>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	6820      	ldr	r0, [r4, #0]
 800d734:	1d19      	adds	r1, r3, #4
 800d736:	6029      	str	r1, [r5, #0]
 800d738:	0601      	lsls	r1, r0, #24
 800d73a:	d501      	bpl.n	800d740 <_printf_i+0xec>
 800d73c:	681e      	ldr	r6, [r3, #0]
 800d73e:	e002      	b.n	800d746 <_printf_i+0xf2>
 800d740:	0646      	lsls	r6, r0, #25
 800d742:	d5fb      	bpl.n	800d73c <_printf_i+0xe8>
 800d744:	881e      	ldrh	r6, [r3, #0]
 800d746:	4854      	ldr	r0, [pc, #336]	; (800d898 <_printf_i+0x244>)
 800d748:	2f6f      	cmp	r7, #111	; 0x6f
 800d74a:	bf0c      	ite	eq
 800d74c:	2308      	moveq	r3, #8
 800d74e:	230a      	movne	r3, #10
 800d750:	2100      	movs	r1, #0
 800d752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d756:	6865      	ldr	r5, [r4, #4]
 800d758:	60a5      	str	r5, [r4, #8]
 800d75a:	2d00      	cmp	r5, #0
 800d75c:	bfa2      	ittt	ge
 800d75e:	6821      	ldrge	r1, [r4, #0]
 800d760:	f021 0104 	bicge.w	r1, r1, #4
 800d764:	6021      	strge	r1, [r4, #0]
 800d766:	b90e      	cbnz	r6, 800d76c <_printf_i+0x118>
 800d768:	2d00      	cmp	r5, #0
 800d76a:	d04d      	beq.n	800d808 <_printf_i+0x1b4>
 800d76c:	4615      	mov	r5, r2
 800d76e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d772:	fb03 6711 	mls	r7, r3, r1, r6
 800d776:	5dc7      	ldrb	r7, [r0, r7]
 800d778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d77c:	4637      	mov	r7, r6
 800d77e:	42bb      	cmp	r3, r7
 800d780:	460e      	mov	r6, r1
 800d782:	d9f4      	bls.n	800d76e <_printf_i+0x11a>
 800d784:	2b08      	cmp	r3, #8
 800d786:	d10b      	bne.n	800d7a0 <_printf_i+0x14c>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	07de      	lsls	r6, r3, #31
 800d78c:	d508      	bpl.n	800d7a0 <_printf_i+0x14c>
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	6861      	ldr	r1, [r4, #4]
 800d792:	4299      	cmp	r1, r3
 800d794:	bfde      	ittt	le
 800d796:	2330      	movle	r3, #48	; 0x30
 800d798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d79c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d7a0:	1b52      	subs	r2, r2, r5
 800d7a2:	6122      	str	r2, [r4, #16]
 800d7a4:	f8cd a000 	str.w	sl, [sp]
 800d7a8:	464b      	mov	r3, r9
 800d7aa:	aa03      	add	r2, sp, #12
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	4640      	mov	r0, r8
 800d7b0:	f7ff fee2 	bl	800d578 <_printf_common>
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d14c      	bne.n	800d852 <_printf_i+0x1fe>
 800d7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7bc:	b004      	add	sp, #16
 800d7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c2:	4835      	ldr	r0, [pc, #212]	; (800d898 <_printf_i+0x244>)
 800d7c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d7c8:	6829      	ldr	r1, [r5, #0]
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7d0:	6029      	str	r1, [r5, #0]
 800d7d2:	061d      	lsls	r5, r3, #24
 800d7d4:	d514      	bpl.n	800d800 <_printf_i+0x1ac>
 800d7d6:	07df      	lsls	r7, r3, #31
 800d7d8:	bf44      	itt	mi
 800d7da:	f043 0320 	orrmi.w	r3, r3, #32
 800d7de:	6023      	strmi	r3, [r4, #0]
 800d7e0:	b91e      	cbnz	r6, 800d7ea <_printf_i+0x196>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	f023 0320 	bic.w	r3, r3, #32
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	2310      	movs	r3, #16
 800d7ec:	e7b0      	b.n	800d750 <_printf_i+0xfc>
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	f043 0320 	orr.w	r3, r3, #32
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	2378      	movs	r3, #120	; 0x78
 800d7f8:	4828      	ldr	r0, [pc, #160]	; (800d89c <_printf_i+0x248>)
 800d7fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7fe:	e7e3      	b.n	800d7c8 <_printf_i+0x174>
 800d800:	0659      	lsls	r1, r3, #25
 800d802:	bf48      	it	mi
 800d804:	b2b6      	uxthmi	r6, r6
 800d806:	e7e6      	b.n	800d7d6 <_printf_i+0x182>
 800d808:	4615      	mov	r5, r2
 800d80a:	e7bb      	b.n	800d784 <_printf_i+0x130>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	6826      	ldr	r6, [r4, #0]
 800d810:	6961      	ldr	r1, [r4, #20]
 800d812:	1d18      	adds	r0, r3, #4
 800d814:	6028      	str	r0, [r5, #0]
 800d816:	0635      	lsls	r5, r6, #24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	d501      	bpl.n	800d820 <_printf_i+0x1cc>
 800d81c:	6019      	str	r1, [r3, #0]
 800d81e:	e002      	b.n	800d826 <_printf_i+0x1d2>
 800d820:	0670      	lsls	r0, r6, #25
 800d822:	d5fb      	bpl.n	800d81c <_printf_i+0x1c8>
 800d824:	8019      	strh	r1, [r3, #0]
 800d826:	2300      	movs	r3, #0
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	4615      	mov	r5, r2
 800d82c:	e7ba      	b.n	800d7a4 <_printf_i+0x150>
 800d82e:	682b      	ldr	r3, [r5, #0]
 800d830:	1d1a      	adds	r2, r3, #4
 800d832:	602a      	str	r2, [r5, #0]
 800d834:	681d      	ldr	r5, [r3, #0]
 800d836:	6862      	ldr	r2, [r4, #4]
 800d838:	2100      	movs	r1, #0
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7f2 fd60 	bl	8000300 <memchr>
 800d840:	b108      	cbz	r0, 800d846 <_printf_i+0x1f2>
 800d842:	1b40      	subs	r0, r0, r5
 800d844:	6060      	str	r0, [r4, #4]
 800d846:	6863      	ldr	r3, [r4, #4]
 800d848:	6123      	str	r3, [r4, #16]
 800d84a:	2300      	movs	r3, #0
 800d84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d850:	e7a8      	b.n	800d7a4 <_printf_i+0x150>
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	462a      	mov	r2, r5
 800d856:	4649      	mov	r1, r9
 800d858:	4640      	mov	r0, r8
 800d85a:	47d0      	blx	sl
 800d85c:	3001      	adds	r0, #1
 800d85e:	d0ab      	beq.n	800d7b8 <_printf_i+0x164>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	079b      	lsls	r3, r3, #30
 800d864:	d413      	bmi.n	800d88e <_printf_i+0x23a>
 800d866:	68e0      	ldr	r0, [r4, #12]
 800d868:	9b03      	ldr	r3, [sp, #12]
 800d86a:	4298      	cmp	r0, r3
 800d86c:	bfb8      	it	lt
 800d86e:	4618      	movlt	r0, r3
 800d870:	e7a4      	b.n	800d7bc <_printf_i+0x168>
 800d872:	2301      	movs	r3, #1
 800d874:	4632      	mov	r2, r6
 800d876:	4649      	mov	r1, r9
 800d878:	4640      	mov	r0, r8
 800d87a:	47d0      	blx	sl
 800d87c:	3001      	adds	r0, #1
 800d87e:	d09b      	beq.n	800d7b8 <_printf_i+0x164>
 800d880:	3501      	adds	r5, #1
 800d882:	68e3      	ldr	r3, [r4, #12]
 800d884:	9903      	ldr	r1, [sp, #12]
 800d886:	1a5b      	subs	r3, r3, r1
 800d888:	42ab      	cmp	r3, r5
 800d88a:	dcf2      	bgt.n	800d872 <_printf_i+0x21e>
 800d88c:	e7eb      	b.n	800d866 <_printf_i+0x212>
 800d88e:	2500      	movs	r5, #0
 800d890:	f104 0619 	add.w	r6, r4, #25
 800d894:	e7f5      	b.n	800d882 <_printf_i+0x22e>
 800d896:	bf00      	nop
 800d898:	08021e39 	.word	0x08021e39
 800d89c:	08021e4a 	.word	0x08021e4a

0800d8a0 <__retarget_lock_acquire_recursive>:
 800d8a0:	4770      	bx	lr

0800d8a2 <__retarget_lock_release_recursive>:
 800d8a2:	4770      	bx	lr

0800d8a4 <memmove>:
 800d8a4:	4288      	cmp	r0, r1
 800d8a6:	b510      	push	{r4, lr}
 800d8a8:	eb01 0402 	add.w	r4, r1, r2
 800d8ac:	d902      	bls.n	800d8b4 <memmove+0x10>
 800d8ae:	4284      	cmp	r4, r0
 800d8b0:	4623      	mov	r3, r4
 800d8b2:	d807      	bhi.n	800d8c4 <memmove+0x20>
 800d8b4:	1e43      	subs	r3, r0, #1
 800d8b6:	42a1      	cmp	r1, r4
 800d8b8:	d008      	beq.n	800d8cc <memmove+0x28>
 800d8ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8c2:	e7f8      	b.n	800d8b6 <memmove+0x12>
 800d8c4:	4402      	add	r2, r0
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	428a      	cmp	r2, r1
 800d8ca:	d100      	bne.n	800d8ce <memmove+0x2a>
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8d6:	e7f7      	b.n	800d8c8 <memmove+0x24>

0800d8d8 <_malloc_usable_size_r>:
 800d8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8dc:	1f18      	subs	r0, r3, #4
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfbc      	itt	lt
 800d8e2:	580b      	ldrlt	r3, [r1, r0]
 800d8e4:	18c0      	addlt	r0, r0, r3
 800d8e6:	4770      	bx	lr

0800d8e8 <with_errnof>:
 800d8e8:	b513      	push	{r0, r1, r4, lr}
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d8f0:	f7ff fb5c 	bl	800cfac <__errno>
 800d8f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d8f8:	6004      	str	r4, [r0, #0]
 800d8fa:	b002      	add	sp, #8
 800d8fc:	bd10      	pop	{r4, pc}

0800d8fe <xflowf>:
 800d8fe:	b130      	cbz	r0, 800d90e <xflowf+0x10>
 800d900:	eef1 7a40 	vneg.f32	s15, s0
 800d904:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d908:	2022      	movs	r0, #34	; 0x22
 800d90a:	f7ff bfed 	b.w	800d8e8 <with_errnof>
 800d90e:	eef0 7a40 	vmov.f32	s15, s0
 800d912:	e7f7      	b.n	800d904 <xflowf+0x6>

0800d914 <__math_uflowf>:
 800d914:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d91c <__math_uflowf+0x8>
 800d918:	f7ff bff1 	b.w	800d8fe <xflowf>
 800d91c:	10000000 	.word	0x10000000

0800d920 <__math_may_uflowf>:
 800d920:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d928 <__math_may_uflowf+0x8>
 800d924:	f7ff bfeb 	b.w	800d8fe <xflowf>
 800d928:	1a200000 	.word	0x1a200000

0800d92c <__math_oflowf>:
 800d92c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d934 <__math_oflowf+0x8>
 800d930:	f7ff bfe5 	b.w	800d8fe <xflowf>
 800d934:	70000000 	.word	0x70000000

0800d938 <__math_divzerof>:
 800d938:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d93c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d940:	2800      	cmp	r0, #0
 800d942:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d946:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d954 <__math_divzerof+0x1c>
 800d94a:	2022      	movs	r0, #34	; 0x22
 800d94c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d950:	f7ff bfca 	b.w	800d8e8 <with_errnof>
 800d954:	00000000 	.word	0x00000000

0800d958 <__math_invalidf>:
 800d958:	eef0 7a40 	vmov.f32	s15, s0
 800d95c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d960:	eef4 7a67 	vcmp.f32	s15, s15
 800d964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d968:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d96c:	d602      	bvs.n	800d974 <__math_invalidf+0x1c>
 800d96e:	2021      	movs	r0, #33	; 0x21
 800d970:	f7ff bfba 	b.w	800d8e8 <with_errnof>
 800d974:	4770      	bx	lr
	...

0800d978 <cos>:
 800d978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d97a:	eeb0 7b40 	vmov.f64	d7, d0
 800d97e:	ee17 3a90 	vmov	r3, s15
 800d982:	4a21      	ldr	r2, [pc, #132]	; (800da08 <cos+0x90>)
 800d984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d988:	4293      	cmp	r3, r2
 800d98a:	dc06      	bgt.n	800d99a <cos+0x22>
 800d98c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800da00 <cos+0x88>
 800d990:	b005      	add	sp, #20
 800d992:	f85d eb04 	ldr.w	lr, [sp], #4
 800d996:	f000 bb03 	b.w	800dfa0 <__kernel_cos>
 800d99a:	4a1c      	ldr	r2, [pc, #112]	; (800da0c <cos+0x94>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	dd04      	ble.n	800d9aa <cos+0x32>
 800d9a0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d9a4:	b005      	add	sp, #20
 800d9a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9aa:	4668      	mov	r0, sp
 800d9ac:	f000 f958 	bl	800dc60 <__ieee754_rem_pio2>
 800d9b0:	f000 0003 	and.w	r0, r0, #3
 800d9b4:	2801      	cmp	r0, #1
 800d9b6:	d009      	beq.n	800d9cc <cos+0x54>
 800d9b8:	2802      	cmp	r0, #2
 800d9ba:	d010      	beq.n	800d9de <cos+0x66>
 800d9bc:	b9b0      	cbnz	r0, 800d9ec <cos+0x74>
 800d9be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9c2:	ed9d 0b00 	vldr	d0, [sp]
 800d9c6:	f000 faeb 	bl	800dfa0 <__kernel_cos>
 800d9ca:	e7eb      	b.n	800d9a4 <cos+0x2c>
 800d9cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9d0:	ed9d 0b00 	vldr	d0, [sp]
 800d9d4:	f000 fde8 	bl	800e5a8 <__kernel_sin>
 800d9d8:	eeb1 0b40 	vneg.f64	d0, d0
 800d9dc:	e7e2      	b.n	800d9a4 <cos+0x2c>
 800d9de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9e2:	ed9d 0b00 	vldr	d0, [sp]
 800d9e6:	f000 fadb 	bl	800dfa0 <__kernel_cos>
 800d9ea:	e7f5      	b.n	800d9d8 <cos+0x60>
 800d9ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9f0:	ed9d 0b00 	vldr	d0, [sp]
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	f000 fdd7 	bl	800e5a8 <__kernel_sin>
 800d9fa:	e7d3      	b.n	800d9a4 <cos+0x2c>
 800d9fc:	f3af 8000 	nop.w
	...
 800da08:	3fe921fb 	.word	0x3fe921fb
 800da0c:	7fefffff 	.word	0x7fefffff

0800da10 <expf>:
 800da10:	ee10 2a10 	vmov	r2, s0
 800da14:	f240 412a 	movw	r1, #1066	; 0x42a
 800da18:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800da1c:	428b      	cmp	r3, r1
 800da1e:	b430      	push	{r4, r5}
 800da20:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800da24:	d92a      	bls.n	800da7c <expf+0x6c>
 800da26:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800da2a:	d058      	beq.n	800dade <expf+0xce>
 800da2c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800da30:	d303      	bcc.n	800da3a <expf+0x2a>
 800da32:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da36:	bc30      	pop	{r4, r5}
 800da38:	4770      	bx	lr
 800da3a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800dae4 <expf+0xd4>
 800da3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da46:	dd03      	ble.n	800da50 <expf+0x40>
 800da48:	bc30      	pop	{r4, r5}
 800da4a:	2000      	movs	r0, #0
 800da4c:	f7ff bf6e 	b.w	800d92c <__math_oflowf>
 800da50:	eddf 7a25 	vldr	s15, [pc, #148]	; 800dae8 <expf+0xd8>
 800da54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5c:	d503      	bpl.n	800da66 <expf+0x56>
 800da5e:	bc30      	pop	{r4, r5}
 800da60:	2000      	movs	r0, #0
 800da62:	f7ff bf57 	b.w	800d914 <__math_uflowf>
 800da66:	eddf 7a21 	vldr	s15, [pc, #132]	; 800daec <expf+0xdc>
 800da6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da72:	d503      	bpl.n	800da7c <expf+0x6c>
 800da74:	bc30      	pop	{r4, r5}
 800da76:	2000      	movs	r0, #0
 800da78:	f7ff bf52 	b.w	800d920 <__math_may_uflowf>
 800da7c:	4b1c      	ldr	r3, [pc, #112]	; (800daf0 <expf+0xe0>)
 800da7e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800da82:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800da86:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800da8a:	eeb0 7b44 	vmov.f64	d7, d4
 800da8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800da92:	ee17 0a10 	vmov	r0, s14
 800da96:	ee37 7b44 	vsub.f64	d7, d7, d4
 800da9a:	f000 021f 	and.w	r2, r0, #31
 800da9e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800daa2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800daa6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800daaa:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800daae:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800dab2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dab6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800daba:	684d      	ldr	r5, [r1, #4]
 800dabc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800dac0:	2100      	movs	r1, #0
 800dac2:	190a      	adds	r2, r1, r4
 800dac4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800dac8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800dacc:	ec43 2b17 	vmov	d7, r2, r3
 800dad0:	eea6 0b04 	vfma.f64	d0, d6, d4
 800dad4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dad8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dadc:	e7ab      	b.n	800da36 <expf+0x26>
 800dade:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800daf4 <expf+0xe4>
 800dae2:	e7a8      	b.n	800da36 <expf+0x26>
 800dae4:	42b17217 	.word	0x42b17217
 800dae8:	c2cff1b4 	.word	0xc2cff1b4
 800daec:	c2ce8ecf 	.word	0xc2ce8ecf
 800daf0:	08021e60 	.word	0x08021e60
 800daf4:	00000000 	.word	0x00000000

0800daf8 <logf>:
 800daf8:	ee10 3a10 	vmov	r3, s0
 800dafc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800db00:	b410      	push	{r4}
 800db02:	d055      	beq.n	800dbb0 <logf+0xb8>
 800db04:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800db08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800db0c:	d31a      	bcc.n	800db44 <logf+0x4c>
 800db0e:	005a      	lsls	r2, r3, #1
 800db10:	d104      	bne.n	800db1c <logf+0x24>
 800db12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db16:	2001      	movs	r0, #1
 800db18:	f7ff bf0e 	b.w	800d938 <__math_divzerof>
 800db1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db20:	d043      	beq.n	800dbaa <logf+0xb2>
 800db22:	2b00      	cmp	r3, #0
 800db24:	db02      	blt.n	800db2c <logf+0x34>
 800db26:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800db2a:	d303      	bcc.n	800db34 <logf+0x3c>
 800db2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db30:	f7ff bf12 	b.w	800d958 <__math_invalidf>
 800db34:	eddf 7a20 	vldr	s15, [pc, #128]	; 800dbb8 <logf+0xc0>
 800db38:	ee20 0a27 	vmul.f32	s0, s0, s15
 800db3c:	ee10 3a10 	vmov	r3, s0
 800db40:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800db44:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800db48:	491c      	ldr	r1, [pc, #112]	; (800dbbc <logf+0xc4>)
 800db4a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800db4e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800db52:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800db56:	0dd4      	lsrs	r4, r2, #23
 800db58:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800db5c:	05e4      	lsls	r4, r4, #23
 800db5e:	ed90 6b00 	vldr	d6, [r0]
 800db62:	1b1b      	subs	r3, r3, r4
 800db64:	ee07 3a90 	vmov	s15, r3
 800db68:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800db6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db70:	15d2      	asrs	r2, r2, #23
 800db72:	eea6 0b07 	vfma.f64	d0, d6, d7
 800db76:	ed90 6b02 	vldr	d6, [r0, #8]
 800db7a:	ee20 4b00 	vmul.f64	d4, d0, d0
 800db7e:	ee07 2a90 	vmov	s15, r2
 800db82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800db86:	eea7 6b05 	vfma.f64	d6, d7, d5
 800db8a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800db8e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800db92:	eea5 7b00 	vfma.f64	d7, d5, d0
 800db96:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800db9a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800db9e:	eea5 7b04 	vfma.f64	d7, d5, d4
 800dba2:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dba6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dbaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800dbc0 <logf+0xc8>
 800dbb4:	e7f9      	b.n	800dbaa <logf+0xb2>
 800dbb6:	bf00      	nop
 800dbb8:	4b000000 	.word	0x4b000000
 800dbbc:	08021fa8 	.word	0x08021fa8
 800dbc0:	00000000 	.word	0x00000000

0800dbc4 <log10f>:
 800dbc4:	b508      	push	{r3, lr}
 800dbc6:	ed2d 8b02 	vpush	{d8}
 800dbca:	eeb0 8a40 	vmov.f32	s16, s0
 800dbce:	f000 f98b 	bl	800dee8 <__ieee754_log10f>
 800dbd2:	eeb4 8a48 	vcmp.f32	s16, s16
 800dbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbda:	d60f      	bvs.n	800dbfc <log10f+0x38>
 800dbdc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe4:	d80a      	bhi.n	800dbfc <log10f+0x38>
 800dbe6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbee:	d108      	bne.n	800dc02 <log10f+0x3e>
 800dbf0:	f7ff f9dc 	bl	800cfac <__errno>
 800dbf4:	2322      	movs	r3, #34	; 0x22
 800dbf6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dc18 <log10f+0x54>
 800dbfa:	6003      	str	r3, [r0, #0]
 800dbfc:	ecbd 8b02 	vpop	{d8}
 800dc00:	bd08      	pop	{r3, pc}
 800dc02:	f7ff f9d3 	bl	800cfac <__errno>
 800dc06:	ecbd 8b02 	vpop	{d8}
 800dc0a:	2321      	movs	r3, #33	; 0x21
 800dc0c:	6003      	str	r3, [r0, #0]
 800dc0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dc12:	4802      	ldr	r0, [pc, #8]	; (800dc1c <log10f+0x58>)
 800dc14:	f000 be2a 	b.w	800e86c <nanf>
 800dc18:	ff800000 	.word	0xff800000
 800dc1c:	08021e2d 	.word	0x08021e2d

0800dc20 <sqrtf>:
 800dc20:	b508      	push	{r3, lr}
 800dc22:	ed2d 8b02 	vpush	{d8}
 800dc26:	eeb0 8a40 	vmov.f32	s16, s0
 800dc2a:	f000 f9b5 	bl	800df98 <__ieee754_sqrtf>
 800dc2e:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc36:	d60c      	bvs.n	800dc52 <sqrtf+0x32>
 800dc38:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dc58 <sqrtf+0x38>
 800dc3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc44:	d505      	bpl.n	800dc52 <sqrtf+0x32>
 800dc46:	f7ff f9b1 	bl	800cfac <__errno>
 800dc4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc4e:	2321      	movs	r3, #33	; 0x21
 800dc50:	6003      	str	r3, [r0, #0]
 800dc52:	ecbd 8b02 	vpop	{d8}
 800dc56:	bd08      	pop	{r3, pc}
	...

0800dc60 <__ieee754_rem_pio2>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	eeb0 7b40 	vmov.f64	d7, d0
 800dc66:	ee17 5a90 	vmov	r5, s15
 800dc6a:	4b99      	ldr	r3, [pc, #612]	; (800ded0 <__ieee754_rem_pio2+0x270>)
 800dc6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc70:	429e      	cmp	r6, r3
 800dc72:	b088      	sub	sp, #32
 800dc74:	4604      	mov	r4, r0
 800dc76:	dc07      	bgt.n	800dc88 <__ieee754_rem_pio2+0x28>
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	ed84 0b00 	vstr	d0, [r4]
 800dc80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e01b      	b.n	800dcc0 <__ieee754_rem_pio2+0x60>
 800dc88:	4b92      	ldr	r3, [pc, #584]	; (800ded4 <__ieee754_rem_pio2+0x274>)
 800dc8a:	429e      	cmp	r6, r3
 800dc8c:	dc3b      	bgt.n	800dd06 <__ieee754_rem_pio2+0xa6>
 800dc8e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800dc92:	2d00      	cmp	r5, #0
 800dc94:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800de90 <__ieee754_rem_pio2+0x230>
 800dc98:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800dc9c:	dd19      	ble.n	800dcd2 <__ieee754_rem_pio2+0x72>
 800dc9e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dca2:	429e      	cmp	r6, r3
 800dca4:	d00e      	beq.n	800dcc4 <__ieee754_rem_pio2+0x64>
 800dca6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800de98 <__ieee754_rem_pio2+0x238>
 800dcaa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dcae:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dcb2:	ed84 5b00 	vstr	d5, [r4]
 800dcb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dcba:	ed84 7b02 	vstr	d7, [r4, #8]
 800dcbe:	2001      	movs	r0, #1
 800dcc0:	b008      	add	sp, #32
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dea0 <__ieee754_rem_pio2+0x240>
 800dcc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dccc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800dea8 <__ieee754_rem_pio2+0x248>
 800dcd0:	e7eb      	b.n	800dcaa <__ieee754_rem_pio2+0x4a>
 800dcd2:	429e      	cmp	r6, r3
 800dcd4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dcd8:	d00e      	beq.n	800dcf8 <__ieee754_rem_pio2+0x98>
 800dcda:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800de98 <__ieee754_rem_pio2+0x238>
 800dcde:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dce2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dce6:	ed84 5b00 	vstr	d5, [r4]
 800dcea:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dcee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcf2:	ed84 7b02 	vstr	d7, [r4, #8]
 800dcf6:	e7e3      	b.n	800dcc0 <__ieee754_rem_pio2+0x60>
 800dcf8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dea0 <__ieee754_rem_pio2+0x240>
 800dcfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dd00:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dea8 <__ieee754_rem_pio2+0x248>
 800dd04:	e7eb      	b.n	800dcde <__ieee754_rem_pio2+0x7e>
 800dd06:	4b74      	ldr	r3, [pc, #464]	; (800ded8 <__ieee754_rem_pio2+0x278>)
 800dd08:	429e      	cmp	r6, r3
 800dd0a:	dc70      	bgt.n	800ddee <__ieee754_rem_pio2+0x18e>
 800dd0c:	f000 fca4 	bl	800e658 <fabs>
 800dd10:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dd14:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800deb0 <__ieee754_rem_pio2+0x250>
 800dd18:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dd1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dd20:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dd24:	ee17 0a90 	vmov	r0, s15
 800dd28:	eeb1 4b45 	vneg.f64	d4, d5
 800dd2c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800de90 <__ieee754_rem_pio2+0x230>
 800dd30:	eea5 0b47 	vfms.f64	d0, d5, d7
 800dd34:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800de98 <__ieee754_rem_pio2+0x238>
 800dd38:	281f      	cmp	r0, #31
 800dd3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dd3e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dd42:	dc08      	bgt.n	800dd56 <__ieee754_rem_pio2+0xf6>
 800dd44:	4b65      	ldr	r3, [pc, #404]	; (800dedc <__ieee754_rem_pio2+0x27c>)
 800dd46:	1e42      	subs	r2, r0, #1
 800dd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4c:	42b3      	cmp	r3, r6
 800dd4e:	d002      	beq.n	800dd56 <__ieee754_rem_pio2+0xf6>
 800dd50:	ed84 6b00 	vstr	d6, [r4]
 800dd54:	e026      	b.n	800dda4 <__ieee754_rem_pio2+0x144>
 800dd56:	ee16 3a90 	vmov	r3, s13
 800dd5a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dd5e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800dd62:	2b10      	cmp	r3, #16
 800dd64:	ea4f 5226 	mov.w	r2, r6, asr #20
 800dd68:	ddf2      	ble.n	800dd50 <__ieee754_rem_pio2+0xf0>
 800dd6a:	eeb0 6b40 	vmov.f64	d6, d0
 800dd6e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800dea0 <__ieee754_rem_pio2+0x240>
 800dd72:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dea8 <__ieee754_rem_pio2+0x248>
 800dd76:	eea4 6b07 	vfma.f64	d6, d4, d7
 800dd7a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dd7e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dd82:	eeb0 7b40 	vmov.f64	d7, d0
 800dd86:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dd8a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dd8e:	ee13 3a90 	vmov	r3, s7
 800dd92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	2b31      	cmp	r3, #49	; 0x31
 800dd9a:	dc17      	bgt.n	800ddcc <__ieee754_rem_pio2+0x16c>
 800dd9c:	eeb0 0b46 	vmov.f64	d0, d6
 800dda0:	ed84 3b00 	vstr	d3, [r4]
 800dda4:	ed94 6b00 	vldr	d6, [r4]
 800dda8:	2d00      	cmp	r5, #0
 800ddaa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ddae:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ddb2:	ed84 0b02 	vstr	d0, [r4, #8]
 800ddb6:	da83      	bge.n	800dcc0 <__ieee754_rem_pio2+0x60>
 800ddb8:	eeb1 6b46 	vneg.f64	d6, d6
 800ddbc:	eeb1 0b40 	vneg.f64	d0, d0
 800ddc0:	ed84 6b00 	vstr	d6, [r4]
 800ddc4:	ed84 0b02 	vstr	d0, [r4, #8]
 800ddc8:	4240      	negs	r0, r0
 800ddca:	e779      	b.n	800dcc0 <__ieee754_rem_pio2+0x60>
 800ddcc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800deb8 <__ieee754_rem_pio2+0x258>
 800ddd0:	eeb0 0b46 	vmov.f64	d0, d6
 800ddd4:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ddd8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800dddc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800dec0 <__ieee754_rem_pio2+0x260>
 800dde0:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dde4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800dde8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ddec:	e7b0      	b.n	800dd50 <__ieee754_rem_pio2+0xf0>
 800ddee:	4b3c      	ldr	r3, [pc, #240]	; (800dee0 <__ieee754_rem_pio2+0x280>)
 800ddf0:	429e      	cmp	r6, r3
 800ddf2:	dd06      	ble.n	800de02 <__ieee754_rem_pio2+0x1a2>
 800ddf4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ddf8:	ed80 7b02 	vstr	d7, [r0, #8]
 800ddfc:	ed80 7b00 	vstr	d7, [r0]
 800de00:	e740      	b.n	800dc84 <__ieee754_rem_pio2+0x24>
 800de02:	1532      	asrs	r2, r6, #20
 800de04:	ee10 0a10 	vmov	r0, s0
 800de08:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800de0c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800de10:	ec41 0b17 	vmov	d7, r0, r1
 800de14:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800de18:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800dec8 <__ieee754_rem_pio2+0x268>
 800de1c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800de20:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de24:	ed8d 6b02 	vstr	d6, [sp, #8]
 800de28:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de2c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800de30:	a902      	add	r1, sp, #8
 800de32:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800de36:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de3a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800de3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de42:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de46:	2603      	movs	r6, #3
 800de48:	4608      	mov	r0, r1
 800de4a:	ed91 7b04 	vldr	d7, [r1, #16]
 800de4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de56:	4633      	mov	r3, r6
 800de58:	f1a1 0108 	sub.w	r1, r1, #8
 800de5c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800de60:	d0f3      	beq.n	800de4a <__ieee754_rem_pio2+0x1ea>
 800de62:	4920      	ldr	r1, [pc, #128]	; (800dee4 <__ieee754_rem_pio2+0x284>)
 800de64:	9101      	str	r1, [sp, #4]
 800de66:	2102      	movs	r1, #2
 800de68:	9100      	str	r1, [sp, #0]
 800de6a:	4621      	mov	r1, r4
 800de6c:	f000 f904 	bl	800e078 <__kernel_rem_pio2>
 800de70:	2d00      	cmp	r5, #0
 800de72:	f6bf af25 	bge.w	800dcc0 <__ieee754_rem_pio2+0x60>
 800de76:	ed94 7b00 	vldr	d7, [r4]
 800de7a:	eeb1 7b47 	vneg.f64	d7, d7
 800de7e:	ed84 7b00 	vstr	d7, [r4]
 800de82:	ed94 7b02 	vldr	d7, [r4, #8]
 800de86:	eeb1 7b47 	vneg.f64	d7, d7
 800de8a:	ed84 7b02 	vstr	d7, [r4, #8]
 800de8e:	e79b      	b.n	800ddc8 <__ieee754_rem_pio2+0x168>
 800de90:	54400000 	.word	0x54400000
 800de94:	3ff921fb 	.word	0x3ff921fb
 800de98:	1a626331 	.word	0x1a626331
 800de9c:	3dd0b461 	.word	0x3dd0b461
 800dea0:	1a600000 	.word	0x1a600000
 800dea4:	3dd0b461 	.word	0x3dd0b461
 800dea8:	2e037073 	.word	0x2e037073
 800deac:	3ba3198a 	.word	0x3ba3198a
 800deb0:	6dc9c883 	.word	0x6dc9c883
 800deb4:	3fe45f30 	.word	0x3fe45f30
 800deb8:	2e000000 	.word	0x2e000000
 800debc:	3ba3198a 	.word	0x3ba3198a
 800dec0:	252049c1 	.word	0x252049c1
 800dec4:	397b839a 	.word	0x397b839a
 800dec8:	00000000 	.word	0x00000000
 800decc:	41700000 	.word	0x41700000
 800ded0:	3fe921fb 	.word	0x3fe921fb
 800ded4:	4002d97b 	.word	0x4002d97b
 800ded8:	413921fb 	.word	0x413921fb
 800dedc:	080220c8 	.word	0x080220c8
 800dee0:	7fefffff 	.word	0x7fefffff
 800dee4:	08022148 	.word	0x08022148

0800dee8 <__ieee754_log10f>:
 800dee8:	b508      	push	{r3, lr}
 800deea:	ee10 2a10 	vmov	r2, s0
 800deee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800def2:	ed2d 8b02 	vpush	{d8}
 800def6:	d108      	bne.n	800df0a <__ieee754_log10f+0x22>
 800def8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800df80 <__ieee754_log10f+0x98>
 800defc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800df84 <__ieee754_log10f+0x9c>
 800df00:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800df04:	ecbd 8b02 	vpop	{d8}
 800df08:	bd08      	pop	{r3, pc}
 800df0a:	2a00      	cmp	r2, #0
 800df0c:	da02      	bge.n	800df14 <__ieee754_log10f+0x2c>
 800df0e:	ee30 7a40 	vsub.f32	s14, s0, s0
 800df12:	e7f3      	b.n	800defc <__ieee754_log10f+0x14>
 800df14:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800df18:	db02      	blt.n	800df20 <__ieee754_log10f+0x38>
 800df1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df1e:	e7f1      	b.n	800df04 <__ieee754_log10f+0x1c>
 800df20:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800df24:	bfbf      	itttt	lt
 800df26:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800df88 <__ieee754_log10f+0xa0>
 800df2a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800df2e:	f06f 0118 	mvnlt.w	r1, #24
 800df32:	ee17 2a90 	vmovlt	r2, s15
 800df36:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800df3a:	bfa8      	it	ge
 800df3c:	2100      	movge	r1, #0
 800df3e:	3b7f      	subs	r3, #127	; 0x7f
 800df40:	440b      	add	r3, r1
 800df42:	0fd9      	lsrs	r1, r3, #31
 800df44:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800df48:	ee07 3a90 	vmov	s15, r3
 800df4c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800df50:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800df54:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800df58:	ee00 3a10 	vmov	s0, r3
 800df5c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800df60:	f7ff fdca 	bl	800daf8 <logf>
 800df64:	eddf 7a09 	vldr	s15, [pc, #36]	; 800df8c <__ieee754_log10f+0xa4>
 800df68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df6c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800df90 <__ieee754_log10f+0xa8>
 800df70:	eea8 0a27 	vfma.f32	s0, s16, s15
 800df74:	eddf 7a07 	vldr	s15, [pc, #28]	; 800df94 <__ieee754_log10f+0xac>
 800df78:	eea8 0a27 	vfma.f32	s0, s16, s15
 800df7c:	e7c2      	b.n	800df04 <__ieee754_log10f+0x1c>
 800df7e:	bf00      	nop
 800df80:	cc000000 	.word	0xcc000000
 800df84:	00000000 	.word	0x00000000
 800df88:	4c000000 	.word	0x4c000000
 800df8c:	3ede5bd9 	.word	0x3ede5bd9
 800df90:	355427db 	.word	0x355427db
 800df94:	3e9a2080 	.word	0x3e9a2080

0800df98 <__ieee754_sqrtf>:
 800df98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800df9c:	4770      	bx	lr
	...

0800dfa0 <__kernel_cos>:
 800dfa0:	ee10 1a90 	vmov	r1, s1
 800dfa4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800dfa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dfac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dfb0:	da05      	bge.n	800dfbe <__kernel_cos+0x1e>
 800dfb2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dfb6:	ee17 3a90 	vmov	r3, s15
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d03d      	beq.n	800e03a <__kernel_cos+0x9a>
 800dfbe:	ee20 3b00 	vmul.f64	d3, d0, d0
 800dfc2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e040 <__kernel_cos+0xa0>
 800dfc6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e048 <__kernel_cos+0xa8>
 800dfca:	eea3 6b07 	vfma.f64	d6, d3, d7
 800dfce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e050 <__kernel_cos+0xb0>
 800dfd2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dfd6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e058 <__kernel_cos+0xb8>
 800dfda:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dfde:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e060 <__kernel_cos+0xc0>
 800dfe2:	4b23      	ldr	r3, [pc, #140]	; (800e070 <__kernel_cos+0xd0>)
 800dfe4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dfe8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e068 <__kernel_cos+0xc8>
 800dfec:	4299      	cmp	r1, r3
 800dfee:	eea7 6b03 	vfma.f64	d6, d7, d3
 800dff2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dff6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800dffa:	ee23 7b07 	vmul.f64	d7, d3, d7
 800dffe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e002:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e006:	dc04      	bgt.n	800e012 <__kernel_cos+0x72>
 800e008:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e00c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e010:	4770      	bx	lr
 800e012:	4b18      	ldr	r3, [pc, #96]	; (800e074 <__kernel_cos+0xd4>)
 800e014:	4299      	cmp	r1, r3
 800e016:	dc0d      	bgt.n	800e034 <__kernel_cos+0x94>
 800e018:	2200      	movs	r2, #0
 800e01a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e01e:	ec43 2b15 	vmov	d5, r2, r3
 800e022:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e026:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e02a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e02e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e032:	4770      	bx	lr
 800e034:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e038:	e7f3      	b.n	800e022 <__kernel_cos+0x82>
 800e03a:	eeb0 0b44 	vmov.f64	d0, d4
 800e03e:	4770      	bx	lr
 800e040:	be8838d4 	.word	0xbe8838d4
 800e044:	bda8fae9 	.word	0xbda8fae9
 800e048:	bdb4b1c4 	.word	0xbdb4b1c4
 800e04c:	3e21ee9e 	.word	0x3e21ee9e
 800e050:	809c52ad 	.word	0x809c52ad
 800e054:	be927e4f 	.word	0xbe927e4f
 800e058:	19cb1590 	.word	0x19cb1590
 800e05c:	3efa01a0 	.word	0x3efa01a0
 800e060:	16c15177 	.word	0x16c15177
 800e064:	bf56c16c 	.word	0xbf56c16c
 800e068:	5555554c 	.word	0x5555554c
 800e06c:	3fa55555 	.word	0x3fa55555
 800e070:	3fd33332 	.word	0x3fd33332
 800e074:	3fe90000 	.word	0x3fe90000

0800e078 <__kernel_rem_pio2>:
 800e078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	ed2d 8b06 	vpush	{d8-d10}
 800e080:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e084:	460f      	mov	r7, r1
 800e086:	9002      	str	r0, [sp, #8]
 800e088:	49c5      	ldr	r1, [pc, #788]	; (800e3a0 <__kernel_rem_pio2+0x328>)
 800e08a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800e08c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800e090:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	f112 0f14 	cmn.w	r2, #20
 800e09a:	bfa8      	it	ge
 800e09c:	2018      	movge	r0, #24
 800e09e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800e0a2:	bfb8      	it	lt
 800e0a4:	2000      	movlt	r0, #0
 800e0a6:	f06f 0417 	mvn.w	r4, #23
 800e0aa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e388 <__kernel_rem_pio2+0x310>
 800e0ae:	bfa4      	itt	ge
 800e0b0:	f1a2 0a03 	subge.w	sl, r2, #3
 800e0b4:	fb9a f0f0 	sdivge	r0, sl, r0
 800e0b8:	fb00 4404 	mla	r4, r0, r4, r4
 800e0bc:	1a46      	subs	r6, r0, r1
 800e0be:	4414      	add	r4, r2
 800e0c0:	eb09 0c01 	add.w	ip, r9, r1
 800e0c4:	ad1a      	add	r5, sp, #104	; 0x68
 800e0c6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4562      	cmp	r2, ip
 800e0ce:	dd10      	ble.n	800e0f2 <__kernel_rem_pio2+0x7a>
 800e0d0:	9a01      	ldr	r2, [sp, #4]
 800e0d2:	ab1a      	add	r3, sp, #104	; 0x68
 800e0d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e0d8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800e0dc:	f04f 0c00 	mov.w	ip, #0
 800e0e0:	45cc      	cmp	ip, r9
 800e0e2:	dc26      	bgt.n	800e132 <__kernel_rem_pio2+0xba>
 800e0e4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e388 <__kernel_rem_pio2+0x310>
 800e0e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e0ec:	4616      	mov	r6, r2
 800e0ee:	2500      	movs	r5, #0
 800e0f0:	e015      	b.n	800e11e <__kernel_rem_pio2+0xa6>
 800e0f2:	42d6      	cmn	r6, r2
 800e0f4:	d409      	bmi.n	800e10a <__kernel_rem_pio2+0x92>
 800e0f6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800e0fa:	ee07 3a90 	vmov	s15, r3
 800e0fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e102:	eca5 7b02 	vstmia	r5!, {d7}
 800e106:	3201      	adds	r2, #1
 800e108:	e7e0      	b.n	800e0cc <__kernel_rem_pio2+0x54>
 800e10a:	eeb0 7b46 	vmov.f64	d7, d6
 800e10e:	e7f8      	b.n	800e102 <__kernel_rem_pio2+0x8a>
 800e110:	ecb8 5b02 	vldmia	r8!, {d5}
 800e114:	ed96 6b00 	vldr	d6, [r6]
 800e118:	3501      	adds	r5, #1
 800e11a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e11e:	428d      	cmp	r5, r1
 800e120:	f1a6 0608 	sub.w	r6, r6, #8
 800e124:	ddf4      	ble.n	800e110 <__kernel_rem_pio2+0x98>
 800e126:	ecaa 7b02 	vstmia	sl!, {d7}
 800e12a:	f10c 0c01 	add.w	ip, ip, #1
 800e12e:	3208      	adds	r2, #8
 800e130:	e7d6      	b.n	800e0e0 <__kernel_rem_pio2+0x68>
 800e132:	ab06      	add	r3, sp, #24
 800e134:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e390 <__kernel_rem_pio2+0x318>
 800e138:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e398 <__kernel_rem_pio2+0x320>
 800e13c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800e146:	464d      	mov	r5, r9
 800e148:	00eb      	lsls	r3, r5, #3
 800e14a:	9304      	str	r3, [sp, #16]
 800e14c:	ab92      	add	r3, sp, #584	; 0x248
 800e14e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e152:	f10d 0b18 	add.w	fp, sp, #24
 800e156:	ab6a      	add	r3, sp, #424	; 0x1a8
 800e158:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800e15c:	465e      	mov	r6, fp
 800e15e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e162:	4628      	mov	r0, r5
 800e164:	2800      	cmp	r0, #0
 800e166:	f1a2 0208 	sub.w	r2, r2, #8
 800e16a:	dc4c      	bgt.n	800e206 <__kernel_rem_pio2+0x18e>
 800e16c:	4620      	mov	r0, r4
 800e16e:	9105      	str	r1, [sp, #20]
 800e170:	f000 faf2 	bl	800e758 <scalbn>
 800e174:	eeb0 8b40 	vmov.f64	d8, d0
 800e178:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e17c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e180:	f000 fa76 	bl	800e670 <floor>
 800e184:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e188:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e18c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e190:	2c00      	cmp	r4, #0
 800e192:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800e196:	ee17 8a90 	vmov	r8, s15
 800e19a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e19e:	9905      	ldr	r1, [sp, #20]
 800e1a0:	dd43      	ble.n	800e22a <__kernel_rem_pio2+0x1b2>
 800e1a2:	1e68      	subs	r0, r5, #1
 800e1a4:	ab06      	add	r3, sp, #24
 800e1a6:	f1c4 0c18 	rsb	ip, r4, #24
 800e1aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e1ae:	fa46 f20c 	asr.w	r2, r6, ip
 800e1b2:	4490      	add	r8, r2
 800e1b4:	fa02 f20c 	lsl.w	r2, r2, ip
 800e1b8:	1ab6      	subs	r6, r6, r2
 800e1ba:	f1c4 0217 	rsb	r2, r4, #23
 800e1be:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800e1c2:	4116      	asrs	r6, r2
 800e1c4:	2e00      	cmp	r6, #0
 800e1c6:	dd3f      	ble.n	800e248 <__kernel_rem_pio2+0x1d0>
 800e1c8:	f04f 0c00 	mov.w	ip, #0
 800e1cc:	f108 0801 	add.w	r8, r8, #1
 800e1d0:	4660      	mov	r0, ip
 800e1d2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800e1d6:	4565      	cmp	r5, ip
 800e1d8:	dc6e      	bgt.n	800e2b8 <__kernel_rem_pio2+0x240>
 800e1da:	2c00      	cmp	r4, #0
 800e1dc:	dd04      	ble.n	800e1e8 <__kernel_rem_pio2+0x170>
 800e1de:	2c01      	cmp	r4, #1
 800e1e0:	d07f      	beq.n	800e2e2 <__kernel_rem_pio2+0x26a>
 800e1e2:	2c02      	cmp	r4, #2
 800e1e4:	f000 8087 	beq.w	800e2f6 <__kernel_rem_pio2+0x27e>
 800e1e8:	2e02      	cmp	r6, #2
 800e1ea:	d12d      	bne.n	800e248 <__kernel_rem_pio2+0x1d0>
 800e1ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e1f0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e1f4:	b340      	cbz	r0, 800e248 <__kernel_rem_pio2+0x1d0>
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	9105      	str	r1, [sp, #20]
 800e1fa:	f000 faad 	bl	800e758 <scalbn>
 800e1fe:	9905      	ldr	r1, [sp, #20]
 800e200:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e204:	e020      	b.n	800e248 <__kernel_rem_pio2+0x1d0>
 800e206:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e20a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e20e:	3801      	subs	r0, #1
 800e210:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e214:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e218:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e21c:	eca6 0a01 	vstmia	r6!, {s0}
 800e220:	ed92 0b00 	vldr	d0, [r2]
 800e224:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e228:	e79c      	b.n	800e164 <__kernel_rem_pio2+0xec>
 800e22a:	d105      	bne.n	800e238 <__kernel_rem_pio2+0x1c0>
 800e22c:	1e6a      	subs	r2, r5, #1
 800e22e:	ab06      	add	r3, sp, #24
 800e230:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e234:	15f6      	asrs	r6, r6, #23
 800e236:	e7c5      	b.n	800e1c4 <__kernel_rem_pio2+0x14c>
 800e238:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e23c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e244:	da36      	bge.n	800e2b4 <__kernel_rem_pio2+0x23c>
 800e246:	2600      	movs	r6, #0
 800e248:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e250:	f040 80aa 	bne.w	800e3a8 <__kernel_rem_pio2+0x330>
 800e254:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800e258:	4658      	mov	r0, fp
 800e25a:	2200      	movs	r2, #0
 800e25c:	4548      	cmp	r0, r9
 800e25e:	da52      	bge.n	800e306 <__kernel_rem_pio2+0x28e>
 800e260:	2a00      	cmp	r2, #0
 800e262:	f000 8081 	beq.w	800e368 <__kernel_rem_pio2+0x2f0>
 800e266:	ab06      	add	r3, sp, #24
 800e268:	3c18      	subs	r4, #24
 800e26a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 8087 	beq.w	800e382 <__kernel_rem_pio2+0x30a>
 800e274:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 fa6d 	bl	800e758 <scalbn>
 800e27e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e282:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e390 <__kernel_rem_pio2+0x318>
 800e286:	a96a      	add	r1, sp, #424	; 0x1a8
 800e288:	f103 0208 	add.w	r2, r3, #8
 800e28c:	1888      	adds	r0, r1, r2
 800e28e:	4659      	mov	r1, fp
 800e290:	2900      	cmp	r1, #0
 800e292:	f280 80b7 	bge.w	800e404 <__kernel_rem_pio2+0x38c>
 800e296:	4659      	mov	r1, fp
 800e298:	2900      	cmp	r1, #0
 800e29a:	f2c0 80d5 	blt.w	800e448 <__kernel_rem_pio2+0x3d0>
 800e29e:	a86a      	add	r0, sp, #424	; 0x1a8
 800e2a0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800e2a4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e388 <__kernel_rem_pio2+0x310>
 800e2a8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e3a4 <__kernel_rem_pio2+0x32c>
 800e2ac:	2400      	movs	r4, #0
 800e2ae:	ebab 0001 	sub.w	r0, fp, r1
 800e2b2:	e0be      	b.n	800e432 <__kernel_rem_pio2+0x3ba>
 800e2b4:	2602      	movs	r6, #2
 800e2b6:	e787      	b.n	800e1c8 <__kernel_rem_pio2+0x150>
 800e2b8:	f8db 2000 	ldr.w	r2, [fp]
 800e2bc:	b958      	cbnz	r0, 800e2d6 <__kernel_rem_pio2+0x25e>
 800e2be:	b122      	cbz	r2, 800e2ca <__kernel_rem_pio2+0x252>
 800e2c0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e2c4:	f8cb 2000 	str.w	r2, [fp]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f10c 0c01 	add.w	ip, ip, #1
 800e2ce:	f10b 0b04 	add.w	fp, fp, #4
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	e77f      	b.n	800e1d6 <__kernel_rem_pio2+0x15e>
 800e2d6:	ebae 0202 	sub.w	r2, lr, r2
 800e2da:	f8cb 2000 	str.w	r2, [fp]
 800e2de:	4602      	mov	r2, r0
 800e2e0:	e7f3      	b.n	800e2ca <__kernel_rem_pio2+0x252>
 800e2e2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e2e6:	ab06      	add	r3, sp, #24
 800e2e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e2ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e2f0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e2f4:	e778      	b.n	800e1e8 <__kernel_rem_pio2+0x170>
 800e2f6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e2fa:	ab06      	add	r3, sp, #24
 800e2fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e300:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e304:	e7f4      	b.n	800e2f0 <__kernel_rem_pio2+0x278>
 800e306:	ab06      	add	r3, sp, #24
 800e308:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e30c:	3801      	subs	r0, #1
 800e30e:	431a      	orrs	r2, r3
 800e310:	e7a4      	b.n	800e25c <__kernel_rem_pio2+0x1e4>
 800e312:	f10c 0c01 	add.w	ip, ip, #1
 800e316:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d0f9      	beq.n	800e312 <__kernel_rem_pio2+0x29a>
 800e31e:	9b04      	ldr	r3, [sp, #16]
 800e320:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e324:	eb0d 0203 	add.w	r2, sp, r3
 800e328:	9b01      	ldr	r3, [sp, #4]
 800e32a:	18e8      	adds	r0, r5, r3
 800e32c:	ab1a      	add	r3, sp, #104	; 0x68
 800e32e:	1c6e      	adds	r6, r5, #1
 800e330:	3a98      	subs	r2, #152	; 0x98
 800e332:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e336:	4465      	add	r5, ip
 800e338:	42b5      	cmp	r5, r6
 800e33a:	f6ff af05 	blt.w	800e148 <__kernel_rem_pio2+0xd0>
 800e33e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800e342:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e346:	ee07 3a90 	vmov	s15, r3
 800e34a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e34e:	f04f 0c00 	mov.w	ip, #0
 800e352:	eca0 7b02 	vstmia	r0!, {d7}
 800e356:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e388 <__kernel_rem_pio2+0x310>
 800e35a:	4680      	mov	r8, r0
 800e35c:	458c      	cmp	ip, r1
 800e35e:	dd07      	ble.n	800e370 <__kernel_rem_pio2+0x2f8>
 800e360:	eca2 7b02 	vstmia	r2!, {d7}
 800e364:	3601      	adds	r6, #1
 800e366:	e7e7      	b.n	800e338 <__kernel_rem_pio2+0x2c0>
 800e368:	9a03      	ldr	r2, [sp, #12]
 800e36a:	f04f 0c01 	mov.w	ip, #1
 800e36e:	e7d2      	b.n	800e316 <__kernel_rem_pio2+0x29e>
 800e370:	ecbe 5b02 	vldmia	lr!, {d5}
 800e374:	ed38 6b02 	vldmdb	r8!, {d6}
 800e378:	f10c 0c01 	add.w	ip, ip, #1
 800e37c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e380:	e7ec      	b.n	800e35c <__kernel_rem_pio2+0x2e4>
 800e382:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e386:	e76e      	b.n	800e266 <__kernel_rem_pio2+0x1ee>
	...
 800e394:	3e700000 	.word	0x3e700000
 800e398:	00000000 	.word	0x00000000
 800e39c:	41700000 	.word	0x41700000
 800e3a0:	08022290 	.word	0x08022290
 800e3a4:	08022250 	.word	0x08022250
 800e3a8:	4260      	negs	r0, r4
 800e3aa:	eeb0 0b48 	vmov.f64	d0, d8
 800e3ae:	f000 f9d3 	bl	800e758 <scalbn>
 800e3b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e590 <__kernel_rem_pio2+0x518>
 800e3b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3be:	db18      	blt.n	800e3f2 <__kernel_rem_pio2+0x37a>
 800e3c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e598 <__kernel_rem_pio2+0x520>
 800e3c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e3c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e3cc:	aa06      	add	r2, sp, #24
 800e3ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e3d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e3d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e3da:	f105 0b01 	add.w	fp, r5, #1
 800e3de:	ee10 3a10 	vmov	r3, s0
 800e3e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e3e6:	ee17 3a10 	vmov	r3, s14
 800e3ea:	3418      	adds	r4, #24
 800e3ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e3f0:	e740      	b.n	800e274 <__kernel_rem_pio2+0x1fc>
 800e3f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e3f6:	aa06      	add	r2, sp, #24
 800e3f8:	ee10 3a10 	vmov	r3, s0
 800e3fc:	46ab      	mov	fp, r5
 800e3fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e402:	e737      	b.n	800e274 <__kernel_rem_pio2+0x1fc>
 800e404:	ac06      	add	r4, sp, #24
 800e406:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e40a:	9401      	str	r4, [sp, #4]
 800e40c:	ee07 4a90 	vmov	s15, r4
 800e410:	3901      	subs	r1, #1
 800e412:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e416:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e41a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e41e:	ed20 7b02 	vstmdb	r0!, {d7}
 800e422:	e735      	b.n	800e290 <__kernel_rem_pio2+0x218>
 800e424:	ecbc 5b02 	vldmia	ip!, {d5}
 800e428:	ecb5 6b02 	vldmia	r5!, {d6}
 800e42c:	3401      	adds	r4, #1
 800e42e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e432:	454c      	cmp	r4, r9
 800e434:	dc01      	bgt.n	800e43a <__kernel_rem_pio2+0x3c2>
 800e436:	4284      	cmp	r4, r0
 800e438:	ddf4      	ble.n	800e424 <__kernel_rem_pio2+0x3ac>
 800e43a:	ac42      	add	r4, sp, #264	; 0x108
 800e43c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e440:	ed80 7b00 	vstr	d7, [r0]
 800e444:	3901      	subs	r1, #1
 800e446:	e727      	b.n	800e298 <__kernel_rem_pio2+0x220>
 800e448:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e44a:	2902      	cmp	r1, #2
 800e44c:	dc0a      	bgt.n	800e464 <__kernel_rem_pio2+0x3ec>
 800e44e:	2900      	cmp	r1, #0
 800e450:	dc2c      	bgt.n	800e4ac <__kernel_rem_pio2+0x434>
 800e452:	d045      	beq.n	800e4e0 <__kernel_rem_pio2+0x468>
 800e454:	f008 0007 	and.w	r0, r8, #7
 800e458:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e45c:	ecbd 8b06 	vpop	{d8-d10}
 800e460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e464:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e466:	2a03      	cmp	r2, #3
 800e468:	d1f4      	bne.n	800e454 <__kernel_rem_pio2+0x3dc>
 800e46a:	aa42      	add	r2, sp, #264	; 0x108
 800e46c:	4413      	add	r3, r2
 800e46e:	461a      	mov	r2, r3
 800e470:	4619      	mov	r1, r3
 800e472:	4658      	mov	r0, fp
 800e474:	2800      	cmp	r0, #0
 800e476:	f1a1 0108 	sub.w	r1, r1, #8
 800e47a:	dc54      	bgt.n	800e526 <__kernel_rem_pio2+0x4ae>
 800e47c:	4659      	mov	r1, fp
 800e47e:	2901      	cmp	r1, #1
 800e480:	f1a2 0208 	sub.w	r2, r2, #8
 800e484:	dc5f      	bgt.n	800e546 <__kernel_rem_pio2+0x4ce>
 800e486:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e5a0 <__kernel_rem_pio2+0x528>
 800e48a:	3308      	adds	r3, #8
 800e48c:	f1bb 0f01 	cmp.w	fp, #1
 800e490:	dc69      	bgt.n	800e566 <__kernel_rem_pio2+0x4ee>
 800e492:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e496:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	d16a      	bne.n	800e574 <__kernel_rem_pio2+0x4fc>
 800e49e:	ed87 5b00 	vstr	d5, [r7]
 800e4a2:	ed87 6b02 	vstr	d6, [r7, #8]
 800e4a6:	ed87 7b04 	vstr	d7, [r7, #16]
 800e4aa:	e7d3      	b.n	800e454 <__kernel_rem_pio2+0x3dc>
 800e4ac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e5a0 <__kernel_rem_pio2+0x528>
 800e4b0:	ab42      	add	r3, sp, #264	; 0x108
 800e4b2:	441a      	add	r2, r3
 800e4b4:	465b      	mov	r3, fp
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	da26      	bge.n	800e508 <__kernel_rem_pio2+0x490>
 800e4ba:	b35e      	cbz	r6, 800e514 <__kernel_rem_pio2+0x49c>
 800e4bc:	eeb1 7b46 	vneg.f64	d7, d6
 800e4c0:	ed87 7b00 	vstr	d7, [r7]
 800e4c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e4c8:	aa44      	add	r2, sp, #272	; 0x110
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e4d0:	459b      	cmp	fp, r3
 800e4d2:	da22      	bge.n	800e51a <__kernel_rem_pio2+0x4a2>
 800e4d4:	b10e      	cbz	r6, 800e4da <__kernel_rem_pio2+0x462>
 800e4d6:	eeb1 7b47 	vneg.f64	d7, d7
 800e4da:	ed87 7b02 	vstr	d7, [r7, #8]
 800e4de:	e7b9      	b.n	800e454 <__kernel_rem_pio2+0x3dc>
 800e4e0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e5a0 <__kernel_rem_pio2+0x528>
 800e4e4:	ab42      	add	r3, sp, #264	; 0x108
 800e4e6:	441a      	add	r2, r3
 800e4e8:	f1bb 0f00 	cmp.w	fp, #0
 800e4ec:	da05      	bge.n	800e4fa <__kernel_rem_pio2+0x482>
 800e4ee:	b10e      	cbz	r6, 800e4f4 <__kernel_rem_pio2+0x47c>
 800e4f0:	eeb1 7b47 	vneg.f64	d7, d7
 800e4f4:	ed87 7b00 	vstr	d7, [r7]
 800e4f8:	e7ac      	b.n	800e454 <__kernel_rem_pio2+0x3dc>
 800e4fa:	ed32 6b02 	vldmdb	r2!, {d6}
 800e4fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e502:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e506:	e7ef      	b.n	800e4e8 <__kernel_rem_pio2+0x470>
 800e508:	ed32 7b02 	vldmdb	r2!, {d7}
 800e50c:	3b01      	subs	r3, #1
 800e50e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e512:	e7d0      	b.n	800e4b6 <__kernel_rem_pio2+0x43e>
 800e514:	eeb0 7b46 	vmov.f64	d7, d6
 800e518:	e7d2      	b.n	800e4c0 <__kernel_rem_pio2+0x448>
 800e51a:	ecb2 6b02 	vldmia	r2!, {d6}
 800e51e:	3301      	adds	r3, #1
 800e520:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e524:	e7d4      	b.n	800e4d0 <__kernel_rem_pio2+0x458>
 800e526:	ed91 7b00 	vldr	d7, [r1]
 800e52a:	ed91 5b02 	vldr	d5, [r1, #8]
 800e52e:	3801      	subs	r0, #1
 800e530:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e534:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e538:	ed81 6b00 	vstr	d6, [r1]
 800e53c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e540:	ed81 7b02 	vstr	d7, [r1, #8]
 800e544:	e796      	b.n	800e474 <__kernel_rem_pio2+0x3fc>
 800e546:	ed92 7b00 	vldr	d7, [r2]
 800e54a:	ed92 5b02 	vldr	d5, [r2, #8]
 800e54e:	3901      	subs	r1, #1
 800e550:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e554:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e558:	ed82 6b00 	vstr	d6, [r2]
 800e55c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e560:	ed82 7b02 	vstr	d7, [r2, #8]
 800e564:	e78b      	b.n	800e47e <__kernel_rem_pio2+0x406>
 800e566:	ed33 6b02 	vldmdb	r3!, {d6}
 800e56a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e56e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e572:	e78b      	b.n	800e48c <__kernel_rem_pio2+0x414>
 800e574:	eeb1 5b45 	vneg.f64	d5, d5
 800e578:	eeb1 6b46 	vneg.f64	d6, d6
 800e57c:	ed87 5b00 	vstr	d5, [r7]
 800e580:	eeb1 7b47 	vneg.f64	d7, d7
 800e584:	ed87 6b02 	vstr	d6, [r7, #8]
 800e588:	e78d      	b.n	800e4a6 <__kernel_rem_pio2+0x42e>
 800e58a:	bf00      	nop
 800e58c:	f3af 8000 	nop.w
 800e590:	00000000 	.word	0x00000000
 800e594:	41700000 	.word	0x41700000
 800e598:	00000000 	.word	0x00000000
 800e59c:	3e700000 	.word	0x3e700000
	...

0800e5a8 <__kernel_sin>:
 800e5a8:	ee10 3a90 	vmov	r3, s1
 800e5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e5b4:	da04      	bge.n	800e5c0 <__kernel_sin+0x18>
 800e5b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e5ba:	ee17 3a90 	vmov	r3, s15
 800e5be:	b35b      	cbz	r3, 800e618 <__kernel_sin+0x70>
 800e5c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e5c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e5c8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e620 <__kernel_sin+0x78>
 800e5cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e628 <__kernel_sin+0x80>
 800e5d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e5d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e630 <__kernel_sin+0x88>
 800e5d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e5dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e638 <__kernel_sin+0x90>
 800e5e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e5e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e640 <__kernel_sin+0x98>
 800e5e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e5ec:	b930      	cbnz	r0, 800e5fc <__kernel_sin+0x54>
 800e5ee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e648 <__kernel_sin+0xa0>
 800e5f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e5f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e5fa:	4770      	bx	lr
 800e5fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e600:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e604:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e608:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e60c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e650 <__kernel_sin+0xa8>
 800e610:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e614:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	f3af 8000 	nop.w
 800e620:	5acfd57c 	.word	0x5acfd57c
 800e624:	3de5d93a 	.word	0x3de5d93a
 800e628:	8a2b9ceb 	.word	0x8a2b9ceb
 800e62c:	be5ae5e6 	.word	0xbe5ae5e6
 800e630:	57b1fe7d 	.word	0x57b1fe7d
 800e634:	3ec71de3 	.word	0x3ec71de3
 800e638:	19c161d5 	.word	0x19c161d5
 800e63c:	bf2a01a0 	.word	0xbf2a01a0
 800e640:	1110f8a6 	.word	0x1110f8a6
 800e644:	3f811111 	.word	0x3f811111
 800e648:	55555549 	.word	0x55555549
 800e64c:	bfc55555 	.word	0xbfc55555
 800e650:	55555549 	.word	0x55555549
 800e654:	3fc55555 	.word	0x3fc55555

0800e658 <fabs>:
 800e658:	ec51 0b10 	vmov	r0, r1, d0
 800e65c:	ee10 2a10 	vmov	r2, s0
 800e660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e664:	ec43 2b10 	vmov	d0, r2, r3
 800e668:	4770      	bx	lr
 800e66a:	0000      	movs	r0, r0
 800e66c:	0000      	movs	r0, r0
	...

0800e670 <floor>:
 800e670:	ee10 1a90 	vmov	r1, s1
 800e674:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e678:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e67c:	2b13      	cmp	r3, #19
 800e67e:	b530      	push	{r4, r5, lr}
 800e680:	ee10 0a10 	vmov	r0, s0
 800e684:	ee10 5a10 	vmov	r5, s0
 800e688:	dc31      	bgt.n	800e6ee <floor+0x7e>
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	da15      	bge.n	800e6ba <floor+0x4a>
 800e68e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e748 <floor+0xd8>
 800e692:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e696:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69e:	dd07      	ble.n	800e6b0 <floor+0x40>
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	da4e      	bge.n	800e742 <floor+0xd2>
 800e6a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6a8:	4318      	orrs	r0, r3
 800e6aa:	d001      	beq.n	800e6b0 <floor+0x40>
 800e6ac:	4928      	ldr	r1, [pc, #160]	; (800e750 <floor+0xe0>)
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	ec43 2b10 	vmov	d0, r2, r3
 800e6b8:	e020      	b.n	800e6fc <floor+0x8c>
 800e6ba:	4a26      	ldr	r2, [pc, #152]	; (800e754 <floor+0xe4>)
 800e6bc:	411a      	asrs	r2, r3
 800e6be:	ea01 0402 	and.w	r4, r1, r2
 800e6c2:	4304      	orrs	r4, r0
 800e6c4:	d01a      	beq.n	800e6fc <floor+0x8c>
 800e6c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e748 <floor+0xd8>
 800e6ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e6ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d6:	ddeb      	ble.n	800e6b0 <floor+0x40>
 800e6d8:	2900      	cmp	r1, #0
 800e6da:	bfbe      	ittt	lt
 800e6dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e6e0:	fa40 f303 	asrlt.w	r3, r0, r3
 800e6e4:	18c9      	addlt	r1, r1, r3
 800e6e6:	ea21 0102 	bic.w	r1, r1, r2
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e7e0      	b.n	800e6b0 <floor+0x40>
 800e6ee:	2b33      	cmp	r3, #51	; 0x33
 800e6f0:	dd05      	ble.n	800e6fe <floor+0x8e>
 800e6f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6f6:	d101      	bne.n	800e6fc <floor+0x8c>
 800e6f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e6fc:	bd30      	pop	{r4, r5, pc}
 800e6fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e706:	40e2      	lsrs	r2, r4
 800e708:	4202      	tst	r2, r0
 800e70a:	d0f7      	beq.n	800e6fc <floor+0x8c>
 800e70c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e748 <floor+0xd8>
 800e710:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e714:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71c:	ddc8      	ble.n	800e6b0 <floor+0x40>
 800e71e:	2900      	cmp	r1, #0
 800e720:	da02      	bge.n	800e728 <floor+0xb8>
 800e722:	2b14      	cmp	r3, #20
 800e724:	d103      	bne.n	800e72e <floor+0xbe>
 800e726:	3101      	adds	r1, #1
 800e728:	ea20 0002 	bic.w	r0, r0, r2
 800e72c:	e7c0      	b.n	800e6b0 <floor+0x40>
 800e72e:	2401      	movs	r4, #1
 800e730:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e734:	fa04 f303 	lsl.w	r3, r4, r3
 800e738:	4418      	add	r0, r3
 800e73a:	42a8      	cmp	r0, r5
 800e73c:	bf38      	it	cc
 800e73e:	1909      	addcc	r1, r1, r4
 800e740:	e7f2      	b.n	800e728 <floor+0xb8>
 800e742:	2000      	movs	r0, #0
 800e744:	4601      	mov	r1, r0
 800e746:	e7b3      	b.n	800e6b0 <floor+0x40>
 800e748:	8800759c 	.word	0x8800759c
 800e74c:	7e37e43c 	.word	0x7e37e43c
 800e750:	bff00000 	.word	0xbff00000
 800e754:	000fffff 	.word	0x000fffff

0800e758 <scalbn>:
 800e758:	ee10 1a90 	vmov	r1, s1
 800e75c:	b510      	push	{r4, lr}
 800e75e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e762:	b98c      	cbnz	r4, 800e788 <scalbn+0x30>
 800e764:	ee10 3a10 	vmov	r3, s0
 800e768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e76c:	430b      	orrs	r3, r1
 800e76e:	d011      	beq.n	800e794 <scalbn+0x3c>
 800e770:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800e838 <scalbn+0xe0>
 800e774:	4b3c      	ldr	r3, [pc, #240]	; (800e868 <scalbn+0x110>)
 800e776:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e77a:	4298      	cmp	r0, r3
 800e77c:	da0b      	bge.n	800e796 <scalbn+0x3e>
 800e77e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e840 <scalbn+0xe8>
 800e782:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e786:	e005      	b.n	800e794 <scalbn+0x3c>
 800e788:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e78c:	429c      	cmp	r4, r3
 800e78e:	d107      	bne.n	800e7a0 <scalbn+0x48>
 800e790:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e794:	bd10      	pop	{r4, pc}
 800e796:	ee10 1a90 	vmov	r1, s1
 800e79a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e79e:	3c36      	subs	r4, #54	; 0x36
 800e7a0:	4404      	add	r4, r0
 800e7a2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	dd0d      	ble.n	800e7c6 <scalbn+0x6e>
 800e7aa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e848 <scalbn+0xf0>
 800e7ae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800e850 <scalbn+0xf8>
 800e7b2:	eeb0 6b47 	vmov.f64	d6, d7
 800e7b6:	ee10 3a90 	vmov	r3, s1
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e7c0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e7c4:	e7e6      	b.n	800e794 <scalbn+0x3c>
 800e7c6:	2c00      	cmp	r4, #0
 800e7c8:	dd0a      	ble.n	800e7e0 <scalbn+0x88>
 800e7ca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e7ce:	ec53 2b10 	vmov	r2, r3, d0
 800e7d2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e7d6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e7da:	ec43 2b10 	vmov	d0, r2, r3
 800e7de:	e7d9      	b.n	800e794 <scalbn+0x3c>
 800e7e0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800e7e4:	da19      	bge.n	800e81a <scalbn+0xc2>
 800e7e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e7ea:	4298      	cmp	r0, r3
 800e7ec:	ee10 3a90 	vmov	r3, s1
 800e7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7f4:	dd09      	ble.n	800e80a <scalbn+0xb2>
 800e7f6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800e848 <scalbn+0xf0>
 800e7fa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800e850 <scalbn+0xf8>
 800e7fe:	eeb0 7b40 	vmov.f64	d7, d0
 800e802:	2b00      	cmp	r3, #0
 800e804:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800e808:	e7bb      	b.n	800e782 <scalbn+0x2a>
 800e80a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e840 <scalbn+0xe8>
 800e80e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e858 <scalbn+0x100>
 800e812:	eeb0 7b40 	vmov.f64	d7, d0
 800e816:	2b00      	cmp	r3, #0
 800e818:	e7f4      	b.n	800e804 <scalbn+0xac>
 800e81a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e81e:	ec53 2b10 	vmov	r2, r3, d0
 800e822:	3436      	adds	r4, #54	; 0x36
 800e824:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e828:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800e82c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e860 <scalbn+0x108>
 800e830:	ec43 2b10 	vmov	d0, r2, r3
 800e834:	e7a5      	b.n	800e782 <scalbn+0x2a>
 800e836:	bf00      	nop
 800e838:	00000000 	.word	0x00000000
 800e83c:	43500000 	.word	0x43500000
 800e840:	c2f8f359 	.word	0xc2f8f359
 800e844:	01a56e1f 	.word	0x01a56e1f
 800e848:	8800759c 	.word	0x8800759c
 800e84c:	7e37e43c 	.word	0x7e37e43c
 800e850:	8800759c 	.word	0x8800759c
 800e854:	fe37e43c 	.word	0xfe37e43c
 800e858:	c2f8f359 	.word	0xc2f8f359
 800e85c:	81a56e1f 	.word	0x81a56e1f
 800e860:	00000000 	.word	0x00000000
 800e864:	3c900000 	.word	0x3c900000
 800e868:	ffff3cb0 	.word	0xffff3cb0

0800e86c <nanf>:
 800e86c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e874 <nanf+0x8>
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	7fc00000 	.word	0x7fc00000

0800e878 <_init>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	bf00      	nop
 800e87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87e:	bc08      	pop	{r3}
 800e880:	469e      	mov	lr, r3
 800e882:	4770      	bx	lr

0800e884 <_fini>:
 800e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e886:	bf00      	nop
 800e888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e88a:	bc08      	pop	{r3}
 800e88c:	469e      	mov	lr, r3
 800e88e:	4770      	bx	lr
